#include "pch.h"
#include "CppUnitTest.h"
#include "SDK.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

#define CHEAT_GEAR_CHECK_OFFSET(targetClass, varName, expectedOffset) \
	Assert::AreEqual(uint32_t(expectedOffset), uint32_t(offsetof(targetClass, varName)), L#targetClass" -> "#varName".")

#define CHEAT_GEAR_CHECK_SIZE(targetClass, expectedSize) \
	Assert::AreEqual(uint32_t(expectedSize), uint32_t(sizeof(targetClass)), L#targetClass" Has a wrong size.")

namespace CheatGearCppUnitTests
{
	TEST_CLASS(CheatGear)
	{
	public:

		// class UBP_US_Bag_ACC006_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_US_Bag_ACC006__BP_US_Bag_ACC006_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_US_Bag_ACC006_C, 0x02B8);
		}

		// class UMeshDescription : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescription, 0x0030);
		}

		// class UMeshDescriptionBase : public UObject
		TEST_METHOD(Class__MeshDescription__MeshDescriptionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshDescriptionBase, UnknownData_LOWR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshDescriptionBase, 0x0398);
		}

		// class UDestructibleActor : public Uactor
		TEST_METHOD(Class__ApexDestruction__DestructibleActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleActor, DestructibleComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleActor, OnActorFracture, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleActor, 0x0248);
		}

		// class USynthComponent : public USceneComponent
		TEST_METHOD(Class__AudioMixer__SynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_IF5A, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_JH31, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationSettings, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AttenuationOverrides, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySettings, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, ConcurrencySet, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundClass, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SourceEffectChain, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmix, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, SoundSubmixSends, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, BusSends, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Modulation, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, PreEffectBusSends, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_KR60, 0x0671);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerAttackTime, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, EnvelopeFollowerReleaseTime, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_3Z0P, 0x067C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, OnAudioEnvelopeValue, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_119K, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, Synth, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, AudioComponent, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponent, UnknownData_DVYM, 0x06C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponent, 0x06F0);
		}

		// class UDestructibleComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__ApexDestruction__DestructibleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_A8R5, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, FractureEffects, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, bEnableHardSleeping, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_EYE6, 0x06E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, LargeChunkThreshold, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_7Q21, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, OnComponentFracture, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleComponent, UnknownData_6HTY, 0x0710);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleComponent, 0x07B0);
		}

		// class UAudioGenerator : public UObject
		TEST_METHOD(Class__AudioMixer__AudioGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioGenerator, UnknownData_T91I, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioGenerator, 0x00B0);
		}

		// class UDestructibleFractureSettings : public UObject
		TEST_METHOD(Class__ApexDestruction__DestructibleFractureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, CellSiteCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, FractureMaterialDesc, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, RandomSeed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_RZ2N, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, VoronoiSites, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, OriginalSubmeshCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_UJ99, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, Materials, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, ChunkParameters, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleFractureSettings, UnknownData_BARS, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleFractureSettings, 0x00C0);
		}

		// class UAudioMixerBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioMixer__AudioMixerBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioMixerBlueprintLibrary, 0x0030);
		}

		// class UDestructibleMesh : public USkeletalMesh
		TEST_METHOD(Class__ApexDestruction__DestructibleMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, DefaultDestructibleParameters, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, FractureEffects, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestructibleMesh, UnknownData_HPCY, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleMesh, 0x0428);
		}

		// class USubmixEffectDynamicsProcessorPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, UnknownData_R8K5, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDynamicsProcessorPreset, settings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDynamicsProcessorPreset, 0x0110);
		}

		// class USubmixEffectSubmixEQPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectSubmixEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, UnknownData_2A9I, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectSubmixEQPreset, settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectSubmixEQPreset, 0x0090);
		}

		// class USubmixEffectReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, UnknownData_D7KG, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbPreset, settings, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbPreset, 0x00D8);
		}

		// class USubmixEffectReverbFastPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__AudioMixer__SubmixEffectReverbFastPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, UnknownData_JLGH, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectReverbFastPreset, settings, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectReverbFastPreset, 0x00E0);
		}

		// class USynthSound : public USoundWaveProcedural
		TEST_METHOD(Class__AudioMixer__SynthSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, OwningSynthComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSound, UnknownData_ZYEL, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSound, 0x0390);
		}

		// class Uinteractable : public Uactor
		TEST_METHOD(Class__DeadByDaylight__interactable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, UnknownData_A2WI, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, _singleZone, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, _useSingleZone, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, UnknownData_C9ND, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, _interactors, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, UnknownData_GUJN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractable, _zoneToInteractions, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uinteractable, 0x02D8);
		}

		// class Ucollectable : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__collectable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, DisplayUsePercent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, ProgressBar, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, OverrideItemIndex, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_6VIJ, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, OverridenItemIndex, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, StrafeOnUse, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, AimOnUse, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, VisibleWhenEquipped, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, StopRunningOnUse, 0x02E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, HandPosition, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, HasUseInteraction, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, category, 0x02E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, IsInUse, 0x02E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, itemId, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, FromPlayerSpawn, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_CNBV, 0x02F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, BaseItemModifier, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, ItemModifier1, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, ItemModifier2, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_XFBM, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, OnCollectablePickedUpBP, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_92VS, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, BeingCollected, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, BeingDropped, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _beingConsumedByEntity, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_TDRW, 0x0383);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _itemInteractor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _mesh, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _placementOrigin, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_OBN2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _collector, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _firstCollector, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _state, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_Y3VA, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _itemAddons, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_Y4WU, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _itemCount, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_HG5D, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _begunPlayFenceName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _attachToSocketName, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _collectInInventoryType, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_JRJA, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _objectState, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _itemType, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_82XV, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _discardWhenConsumed, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, _disableAttachmentReplication, 0x041D);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucollectable, UnknownData_PB4Q, 0x041E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucollectable, 0x0420);
		}

		// class UinteractionDefinition : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__interactionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_V5TN, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, interactionID, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, InteractionInputType, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, InteractionAtlantaInputType, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_BU3G, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapTime, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ResetCameraDuringSnap, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, IsInteractionCancelled, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AllowStartInteractionFromHeldInput, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopInteractionOnInputRelease, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AtlantaOverridePowerButtonImage, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AtlantaOverrideItemUseToggleState, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, OverrideStopInteractionOnInputRelease, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AtlantaStopInteractionOnInputRelease, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopInteractionOnMontageComplete, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopInteractionOnMontageBlendingOut, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopInteractionOnTimerExpire, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopInteractionOnHeightDelta, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopEnterMontageOnExit, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, StopUpdateMontageOnExit, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, IgnoreStrafeAnimFix, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, InteractionAnimation, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CamperCanInteract, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SlasherCanInteract, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AllowInputPersistence, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapPosition, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapRotation, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_P6Z1, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapStopDistance, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, TestClearPathDuringSnap, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CheckInteractableIsInPlayerView, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_GMC5, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CheckInteractableInViewSphereSweepRadius, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CheckInteractableInViewOffset, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, IsInterruptibleIfTestClearPathDuringSnapFails, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, TestPlayerOrientationOnSnap, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ScaleEnterAnimationToTime, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ScaleMainAnimationToTime, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ScaleExitAnimationToTime, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapBackType, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapBackPositionType, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_E5GP, 0x0287);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapBackPositionOffset, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapToInitialRotationDuringSnapBack, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UseStartSnapTimeForSnapExitTime, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileIncapacitated, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileCloaked, 0x0293);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileChainBlinking, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileAttacking, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileChainLinked, 0x0296);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileShocked, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileUnhookingSelf, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanInteractWhileCarrying, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AllowNavigation, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AllowNavigationInput, 0x029B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AllowRotation, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UseCameraMontageMode, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, OwnerBlocksAttack, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, IsHighPriority, 0x029F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AllowOverridingWhenNotForced, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, IgnoreOverlapOnInteractable, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UseAuthoritativeMovement, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanBeAuthoritativePushedDuringEnter, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanBeAuthoritativePushedDuringUpdate, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanBeAuthoritativePushedDuringExit, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanAuthoritativePush, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CancelOnHit, 0x02A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CancelOnAttack, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, HideItem, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AutoBindToParentInteractor, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AutoBindToParentZone, 0x02AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_0IKH, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SecondaryInteractionProperties, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CancelOnMoveInitialDelay, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CancelOnMoveInput, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CancelOnMoveInputOnlyWhenRunning, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_0HCY, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ProgressBasedSkillChecks, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CanCrouch, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AffectsStillness, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ConsideredIdle, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, BlockSelfInteract, 0x0303);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, interactionTime, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ShowHighlightWhenActive, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ShowHighlightWhenAvailable, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ProgressBarToUpdate, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UpdateHighlightOpacityUsingCharge, 0x030B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_HZ74, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _interruptionDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_3NM7, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, OnInteractionAnimNotify, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, DebugUnavailability, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SecondaryActionInputType, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AtlantaSecondaryActionInputType, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_J1LO, 0x037B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, NavigationSpeedCurveEnter, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, NavigationSpeedCurve, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, NavigationSpeedCurveExit, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _shouldCheckInteractedUpon, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, OwnershipUsability, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_GU1Y, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ExitInteractionTime, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ApplyModifiersToExitTime, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_071O, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, InteractionDescriptionText, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, AtlantaLastButtonPressed, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_SW70, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, InteractionHeightDeltaMax, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, MaximumVelocity, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_ZDXM, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, EnterMontage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UpdateMontage, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, ExitMontage, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SnapSocketName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _canBeAttachedToAnyZone, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, CancelButtonType, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, SecondaryActionButtonType, 0x043E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _isInterruptibleBySacrifice, 0x043F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, IgnoreStun, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_NDH4, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _tags, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_RF80, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _useHoldPrompt, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _allowInteractionInNarrowSpaces, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _allowIKSensorDuringInteraction, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _startUpdateMontageDuringEnter, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_9473, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _interactor, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _mutuallyExclusiveInteractionsClient, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _activationDefinition, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _zone, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _cancelInputType, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, UnknownData_9EVM, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _preventingTags, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinteractionDefinition, _disablingTags, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UinteractionDefinition, 0x0500);
		}

		// class UChargeableInteractionDefinition : public UinteractionDefinition
		TEST_METHOD(Class__DeadByDaylight__ChargeableInteractionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, UnknownData_84YX, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, SkillCheckResponseAestheticDelegate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, SkillCheckResponseAuthorityDelegate, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, StopInteractionOnChargeComplete, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, HasProgressivelyHarderSkillChecks, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, UnknownData_D4JO, 0x053A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, ProgressiveDifficultyModifier, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, ProgressBarType, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, UnknownData_8E3V, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, ProgressPips, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, HideProgressBar, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, ShowItemIcon, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, UnknownData_GI87, 0x055A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, _chargeableComponent, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, AtlantaIsCancellableWhileCharging, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, UnknownData_514D, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, ShowSpeedProficiencyForMultipleInteractors, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, UnknownData_2580, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, _interactionSpecificActionSpeedTags, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, _interactionSpecificActionSpeedMultiplicativeTags, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableInteractionDefinition, _interactionSpecificActionSpeedAdditiveTags, 0x0608);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargeableInteractionDefinition, 0x0628);
		}

		// class UQuestEventEvaluatorBase : public UObject
		TEST_METHOD(Class__DeadByDaylight__QuestEventEvaluatorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestEventEvaluatorBase, UnknownData_NKUF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestEventEvaluatorBase, _dbdplayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestEventEvaluatorBase, UnknownData_X5TR, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestEventEvaluatorBase, _evaluatorConditionsClass, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuestEventEvaluatorBase, _evaluatorConditions, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuestEventEvaluatorBase, 0x0090);
		}

		// class UEvaluatorCondition : public UObject
		TEST_METHOD(Class__DeadByDaylight__EvaluatorCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaluatorCondition, _conditionSubject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvaluatorCondition, UnknownData_JK5B, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvaluatorCondition, 0x0048);
		}

		// class USpecialBehaviourInteractable : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__SpecialBehaviourInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpecialBehaviourInteractable, _specialBehaviourOwner, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpecialBehaviourInteractable, 0x02E0);
		}

		// class UAbstractAnalyticsManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__AbstractAnalyticsManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbstractAnalyticsManager, 0x0038);
		}

		// class UArmIKSensorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ArmIKSensorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSensorComponent, _mesh, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSensorComponent, _arms, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSensorComponent, _capsuleRadius, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSensorComponent, _capsuleHalfHeight, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSensorComponent, _traceLength, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSensorComponent, UnknownData_Y398, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArmIKSensorComponent, 0x0128);
		}

		// class UDBDAttack : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, UnknownData_JXB3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _attackType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _useMontage, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _damageZone, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _lockZone, 0x00D3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _obstructionZone, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, UnknownData_E6UH, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _maxAccelerationMultiplier, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _targetTracker, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _stateClasses, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _localAlreadyHitTargets, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _states, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, UnknownData_3YFX, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _hitTargets, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, _targetsAwaitingServerValidation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttack, UnknownData_IKN2, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttack, 0x02E0);
		}

		// class UDBDAttackSubstate : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDAttackSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackSubstate, _duration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackSubstate, _speedCurve, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackSubstate, _montage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackSubstate, UnknownData_0FR7, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackSubstate, _currentCurve, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackSubstate, UnknownData_YYVG, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackSubstate, 0x00D8);
		}

		// class UDBDAttackOpenSubstate : public UDBDAttackSubstate
		TEST_METHOD(Class__DeadByDaylight__DBDAttackOpenSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackOpenSubstate, 0x00D8);
		}

		// class UDBDAttackHittingSubstate : public UDBDAttackSubstate
		TEST_METHOD(Class__DeadByDaylight__DBDAttackHittingSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackHittingSubstate, _hittingPercentDamageBegin, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackHittingSubstate, 0x0120);
		}

		// class UDBDAttackSuccessSubstate : public UDBDAttackSubstate
		TEST_METHOD(Class__DeadByDaylight__DBDAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackSuccessSubstate, 0x00D8);
		}

		// class UDBDAttackMissSubstate : public UDBDAttackSubstate
		TEST_METHOD(Class__DeadByDaylight__DBDAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackMissSubstate, 0x00D8);
		}

		// class UDBDAttackObstructSubstate : public UDBDAttackSubstate
		TEST_METHOD(Class__DeadByDaylight__DBDAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackObstructSubstate, 0x00D8);
		}

		// class UDBDAIController : public UaiController
		TEST_METHOD(Class__DeadByDaylight__DBDAIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, DefaultSightRange, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, CloakedTargetSightRange, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, AIDifficultyMaxPlayerRanks, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, UnknownData_SS9A, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _aiPawn, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _lastAiPawn, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, UnknownData_OM0Y, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _contextualPathSpeedFactors, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _objOverridingDefaultNavigationFilter, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _originalDefaultNavigationFilter, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, UnknownData_YU29, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _inputLocks, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, _movementLock, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIController, UnknownData_4EI2, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIController, 0x04A0);
		}

		// class UDBDAIUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDAIUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIUtilities, 0x0030);
		}

		// class UgameplayModifierContainer : public UBaseModifierContainer
		TEST_METHOD(Class__DeadByDaylight__gameplayModifierContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, UseApplyFunction, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, UnknownData_9PH8, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, _conditionsInner, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, _tags, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, BroadcastStatusView, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, UnknownData_GPHI, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, statusViewID, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, UnknownData_4PXU, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, _activationTimer, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameplayModifierContainer, UnknownData_UTNM, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgameplayModifierContainer, 0x01D0);
		}

		// class UstatusEffect : public UgameplayModifierContainer
		TEST_METHOD(Class__DeadByDaylight__statusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, CustomParam, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, UnknownData_RP7C, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, ModifierData, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, ShouldDisplay, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, UnknownData_XELS, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, _originatingPlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, _removeOnRemainingLifetimeEnded, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, BroadcastAsStatusEffectWhenApplicable, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, BroadcastAsStatusEffectByActivationTimer, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, BroadcastAsStatusEffectWhenLifeRemains, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, BroadcastAsStatusEffectByFunction, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, BroadcastAsStatusEffectAlways, 0x024D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, BroadcastOriginatorGameEventNotificationWhenFirstApplicable, 0x024E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, UnknownData_JBF2, 0x024F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, _originatingEffect, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, UnknownData_F6O0, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, _nonStackingEffects, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UstatusEffect, UnknownData_F2AY, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UstatusEffect, 0x02A8);
		}

		// class Uperk : public UgameplayModifierContainer
		TEST_METHOD(Class__DeadByDaylight__perk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, UnknownData_DWY0, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, PerkLevelData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _perkLevel, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, UnknownData_48HR, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, PerkIconStrategyClass, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, OnTokenCountChangedBP, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _isUsable, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, BroadcastWhenApplicable, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, BroadcastOnTimer, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, BroadcastCooldownTimer, 0x0313);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, BroadcastInactiveCooldownTimer, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, BroadcastAlways, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, UnknownData_MLKB, 0x0316);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _perkIconStrategy, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _activatableInteractionInputType, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, UnknownData_VY3T, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _tokenCount, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _maxTokenCount, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, UnknownData_107W, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _cooldownTimer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, UnknownData_ORJN, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uperk, _hudIconTimer, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uperk, 0x0348);
		}

		// class UGameplayModifierCondition : public UBaseModifierCondition
		TEST_METHOD(Class__DeadByDaylight__GameplayModifierCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayModifierCondition, 0x00D0);
		}

		// class UItemModifier : public UgameplayModifierContainer
		TEST_METHOD(Class__DeadByDaylight__ItemModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemModifier, ModifierData, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemModifier, 0x0200);
		}

		// class UItemAddon : public UItemModifier
		TEST_METHOD(Class__DeadByDaylight__ItemAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAddon, BaseItemType, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAddon, InventoryItemType, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemAddon, UnknownData_ZB35, 0x0209);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemAddon, 0x0218);
		}

		// class UDBDGameState : public UgameState
		TEST_METHOD(Class__DeadByDaylight__DBDGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_BL4T, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnEscapeDoorActivated, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_FL31, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnLevelReadyToPlay, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnIntroCompleted, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnKillerIntroCompletePercentChanged, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnLightingGenerated, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_K4UI, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, AuthorityOnAllPlayerLoaded, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_MZHO, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnActivatedGeneratorCountChangedDynamic, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnSlasherSet, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_8Q3U, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, OnObsessionChanged, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, CamperDeadCount, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, CamperInMeatLockerCount, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, CamperEscaped, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, WaitingForEscape, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, CamperCount, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, LeaveSpectateRequested, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_L5RK, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, SecondsLeftInLobby, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_117T, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, slasher, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_012Z, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _camperHookedInBasementCount, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_BYCL, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _playersReadyToStart, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_4VR0, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _builtLevelData, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _levelOfferings, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _clipManager, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _sessionId, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _lobbyId, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _activatedGeneratorCount, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _requiredActivatedGeneratorCount, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _escapeDoorActivated, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _escapeDoorOpened, 0x0551);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _isHatchOpen, 0x0552);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _levelReadyToPlay, 0x0553);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _playerDistributionReady, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _usingWeakenedMechanic, 0x0555);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_Y3UX, 0x0556);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _survivorLeft, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_QPTR, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _meatHooks, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _searchables, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _generators, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _escapeDoors, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _hatches, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _reverseBearTrapRemovers, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _baseTraps, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _pallets, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _windows, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _lockers, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _breakableWalls, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _totems, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_I4ZF, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _camperEscapedThroughHatch, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _obsessionTarget, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _cachedObsessionEscaped, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_4U2O, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _traps, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_OKAS, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _gamePresetData, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _gameLevelLoaded, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _gameLevelCreated, 0x06E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _gameLevelEnded, 0x06E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _gameEndedReason, 0x06E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_B4HX, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _endGameState, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _renderingSequencer, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _actorPairQueryEvaluatorComponent, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_X5UM, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _characterCollection, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _collectableCollection, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _serverTimeProvider, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_8D6R, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _isServerDedicated, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, UnknownData_K34L, 0x0751);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _maxSurvivorCount, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameState, _serverBuildVersion, 0x0758);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameState, 0x0768);
		}

		// class UPresentationItemProgressComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PresentationItemProgressComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPresentationItemProgressComponent, 0x00B8);
		}

		// class UDBDEmblem : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDEmblem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem, _points, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem, UnknownData_O3M9, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem, _progressionPoints, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem, _definition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem, UnknownData_AU7W, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem, 0x0108);
		}

		// class UAbstractGameFlowHandler : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__AbstractGameFlowHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbstractGameFlowHandler, 0x0038);
		}

		// class UAchievementHandlerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AchievementHandlerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementHandlerComponent, _noPerkGeneratorRepairEscapeAchievement, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementHandlerComponent, 0x00C0);
		}

		// class UActionButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__ActionButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, IconImage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, ToggleSmokeImage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, button, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, DefaultOpacity, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, ToggledOpacity, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, DisabledOpacity, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, UnknownData_RCIH, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, normal, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, Toggled, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, DISABLED, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, _currentState, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, _previousState, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActionButton, UnknownData_GBLS, 0x04DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionButton, 0x04E0);
		}

		// class UBasePerkIconStrategy : public UObject
		TEST_METHOD(Class__DeadByDaylight__BasePerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePerkIconStrategy, 0x0030);
		}

		// class UActivationTimerElapsedIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActivationTimerElapsedIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivationTimerElapsedIconStrategy, 0x0030);
		}

		// class UActivationTimerIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActivationTimerIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivationTimerIconStrategy, 0x0030);
		}

		// class UActivationTimerRemainingCooldownElapsedIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActivationTimerRemainingCooldownElapsedIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivationTimerRemainingCooldownElapsedIconStrategy, 0x0030);
		}

		// class UActivationTimerRemainingPercentIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActivationTimerRemainingPercentIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivationTimerRemainingPercentIconStrategy, 0x0030);
		}

		// class UActiveOnTimerOrApplicablePerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActiveOnTimerOrApplicablePerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveOnTimerOrApplicablePerkIconStrategy, 0x0030);
		}

		// class UActiveOnTimerPerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActiveOnTimerPerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveOnTimerPerkIconStrategy, 0x0030);
		}

		// class UActiveWhenApplicableAndActivationAndCooldownPerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActiveWhenApplicableAndActivationAndCooldownPerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveWhenApplicableAndActivationAndCooldownPerkIconStrategy, 0x0030);
		}

		// class UActiveWhenApplicableAndNotCampingPerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActiveWhenApplicableAndNotCampingPerkIconStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveWhenApplicableAndNotCampingPerkIconStrategy, UnknownData_L8QV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveWhenApplicableAndNotCampingPerkIconStrategy, 0x0038);
		}

		// class UActiveWhenApplicablePerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ActiveWhenApplicablePerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveWhenApplicablePerkIconStrategy, 0x0030);
		}

		// class UActorClipperComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ActorClipperComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorClipperComponent, Shape, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorClipperComponent, _clippedActors, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorClipperComponent, _clippables, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorClipperComponent, UnknownData_7D96, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorClipperComponent, 0x0128);
		}

		// class UActorComponentExt : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__ActorComponentExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorComponentExt, 0x0030);
		}

		// class UActorDependency : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ActorDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorDependency, Dependencies, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorDependency, 0x00C8);
		}

		// class UActorDetectorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ActorDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorDetectorComponent, OnActorDetected, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorDetectorComponent, CollectedTypes, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorDetectorComponent, _primitive, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorDetectorComponent, 0x00E0);
		}

		// class UActorKnowledgeCollection : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ActorKnowledgeCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorKnowledgeCollection, _actors, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorKnowledgeCollection, _available, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorKnowledgeCollection, UnknownData_PDN9, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorKnowledgeCollection, _possessor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorKnowledgeCollection, _sharing, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorKnowledgeCollection, UnknownData_8WUK, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorKnowledgeCollection, 0x00E0);
		}

		// class UActorSpawner : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__ActorSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_4ED5, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, type, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_D61A, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, Visualization, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, ActivatedByDefault, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_AUKO, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, ActivatedSceneElement, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, DeactivatedSceneElement, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, Weight, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, SpawnCountMax, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, SpawnPriorityTier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_PKTW, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, OnAsyncActorSpawned, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_JUIM, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, WeightInfluenceable, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, WeightInfluencer, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_K44V, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, Cost, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, _toSpawn, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, UnknownData_O1R8, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawner, _spawnedActorOnAuthority, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSpawner, 0x02C8);
		}

		// class UObjectRandomizer : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__ObjectRandomizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRandomizer, spawners, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRandomizer, MinPopulation, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRandomizer, MaxPopulation, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRandomizer, 0x0228);
		}

		// class UActorSpawnerRandomizer : public UObjectRandomizer
		TEST_METHOD(Class__DeadByDaylight__ActorSpawnerRandomizer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawnerRandomizer, ActivatedSpawnerContentLists, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawnerRandomizer, DeactivatedSpawnerContentLists, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSpawnerRandomizer, UnknownData_KRRL, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSpawnerRandomizer, 0x0250);
		}

		// class UActorVariationSpawner : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__ActorVariationSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorVariationSpawner, Visualization, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorVariationSpawner, Variations, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorVariationSpawner, UnknownData_AW08, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorVariationSpawner, _toSpawn, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorVariationSpawner, UnknownData_0V6Y, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorVariationSpawner, 0x0270);
		}

		// class UAIBotsManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__AIBotsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIBotsManager, UnknownData_L0NI, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBotsManager, 0x0058);
		}

		// class UAICharacterBehaviourData : public UObject
		TEST_METHOD(Class__DeadByDaylight__AICharacterBehaviourData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAICharacterBehaviourData, 0x0030);
		}

		// class UAICharacterBehaviour : public UObject
		TEST_METHOD(Class__DeadByDaylight__AICharacterBehaviour)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAICharacterBehaviour, UnknownData_9VDO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAICharacterBehaviour, 0x0058);
		}

		// class UCharacterEvasionBehaviourData : public UAICharacterBehaviourData
		TEST_METHOD(Class__DeadByDaylight__CharacterEvasionBehaviourData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterEvasionBehaviourData, _hunter, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterEvasionBehaviourData, _escapePoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterEvasionBehaviourData, _minEscapeDist, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterEvasionBehaviourData, UnknownData_GPGM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterEvasionBehaviourData, 0x0050);
		}

		// class UAICharacterEvasionBehaviour : public UAICharacterBehaviour
		TEST_METHOD(Class__DeadByDaylight__AICharacterEvasionBehaviour)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAICharacterEvasionBehaviour, _prey, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAICharacterEvasionBehaviour, _preyAIController, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAICharacterEvasionBehaviour, _currentEscapePoint, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAICharacterEvasionBehaviour, _characterEvasionData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAICharacterEvasionBehaviour, UnknownData_Z67M, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAICharacterEvasionBehaviour, 0x0080);
		}

		// class UAimableInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__AimableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimableInterface, 0x0030);
		}

		// class UAimAssistComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AimAssistComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimAssistComponent, UnknownData_5KNE, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimAssistComponent, 0x00E8);
		}

		// class UAIMoveToInteractData : public UAICharacterBehaviourData
		TEST_METHOD(Class__DeadByDaylight__AIMoveToInteractData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteractData, _interactActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteractData, _targetPositionActor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteractData, _characterMovementTypes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteractData, UnknownData_I62X, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIMoveToInteractData, 0x0048);
		}

		// class UAIMoveToInteract : public UAICharacterBehaviour
		TEST_METHOD(Class__DeadByDaylight__AIMoveToInteract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteract, _aiMoveToInteractData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteract, _aiController, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIMoveToInteract, UnknownData_GO0E, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIMoveToInteract, 0x0070);
		}

		// class UAIPointOfInterestTargetInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__AIPointOfInterestTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPointOfInterestTargetInterface, 0x0030);
		}

		// class UAISenseConfig_PointOfInterest : public UAISenseConfig
		TEST_METHOD(Class__DeadByDaylight__AISenseConfig_PointOfInterest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_PointOfInterest, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_PointOfInterest, MinGeneratorRepairSoundRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_PointOfInterest, MaxGeneratorRepairSoundRange, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_PointOfInterest, 0x0060);
		}

		// class UAISense_PointOfInterest : public UAISense
		TEST_METHOD(Class__DeadByDaylight__AISense_PointOfInterest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_PointOfInterest, _sources, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_PointOfInterest, 0x00A0);
		}

		// class UAISenseConfig_Terror : public UAISenseConfig
		TEST_METHOD(Class__DeadByDaylight__AISenseConfig_Terror)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Terror, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Terror, MaxBreathingSoundRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Terror, UnknownData_1S0F, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Terror, TerrorRanges, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Terror, DetectionByAffiliation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Terror, UnknownData_2CTG, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Terror, 0x00B8);
		}

		// class UAISenseEvent_Terror : public UAISenseEvent
		TEST_METHOD(Class__DeadByDaylight__AISenseEvent_Terror)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Terror, event, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Terror, 0x0058);
		}

		// class UAISense_Terror : public UAISense
		TEST_METHOD(Class__DeadByDaylight__AISense_Terror)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Terror, _events, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Terror, UnknownData_Z7MX, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Terror, 0x00F0);
		}

		// class UAISenseConfig_Trail : public UAISenseConfig
		TEST_METHOD(Class__DeadByDaylight__AISenseConfig_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Trail, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Trail, MaxRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Trail, PeripheralVisionAngleDegrees, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Trail, DetectionByAffiliation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Trail, UnknownData_PP61, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Trail, 0x0068);
		}

		// class UAISenseEvent_Trail : public UAISenseEvent
		TEST_METHOD(Class__DeadByDaylight__AISenseEvent_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Trail, event, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Trail, 0x0060);
		}

		// class UAISense_Trail : public UAISense
		TEST_METHOD(Class__DeadByDaylight__AISense_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Trail, Events, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Trail, UnknownData_SY05, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Trail, 0x00F0);
		}

		// class UScreenBase : public UObject
		TEST_METHOD(Class__DeadByDaylight__ScreenBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenBase, IsAnimationDone, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenBase, UnknownData_K1A5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenBase, screenObject, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenBase, _screenController, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenBase, UnknownData_VA7Z, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreenBase, 0x0120);
		}

		// class UAlertsScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__AlertsScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlertsScreen, 0x0120);
		}

		// class UAlwaysVisiblePerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__AlwaysVisiblePerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlwaysVisiblePerkIconStrategy, 0x0030);
		}

		// class UGate : public Uactor
		TEST_METHOD(Class__DeadByDaylight__Gate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGate, InteractionInputs, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGate, InteractionOutput, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGate, UnknownData_13V8, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGate, 0x0248);
		}

		// class UAndGate : public UGate
		TEST_METHOD(Class__DeadByDaylight__AndGate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndGate, 0x0248);
		}

		// class UAnimationMontageSlave : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AnimationMontageSlave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationMontageSlave, UnknownData_J1AR, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationMontageSlave, 0x00C0);
		}

		// class UAnimNotifyState_HideCustomizationAttachments : public UAnimNotifyState
		TEST_METHOD(Class__DeadByDaylight__AnimNotifyState_HideCustomizationAttachments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_HideCustomizationAttachments, category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_HideCustomizationAttachments, UnknownData_VUAB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_HideCustomizationAttachments, 0x0040);
		}

		// class UAnimTagProvider : public UInterface
		TEST_METHOD(Class__DeadByDaylight__AnimTagProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimTagProvider, 0x0030);
		}

		// class UApplicableActivationTimerRemainingCooldownElapsedIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ApplicableActivationTimerRemainingCooldownElapsedIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicableActivationTimerRemainingCooldownElapsedIconStrategy, 0x0030);
		}

		// class UArchiveBaseScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__ArchiveBaseScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveBaseScreen, UnknownData_M6DQ, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveBaseScreen, 0x0138);
		}

		// class UArchiveIntroScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__ArchiveIntroScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveIntroScreen, 0x0120);
		}

		// class UBasePopupScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__BasePopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePopupScreen, 0x0120);
		}

		// class UGenericPopupScreen : public UBasePopupScreen
		TEST_METHOD(Class__DeadByDaylight__GenericPopupScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericPopupScreen, _popup, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericPopupScreen, UnknownData_U2O2, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericPopupScreen, 0x0140);
		}

		// class UArchivePassPurchasePopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__ArchivePassPurchasePopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchivePassPurchasePopupScreen, 0x0140);
		}

		// class UArchivePastStoriesScreen : public UArchiveBaseScreen
		TEST_METHOD(Class__DeadByDaylight__ArchivePastStoriesScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchivePastStoriesScreen, UnknownData_YZBM, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchivePastStoriesScreen, 0x0150);
		}

		// class UArchiveRewardsScreen : public UArchiveBaseScreen
		TEST_METHOD(Class__DeadByDaylight__ArchiveRewardsScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveRewardsScreen, UnknownData_A2K5, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveRewardsScreen, 0x01B0);
		}

		// class UArchivesHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__ArchivesHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchivesHelper, 0x0030);
		}

		// class UArchivesManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__ArchivesManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchivesManager, UnknownData_GOD2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchivesManager, _storiesContainer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchivesManager, _vignettesContainer, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchivesManager, _rewardTrackcontainer, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchivesManager, 0x0058);
		}

		// class UArchivesSpecialBehavioursHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__ArchivesSpecialBehavioursHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchivesSpecialBehavioursHelper, 0x0030);
		}

		// class UArchiveStoriesContainer : public UObject
		TEST_METHOD(Class__DeadByDaylight__ArchiveStoriesContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveStoriesContainer, UnknownData_WQX3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveStoriesContainer, _rewardTrackcontainer, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveStoriesContainer, UnknownData_SGG7, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveStoriesContainer, _wallet, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveStoriesContainer, _vignettesContainer, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveStoriesContainer, 0x0298);
		}

		// class UArchiveStoryScreen : public UArchiveBaseScreen
		TEST_METHOD(Class__DeadByDaylight__ArchiveStoryScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveStoryScreen, UnknownData_XZSO, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveStoryScreen, 0x0268);
		}

		// class UArchiveTierPurchasePopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__ArchiveTierPurchasePopupScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveTierPurchasePopupScreen, UnknownData_WFAB, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveTierPurchasePopupScreen, 0x0158);
		}

		// class UArchiveVignettesContainer : public UObject
		TEST_METHOD(Class__DeadByDaylight__ArchiveVignettesContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveVignettesContainer, UnknownData_2J8R, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveVignettesContainer, 0x00F0);
		}

		// class UArchiveWidgetScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__ArchiveWidgetScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArchiveWidgetScreen, UnknownData_RELG, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArchiveWidgetScreen, 0x0150);
		}

		// class UAssetLibrary : public UObject
		TEST_METHOD(Class__DeadByDaylight__AssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibrary, UnknownData_RHV8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibrary, _objectLibrary, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibrary, UnknownData_XI3D, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibrary, SecondsDelayBetweenBatch, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibrary, UnknownData_EVKS, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetLibrary, 0x00B0);
		}

		// class UAssetLibraryManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__AssetLibraryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, UnknownData_DT0P, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _worldContextObject, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _characterItemsAssetLibrary, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _globalAssetLibrary, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _menuAssetLibrary, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _gameAssetLibrary, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _tutorialAssetLibrary, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, UnknownData_ZHXA, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _shopManager, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, UnknownData_5SSZ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, _loadingList, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, CharacterItemsAssetLoadCountPerChunk, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, BlindPackAssetLoadCountPerChunk, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, MenuAssetLoadCountPerChunk, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, GlobalAssetLoadCountPerChunk, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, GameAssetLoadCountPerChunk, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetLibraryManager, UnknownData_VWHU, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetLibraryManager, 0x0100);
		}

		// class UAssetUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__AssetUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUtilities, 0x0030);
		}

		// class UAtlantaCamperInitializer : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AtlantaCamperInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaCamperInitializer, HeartbeatOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaCamperInitializer, UnknownData_6XDG, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaCamperInitializer, 0x00D0);
		}

		// class UAtlantaFriendsListScreenUMG : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__AtlantaFriendsListScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaFriendsListScreenUMG, UnknownData_ALVR, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaFriendsListScreenUMG, _atlantaFriendListScreen, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaFriendsListScreenUMG, 0x01A0);
		}

		// class UAtlantaHeartbeatActor : public Uactor
		TEST_METHOD(Class__DeadByDaylight__AtlantaHeartbeatActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaHeartbeatActor, IsHeartbeatShown, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaHeartbeatActor, UnknownData_GQV8, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaHeartbeatActor, 0x0250);
		}

		// class UAtlantaHudDirectionalStick : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__AtlantaHudDirectionalStick)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaHudDirectionalStick, ContainerToRotate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaHudDirectionalStick, ArrowsContainer, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaHudDirectionalStick, 0x0310);
		}

		// class ULobbyLevel : public ULevelScriptActor
		TEST_METHOD(Class__DeadByDaylight__LobbyLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyLevel, UnknownData_JORR, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyLevel, _registeredDisplayStands, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyLevel, LobbyLoadedEvent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyLevel, UnknownData_MMRY, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyLevel, 0x0298);
		}

		// class UAtlantaLobbyLevel : public ULobbyLevel
		TEST_METHOD(Class__DeadByDaylight__AtlantaLobbyLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, UnknownData_PNT6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, ForefrontLightingChannel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, BackgroundLightingChannel, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, UnknownData_0ISP, 0x02A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _backgroundPawn, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, UnknownData_L1T8, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _offlineLobbyCamera, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _roleSelectionLobbyCameraPosition, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _characterSelectionLobbyCameraPosition, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _frontKillerStart, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _backKillerStart, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _frontSurvivorStart, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, _backSurvivorStart, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaLobbyLevel, UnknownData_8VPS, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaLobbyLevel, 0x02F8);
		}

		// class UAtlantaNavigationScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__AtlantaNavigationScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaNavigationScreen, _umgScreen, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaNavigationScreen, 0x0128);
		}

		// class UAtlantaObjectiveWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__AtlantaObjectiveWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaObjectiveWidget, ObjectiveLabel, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaObjectiveWidget, UnknownData_ZEVK, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaObjectiveWidget, _totalFadeOutTime, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaObjectiveWidget, _polynomialOrder, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaObjectiveWidget, UnknownData_IRGE, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaObjectiveWidget, 0x0368);
		}

		// class UAtlantaOfflineLobbyCamera : public UCameraActor
		TEST_METHOD(Class__DeadByDaylight__AtlantaOfflineLobbyCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaOfflineLobbyCamera, ZCameraPositionOffsetMultiplier, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaOfflineLobbyCamera, UnknownData_79UJ, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaOfflineLobbyCamera, _kDefaultAspectRatio, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaOfflineLobbyCamera, UnknownData_VTRH, 0x07AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaOfflineLobbyCamera, 0x07B0);
		}

		// class UAtlantaPartyFlowHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__AtlantaPartyFlowHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaPartyFlowHandler, UnknownData_FMHG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaPartyFlowHandler, 0x01E8);
		}

		// class UAtlantaInstalledContent : public UObject
		TEST_METHOD(Class__DeadByDaylight__AtlantaInstalledContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaInstalledContent, UnknownData_6UNR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaInstalledContent, 0x0050);
		}

		// class UAtlantaPendingContent : public UAtlantaInstalledContent
		TEST_METHOD(Class__DeadByDaylight__AtlantaPendingContent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaPendingContent, UnknownData_4S14, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaPendingContent, 0x0090);
		}

		// class UAtlantaPatchingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__AtlantaPatchingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaPatchingLibrary, 0x0030);
		}

		// class UAtlantaPromptWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__AtlantaPromptWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaPromptWidget, PromptLabel, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaPromptWidget, UnknownData_EMSK, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaPromptWidget, 0x0318);
		}

		// class UAtlantaRitualsScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__AtlantaRitualsScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaRitualsScreen, _umgScreen, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaRitualsScreen, UnknownData_BNSL, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaRitualsScreen, 0x0188);
		}

		// class UAtlantaRoleSelectionScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__AtlantaRoleSelectionScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaRoleSelectionScreen, _umgScreen, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaRoleSelectionScreen, 0x0128);
		}

		// class UAtlantaSkillCheckWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__AtlantaSkillCheckWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, SkillCheckArea, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, HitArea, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, BonusArea, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, HitAreaContainer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, BonusAreaContainer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, HitAreaStartMarkerContainer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, HitAreaEndMarkerContainer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, MarkerContainer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, PathCoveredAngle, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaSkillCheckWidget, UnknownData_AHP6, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaSkillCheckWidget, 0x0348);
		}

		// class UTutorialLevel : public ULevelScriptActor
		TEST_METHOD(Class__DeadByDaylight__TutorialLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialLevel, _tutorialStarted, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialLevel, UnknownData_Y9ET, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialLevel, 0x0278);
		}

		// class UGeneralEngineSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralEngineSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralEngineSettings, 0x0030);
		}

		// class UGeneralProjectChunkingSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectChunkingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, NumberOfPaksInInitialChunk, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, NumberOfPaksInAllChunks, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, LeftoverPakId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, UnknownData_QG6P, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, PakAssignmentPaths, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, AtlantaNumberOfPaksInInitialChunk, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, AtlantaNumberOfPaksInAllChunks, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, AtlantaLeftoverPakId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, UnknownData_A5UA, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectChunkingSettings, AtlantaPakAssignmentPaths, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectChunkingSettings, 0x0070);
		}

		// class UAtlantaTutorialLevel : public UTutorialLevel
		TEST_METHOD(Class__DeadByDaylight__AtlantaTutorialLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaTutorialLevel, 0x0278);
		}

		// class UAtlantaTutorialObjectiveManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__AtlantaTutorialObjectiveManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaTutorialObjectiveManager, _objectivesList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaTutorialObjectiveManager, _objectivesContainer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaTutorialObjectiveManager, UnknownData_GU5Q, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaTutorialObjectiveManager, 0x0050);
		}

		// class UGeneralProjectSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GeneralProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CompanyDistinguishedName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, CopyrightNotice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, Homepage, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, LicensingTerms, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, PrivacyPolicy, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectID, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectVersion, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, SupportContact, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDisplayedTitle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, ProjectDebugTitleInfo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bShouldWindowPreserveAspectRatio, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bUseBorderlessWindow, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInVR, 0x0112);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bStartInAR, 0x0113);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bSupportAR, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowWindowResize, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowClose, 0x0116);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMaximize, 0x0117);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, bAllowMinimize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneralProjectSettings, UnknownData_HH90, 0x0119);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneralProjectSettings, 0x0120);
		}

		// class UAtlantaTutorialWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__AtlantaTutorialWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlantaTutorialWidget, UnknownData_38R0, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaTutorialWidget, 0x0330);
		}

		// class UAtlantaUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__AtlantaUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlantaUtilities, 0x0030);
		}

		// class UHudSettings : public UObject
		TEST_METHOD(Class__EngineSettings__HudSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, UnknownData_N6BK, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudSettings, DebugDisplay, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudSettings, 0x0048);
		}

		// class UConsoleSettings : public UObject
		TEST_METHOD(Class__EngineSettings__ConsoleSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, MaxScrollbackSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_4AVU, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, ManualAutoCompleteList, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteMapPaths, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, BackgroundOpacityPercentage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bOrderTopToBottom, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, bDisplayHelpInAutoComplete, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_E1NG, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, InputColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, HistoryColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCommandColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteCVarColor, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, AutoCompleteFadedColor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsoleSettings, UnknownData_082H, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsoleSettings, 0x0078);
		}

		// class UAtlCookedMaps : public UPrimaryDataAsset
		TEST_METHOD(Class__DeadByDaylight__AtlCookedMaps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtlCookedMaps, Descriptions, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtlCookedMaps, 0x0048);
		}

		// class UGameMapsSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameMapsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, LocalMapOptions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TransitionMap, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bUseSplitscreen, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, TwoPlayerSplitscreenLayout, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ThreePlayerSplitscreenLayout, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, FourPlayerSplitscreenLayout, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, bOffsetPlayerGamepadIds, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, UnknownData_3EUM, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameInstanceClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameDefaultMap, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, ServerDefaultMap, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultGameMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GlobalDefaultServerGameMode, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeMapPrefixes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMapsSettings, GameModeClassAliases, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMapsSettings, 0x0128);
		}

		// class UAttackTypeEventComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AttackTypeEventComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAttackTypeEventComponent, UnknownData_RQ1O, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAttackTypeEventComponent, 0x00D0);
		}

		// class UAudioFXComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AudioFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioFXComponent, _audioAmbientDetector, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioFXComponent, UnknownData_ME7K, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioFXComponent, 0x0118);
		}

		// class UAuthoritativeMovementComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AuthoritativeMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, _playersToPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, _stopIgnorePlayerOnEndOverlap, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, _ignorePlayers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, UnknownData_PBED, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, _pawnDetector, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, _authoritativeIgnoreOverlapPlayers, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeMovementComponent, _previousAuthoritativeIgnoreOverlapPlayers, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAuthoritativeMovementComponent, 0x0118);
		}

		// class UGameNetworkManagerSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameNetworkManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MinDynamicBandwidth, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, MaxDynamicBandwidth, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, TotalNetBandwidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, BadPingThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_UERQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyRxCheatTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, StandbyTxCheatTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForRxStandby, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentMissingForTxStandby, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, PercentForBadPing, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, JoinInProgressStandbyWaitTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManagerSettings, UnknownData_8JXJ, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManagerSettings, 0x0060);
		}

		// class UAutomaticLeanComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__AutomaticLeanComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, OnLeanStateChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, OnCanInitiateLeanChanged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _cameraIdleLocation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _cameraLeftLeanLocation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _cameraRightLeanLocation, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _cameraCrouchLocation, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _cameraCrouchLeftLeanLocation, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _cameraCrouchRightLeanLocation, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _middleSphereTraceLength, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _sideSphereTraceLength, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _sphereTraceRadius, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _standingTraceHeightOffset, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _crouchingTraceHeightOffset, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _sideTraceOffset, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _maxMovementDistance, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _maxCameraAngle, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _debugMode, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, _leanState, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomaticLeanComponent, UnknownData_SWFV, 0x033A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomaticLeanComponent, 0x0360);
		}

		// class UGameSessionSettings : public UObject
		TEST_METHOD(Class__EngineSettings__GameSessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxSpectators, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, MaxPlayers, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionSettings, UnknownData_GFBE, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionSettings, 0x0040);
		}

		// class UAutoQualityAdjuster : public Uactor
		TEST_METHOD(Class__DeadByDaylight__AutoQualityAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, TargetResolutionScale, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, MinimumMS, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, MaximumMS, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, ScaleIncreaseRate, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, ScaleDecreaseRate, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, MinimumAllowableScale, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoQualityAdjuster, UnknownData_P23C, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoQualityAdjuster, 0x0258);
		}

		// class UBannerDataProcessor : public UObject
		TEST_METHOD(Class__DeadByDaylight__BannerDataProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBannerDataProcessor, UnknownData_N98P, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBannerDataProcessor, 0x0080);
		}

		// class UBaseCameraTargetingStrategy : public UObject
		TEST_METHOD(Class__DeadByDaylight__BaseCameraTargetingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCameraTargetingStrategy, UnknownData_8Z7E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCameraTargetingStrategy, _maxFreeAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCameraTargetingStrategy, _maxInputRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCameraTargetingStrategy, _interpolationSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCameraTargetingStrategy, _interpolationSpeedOutsideFreeMoveZone, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseCameraTargetingStrategy, _target, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCameraTargetingStrategy, 0x0050);
		}

		// class UBaseHitValidationConfigurator : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__BaseHitValidationConfigurator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHitValidationConfigurator, UnknownData_XH83, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseHitValidationConfigurator, 0x00C0);
		}

		// class UBaseIndicatorWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__BaseIndicatorWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, _safeZonePanel, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, _canvasPanelSlot, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, RadiusMultiplier, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, UnknownData_WPSK, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, IndicatorPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, Indicator, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIndicatorWidget, ArrowImage, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseIndicatorWidget, 0x0330);
		}

		// class UKillerProjectile : public UPhysicsBasedProjectile
		TEST_METHOD(Class__DeadByDaylight__KillerProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectile, UnknownData_F77S, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectile, _killerProjectileAttemptGameEventTag, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectile, UnknownData_P81Z, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectile, _hitValidatorConfigurator, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectile, _hitValidator, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerProjectile, 0x02F0);
		}

		// class UBaseLinkedVomitProjectile : public UKillerProjectile
		TEST_METHOD(Class__DeadByDaylight__BaseLinkedVomitProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _useSplashDamage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _passThroughSurvivors, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, UnknownData_ZLXF, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _poolableProjectile, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _vomitTrail, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _splineMesh, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _splashDamageSphere, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _akAudioVomitProjectile, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _vomitSplashCamper, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _vomitSplash, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _akAudioEventAudioEventVomitSplash, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _minDecalSize, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _maxDecalSize, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, _isSuperVomit, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLinkedVomitProjectile, UnknownData_8U7Q, 0x0349);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseLinkedVomitProjectile, 0x0350);
		}

		// class UBaseSky : public Uactor
		TEST_METHOD(Class__DeadByDaylight__BaseSky)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSky, UnknownData_UNRR, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSky, AdjustCullDistance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSky, EnableIBL, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSky, UnknownData_2ZBN, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSky, 0x0240);
		}

		// class UBaseTrap : public Ucollectable
		TEST_METHOD(Class__DeadByDaylight__BaseTrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTrap, _isTrapSet, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTrap, UnknownData_G4ZX, 0x0421);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseTrap, 0x0428);
		}

		// class UOutlineUpdateStrategy : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__OutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineUpdateStrategy, _outlineComponent, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutlineUpdateStrategy, 0x00C0);
		}

		// class UBearTrapOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__BearTrapOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapOutlineUpdateStrategy, UnrevealedColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapOutlineUpdateStrategy, RevealedColorToSurvivor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapOutlineUpdateStrategy, KillerOutlineFadeCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapOutlineUpdateStrategy, UnknownData_IMFM, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapOutlineUpdateStrategy, _owningBearTrapMapActorComponent, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBearTrapOutlineUpdateStrategy, 0x00F8);
		}

		// class UBlindableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__BlindableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, UnknownData_COZG, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, _chargeableComponent, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, _blindingEffectors, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, UnknownData_WFC5, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, _isBlinded, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, UnknownData_SWC2, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, _isBeingBlinded, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindableComponent, UnknownData_603O, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlindableComponent, 0x0248);
		}

		// class UBlindingEffectorInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__BlindingEffectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlindingEffectorInterface, 0x0030);
		}

		// class UBlindingFXComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__BlindingFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, UnknownData_RVSJ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, _blindnessIntensityParameter, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, UnknownData_BHQX, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, _blindnessMaterialCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, _blindnessCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, _postProcess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, _postProcessMaterial, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindingFXComponent, UnknownData_5UOY, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlindingFXComponent, 0x0108);
		}

		// class UBlinkComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__BlinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkComponent, OnBlinkStateChangedDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkComponent, _isInBlinkingState, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkComponent, UnknownData_1ZNJ, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlinkComponent, 0x00D0);
		}

		// class UBlinkerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__BlinkerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, _rayCastZOffet, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, _rayCastLength, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, _minimumIndicatorVelocity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, _IndicatorVelocityEasingFactor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, _lineOfSightBlinkOffset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, UnknownData_FYH8, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, _blinkChainTimer, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlinkerComponent, UnknownData_B1JU, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlinkerComponent, 0x0180);
		}

		// class UBlockElement : public UObject
		TEST_METHOD(Class__DeadByDaylight__BlockElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockElement, _source, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockElement, _affectedPlayers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockElement, UnknownData_CQUV, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockElement, 0x0098);
		}

		// class UBlockableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__BlockableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockableComponent, UnknownData_7XZU, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockableComponent, _replicatedDatum, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockableComponent, _blockElements, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockableComponent, 0x0140);
		}

		// class UBloodDecalEffectIntensity : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__BloodDecalEffectIntensity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffectIntensity, IntensifyBloodColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffectIntensity, IntensifyBloodColor2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffectIntensity, IntensifyBloodColorEmissive, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffectIntensity, IntensifyBloodColorEmissiveMinimumIntensity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffectIntensity, IntensifyBloodColorEmissiveMaximumIntensity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffectIntensity, UnknownData_7V90, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodDecalEffectIntensity, 0x0050);
		}

		// class UBloodDecalEffect : public UDecalActor
		TEST_METHOD(Class__DeadByDaylight__BloodDecalEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, AnimationTimelineCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, DestroyTimelineCurve, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, Textures, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, Normals, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, BloodDecalEffectIntensity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, ColorInterpolationSpeed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, UnknownData_CIUP, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, DynamicDecalMaterial, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodDecalEffect, UnknownData_93JW, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodDecalEffect, 0x03A0);
		}

		// class UBloodlust : public UstatusEffect
		TEST_METHOD(Class__DeadByDaylight__Bloodlust)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodlust, BloodlustCurve, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodlust, UnknownData_4JPO, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodlust, _bloodlustTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodlust, UnknownData_M13D, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodlust, _owningKiller, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodlust, UnknownData_MLX0, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodlust, 0x0390);
		}

		// class UBloodwebDistribution : public UObject
		TEST_METHOD(Class__DeadByDaylight__BloodwebDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebDistribution, UnknownData_LXX2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebDistribution, _designTunables, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebDistribution, _bloodwebTunables, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebDistribution, UnknownData_FF16, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebDistribution, 0x0328);
		}

		// class UBloodwebEntity : public UObject
		TEST_METHOD(Class__DeadByDaylight__BloodwebEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebEntity, UnknownData_MA9E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebEntity, _gameInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebEntity, _bloodwebTunables, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebEntity, _bloodWebDefinition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebEntity, UnknownData_NC0D, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebEntity, 0x0078);
		}

		// class UBloodwebGenerator : public UObject
		TEST_METHOD(Class__DeadByDaylight__BloodwebGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, UnknownData_FQRY, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _randomizationStream, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, UnknownData_RSUY, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _selectedNodes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _selectedContent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, UnknownData_N71L, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _bloodWebDefinition, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _designTunables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _bloodwebTunables, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _alternativePathOccurenceFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, UnknownData_42OW, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _dataDistribution, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, _bloodwebSettings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebGenerator, UnknownData_BRAJ, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebGenerator, 0x00F0);
		}

		// class UBloodwebManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__BloodwebManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, UnknownData_11WZ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _bloodwebBuilderClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _gameInstance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _designTunables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _bloodwebTunables, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _bloodWebDefinition, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _bloodwebBuilder, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, _entity, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebManager, UnknownData_X4TK, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebManager, 0x00D8);
		}

		// class UBloodwebSettings : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__BloodwebSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebSettings, _duplicableItems, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebSettings, 0x0048);
		}

		// class UBloodwebTester : public Uactor
		TEST_METHOD(Class__DeadByDaylight__BloodwebTester)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebTester, _designTunables, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebTester, _bloodWebDefinition, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebTester, _bloodwebBuilder, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebTester, 0x0248);
		}

		// class UBloodwebTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__BloodwebTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodwebTunables, UnknownData_YRKY, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodwebTunables, 0x0038);
		}

		// class UBlueprintDebugUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__BlueprintDebugUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintDebugUtilities, 0x0030);
		}

		// class UBlueprintPlatformUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__BlueprintPlatformUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformUtilities, 0x0030);
		}

		// class UBonusPointEventsManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__BonusPointEventsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBonusPointEventsManager, UnknownData_C57J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBonusPointEventsManager, 0x00E8);
		}

		// class UTile : public Uactor
		TEST_METHOD(Class__DeadByDaylight__Tile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, MinimumSpacing, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, MaximumSpacing, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, DiagonalSpacing, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, TypeSpacing, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, UnknownData_X9GK, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, MaximumCount, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, Dimension, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, AvailableEscapeTypes, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, type, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, Density, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, path, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, UnknownData_AG9K, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, Number, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, PlaceHolder, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, UnknownData_BIXB, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, SpawnPriorityTier, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, Weight, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, Coord, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, QuadrantSpawnType, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, BasementType, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, UnknownData_71MP, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, SpawnPointsCache, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, ObjectRandomizersCache, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, ActorSpawnersCache, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, ActorVariationSpawnersCache, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, UnknownData_58MK, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, SharedTileRandomizer, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, _initialized, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTile, UnknownData_AXZL, 0x033D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTile, 0x0340);
		}

		// class UBorderTile : public UTile
		TEST_METHOD(Class__DeadByDaylight__BorderTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderTile, Borders, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderTile, _map, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderTile, UnknownData_W6K0, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderTile, 0x0360);
		}

		// class UBreakableBase : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__BreakableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakableBase, _breakableCollision, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakableBase, _state, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakableBase, UnknownData_FC22, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakableBase, _akAudioBreakable, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakableBase, _akAudioBreakEvent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakableBase, _rootComponent, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakableBase, 0x0300);
		}

		// class USourceBasedOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__SourceBasedOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceBasedOutlineUpdateStrategy, _defaultColorForSurvivor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceBasedOutlineUpdateStrategy, _defaultColorForSlasher, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceBasedOutlineUpdateStrategy, UnknownData_9UUS, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceBasedOutlineUpdateStrategy, 0x0130);
		}

		// class UBreakableWallOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__BreakableWallOutlineUpdateStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakableWallOutlineUpdateStrategy, 0x0130);
		}

		// class UCameraAttachmentComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CameraAttachmentComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAttachmentComponent, _anchor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAttachmentComponent, UnknownData_M3CP, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAttachmentComponent, _defaultCameraAttachment, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAttachmentComponent, _currentCameraAttachment, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAttachmentComponent, UnknownData_5BRY, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAttachmentComponent, 0x0168);
		}

		// class UCameraHandlerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CameraHandlerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, OnSocketChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, UnknownData_7XGZ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, _cameraMap, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, _delayedSocketID, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, _currentSocketID, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, UnknownData_U2YY, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, _cameraAttachmentSocket, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraHandlerComponent, _cameraAttachmentComponent, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraHandlerComponent, 0x0188);
		}

		// class UCamperAnimInstance : public UanimInstance
		TEST_METHOD(Class__DeadByDaylight__CamperAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, camperPlayer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, MyDeltaTime, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsHooked, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsSacrificeStruggling, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_EOE4, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, MontageMadnessTierUp, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, ArrayCarryAttackMontage, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, _isFrightScreaming, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, isBeingCarried, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingPutOnHook, 0x029A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsCrouched, 0x029B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, GuidedAction, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsTrapped, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsCrawling, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, isDead, 0x029F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, MaxSpeed, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsInsideCloset, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_ZHWY, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsPlayingMadnessTierUpWeight, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsTotallyInsane, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingKilled, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsCarryAttackSucess, 0x02AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, ShouldLookSleepy, 0x02AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsUsingAimItem, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsHoldingAimItem, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, AllowLookAt, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_B4VZ, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, DropStaggerTimeLeft, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LeftArmIKAlpha, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, RightArmIKAlpha, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LeftForeArmIKAlpha, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, RightForeArmIKAlpha, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_CRA4, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LeftHandIKTransform, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, RightHandIKTransform, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, Strafe, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, isInteracting, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, Injured, 0x0332);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, InteractionType, 0x0333);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, PreviousInteractionType, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsSlasherInFPV, 0x0335);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_OJQY, 0x0336);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, CarriedAlpha, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsHoldingHandleItem, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsHoldingSmallItem, 0x033D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsHoldingFirecracker, 0x033E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_F4HV, 0x033F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, Turning, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_JDGS, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, InAir, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_PVXC, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, speed, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, direction, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, Pitch, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, Yaw, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, RightFootEffectorLocation, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LeftFootEffectorLocation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, Idle, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_0BBC, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, MyTime, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, SkillCheckFailed, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsGassed, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, HasAnyMontagePlaying, 0x0386);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_4YG2, 0x0387);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, CurrentlyPlayerMontageId, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingCarriedByTheSpirit, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingCarriedByTheNightmare, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingCarriedByThePig, 0x0396);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingCarriedByTheHag, 0x0397);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingCarriedByTheLegion, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingCarriedByTheGhostFace, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsUsingDeadHard, 0x039A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsPlayingWakeUpOther, 0x039B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsPlayingFreddyMori, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsSpooked, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, isHealingKOCamper, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsChainLinked, 0x039F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, IsBeingReeled, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, TriggerHarpoonHitAnim, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, WasRecentlyHitByVomit, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_WVRK, 0x03A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, HarpoonHitTurnAnimNormalizedStartTime, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, HarpoonHitAnimTurnRight, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, ChainBreakTrigger, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, HasLinkInput, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_GS8B, 0x03AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LinkInputX, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LinkInputY, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, LinkedMaxSpeed, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, _cachedSurvivorPlagueEffect, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimInstance, UnknownData_Q79Z, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperAnimInstance, 0x0420);
		}

		// class UBloodTrailSettings : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__BloodTrailSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _initialDelay, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _numBloodDropsPerBloodPool, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _bloodDropsInterval, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _randomlyRotateBloodDrops, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, UnknownData_DXBT, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _bloodDropsRandomScatter, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _bloodTraceChannel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, UnknownData_M734, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodTrailSettings, _bloodDropClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodTrailSettings, 0x0058);
		}

		// class UCamperBloodTrailComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CamperBloodTrailComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperBloodTrailComponent, _camperPerkManager, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperBloodTrailComponent, _bloodTrailSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperBloodTrailComponent, UnknownData_L771, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperBloodTrailComponent, 0x0160);
		}

		// class UCharacterDreamworldComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CharacterDreamworldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, DreamStateChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, _mobileDreamworldPostProcessClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, _isInDreamworld, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, UnknownData_Q03W, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, _mobileDreamworldPostProcess, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, _dreamworldLightingHelper, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterDreamworldComponent, UnknownData_XA26, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterDreamworldComponent, 0x0110);
		}

		// class UCamperDreamworldComponent : public UCharacterDreamworldComponent
		TEST_METHOD(Class__DeadByDaylight__CamperDreamworldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, OnCamperTriggeredDreamTrap, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _survivorSleepiness, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _sleepGainPerSecond, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_QBLT, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _wakeUpByOtherCount, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _showKiller, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_6SGL, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _killerGlimpseDurationTimer, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_3SNU, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _killerGlimpseCooldownTimer, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_DLD4, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _glimpseMinDistance, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _glimpseMaxDistance, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _killerGlimpseCooldown, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _killerGlimpseDuration, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _wakeUpBySkillCheckCount, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _fellAsleepCount, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _forcedAsleep, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_8WOA, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _linkedWaker, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _useScriptedKillerVisibility, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_W248, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, _showKillerInstantly, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperDreamworldComponent, UnknownData_IXM5, 0x01F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperDreamworldComponent, 0x01F8);
		}

		// class UCamperEndGameComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CamperEndGameComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperEndGameComponent, UnknownData_QXKB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperEndGameComponent, _endGameEntityClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperEndGameComponent, UnknownData_8SFW, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperEndGameComponent, _delayBeforeSacrifice, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperEndGameComponent, _readyToBeSacrificed, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperEndGameComponent, UnknownData_ZJ9W, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperEndGameComponent, 0x0118);
		}

		// class UCamperExposerInstance : public Uactor
		TEST_METHOD(Class__DeadByDaylight__CamperExposerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperExposerInstance, IsInterior, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperExposerInstance, UnknownData_BH4U, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperExposerInstance, _audioAgravationLevelRtpc, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperExposerInstance, UnknownData_C0A4, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperExposerInstance, 0x0260);
		}

		// class UCamperHealthComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CamperHealthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, OnHealedDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, OnInjuredBleedoutStarted, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, OnInjuredBleedoutEnded, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, OnInjuredBleedoutKO, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, UnknownData_GNKJ, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, OnDamageStateChanged, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, OnDamageStateChangedCosmetic, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _bleedoutBaseDuration, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _inInjuredBleedOut, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _bleedOutTimer, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, UnknownData_GL4F, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _currentHealthStateCount, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, UnknownData_IMWU, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _numHealthyHeals, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _dyingTimer, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, UnknownData_FRFZ, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _healFromDyingChargeable, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _healFromInjuredChargeable, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _mendChargeable, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, _injuredBleedoutInstigator, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperHealthComponent, UnknownData_X28O, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperHealthComponent, 0x0228);
		}

		// class UPlayerInteractable : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__PlayerInteractable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInteractable, 0x02D8);
		}

		// class UCamperInteractable : public UPlayerInteractable
		TEST_METHOD(Class__DeadByDaylight__CamperInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, UnknownData_G8CG, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, HealingInteractors, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _killCharge, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _snapOutOfItCharge, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _wakeUpCharge, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _activator, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, UnknownData_8ZQ0, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _killInteractor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _killInteractionZone, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperInteractable, _killHealthyInteractionZone, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperInteractable, 0x0390);
		}

		// class UDBDCharacterMovementComponent : public UCharacterMovementComponent
		TEST_METHOD(Class__DeadByDaylight__DBDCharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, ProjectedWallSlidingFactor, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, RandomInputFrontMultiplier, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, RandomInputSideMultiplier, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, RandomInputBackMultiplier, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, UnknownData_4D9K, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, _forceUseDropStaggerFix, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, UnknownData_JP0Y, 0x06C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, _velocityAdditiveStrategy, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, _inputAccelerationConstraintStrategy, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, _lookAtTarget, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterMovementComponent, UnknownData_MIBK, 0x0898);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCharacterMovementComponent, 0x08C0);
		}

		// class UCamperMovementComponent : public UDBDCharacterMovementComponent
		TEST_METHOD(Class__DeadByDaylight__CamperMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperMovementComponent, MaxCrawlSpeed, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperMovementComponent, MaxRunSpeed, 0x08C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperMovementComponent, MaxDashAcceleration, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperMovementComponent, _defaultRotationRate, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperMovementComponent, _rotationRateWhileCrawling, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperMovementComponent, UnknownData_J4MV, 0x08E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperMovementComponent, 0x08F0);
		}

		// class UDBDBasePlayer : public Ucharacter
		TEST_METHOD(Class__DeadByDaylight__DBDBasePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, OnCustomizationChanged, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, _semanticGameplayTags, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, _leftFootGroundDetector, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, _rightFootGroundDetector, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, UnknownData_C16J, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, _characterIndex, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBasePlayer, UnknownData_ZBQY, 0x051C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBasePlayer, 0x0540);
		}

		// class UdbdPlayer : public UDBDBasePlayer
		TEST_METHOD(Class__DeadByDaylight__dbdPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_BBVT, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AllowInterrupting, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_EJ2P, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, MinFallHeight, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, IsInterruptable, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AllowNavigationInput, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AllowNavigationBackwardInput, 0x057A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AllowTurningInput, 0x057B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AllowPitchInput, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AllowStrafeInput, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, IsInInteractionUpdate, 0x057E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, IsInteractionChargeCompleted, 0x057F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, PitchLimitLower, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, PitchLimitUpper, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, StrafingOffset, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, PelvisHeight, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, PelvisHeightForPounceOnStandingCamper, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, PelvisHeightForPounceOnCrouchingCamper, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_4KJQ, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, Authority_OnAttackedDelegate, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnDamageTargetDelegate, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnSensed, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnAnimNotify_Pickup, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnAnimNotify_Release, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, Authority_OnSecondaryActionInput, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnFirstPersonModeChanged, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnDreamworldComponentSet, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CameraBoom, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_4BWZ, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, ForceSkillChecks, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_6DOT, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, IKLeftHandTransform, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, IKRightHandTransform, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CameraResetSpeed, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_2T7Q, 0x0704);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, BlinkFOVCurve, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CurrentBlinkDistance, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CurrentBlinkChargePercent, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AverageSpeedBufferTime, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, AlmostCurrentSpeedBufferTime, 0x072C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, GamepadYawCurve, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, GamepadPitchCurve, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, GamepadSettingToYawRateCurve, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, GamepadSettingToPitchRateCurve, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, JoyconSettingToYawRateCurve, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, JoyconSettingToPitchRateCurve, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnIsCrouchedChanged, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnRunningAndMovingChanged, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_5IYY, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, OnLocallyObservedChangedForPlayer, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, camera, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, MaterialHelper, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_QP5Y, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, interactable, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _characterInventoryComponent, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CarryJointName, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _pitchOffsetForInteractionPriority, 0x07F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _renderedPixelCounter, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _standingOcclusionBox, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _crouchingOcclusionBox, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _activator, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, isInteracting, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_D8YT, 0x0819);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _aiCanBeSeenTestCrouchScale, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _aiCanBeSeenTestRightOffset, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _aiCanBeSeenTestHighOffset, 0x0824);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _aiCanBeSeenTestLowOffset, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, ClearPathTestRadiusMultiplier, 0x082C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, ClearPathTestHeightMultiplier, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, LocationClearTestRadiusMultiplier, 0x0834);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, LocationClearTestHeightMultiplier, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_W9YY, 0x083C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, ClearPathTestStepHeight, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, MouseTurnSpeedMultiplier, 0x0854);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, MouseLookUpSpeedMultiplier, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_R6SU, 0x085C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, DeathSound, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CurrentCamperState, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_6A02, 0x0869);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, CollectableAttachPoint, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _offerings, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _stateMachine, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _interactionHandler, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _montagePlayer, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _perkManager, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _playerData, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _wiggleAxisFlickMasher, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _interactInputMasher, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _interactable, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_J19T, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _overlappingPlayers, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _guidingPlayer, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_VI1U, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _interactingPlayer, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_MLTW, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _nextAttackSubstate, 0x096C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_WVAO, 0x096D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _hitTargets, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _dreamworldComponent, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _characterChaseVisualComponent, 0x0988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _cameraHandlerComponent, 0x0990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _specialEventSpawnerComponent, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _itemDropOffPosition, 0x09A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _perceptionStimuliComponent, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _ignoreActors, 0x09B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _ignoreBelowActors, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _overlappingActors, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, EffectCameraTypeSettings, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_HDHK, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _blindingChargeableComponent, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_PBC5, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _shouldUpdateStateMachineDriverOnPossessed, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_5DO7, 0x0AB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _blindableComponent, 0x0AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_O3MN, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _eventListener, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_4304, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _chaseComponent, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _meatHookZoneDetector, 0x0AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _basementZoneDetector, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_N5T8, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _bookmarkedInteraction, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _detectionZoneMap, 0x0B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_1ZFZ, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _authoritativeMovementComponent, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_Y997, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _screenAspectRatio, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_UB3V, 0x0F0C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _objectState, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _audioFXComponent, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _playerPerspectiveComponent, 0x0F48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_TIT0, 0x0F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _characterSightComponent, 0x0F58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_6NZU, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _characterSightableComponent, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_ETCW, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _interactionDetectorComponent, 0x0F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _clippablePrimitivesRegistererComponent, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _clippableProviderComponent, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _dynCapsuleResizer, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _playerGameRelevancyComponent, 0x0FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _contextualQuestComponent, 0x0FA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, UnknownData_CAZI, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _questEventHandler, 0x0FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _presentationChargeableProgressComponent, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _currentGamepadYawCurve, 0x0FE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _currentGamepadPitchCurve, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdbdPlayer, _associatedPlayerStateCache, 0x0FF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdbdPlayer, 0x0FF8);
		}

		// class UInteractionMechanic : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionMechanic, UnknownData_VTFA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionMechanic, 0x0038);
		}

		// class UInteractiveToolPropertySet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_JZBH, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, CachedProperties, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, bIsPropertySetEnabled, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolPropertySet, UnknownData_EMZN, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolPropertySet, 0x0058);
		}

		// class UInternalToolFrameworkActor : public Uactor
		TEST_METHOD(Class__InteractiveToolsFramework__InternalToolFrameworkActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInternalToolFrameworkActor, 0x0230);
		}

		// class UInteractiveToolBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolBuilder, 0x0030);
		}

		// class UInteractiveTool : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_Q1D3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, InputBehaviors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, ToolPropertyObjects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveTool, UnknownData_ZH46, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveTool, 0x0088);
		}

		// class USingleClickTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickTool, UnknownData_XYD6, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickTool, 0x0090);
		}

		// class UMultiSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__MultiSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiSelectionTool, UnknownData_7ZXD, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiSelectionTool, 0x0098);
		}

		// class USingleSelectionTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__SingleSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleSelectionTool, UnknownData_XNKJ, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleSelectionTool, 0x0090);
		}

		// class UMeshSurfacePointToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointToolBuilder, UnknownData_AFDB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointToolBuilder, 0x0038);
		}

		// class UMeshSurfacePointTool : public USingleSelectionTool
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSurfacePointTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSurfacePointTool, UnknownData_4ET5, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSurfacePointTool, 0x00C8);
		}

		// class UBaseBrushTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__InteractiveToolsFramework__BaseBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, bInBrushStroke, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_7XM2, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, LastBrushStamp, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, UnknownData_CZBM, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, PropertyClass, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseBrushTool, BrushStampIndicator, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseBrushTool, 0x01D0);
		}

		// class UBrushBaseProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__InteractiveToolsFramework__BrushBaseProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bSpecifyRadius, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_OU4P, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushRadius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushStrength, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, BrushFalloffAmount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowStrength, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, bShowFalloff, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBaseProperties, UnknownData_K7PP, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBaseProperties, 0x0070);
		}

		// class UInteractiveGizmo : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, UnknownData_GV4K, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmo, InputBehaviors, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmo, 0x0040);
		}

		// class UInputBehavior : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehavior, UnknownData_0T91, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehavior, 0x0038);
		}

		// class UAnyButtonInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__AnyButtonInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyButtonInputBehavior, UnknownData_9WX8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyButtonInputBehavior, 0x0080);
		}

		// class UInteractiveGizmoBuilder : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoBuilder, 0x0030);
		}

		// class UAxisAngleGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmoBuilder, 0x0030);
		}

		// class UAxisAngleGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisAngleGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_33G2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AxisSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, AngleSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, HitTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, StateTarget, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, bInInteraction, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_JRI5, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationOrigin, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationAxis, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneX, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, RotationPlaneY, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartPoint, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurPoint, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionStartAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, InteractionCurAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisAngleGizmo, UnknownData_XH71, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisAngleGizmo, 0x00F8);
		}

		// class UAxisPositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmoBuilder, 0x0030);
		}

		// class UAxisPositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__AxisPositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_5L9U, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, AxisSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, HitTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, StateTarget, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bEnableSignedAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, bInInteraction, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_NK78, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionOrigin, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionAxis, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartPoint, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurPoint, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionStartParameter, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, InteractionCurParameter, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, ParameterSign, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisPositionGizmo, UnknownData_ON5A, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisPositionGizmo, 0x00E0);
		}

		// class UGizmoConstantAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, UnknownData_87DU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, origin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantAxisSource, direction, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantAxisSource, 0x0050);
		}

		// class UGizmoConstantFrameAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoConstantFrameAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, UnknownData_LUKJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, origin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, direction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoConstantFrameAxisSource, TangentY, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoConstantFrameAxisSource, 0x0068);
		}

		// class UAnimNotify_PlayMontageNotify : public UanimNotify
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, notifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotify, UnknownData_G870, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotify, 0x0050);
		}

		// class UGizmoWorldAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoWorldAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, UnknownData_3Z74, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, origin, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoWorldAxisSource, AxisIndex, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoWorldAxisSource, 0x0048);
		}

		// class UAnimNotify_PlayMontageNotifyWindow : public UAnimNotifyState
		TEST_METHOD(Class__AnimGraphRuntime__AnimNotify_PlayMontageNotifyWindow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, notifyName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayMontageNotifyWindow, UnknownData_WAIU, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayMontageNotifyWindow, 0x0048);
		}

		// class UGizmoComponentAxisSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentAxisSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_L8FG, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, component, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, AxisIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, bLocalAxes, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentAxisSource, UnknownData_X31E, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentAxisSource, 0x0048);
		}

		// class UAnimSequencerInstance : public UanimInstance
		TEST_METHOD(Class__AnimGraphRuntime__AnimSequencerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequencerInstance, UnknownData_A8LC, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequencerInstance, 0x0280);
		}

		// class UKismetAnimationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimGraphRuntime__KismetAnimationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetAnimationLibrary, 0x0030);
		}

		// class UcamperPlayer : public UdbdPlayer
		TEST_METHOD(Class__DeadByDaylight__camperPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_1D7G, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_RP99, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnHookedStateChanged, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnGuidedStateChanged, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnPickedUpDelegate, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnPickedUpEndDelegate, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnHPSlotChanged, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_AOJE, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnImmobilizeStateChanged, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_4Y2A, 0x1098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, OnHookEscapeFailedCosmetic, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, InputMashCount, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, InputMashDecayTime, 0x10DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, ReverseBearTrapAttachSocket, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, StruggleMashDelay, 0x10EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, isBeingDissolved, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, IsWiggleProgressionAllowed, 0x10F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_L0VS, 0x10F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, WiggleMashDelay, 0x10F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, FootprintAudibleRange, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_GMW4, 0x10FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, StalkedComponent, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, CameraResetToleranceYaw, 0x1108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, CameraResetTolerancePitch, 0x110C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, CameraRecenterOffsetYaw, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, CameraRecenterOffsetPitch, 0x1114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, Gender, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_WMMD, 0x1119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, DropStaggerDuration, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, DropStaggerMaxSpeed, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, TimeforDeathWhileCrawling, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, TimeforDeathWhileHooked, 0x1134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, SecondsUntilFootprintTrigger, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, TriggerAfflictionHUDIntro, 0x113C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_R4TL, 0x113D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _stillnessTracker, 0x11B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, PartiallyHiddenStillnessThreshold, 0x11C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_HGRT, 0x11C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _escape, 0x11C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _overlappingEscape, 0x11D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, ProximityZone, 0x11D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_7TWX, 0x11E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _dropStaggerTimer, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_X9K9, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, SlashableZone, 0x1228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, HookSlashableZone, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _terrorRadiusReceiverComponent, 0x1238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, CrouchCapsuleHalfHeight, 0x1240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, IKOffsetRightFoot, 0x1244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, IKOffsetLeftFoot, 0x1248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_4DUW, 0x124C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _camperSensor, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _surviveTimerScoreComponent, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_MQ3E, 0x1290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _foundCampers, 0x12A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _potentialSaviors, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_Q355, 0x12C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _healthComponent, 0x12D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _hpSlot01, 0x12D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _hpSlot02, 0x12E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _mendChargeable, 0x12E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _bloodTrailSettings, 0x12F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _bloodTrailComponent, 0x12F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _carryEscapeProgress, 0x1300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _killerInstinctComponent, 0x1308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _cameraAttachment, 0x1310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _charmSpawnerComponent, 0x1318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _hookableComponent, 0x1320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _struggleComponent, 0x1328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _protectionHitComponent, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _screamComponent, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _positionRecorder, 0x1340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_AO70, 0x1348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _runInputPressed, 0x13FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_00BQ, 0x13FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _trapIndicatorActive, 0x1421);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_8ZJU, 0x1422);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _revealedSurvivor, 0x1424);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_VW2W, 0x142C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _camperEndGameComponent, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _noOcclusionAkComponent, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _injuredGruntDistance, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _crawlingGruntDistance, 0x1444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _trappedGruntDistance, 0x1448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _runningGruntDistance, 0x144C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _fallingGruntDistance, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _guidedGruntDistance, 0x1454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _hookedGruntDistance, 0x1458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _isHealingKOCamper, 0x145C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _isSkillCheckFailed, 0x145D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _isBeingSacrificed, 0x145E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_DNZB, 0x145F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, _meshMover, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UcamperPlayer, UnknownData_CEBL, 0x14D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UcamperPlayer, 0x14E0);
		}

		// class UBrushStampIndicatorBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicatorBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicatorBuilder, 0x0030);
		}

		// class UBrushStampIndicator : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__BrushStampIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushFalloff, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, BrushNormal, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawIndicatorLines, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawRadiusCircle, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawFalloffCircle, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_SQFC, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SampleStepCount, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineColor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, LineThickness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDepthTested, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, bDrawSecondaryLines, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_M9M6, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineThickness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, SecondaryLineColor, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_EQDB, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, AttachedComponent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushStampIndicator, UnknownData_U6CL, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushStampIndicator, 0x00B8);
		}

		// class UPlayMontageCallbackProxy : public UObject
		TEST_METHOD(Class__AnimGraphRuntime__PlayMontageCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnBlendOut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnInterrupted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyBegin, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, OnNotifyEnd, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayMontageCallbackProxy, UnknownData_63FO, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayMontageCallbackProxy, 0x00B0);
		}

		// class UClickDragInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_LMRE, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, bUpdateModifiersDuringDrag, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragInputBehavior, UnknownData_4V8J, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragInputBehavior, 0x0140);
		}

		// class ULocalClickDragInputBehavior : public UClickDragInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__LocalClickDragInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalClickDragInputBehavior, UnknownData_D8CK, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalClickDragInputBehavior, 0x0280);
		}

		// class USequencerAnimationSupport : public UInterface
		TEST_METHOD(Class__AnimGraphRuntime__SequencerAnimationSupport)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USequencerAnimationSupport, 0x0030);
		}

		// class UClickDragToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragToolBuilder, 0x0030);
		}

		// class UClickDragTool : public UInteractiveTool
		TEST_METHOD(Class__InteractiveToolsFramework__ClickDragTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClickDragTool, UnknownData_9T82, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClickDragTool, 0x0090);
		}

		// class UGizmoBaseComponent : public UprimitiveComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, color, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, HoverSizeMultiplier, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, PixelHitDistanceThreshold, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseComponent, UnknownData_SFOE, 0x0440);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseComponent, 0x0448);
		}

		// class UGizmoArrowComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, direction, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Gap, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, length, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, Thickness, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoArrowComponent, UnknownData_RHBT, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoArrowComponent, 0x0470);
		}

		// class UGizmoBoxComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, origin, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_L141, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, rotation, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, Dimensions, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, LineThickness, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bRemoveHiddenLines, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, bEnableAxisFlip, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBoxComponent, UnknownData_RPLH, 0x0482);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBoxComponent, 0x0490);
		}

		// class UGizmoCircleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoCircleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, normal, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, radius, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, Thickness, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, NumSides, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bViewAligned, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, bOnlyAllowFrontFacingHits, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoCircleComponent, UnknownData_C5RW, 0x0462);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoCircleComponent, 0x0470);
		}

		// class UGizmoTransformSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformSource, 0x0030);
		}

		// class UGizmoAxisSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisSource, 0x0030);
		}

		// class UGizmoClickTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoClickTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoClickTarget, 0x0030);
		}

		// class UGizmoLambdaStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaStateTarget, UnknownData_TXCT, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaStateTarget, 0x00C0);
		}

		// class UGizmoObjectModifyStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoObjectModifyStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoObjectModifyStateTarget, UnknownData_R2K1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoObjectModifyStateTarget, 0x0060);
		}

		// class UGizmoTransformChangeStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformChangeStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_UO5X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, TransactionManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformChangeStateTarget, UnknownData_6OE6, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformChangeStateTarget, 0x00F0);
		}

		// class UGizmoActor : public UInternalToolFrameworkActor
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoActor, 0x0230);
		}

		// class UStateMachine : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStateMachine, UnknownData_AZU6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStateMachine, _netStateIDStackInitial, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStateMachine, UnknownData_KAIQ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStateMachine, 0x0130);
		}

		// class UTransformGizmoActor : public UGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, TranslateX, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, TranslateY, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, TranslateZ, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, TranslateYZ, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, TranslateXZ, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, TranslateXY, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, RotateX, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, RotateY, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, RotateZ, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, UniformScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, AxisScaleX, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, AxisScaleY, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, AxisScaleZ, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, PlaneScaleYZ, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, PlaneScaleXZ, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoActor, PlaneScaleXY, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoActor, 0x02B0);
		}

		// class UPlayerStateMachine : public UStateMachine
		TEST_METHOD(Class__DeadByDaylight__PlayerStateMachine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStateMachine, 0x0130);
		}

		// class UCamperStateMachine : public UPlayerStateMachine
		TEST_METHOD(Class__DeadByDaylight__CamperStateMachine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperStateMachine, 0x0130);
		}

		// class UStillnessTrackerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__StillnessTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, SpeedThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, DistanceThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, DistanceDecay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, DecayWhileMoving, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, UnknownData_6L1K, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, StillnessThreshhold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, StillnessTimerLimit, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, DecaySpeedMultiplier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, UnknownData_3HKW, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, _trackedPlayer, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStillnessTrackerComponent, UnknownData_NWZF, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStillnessTrackerComponent, 0x00F0);
		}

		// class UTransformGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmoBuilder, UnknownData_0E5I, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmoBuilder, 0x00C0);
		}

		// class UTransformGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__TransformGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_AUC7, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveTarget, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bSnapToWorldGrid, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, bUseContextCoordinateSystem, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_5XLU, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CurrentCoordinateSystem, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_2H8R, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_Q80S, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveComponents, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, NonuniformScaleComponents, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ActiveGizmos, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_THJ9, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, CameraAxisSource, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisXSource, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisYSource, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, AxisZSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisXSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisYSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnitAxisZSource, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, StateTarget, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, ScaledTransformSource, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformGizmo, UnknownData_QWAO, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformGizmo, 0x0190);
		}

		// class UCamperStillnessTrackerComponent : public UStillnessTrackerComponent
		TEST_METHOD(Class__DeadByDaylight__CamperStillnessTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, ChickenShitModifier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, LoudNoiseTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, UnknownData_X4XB, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, ExposerSpawnTimes, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, ExposerDespawnTimes, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, _exposerInstanceToSpawn, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, _exposerInstances, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, _interiorZone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperStillnessTrackerComponent, UnknownData_0PGL, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperStillnessTrackerComponent, 0x0150);
		}

		// class UTransformProxy : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__TransformProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_X7VR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bRotatePerObject, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, bSetPivotMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, UnknownData_0JAU, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, SharedTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformProxy, InitialSharedTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformProxy, 0x00F0);
		}

		// class UCartersSparkComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CartersSparkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCartersSparkComponent, _staticBlastEnabled, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCartersSparkComponent, UnknownData_02GH, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCartersSparkComponent, _totallyInsanePlayers, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCartersSparkComponent, _owningPlayer, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCartersSparkComponent, UnknownData_0NBN, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCartersSparkComponent, 0x0180);
		}

		// class UGizmoBaseTransformSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseTransformSource, UnknownData_6UBE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseTransformSource, 0x0050);
		}

		// class UGizmoComponentWorldTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentWorldTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, component, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, bModifyComponentOnTransform, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentWorldTransformSource, UnknownData_LLPC, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentWorldTransformSource, 0x0060);
		}

		// class UCDNPatchManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__CDNPatchManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, InstallDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, PakOrder, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, UnknownData_XK0U, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, PakMountPoint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, UnknownData_1KPN, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, _gameInstance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, UnknownData_AOJQ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, _currentContentToInstall, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, _remainingManifestsToInstall, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, _contentToInstall, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCDNPatchManager, UnknownData_NGZA, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCDNPatchManager, 0x0248);
		}

		// class UGizmoScaledTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoScaledTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, ChildTransformSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoScaledTransformSource, UnknownData_2TCA, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoScaledTransformSource, 0x00E0);
		}

		// class UGizmoTransformProxyTransformSource : public UGizmoBaseTransformSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoTransformProxyTransformSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoTransformProxyTransformSource, Proxy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoTransformProxyTransformSource, 0x0058);
		}

		// class UGizmoStateTarget : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoStateTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoStateTarget, 0x0030);
		}

		// class UCharacterChaseVisualComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CharacterChaseVisualComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterChaseVisualComponent, _vignetteMeshComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterChaseVisualComponent, _relativeLocation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterChaseVisualComponent, _relativeScale, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterChaseVisualComponent, _relativeRotation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterChaseVisualComponent, _fovModifyFactor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterChaseVisualComponent, UnknownData_2F1U, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterChaseVisualComponent, 0x0110);
		}

		// class UGizmoFloatParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoFloatParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoFloatParameterSource, 0x0030);
		}

		// class UCharacterCollection : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CharacterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCollection, UnknownData_YWTT, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCollection, _characters, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCollection, _killer, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCollection, _survivors, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterCollection, _otherCharacters, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCollection, 0x0240);
		}

		// class UGizmoVec2ParameterSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoVec2ParameterSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoVec2ParameterSource, 0x0030);
		}

		// class UGizmoLineHandleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLineHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, normal, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, HandleSize, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, Thickness, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, direction, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, length, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, bImageScale, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLineHandleComponent, UnknownData_K966, 0x046D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLineHandleComponent, 0x0470);
		}

		// class UCharacterCollectionUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__CharacterCollectionUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterCollectionUtilities, 0x0030);
		}

		// class UGizmoRectangleComponent : public UGizmoBaseComponent
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoRectangleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionX, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, DirectionY, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetX, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, OffsetY, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthX, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, LengthY, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, Thickness, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, SegmentFlags, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoRectangleComponent, UnknownData_PMO0, 0x0475);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoRectangleComponent, 0x0480);
		}

		// class UCharacterHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__CharacterHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterHelper, 0x0030);
		}

		// class UCharacterInfoScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__CharacterInfoScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterInfoScreen, UnknownData_6JVT, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterInfoScreen, 0x0138);
		}

		// class UGizmoLambdaHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLambdaHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLambdaHitTarget, UnknownData_XIPS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLambdaHitTarget, 0x00C0);
		}

		// class UCharacterInventoryComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CharacterInventoryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterInventoryComponent, UnknownData_CGPV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterInventoryComponent, _inventory, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterInventoryComponent, _generalAddons, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterInventoryComponent, _backpackInventory, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterInventoryComponent, _allAddons, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterInventoryComponent, 0x0140);
		}

		// class UGizmoComponentHitTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoComponentHitTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_GW88, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, component, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoComponentHitTarget, UnknownData_BAIN, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoComponentHitTarget, 0x0080);
		}

		// class UInputBehaviorSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputBehaviorSet, Behaviors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSet, 0x0040);
		}

		// class UInputBehaviorSource : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__InputBehaviorSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputBehaviorSource, 0x0030);
		}

		// class UInputRouter : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InputRouter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnHover, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, bAutoInvalidateOnCapture, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_E9EA, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, ActiveInputBehaviors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputRouter, UnknownData_4NYE, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputRouter, 0x00B8);
		}

		// class UInteractiveGizmoManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveGizmoManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_UZFN, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, ActiveGizmos, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_K343, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, GizmoBuilders, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveGizmoManager, UnknownData_0A4C, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveGizmoManager, 0x00C0);
		}

		// class UToolContextTransactionProvider : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolContextTransactionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolContextTransactionProvider, 0x0030);
		}

		// class UItemsAssetLibrary : public UAssetLibrary
		TEST_METHOD(Class__DeadByDaylight__ItemsAssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemsAssetLibrary, UnknownData_2JLG, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemsAssetLibrary, 0x0120);
		}

		// class UInteractiveToolManager : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_41GM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveLeftTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ActiveRightTool, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_M4AL, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, ToolBuilders, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolManager, UnknownData_INQH, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolManager, 0x0140);
		}

		// class UCharacterItemsAssetLibrary : public UItemsAssetLibrary
		TEST_METHOD(Class__DeadByDaylight__CharacterItemsAssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterItemsAssetLibrary, UnknownData_VHYB, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterItemsAssetLibrary, 0x0138);
		}

		// class UCharacterPositionRecorderConfigurator : public UBaseHitValidationConfigurator
		TEST_METHOD(Class__DeadByDaylight__CharacterPositionRecorderConfigurator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPositionRecorderConfigurator, UnknownData_GD0H, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterPositionRecorderConfigurator, 0x00D0);
		}

		// class UToolFrameworkComponent : public UInterface
		TEST_METHOD(Class__InteractiveToolsFramework__ToolFrameworkComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolFrameworkComponent, 0x0030);
		}

		// class UCharacterProgressionManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__CharacterProgressionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterProgressionManager, _gameInstance, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterProgressionManager, 0x0038);
		}

		// class UInteractiveToolsContext : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__InteractiveToolsContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, UnknownData_6K00, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, InputRouter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManager, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, GizmoManager, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveToolsContext, ToolManagerClass, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveToolsContext, 0x00A8);
		}

		// class UCharacterStatsHandlerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CharacterStatsHandlerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterStatsHandlerComponent, UnknownData_C3XL, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterStatsHandlerComponent, 0x00C8);
		}

		// class UIntervalGizmoActor : public UGizmoActor
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoActor, UpIntervalComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoActor, DownIntervalComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoActor, ForwardIntervalComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoActor, 0x0248);
		}

		// class UCharacterStatsUtilities : public UObject
		TEST_METHOD(Class__DeadByDaylight__CharacterStatsUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterStatsUtilities, 0x0030);
		}

		// class UIntervalGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmoBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmoBuilder, UnknownData_5S4K, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmoBuilder, 0x00C0);
		}

		// class UCharacterTool : public Uactor
		TEST_METHOD(Class__DeadByDaylight__CharacterTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, SpawnLocations, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _customizationData, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _animInstanceClass, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _animated, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, UseInGameSkeleton, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _showPower, 0x02BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _useMasterPoseForItems, 0x02BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _powerSocket, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _powerAttachmentRule, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, UnknownData_LZRF, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _overallLightingClass, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _showHelp, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _characters, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, _lighting, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterTool, UnknownData_MMHW, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterTool, 0x0338);
		}

		// class UIntervalGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__IntervalGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, StateTarget, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_JEGR, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, TransformProxy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveComponents, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, ActiveGizmos, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_SV5A, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisYSource, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, AxisZSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntervalGizmo, UnknownData_7UK5, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntervalGizmo, 0x0140);
		}

		// class UGizmoBaseFloatParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseFloatParameterSource, UnknownData_OY50, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseFloatParameterSource, 0x0050);
		}

		// class UCharacterToolPlayMode : public UCharacterTool
		TEST_METHOD(Class__DeadByDaylight__CharacterToolPlayMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterToolPlayMode, 0x0338);
		}

		// class UGizmoAxisIntervalParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisIntervalParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, FloatParameterSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MinParameter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisIntervalParameterSource, MaxParameter, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisIntervalParameterSource, 0x0068);
		}

		// class UCharacterXPManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__CharacterXPManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterXPManager, UnknownData_E0XS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterXPManager, _gameInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterXPManager, UnknownData_BWBO, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterXPManager, 0x0110);
		}

		// class UKeyAsModifierInputBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__KeyAsModifierInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKeyAsModifierInputBehavior, UnknownData_ZA1M, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKeyAsModifierInputBehavior, 0x0130);
		}

		// class UchargeableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__chargeableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, OnInteractionEmptiedEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, UnknownData_IRPU, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, SkillCheckResponseAestheticDelegate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, SkillCheckResponseAuthorityDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, ChargeAppliedAuthorityDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, ChargeableCompletionPercentChangeAuthorityDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, ChargeableCompletionPercentChangeCosmeticDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, DechargeBeginDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, DechargeEndDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, AllowSkillChecksAtFullCharge, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, UnknownData_T9F7, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, ChargeableComponentID, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, DechargeDelay, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, UnknownData_50EP, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _currentCharge, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, UnknownData_JM8R, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _skillCheckFailurePenaltyTimer, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _dechargeTimer, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _chargesThisFrame, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _instigatorsSinceEmpty, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _tunableValueMap, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _isCharging, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, UnknownData_CKIN, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _playersWhoDidSkillCheck, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _startingChargePercent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _dechargeRate, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _isDecharging, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, _stopDechargingWhenComplete, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UchargeableComponent, UnknownData_4MJS, 0x028A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UchargeableComponent, 0x0290);
		}

		// class UMouseHoverBehavior : public UInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MouseHoverBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMouseHoverBehavior, UnknownData_BEUH, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseHoverBehavior, 0x00A0);
		}

		// class UMultiClickSequenceInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__MultiClickSequenceInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiClickSequenceInputBehavior, UnknownData_JHPW, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiClickSequenceInputBehavior, 0x0130);
		}

		// class UGizmoLocalFloatParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalFloatParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, Value, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, LastChange, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalFloatParameterSource, UnknownData_S9FU, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalFloatParameterSource, 0x0060);
		}

		// class UGizmoBaseVec2ParameterSource : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoBaseVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoBaseVec2ParameterSource, UnknownData_E0M4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoBaseVec2ParameterSource, 0x0050);
		}

		// class UGizmoLocalVec2ParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoLocalVec2ParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, Value, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoLocalVec2ParameterSource, LastChange, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoLocalVec2ParameterSource, 0x0068);
		}

		// class UGizmoAxisTranslationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_GUZJ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, LastChange, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationAxis, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, UnknownData_R3DY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisTranslationParameterSource, InitialTransform, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisTranslationParameterSource, 0x0110);
		}

		// class UChargeableProgressProviderComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ChargeableProgressProviderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeableProgressProviderComponent, UnknownData_XQUV, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargeableProgressProviderComponent, 0x00C8);
		}

		// class UChargedAttackStateComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ChargedAttackStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargedAttackStateComponent, UnknownData_MQKT, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargedAttackStateComponent, 0x00C0);
		}

		// class UGizmoPlaneTranslationParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneTranslationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_6UNK, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, Parameter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, LastChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationOrigin, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationNormal, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, CurTranslationAxisY, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, UnknownData_TVUK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneTranslationParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneTranslationParameterSource, 0x0130);
		}

		// class UChargerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ChargerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, UnknownData_RVK6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, ChargerComponentID, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, OnChargeStateChange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, OnChargePercentChange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, UnknownData_T8S9, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, EnergyType, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, UnknownData_P8JR, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, _currentEnergyLevel, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, _maxEnergyLevel, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargerComponent, UnknownData_P7M6, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargerComponent, 0x0118);
		}

		// class UGizmoAxisRotationParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisRotationParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, AxisSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, TransformSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, angle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, LastChange, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationAxis, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, CurRotationOrigin, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, UnknownData_UWOC, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisRotationParameterSource, InitialTransform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisRotationParameterSource, 0x00D0);
		}

		// class UCharm : public Uactor
		TEST_METHOD(Class__DeadByDaylight__Charm)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharm, UnknownData_UJIZ, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharm, _skeletalMeshComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharm, UnknownData_0SA3, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharm, 0x0248);
		}

		// class UGizmoUniformScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoUniformScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, AxisSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, TransformSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, ScaleMultiplier, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, Parameter, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, LastChange, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleNormal, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, CurScaleAxisY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, UnknownData_Q277, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoUniformScaleParameterSource, InitialTransform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoUniformScaleParameterSource, 0x00F0);
		}

		// class UCharmAttachable : public UInterface
		TEST_METHOD(Class__DeadByDaylight__CharmAttachable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharmAttachable, 0x0030);
		}

		// class UCharmAttacher : public Uactor
		TEST_METHOD(Class__DeadByDaylight__CharmAttacher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmAttacher, OnAttachedOnActor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmAttacher, OnCharmAnimationTagsChanged, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmAttacher, _chain, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmAttacher, _attachedCharm, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharmAttacher, 0x0260);
		}

		// class UGizmoAxisScaleParameterSource : public UGizmoBaseFloatParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoAxisScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, AxisSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, TransformSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, ScaleMultiplier, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, Parameter, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, LastChange, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleAxis, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, CurScaleOrigin, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, UnknownData_7IET, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoAxisScaleParameterSource, InitialTransform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoAxisScaleParameterSource, 0x00D0);
		}

		// class UCharmSpawnerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CharmSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmSpawnerComponent, SocketRootName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmSpawnerComponent, UnknownData_XAGQ, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmSpawnerComponent, CharmSlots, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmSpawnerComponent, ScaleCharm, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharmSpawnerComponent, UnknownData_G7GZ, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharmSpawnerComponent, 0x00E8);
		}

		// class UChaseComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ChaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseComponent, OnChaseStarted, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseComponent, OnChaseEnded, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseComponent, OnAllChaseEnded, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseComponent, _isInChase, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaseComponent, 0x0118);
		}

		// class UGizmoPlaneScaleParameterSource : public UGizmoBaseVec2ParameterSource
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoPlaneScaleParameterSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_PP1J, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, AxisSource, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, TransformSource, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, ScaleMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, Parameter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, LastChange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleOrigin, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisX, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, CurScaleAxisY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, UnknownData_GKHV, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoPlaneScaleParameterSource, InitialTransform, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoPlaneScaleParameterSource, 0x0130);
		}

		// class UChaseeCharacterComponent : public UChaseComponent
		TEST_METHOD(Class__DeadByDaylight__ChaseeCharacterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaseeCharacterComponent, UnknownData_DXBC, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaseeCharacterComponent, 0x0178);
		}

		// class UChaserCharacterComponent : public UChaseComponent
		TEST_METHOD(Class__DeadByDaylight__ChaserCharacterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, UnknownData_F6J3, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, _camperSensor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, _chaseUpdateInfo, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, _chasedPlayers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, _authority_survivorsWhoStunnedKillerByPalletDuringChase, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, UnknownData_74QZ, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaserCharacterComponent, _preventChaseTags, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaserCharacterComponent, 0x01F0);
		}

		// class UPlanePositionGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmoBuilder, 0x0030);
		}

		// class UPlanePositionGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__InteractiveToolsFramework__PlanePositionGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_ISMD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, AxisSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSource, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, HitTarget, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, StateTarget, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bEnableSignedAxis, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipX, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bFlipY, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, bInInteraction, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionOrigin, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionNormal, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisX, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionAxisY, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartPoint, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurPoint, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionStartParameter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, InteractionCurParameter, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, ParameterSigns, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanePositionGizmo, UnknownData_0CYZ, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanePositionGizmo, 0x0108);
		}

		// class UChatManager : public Uactor
		TEST_METHOD(Class__DeadByDaylight__ChatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatManager, _gameInstance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatManager, UnknownData_6DUB, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatManager, 0x0250);
		}

		// class UCheatUtilities : public UObject
		TEST_METHOD(Class__DeadByDaylight__CheatUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatUtilities, 0x0030);
		}

		// class UChunkingManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__ChunkingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChunkingManager, _gameInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChunkingManager, UnknownData_8TB0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChunkingManager, 0x0060);
		}

		// class USelectionSet : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__SelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelectionSet, UnknownData_S4AM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectionSet, 0x0048);
		}

		// class UCinematicManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__CinematicManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicManager, UnknownData_V8GQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCinematicManager, _cinematicQueue, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicManager, 0x0058);
		}

		// class UMeshSelectionSet : public USelectionSet
		TEST_METHOD(Class__InteractiveToolsFramework__MeshSelectionSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Vertices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Edges, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Faces, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionSet, Groups, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionSet, 0x0088);
		}

		// class USingleClickInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_8ILV, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, HitTestOnRelease, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleClickInputBehavior, UnknownData_7XIA, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickInputBehavior, 0x0130);
		}

		// class UCinematicScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__CinematicScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCinematicScreen, 0x0120);
		}

		// class UClientStartupInitializerInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ClientStartupInitializerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClientStartupInitializerInterface, 0x0030);
		}

		// class USingleClickToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__InteractiveToolsFramework__SingleClickToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleClickToolBuilder, 0x0030);
		}

		// class UClipManager : public Uactor
		TEST_METHOD(Class__DeadByDaylight__ClipManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipManager, _clippingZones, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipManager, _meshComponents, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipManager, _dissolvedMeshes, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipManager, _normal2dissolve, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipManager, _dissolve2normal, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClipManager, _sphericalDissolveMaterials, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClipManager, 0x0348);
		}

		// class UGizmoNilStateTarget : public UObject
		TEST_METHOD(Class__InteractiveToolsFramework__GizmoNilStateTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGizmoNilStateTarget, UnknownData_4VUW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGizmoNilStateTarget, 0x0038);
		}

		// class UCollectableCollection : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CollectableCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectableCollection, _collectables, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectableCollection, UnknownData_OGH8, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectableCollection, 0x0100);
		}

		// class UCombinedPartyFriendFacade : public UObject
		TEST_METHOD(Class__DeadByDaylight__CombinedPartyFriendFacade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombinedPartyFriendFacade, UnknownData_YA23, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombinedPartyFriendFacade, 0x0168);
		}

		// class UCombinedSpecialEventDataUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__CombinedSpecialEventDataUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombinedSpecialEventDataUtilities, 0x0030);
		}

		// class UConsentManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__ConsentManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsentManager, UnknownData_QXAV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsentManager, 0x00A0);
		}

		// class UContentScheduleManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__ContentScheduleManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContentScheduleManager, UnknownData_ESMT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContentScheduleManager, _availableMapLibrary, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentScheduleManager, 0x0140);
		}

		// class UContextualQuestComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ContextualQuestComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualQuestComponent, UnknownData_Y9WO, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualQuestComponent, _specialBehaviourObjectsInfo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualQuestComponent, _isInitialized, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextualQuestComponent, UnknownData_TLZI, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextualQuestComponent, 0x00F8);
		}

		// class UControllerPairingManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__ControllerPairingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerPairingManager, _gameInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControllerPairingManager, UnknownData_DW9U, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControllerPairingManager, 0x0040);
		}

		// class UCooldownTimerPerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__CooldownTimerPerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCooldownTimerPerkIconStrategy, 0x0030);
		}

		// class UCoreCursor : public UUserWidget
		TEST_METHOD(Class__DeadByDaylight__CoreCursor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreCursor, CursorScaleBox, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreCursor, 0x0268);
		}

		// class UCoreHudRootWidget : public UUserWidget
		TEST_METHOD(Class__DeadByDaylight__CoreHudRootWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, WidgetContainer, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, OuterContainer, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, SpectateContainer, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, ScaleHud, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, UnfocusedOpacity, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, UnknownData_YQE3, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, Test4kDpiScalingCurve, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, Test4kDpiCurveClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, Test4kDpiCurveWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, EndGameCollapseBarWidgetClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, EquippedItemWidgetClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, EquippedPowerWidgetClass, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, ExternalEffectsWidgetClass, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, HudAlertWidgetClass, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, HudObjectiveWidgetClass, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, InteractionProgressWidgetClass, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, InteractionPromptsContainerWidgetClass, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, ItemInteractionWidgetClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, LeaningArrowsWidgetClass, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, MatchResultWidgetClass, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, OfferingInteractionWidgetClass, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, PerksContainerWidgetClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, PingStatusWidgetClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, PlayerStatusesWidgetClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, ScreenIndicatorWidgetClass, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, SpectateBarWidgetClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, StartSequenceWidgetClass, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, StatusEffectWidgetClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, TestBuildFlagWidgetClass, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, TutorialMysteryNoteWidgetClass, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, TutorialObjectivesWidgetClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, TutorialPopupWidgetClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, _coreBaseViewInterfaces, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudRootWidget, HUDWidgetsFadeOutCompletedDelegate, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreHudRootWidget, 0x0378);
		}

		// class UCreditsScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__CreditsScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreditsScreen, 0x0120);
		}

		// class UCrossPlatformManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__CrossPlatformManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossPlatformManager, _crossPlayAllowedByPlatform, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossPlatformManager, _crossPlayAllowedByKraken, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrossPlatformManager, UnknownData_3R8Q, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrossPlatformManager, 0x0038);
		}

		// class UGeneratorDrivenActor : public Uactor
		TEST_METHOD(Class__DeadByDaylight__GeneratorDrivenActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorDrivenActor, _activated, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorDrivenActor, _generators, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorDrivenActor, 0x0250);
		}

		// class UCrowBomb : public UGeneratorDrivenActor
		TEST_METHOD(Class__DeadByDaylight__CrowBomb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _innerRadius, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _outerRadius, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _maxTakeoffDelay, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _numCrows, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _crowCenterDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _crowOuterDistance, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _eliminationSamples, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _eliminationStddev, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _meshComponentClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _crows, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, UnknownData_EASD, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _root, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _traceStart, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _traceEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, _landed, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowBomb, UnknownData_2S72, 0x02E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowBomb, 0x02E8);
		}

		// class UCrowdChoiceTugOfWarPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__CrowdChoiceTugOfWarPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdChoiceTugOfWarPopupScreen, 0x0140);
		}

		// class UCurrencyDisplayable : public Uactor
		TEST_METHOD(Class__DeadByDaylight__CurrencyDisplayable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyDisplayable, UnknownData_X49E, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyDisplayable, skeletalMeshComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurrencyDisplayable, _currencyMeshes, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurrencyDisplayable, 0x0290);
		}

		// class UCurveFloatNetIdSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__CurveFloatNetIdSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloatNetIdSubsystem, UnknownData_KQEM, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloatNetIdSubsystem, 0x0098);
		}

		// class UCustomizationDescription : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__CustomizationDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizationDescription, Parts, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizationDescription, 0x0048);
		}

		// class UCustomizationHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__CustomizationHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizationHelper, 0x0030);
		}

		// class UCustomizedAnimationComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CustomizedAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAnimationComponent, _owner, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAnimationComponent, _customizedSkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAnimationComponent, _defaultAnimClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAnimationComponent, UnknownData_23SD, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizedAnimationComponent, 0x00D8);
		}

		// class UCustomizedAudioComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CustomizedAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, OnCustomizedAudioSwitchStateChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, UnknownData_YHDK, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterNameDefaultSwitchState, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterSubNameDefaultSwitchState, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterHeadDefaultSwitchState, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterClothesDefaultSwitchState, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterShoesDefaultSwitchState, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterWeaponDefaultSwitchState, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterAmbianceDefaultSwitchState, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedAudioComponent, AudioCharacterStateDefaultSwitchState, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizedAudioComponent, 0x01E8);
		}

		// class UCustomizedSkeletalMesh : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__CustomizedSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, SlaveAnimInstanceClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, OnMeshSwitchBP, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, UnknownData_GDIZ, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, Components, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, Slaves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, _itemVfxs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, UnknownData_B2P1, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, _meshOwner, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, _characterIdOverride, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomizedSkeletalMesh, UnknownData_8YUM, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizedSkeletalMesh, 0x0210);
		}

		// class UDailyRitualsScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__DailyRitualsScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDailyRitualsScreen, UnknownData_PP1W, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDailyRitualsScreen, 0x0180);
		}

		// class UDBD_CrossDissolver : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBD_CrossDissolver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_CrossDissolver, NewMaterials, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_CrossDissolver, BaseSkeletalMesh, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_CrossDissolver, ClonedSkeletalMeshes, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBD_CrossDissolver, 0x00E8);
		}

		// class UDBD_SoundClipUtil : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBD_SoundClipUtil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundClipUtil, AudioMap, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundClipUtil, _audioEventMap, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundClipUtil, _objectsWhoHavePlayedASound, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundClipUtil, _nextSoundPlayTime, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBD_SoundClipUtil, 0x0178);
		}

		// class UDBD_SoundEventSpawner : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBD_SoundEventSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundEventSpawner, AtlantaSoundDescriptor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundEventSpawner, SoundDescriptor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundEventSpawner, UnknownData_RBPW, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBD_SoundEventSpawner, _loadedSoundAssets, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBD_SoundEventSpawner, 0x0268);
		}

		// class UEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__EyeTracker__EyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEyeTrackerFunctionLibrary, 0x0030);
		}

		// class UDBDAggregateCullDistanceVolumes : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBDAggregateCullDistanceVolumes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAggregateCullDistanceVolumes, 0x0230);
		}

		// class UDBDAggregateParticleSystemComponent : public UParticleSystemComponent
		TEST_METHOD(Class__DeadByDaylight__DBDAggregateParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAggregateParticleSystemComponent, EndFadeDistance, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAggregateParticleSystemComponent, LocatorComponentCache, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAggregateParticleSystemComponent, PendingReset, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAggregateParticleSystemComponent, UnknownData_CEOC, 0x0701);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAggregateParticleSystemComponent, 0x0710);
		}

		// class UDBDAggregateParticleManager : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBDAggregateParticleManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAggregateParticleManager, 0x0230);
		}

		// class UDBDLocatorComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__DBDLocatorComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDLocatorComponent, 0x0210);
		}

		// class UDBDAggregateParticleLocatorComponent : public UDBDLocatorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDAggregateParticleLocatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAggregateParticleLocatorComponent, Template, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAggregateParticleLocatorComponent, _particleComponent, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAggregateParticleLocatorComponent, 0x0220);
		}

		// class UDBDAIPlayerController : public UaiController
		TEST_METHOD(Class__DeadByDaylight__DBDAIPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPlayerController, _currentBehaviours, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIPlayerController, 0x0350);
		}

		// class UBHVRAnalytics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__BHVRAnalytics__BHVRAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBHVRAnalytics, 0x0030);
		}

		// class UDBDAITypes : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDAITypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Root, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Task_Slasher_AttackTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_AttackTarget, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Task_Slasher_CrawlingTarget, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_CrawlingTarget, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_Investigate_NotInChase, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_Investigate_InChase, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_Investigate_MoveAround, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_Patrol, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Slasher_Patrol_MoveAround, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_Standing, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_Flee_Run_InChase, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_Flee_Run_NotInChase, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_Patrol, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_RescueCarriedFriend, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_RemoveTrap, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_Chained, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_HelpOther, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AISkills_Context_Service_Camper_GoalInTerror, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AIBlackboard_InteractableWishList_FindSkill, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PointOfInterest_ActivatedDoor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PointOfInterest_ActivatedDoor_Opened, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PointOfInterest_BrokenGenerator, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PointOfInterest_OccupiedMeatHook, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PointOfInterest_HexTotem, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinLocation_WarpStart, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinLocation_WarpEnd, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinLocation_EQS, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinLocation_WishedObj, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinLocation_GoTo, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinObject_EQS, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAITypes, AI_PinObject_WishedObj, 0x01A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAITypes, 0x01B0);
		}

		// class UDBDAnalytics : public UBHVRAnalytics
		TEST_METHOD(Class__DeadByDaylight__DBDAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAnalytics, 0x0030);
		}

		// class UDBDAtlantaBloodwebDefinition : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDAtlantaBloodwebDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaBloodwebDefinition, UnknownData_N0N6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAtlantaBloodwebDefinition, 0x0140);
		}

		// class UDBDAtlantaDesignTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDAtlantaDesignTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, AtlantaStructuredDataClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, AtlantaStructuredData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, CloseNoiseIndicatorTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, ExitOpenedIndicatorTemplate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, GeneratorIndicatorTemplate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, HookedIndicatorTemplate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, KillerCuesIndicatorTemplate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, LoudNoiseIndicatorTemplate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, SafeZoneManagerTemplate, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGRoleSelectionScreenClass, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGAtlantaTutorialScreenClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGNavigationScreenClass, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGInboxScreenClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, SharedAuthenticationComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGPanelScreenClass, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGLobbyScreenClass, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, AtlantaChaseVignetteStaticMesh, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, AtlantaChaseVignetteMaterialInstance, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGGenericPopupClass, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGLevelUpPopupClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGTutorialPopupClass, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGTallyScreenClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGLoadingScreenWidgetClass, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGSplashScreenClass, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGCommandDebugButtonClass, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGAtlantaObjectiveClass, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGStoreScreenClass, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGCustomizationScreenClass, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGOverlayMenuScreenClass, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGPerkSelectionPopupClass, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGBloodStoreMysteryBoxPopupClass, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGRitualScreenClass, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGLoadingWidgetClass, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGAtlantaFriendListScreen, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGToastNotificationScreenClass, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaDesignTunables, UMGAtlantaLegalMenuScreenClass, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAtlantaDesignTunables, 0x06C8);
		}

		// class UDBDBaseInputHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDBaseInputHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseInputHandler, _pawn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseInputHandler, _cameraBoom, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseInputHandler, UnknownData_DJ55, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBaseInputHandler, 0x00D8);
		}

		// class UDBDAtlantaInputHandler : public UDBDBaseInputHandler
		TEST_METHOD(Class__DeadByDaylight__DBDAtlantaInputHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaInputHandler, UnknownData_7YR1, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAtlantaInputHandler, 0x0128);
		}

		// class UDBDAtlantaStructuredData : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDAtlantaStructuredData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAtlantaStructuredData, AtlantaHeartbeatActor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAtlantaStructuredData, 0x0060);
		}

		// class UDBDAttackerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDAttackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, OnAttackStartDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, OnAttackFinishDelegate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, UnknownData_74EZ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, _attacks, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, UnknownData_3M03, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, _requestedAttack, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, _currentAttack, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, UnknownData_42QZ, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAttackerComponent, _attackHitDelegates, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackerComponent, 0x0188);
		}

		// class UDBDAttackUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDAttackUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAttackUtilities, 0x0030);
		}

		// class UDBDAudioUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDAudioUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAudioUtilities, 0x0030);
		}

		// class UDBDAuthentication : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDAuthentication)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAuthentication, _localInfos, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAuthentication, _remoteInfos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAuthentication, _gameInstance, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAuthentication, 0x0058);
		}

		// class UDBDBaseGameMode : public UGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDBaseGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseGameMode, DebugSpecialEvent, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBaseGameMode, 0x0358);
		}

		// class UDBDBaseHud : public UHud
		TEST_METHOD(Class__DeadByDaylight__DBDBaseHud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseHud, _debugFont, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseHud, UnknownData_I20L, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBaseHud, 0x0330);
		}

		// class UDBDBaseMatchGameMode : public UDBDBaseGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDBaseMatchGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseMatchGameMode, _endGameComponent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseMatchGameMode, _escapeRequirementTracker, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBaseMatchGameMode, _theFence, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBaseMatchGameMode, 0x0370);
		}

		// class UHISMMaterialHelperSettings : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__HISMMaterialHelperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHISMMaterialHelperSettings, _meshMaterialOverride, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHISMMaterialHelperSettings, 0x0088);
		}

		// class UBatchDrawing : public UObject
		TEST_METHOD(Class__DeadByDaylight__BatchDrawing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchDrawing, _actorToSpawnInstancesInto, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchDrawing, _meshesToInstancingData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchDrawing, _hismMaterialHelperSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchDrawing, _materialPerThemeSettings, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBatchDrawing, 0x0098);
		}

		// class UDBDBloodWebDefinition : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDBloodWebDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBloodWebDefinition, UnknownData_TFAW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBloodWebDefinition, 0x0140);
		}

		// class UDBDBloodwebDefinitionBase : public UInterface
		TEST_METHOD(Class__DeadByDaylight__DBDBloodwebDefinitionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBloodwebDefinitionBase, 0x0030);
		}

		// class UDBDPlayerData : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerData, OnItemUseButtonStateChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerData, UnknownData_HCLU, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerData, _controlRotation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerData, UnknownData_QNXM, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerData, 0x0108);
		}

		// class UDBDCamperData : public UDBDPlayerData
		TEST_METHOD(Class__DeadByDaylight__DBDCamperData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCamperData, UnknownData_QL5Q, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCamperData, 0x0138);
		}

		// class UDBDCharacterMovementUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDCharacterMovementUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCharacterMovementUtilities, 0x0030);
		}

		// class UDBDCharacterUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDCharacterUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCharacterUtilities, 0x0030);
		}

		// class UDBDCheatManager : public UCheatManager
		TEST_METHOD(Class__DeadByDaylight__DBDCheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCheatManager, DBDMarketingCameraControllerRef, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCheatManager, DBDMarketingCameraControllerClass, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCheatManager, UnknownData_CLQQ, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCheatManager, _virtualKeyboard, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCheatManager, UnknownData_KFVW, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCheatManager, 0x00E0);
		}

		// class UGFxEngine : public UObject
		TEST_METHOD(Class__ScaleformUI__GFxEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxEngine, GCReferences, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxEngine, RefCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxEngine, UnknownData_Z57W, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGFxEngine, 0x0048);
		}

		// class UGFxMoviePlayer : public UObject
		TEST_METHOD(Class__ScaleformUI__GFxMoviePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, UnknownData_Z8RR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, SwfAssetName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, root, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, UnknownData_G8PZ, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, HitTestType, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, UnknownData_4L7C, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, RenderTexture, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, ExternalInterface, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, CaptureKeys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, FocusIgnoreKeys, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, ExternalTextures, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, RenderTextureMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, priority, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, UnknownData_U1RL, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, WidgetBindings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, SplitscreenLayoutYAdjust, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, UnknownData_34U6, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, OnFsCommand, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, OnStartCommand, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, OnCloseCommand, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, OnTickCommand, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, OnFocusGainedCommand, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, OnFocusLostCommand, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, UnknownData_2JVD, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxMoviePlayer, CachedMovieClipsArray, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGFxMoviePlayer, 0x01E0);
		}

		// class UGFxObject : public UObject
		TEST_METHOD(Class__ScaleformUI__GFxObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGFxObject, UnknownData_3EVX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGFxObject, 0x0060);
		}

		// class UScaleformBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ScaleformUI__ScaleformBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleformBlueprintLibrary, 0x0030);
		}

		// class USwfMovie : public UObject
		TEST_METHOD(Class__ScaleformUI__SwfMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, UnknownData_S78S, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, PackTextureSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, UnknownData_S62T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, TextureRescale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, UnknownData_35OH, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, TextureFormat, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, UnknownData_96DW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, SourceFile, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, FontMappings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, SourceFileTimestamp, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, ImportTimeStamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, RawData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, ReferencedAssetNames, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, References, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, UserReferences, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwfMovie, UnknownData_SFQZ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwfMovie, 0x01B8);
		}

		// class UDBDClientSyncer : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBDClientSyncer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDClientSyncer, _actorsToSpawnLocally, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDClientSyncer, _currentQueue, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDClientSyncer, UnknownData_GA8L, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDClientSyncer, _tileMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDClientSyncer, UnknownData_NE9F, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDClientSyncer, 0x0428);
		}

		// class UDBDClipRegionComponent : public UDBDLocatorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDClipRegionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDClipRegionComponent, AffectedMaterialsAndVariants, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDClipRegionComponent, 0x0220);
		}

		// class UColorBlindFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__ColorBlindFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBlindFunctionLibrary, 0x0030);
		}

		// class UColorBlindSettingsListenerInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ColorBlindSettingsListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBlindSettingsListenerInterface, 0x0030);
		}

		// class UDBDConsoleCommandUtilities : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDConsoleCommandUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDConsoleCommandUtilities, 0x0030);
		}

		// class UDBDCoreUMGDesignTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDCoreUMGDesignTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCoreUMGDesignTunables, CoreHudRootWidgetClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCoreUMGDesignTunables, CorePlayerControllerClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCoreUMGDesignTunables, 0x0090);
		}

		// class UDBDCustomizationTool : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBDCustomizationTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCustomizationTool, OverallLightingClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCustomizationTool, CustomizationData, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCustomizationTool, _spawnedActors, 0x0E18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCustomizationTool, UnknownData_U3SL, 0x0E28);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCustomizationTool, 0x0E30);
		}

		// class URitualEvaluatorBase : public UObject
		TEST_METHOD(Class__DeadByDaylight__RitualEvaluatorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URitualEvaluatorBase, 0x0030);
		}

		// class UDBDDebugCameraController : public UDebugCameraController
		TEST_METHOD(Class__DeadByDaylight__DBDDebugCameraController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDDebugCameraController, 0x0690);
		}

		// class UDBDGameMode : public UDBDBaseMatchGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, OnBlockCamperEscape, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, OnPlayersLoadoutsCreated, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, _killerPlayerControllerClass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, _survivorPlayerControllerClass, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, _initialPlayerStarts, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, UnknownData_0A0D, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, KillerCreationPositionOrder, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, AllowSpecialEvent, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, UnknownData_UNWC, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameMode, _gameEventAnalyticsComponent, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameMode, 0x0418);
		}

		// class UDBDDebugGameMode : public UDBDGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDDebugGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDebugGameMode, UnknownData_H4WB, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDebugGameMode, LoadoutIndex, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDebugGameMode, PlayersWithItems, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDebugGameMode, CamperPawnOverrides, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDebugGameMode, SlasherPawnOverrides, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDDebugGameMode, 0x04E0);
		}

		// class UDBDDebugInputComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDDebugInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDebugInputComponent, UnknownData_AAYD, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDDebugInputComponent, 0x00D8);
		}

		// class UDBDDesignTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDDesignTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, WinStreakThresholdLarge, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, WinStreakThresholdSmall, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, MaxFearTokens, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, UnknownData_1XAW, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, PerkLevelDefinitions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, MetaModifiers, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, RangedSurvivorAuraPerceptionModifiers, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, SurvivorRevelatoryAuraPerceptionModifiers, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, DisruptableAuraReadingFlags, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, ShouldUseKillerLobby, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, UnknownData_56SM, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, TextDesignTunableClass, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, TextTunables, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, CoreUMGDesignTunableClass, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, CoreUMGDesignTunables, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, AtlantaDesignTunableClass, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDDesignTunables, AtlantaDesignTunables, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDDesignTunables, 0x0240);
		}

		// class UDBDTextDesignTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDTextDesignTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, CreditsHtml, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, LegalTextTitle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, legalText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, ConsentTextTitle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, ConsentText, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, LegalTextSIEA, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, LegalTextSIEE, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, SystemMessage_ChatDisconnected, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, SystemMessage_ChatReturnedToLobby, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextDesignTunables, SystemMessage_ChatMatchServerClosed, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTextDesignTunables, 0x0118);
		}

		// class UDBDDiceRoller : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDDiceRoller)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDDiceRoller, 0x0030);
		}

		// class UDBDEasyAntiCheat : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDEasyAntiCheat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEasyAntiCheat, UnknownData_PFCY, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEasyAntiCheat, _gameInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEasyAntiCheat, _connectedToServer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEasyAntiCheat, UnknownData_38JM, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEasyAntiCheat, 0x0058);
		}

		// class UDBDEasyAntiCheatEnable : public UDBDEasyAntiCheat
		TEST_METHOD(Class__DeadByDaylight__DBDEasyAntiCheatEnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEasyAntiCheatEnable, UnknownData_ACHF, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEasyAntiCheatEnable, 0x00F0);
		}

		// class UDBDEasyAntiCheatLinux : public UDBDEasyAntiCheatEnable
		TEST_METHOD(Class__DeadByDaylight__DBDEasyAntiCheatLinux)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEasyAntiCheatLinux, 0x00F0);
		}

		// class UDBDEasyAntiCheatWindows : public UDBDEasyAntiCheatEnable
		TEST_METHOD(Class__DeadByDaylight__DBDEasyAntiCheatWindows)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEasyAntiCheatWindows, 0x00F0);
		}

		// class UDBDEngineUtils : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDEngineUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEngineUtils, 0x0030);
		}

		// class UDBDGame_Lobby : public UDBDBaseGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDGame_Lobby)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Lobby, UnknownData_RZM9, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Lobby, _identityValidation, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Lobby, UnknownData_MY6H, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGame_Lobby, 0x0388);
		}

		// class UDBDGame_Menu : public UDBDBaseGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDGame_Menu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, StartWithSlasher, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, UnknownData_RZTX, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, _partyFlowHandler, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, UnknownData_ZEDJ, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, _matineeFadeActor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, _matineeIntroActor, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Menu, _matineeLoopActor, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGame_Menu, 0x0388);
		}

		// class UDBDGame_Start : public UDBDBaseGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDGame_Start)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Start, UnknownData_PPKJ, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Start, _startupInitializer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Start, _sharedAuthenticationComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGame_Start, UnknownData_94GB, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGame_Start, 0x03D8);
		}

		// class UDBDGameEngine : public UGameEngine
		TEST_METHOD(Class__DeadByDaylight__DBDGameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameEngine, UnknownData_YJSC, 0x0F78);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameEngine, 0x0F80);
		}

		// class UDBDGameEventUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDGameEventUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameEventUtilities, 0x0030);
		}

		// class UDBDGameFlowUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDGameFlowUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameFlowUtilities, 0x0030);
		}

		// class UDBDGameInstance : public UgameInstance
		TEST_METHOD(Class__DeadByDaylight__DBDGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_PBRQ, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, DesignTunableClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, DesignTunables, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, RegionClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ShopManagerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, FriendManagerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, GameEventTracker, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, KeyDisplayInfo, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, LeaveGameRequested, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_V7O0, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, PlayerProfileDAL, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, Builder, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, GenerationSeed, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_N6JB, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, PaperTileAssetName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, generationPlayerCount, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_ACJT, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, premadeMap, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ForceSpawnTileData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_LYD0, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, OfferingSequence, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ParadiseData, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, PlayerProfileLoadFailed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_A2CD, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, NewsContentManager, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ContentScheduleManager, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, CDNPatchManager, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, CharacterProgressionManager, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, CharacterXPManager, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, AuthOrEACErrorAdditionalInfo, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, HasServerLeftMatch, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, HasWrittenGameEndStats, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_U2J3, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, FearMarketManager, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ShopManager, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, FriendManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, WalletHandler, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, TutorialRequesterName, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_1R05, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ControllerPairingManager, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_6LWS, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, ChunkingManager, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, OnPlayerDisconnect, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_PU7S, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _assetLibraryManager, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _bloodwebManagerClass, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_OIJJ, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _persistentData, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _playerDataFacade, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _rankManager, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _playerLevelManager, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _specialEventManager, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _bonusPointEventsManager, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _timeTravelManager, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _toastManager, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _socialNotificationFactory, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _partyFacade, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _penaltyTracker, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_8VUG, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _ligthingHelper, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _offeringHandler, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_KPEJ, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _actorKnowledgeCollections, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _mapActorDB, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _interactionProficiencies, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _theHud, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_7PYX, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, BloodwebManager, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _popupSequencer, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _popupFactory, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _auth, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _eac, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_8O52, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _execObjects, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _networkFailureDetected, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _networkConnectionMonitoringOnly, 0x08A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _achievementStatsUploadEnabled, 0x08AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isDisconnected, 0x08AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isGamepadReconnected, 0x08AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isProfileOffline, 0x08AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isAppSuspended, 0x08AE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isAppResumed, 0x08AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isInvitationRejected, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isAdditionalContentInstalled, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _isCloudInventoryInitialized, 0x08B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_XV85, 0x08B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _performanceDataAccumulator, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _resultOfferingAndPerkEffects, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _inventoryHandler, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _localEventManager, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _playerReportManager, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _cinematicManager, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _softBanManager, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _consentManager, 0x0918);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _onlineSystemHandler, 0x0920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _dedicatedServerManager, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _regionFinder, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _decalSpawnerCollection, 0x0938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _characterClippingPrimitiveCollection, 0x0940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, LastProviderErrorCode, 0x0948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, _disconnectError, 0x094C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameInstance, UnknownData_IDSM, 0x094D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameInstance, 0x0988);
		}

		// class UOnlineMessagesContainerComponent : public UactorComponent
		TEST_METHOD(Class__OnlineMessagesUtilities__OnlineMessagesContainerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineMessagesContainerComponent, _messages, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineMessagesContainerComponent, UnknownData_2XYS, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineMessagesContainerComponent, 0x00E8);
		}

		// class UDBDGameSession : public UGameSession
		TEST_METHOD(Class__DeadByDaylight__DBDGameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameSession, UnknownData_JNDU, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameSession, 0x02B0);
		}

		// class UDBDGameUserSettings : public UGameUserSettings
		TEST_METHOD(Class__DeadByDaylight__DBDGameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, ActionMappings, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, AxisMappings, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, DeviceLoginTokenID, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, ScreenScaleForWindowedMode, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, ScalabilityLevel, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, AutoAdjust, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_92O4, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, ScreenResolution, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, FullScreen, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_BDON, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, MenuScaleFactor, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, HudScaleFactor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, SkillCheckScaleFactor, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, MainVolume, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, MenuMusicVolume, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UseHeadphones, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, HideTutorial, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, MuteOnFocusLost, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_FXCM, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, KillerCameraSensitivity, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, SurvivorCameraSensitivity, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, KillerMouseSensitivity, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, SurvivorMouseSensitivity, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, KillerControllerSensitivity, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, SurvivorControllerSensitivity, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, AimAssist, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_YKTS, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, HandSide, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, InteractionButton, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, InvertY, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_XYBC, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, Language, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, HighestWeightSeenNews, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_3I4S, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, SharedLoginInformation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, LastPanelContextId, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, ArchivesAutoPlayVoiceOver, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, HasAcceptedCrossplayPopup, 0x01ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, HasAcceptedCrossProgressionPopup, 0x01EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_5X4R, 0x01EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, PartyPrivacyState, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, UnknownData_51XF, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, colorBlindMode, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameUserSettings, ColorBlindModeIntensity, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameUserSettings, 0x0268);
		}

		// class UDBDGameViewportClient : public UGameViewportClient
		TEST_METHOD(Class__DeadByDaylight__DBDGameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDGameViewportClient, UnknownData_ZVJ1, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameViewportClient, 0x0378);
		}

		// class UDBDHud : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDHud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDHud, _statusViews, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDHud, 0x0080);
		}

		// class UDBDInGameHud : public UDBDBaseHud
		TEST_METHOD(Class__DeadByDaylight__DBDInGameHud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInGameHud, _debugFontObj, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInGameHud, UnknownData_FHRA, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInGameHud, _competenceDebugger, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDInGameHud, 0x0358);
		}

		// class UDBDInitPlayerQuery : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDInitPlayerQuery)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDInitPlayerQuery, 0x0030);
		}

		// class UDBDInitPlayerQueryYesNo : public UDBDInitPlayerQuery
		TEST_METHOD(Class__DeadByDaylight__DBDInitPlayerQueryYesNo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInitPlayerQueryYesNo, UnknownData_A5GE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDInitPlayerQueryYesNo, 0x00B0);
		}

		// class UDBDKeyDisplayInfo : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDKeyDisplayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, PendingResetKeyBindingsData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, PendingResetMustBeGamepadKey, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, UnknownData_ODT8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, _keyDisplayInfoMap, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, UnknownData_XYLG, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, _interactionTypeToActionMap_Camper, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDKeyDisplayInfo, _interactionTypeToActionMap_Slasher, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDKeyDisplayInfo, 0x0188);
		}

		// class UDBDLobbyHud : public UDBDBaseHud
		TEST_METHOD(Class__DeadByDaylight__DBDLobbyHud)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDLobbyHud, 0x0330);
		}

		// class UAkPlatformInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkPlatformInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPlatformInfo, UnknownData_NQ0F, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPlatformInfo, 0x0078);
		}

		// class UAkWin64PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWin64PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWin64PlatformInfo, 0x0078);
		}

		// class UAkWindowsPlatformInfo : public UAkWin64PlatformInfo
		TEST_METHOD(Class__AkAudio__AkWindowsPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWindowsPlatformInfo, 0x0078);
		}

		// class UAkWinGDKInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkWinGDKInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWinGDKInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinGDKInitializationSettings, 0x0100);
		}

		// class UDBDLocalPlayer : public ULocalPlayer
		TEST_METHOD(Class__DeadByDaylight__DBDLocalPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDLocalPlayer, 0x0268);
		}

		// class UAkWinAnvilInitializationSettings : public UAkWinGDKInitializationSettings
		TEST_METHOD(Class__AkAudio__AkWinAnvilInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinAnvilInitializationSettings, 0x0100);
		}

		// class UDBDMapFoliageDensityTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDMapFoliageDensityTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMapFoliageDensityTunables, FoliageToAutomateDensity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMapFoliageDensityTunables, 0x0040);
		}

		// class UAkWinGDKPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWinGDKPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinGDKPlatformInfo, 0x0078);
		}

		// class UDBDMarketingCameraController : public UDebugCameraController
		TEST_METHOD(Class__DeadByDaylight__DBDMarketingCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMarketingCameraController, UnknownData_JVKN, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMarketingCameraController, 0x06C0);
		}

		// class UAkWinAnvilPlatformInfo : public UAkWinGDKPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWinAnvilPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWinAnvilPlatformInfo, 0x0078);
		}

		// class UAkWwiseTree : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnSelectionChanged, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, OnItemDragged, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTree, UnknownData_ADSY, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTree, 0x0168);
		}

		// class UDBDMaterialBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDMaterialBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMaterialBlueprintLibrary, 0x0030);
		}

		// class UAkWwiseTreeSelector : public UWidget
		TEST_METHOD(Class__AkAudio__AkWwiseTreeSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnSelectionChanged, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, OnItemDragged, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWwiseTreeSelector, UnknownData_N3FQ, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWwiseTreeSelector, 0x0188);
		}

		// class UAkXboxOneGDKInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXboxOneGDKInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, ApuHeapSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneGDKInitializationSettings, UnknownData_GBHP, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneGDKInitializationSettings, 0x0100);
		}

		// class UDBDMathBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDMathBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMathBlueprintLibrary, 0x0030);
		}

		// class UDBDHookUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDHookUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDHookUtilities, 0x0030);
		}

		// class UAkXboxOneAnvilInitializationSettings : public UAkXboxOneGDKInitializationSettings
		TEST_METHOD(Class__AkAudio__AkXboxOneAnvilInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneAnvilInitializationSettings, 0x0100);
		}

		// class UAkXboxOneGDKPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOneGDKPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneGDKPlatformInfo, 0x0078);
		}

		// class UAkXboxOneAnvilPlatformInfo : public UAkXboxOneGDKPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOneAnvilPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneAnvilPlatformInfo, 0x0078);
		}

		// class UAkXboxOneInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXboxOneInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, ApuHeapSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXboxOneInitializationSettings, UnknownData_MTRN, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOneInitializationSettings, 0x0100);
		}

		// class UAkXboxOnePlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXboxOnePlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXboxOnePlatformInfo, 0x0078);
		}

		// class UAkXSXInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkXSXInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, ApuHeapSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, AdvancedSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkXSXInitializationSettings, UnknownData_9SXP, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXSXInitializationSettings, 0x0100);
		}

		// class UAkMPXInitializationSettings : public UAkXSXInitializationSettings
		TEST_METHOD(Class__AkAudio__AkMPXInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMPXInitializationSettings, 0x0100);
		}

		// class UInterpTrackAkAudioEvent : public UInterpTrackVectorBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, Events, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioEvent, UnknownData_TQ34, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioEvent, 0x00B0);
		}

		// class UInterpTrackAkAudioRTPC : public UInterpTrackFloatBase
		TEST_METHOD(Class__AkAudio__InterpTrackAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, param, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAkAudioRTPC, UnknownData_4DDZ, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAkAudioRTPC, 0x00B0);
		}

		// class UInterpTrackInstAkAudioEvent : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioEvent, UnknownData_TENM, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioEvent, 0x0038);
		}

		// class UInterpTrackInstAkAudioRTPC : public UInterpTrackInst
		TEST_METHOD(Class__AkAudio__InterpTrackInstAkAudioRTPC)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAkAudioRTPC, UnknownData_0SR0, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAkAudioRTPC, 0x0038);
		}

		// class UMovieSceneAkAudioEventSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_QEL3, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, event, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, RetriggerEvent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_YU45, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, ScrubTailLengthMs, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, StopAtSectionEnd, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_KEUO, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, EventName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_X71G, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxSourceDuration, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_V074, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, MaxDurationSourceID, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioEventSection, UnknownData_8ARN, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventSection, 0x01D0);
		}

		// class UDBDMenuPlayer : public UDBDBasePlayer
		TEST_METHOD(Class__DeadByDaylight__DBDMenuPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, UnknownData_KS2N, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, RoleSelected, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, IsOnline, 0x0569);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, UnknownData_PNMW, 0x056A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, OnItemEquipped, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, DarkMaterial, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, _handPosition, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, UnknownData_GSIX, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, ItemMesh, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, MaterialHelper, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, _equippedItemName, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMenuPlayer, UnknownData_8OG4, 0x05D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMenuPlayer, 0x0600);
		}

		// class UMovieSceneAkTrack : public UMovieSceneTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, Sections, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkTrack, UnknownData_IHOP, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkTrack, 0x0078);
		}

		// class UMovieSceneAkAudioEventTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioEventTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioEventTrack, 0x0078);
		}

		// class UMovieSceneAkAudioRTPCSection : public UMovieSceneSection
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, RTPC, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, name, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatCurve, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, FloatChannelSerializationHelper, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAkAudioRTPCSection, RTPCChannel, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCSection, 0x0250);
		}

		// class UMovieSceneAkAudioRTPCTrack : public UMovieSceneAkTrack
		TEST_METHOD(Class__AkAudio__MovieSceneAkAudioRTPCTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAkAudioRTPCTrack, 0x0078);
		}

		// class UDBDMenuSilhouette : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBDMenuSilhouette)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMenuSilhouette, 0x0230);
		}

		// class UPostEventAsync : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AkAudio__PostEventAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAsync, Completed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAsync, UnknownData_JF2M, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostEventAsync, 0x00A8);
		}

		// class UDBDMistLocatorComponent : public UDBDLocatorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDMistLocatorComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMistLocatorComponent, 0x0210);
		}

		// class UDBDMistManager : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DBDMistManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDMistManager, _particleSystemComp, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDMistManager, 0x0238);
		}

		// class UPostEventAtLocationAsync : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AkAudio__PostEventAtLocationAsync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAtLocationAsync, Completed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostEventAtLocationAsync, UnknownData_YCS9, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostEventAtLocationAsync, 0x0088);
		}

		// class UDBDNavEvadeLoopComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDNavEvadeLoopComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, EvadeDoorExtent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, EvadeDoorFrontPointOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, EvadeDoorSideOffset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, SideBlockerOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, AutoSnapPointsUpHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, AutoSnapPointsDownHeight, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, AutoSnapCollisionChannel, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, UnknownData_4NS8, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, EvadeLoopFilterClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, MinSafetyLength, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, MaxSafetyLength, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, LimitToSide, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, DebugEditMode, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, DrawDebugFilter, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavEvadeLoopComponent, UnknownData_60OI, 0x00F3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDNavEvadeLoopComponent, 0x0158);
		}

		// class UAkAcousticPortal : public Uvolume
		TEST_METHOD(Class__AkAudio__AkAcousticPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAcousticPortal, InitialState, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAcousticPortal, UnknownData_E41W, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAcousticPortal, ObstructionRefreshInterval, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAcousticPortal, ObstructionCollisionChannel, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAcousticPortal, UnknownData_TL8M, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAcousticPortal, 0x02F8);
		}

		// class UDBDNavModifierComponent : public UNavModifierComponent
		TEST_METHOD(Class__DeadByDaylight__DBDNavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, ForceUseFailsafeExtent, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, UnknownData_R2LD, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, UpdateModifierInterval, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, StartNavigationRelevant, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, AlwaysTickToCheckTransform, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, RelevantPassiveMode, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavModifierComponent, UnknownData_4UPF, 0x015B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDNavModifierComponent, 0x01A0);
		}

		// class UAkPortalComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkPortalComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPortalComponent, 0x0210);
		}

		// class UAkAudioType : public UObject
		TEST_METHOD(Class__AkAudio__AkAudioType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, ShortID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, UnknownData_PSNT, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioType, UserData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioType, 0x0048);
		}

		// class UDBDNetworkUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDNetworkUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDNetworkUtilities, 0x0030);
		}

		// class UAkAcousticTexture : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkAcousticTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAcousticTexture, 0x0048);
		}

		// class UAkAmbientSound : public Uactor
		TEST_METHOD(Class__AkAudio__AkAmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAmbientSound, AkAudioEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAmbientSound, AkComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAmbientSound, StopWhenOwnerIsDestroyed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAmbientSound, AutoPost, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAmbientSound, UnknownData_EIDN, 0x0242);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAmbientSound, 0x0270);
		}

		// class UDBDObserverPlayer : public Ucharacter
		TEST_METHOD(Class__DeadByDaylight__DBDObserverPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDObserverPlayer, _playerData, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDObserverPlayer, UnknownData_J5GZ, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDObserverPlayer, 0x0510);
		}

		// class UDBDOnlineSessionClient : public UOnlineSessionClient
		TEST_METHOD(Class__DeadByDaylight__DBDOnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOnlineSessionClient, UnknownData_VYZK, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDOnlineSessionClient, 0x01D8);
		}

		// class UAkAndroidInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkAndroidInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAndroidInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAndroidInitializationSettings, 0x0100);
		}

		// class UDBDOutlineComponent : public UBatchMeshCommands
		TEST_METHOD(Class__DeadByDaylight__DBDOutlineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, UnknownData_80SU, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, IsAlwaysVisible, 0x028F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, MinimumOutlineDistance, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, UnknownData_CPSA, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, OutlineName, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, UnknownData_KXTJ, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, _renderStrategySelector, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, _batchMeshCommands, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, UnknownData_OZUQ, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, _renderingStrategy, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponent, UnknownData_MV42, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDOutlineComponent, 0x0340);
		}

		// class UAkAndroidPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkAndroidPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAndroidPlatformInfo, 0x0078);
		}

		// class UAkAssetData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetData, UnknownData_1MB3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetData, 0x0070);
		}

		// class UAkAssetDataWithMedia : public UAkAssetData
		TEST_METHOD(Class__AkAudio__AkAssetDataWithMedia)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataWithMedia, MediaList, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataWithMedia, UnknownData_M0OL, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataWithMedia, 0x0090);
		}

		// class UAkAssetPlatformData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetPlatformData, CurrentAssetData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetPlatformData, 0x0038);
		}

		// class UDBDOutlineComponentConfiguration : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__DBDOutlineComponentConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponentConfiguration, OutlineConfigurations, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponentConfiguration, OutlineColours, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponentConfiguration, OutlineMaterial, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDOutlineComponentConfiguration, DefaultTranslucencyMaterials, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDOutlineComponentConfiguration, 0x00F0);
		}

		// class UAkAssetBase : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetBase, PlatformAssetData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetBase, UnknownData_L22H, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetBase, 0x0060);
		}

		// class UAkAudioBank : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAudioBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, AutoLoad, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_HSN8, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, LocalizedPlatformAssetDataMap, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, CurrentLocalizedPlatformAssetData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioBank, UnknownData_ZYA4, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioBank, 0x00D0);
		}

		// class UDBDOutlineComponentCustomDepthConfiguration : public UDBDOutlineComponentConfiguration
		TEST_METHOD(Class__DeadByDaylight__DBDOutlineComponentCustomDepthConfiguration)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDOutlineComponentCustomDepthConfiguration, 0x00F0);
		}

		// class UDBDOutlineComponentStencilConfiguration : public UDBDOutlineComponentConfiguration
		TEST_METHOD(Class__DeadByDaylight__DBDOutlineComponentStencilConfiguration)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDOutlineComponentStencilConfiguration, 0x00F0);
		}

		// class UAkAssetDataSwitchContainerData : public UObject
		TEST_METHOD(Class__AkAudio__AkAssetDataSwitchContainerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, GroupValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, DefaultGroupValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, MediaList, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, Children, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainerData, UnknownData_5XZ3, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataSwitchContainerData, 0x0098);
		}

		// class UDBDOutlineComponentTranslucentConfiguration : public UDBDOutlineComponentConfiguration
		TEST_METHOD(Class__DeadByDaylight__DBDOutlineComponentTranslucentConfiguration)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDOutlineComponentTranslucentConfiguration, 0x00F0);
		}

		// class UDBDParadiseGameMode : public UDBDBaseGameMode
		TEST_METHOD(Class__DeadByDaylight__DBDParadiseGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDParadiseGameMode, 0x0358);
		}

		// class UAkAssetDataSwitchContainer : public UAkAssetDataWithMedia
		TEST_METHOD(Class__AkAudio__AkAssetDataSwitchContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, SwitchContainers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, DefaultGroupValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAssetDataSwitchContainer, UnknownData_CM48, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAssetDataSwitchContainer, 0x00B8);
		}

		// class UDBDPartyFacade : public UPartyFacade
		TEST_METHOD(Class__DeadByDaylight__DBDPartyFacade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPartyFacade, UnknownData_GYJK, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPartyFacade, 0x0460);
		}

		// class UDBDPawnSensingComponent : public UPawnSensingComponent
		TEST_METHOD(Class__DeadByDaylight__DBDPawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPawnSensingComponent, bSenseEverywhere, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPawnSensingComponent, UnknownData_JBLE, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPawnSensingComponent, PartiallyHiddenSensingDistance, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPawnSensingComponent, 0x0108);
		}

		// class UAkAudioEventData : public UAkAssetDataSwitchContainer
		TEST_METHOD(Class__AkAudio__AkAudioEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MaxAttenuationRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, IsInfinite, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UnknownData_G9N9, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MinimumDuration, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, MaximumDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, LocalizedMedia, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, PostedEvents, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UserDefinedSends, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, PostedTriggers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, GroupValues, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEventData, UnknownData_60PO, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEventData, 0x0280);
		}

		// class UDBDPersistentData : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDPersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, _gamePersistentData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, _keepDataIDs, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, _playerIdToPersistentDataMap, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, _localPlayerPersistentData, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, UnknownData_M7MD, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, _cloudInventory, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPersistentData, UnknownData_246G, 0x08F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPersistentData, 0x0D98);
		}

		// class UAkAudioEvent : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, LocalizedPlatformAssetDataMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, RequiredBank, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, CurrentLocalizedPlatformData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaxAttenuationRadius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, IsInfinite, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_7L0W, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MinimumDuration, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, MaximumDuration, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioEvent, UnknownData_ESGE, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioEvent, 0x00E8);
		}

		// class UDBDPlayerCameraManager : public UPlayerCameraManager
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerCameraManager, TargetingFOV, 0x274C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerCameraManager, _viewRotationStrategy, 0x2750);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerCameraManager, 0x2760);
		}

		// class UDBDPlayerControllerBase : public UplayerController
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerControllerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerControllerBase, UnknownData_ZRQR, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerControllerBase, _mainCharacter, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerControllerBase, 0x0630);
		}

		// class UAkGameObject : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkGameObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, AkAudioEvent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, EventName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGameObject, UnknownData_BVIX, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameObject, 0x0230);
		}

		// class UAkComponent : public UAkGameObject
		TEST_METHOD(Class__AkAudio__AkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, bUseSpatialAudio, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_BY8K, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionCollisionChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_R1GN, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_AH92, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBus, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionAuxBusName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionOrder, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionBusSendGain, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, EarlyReflectionMaxPathLength, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, roomReverbAuxBusGain, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxEdges, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPaths, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, diffractionMaxPathLength, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_KO17, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, StopWhenOwnerDestroyed, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_D6CI, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, AttenuationScalingFactor, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionRefreshInterval, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, bUseReverbVolumes, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, ShouldTransmitRelativeAngle, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_0VIY, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, OcclusionAffect, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, MaxOcclusionDistance, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkComponent, UnknownData_7AN2, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkComponent, 0x0400);
		}

		// class UDBDPlayerController : public UDBDPlayerControllerBase
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, OnPawnLeavingGame, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, OnLocallyObservedChanged, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, UnknownData_4F9L, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, _theFence, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, UnknownData_47BR, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, _inputHandler, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, UnknownData_M003, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, _aiPawn, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, UnknownData_G52I, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, _controllerGameRole, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerController, UnknownData_C0SZ, 0x07D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerController, 0x07E0);
		}

		// class UAkAudioInputComponent : public UAkComponent
		TEST_METHOD(Class__AkAudio__AkAudioInputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAudioInputComponent, UnknownData_E725, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAudioInputComponent, 0x0410);
		}

		// class UAkAuxBus : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkAuxBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkAuxBus, RequiredBank, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkAuxBus, 0x0068);
		}

		// class UAkCheckBox : public UContentWidget
		TEST_METHOD(Class__AkAudio__AkCheckBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_CEYU, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedState, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_XFML, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, CheckedStateDelegate, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_FYPR, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, WidgetStyle, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, HorizontalAlignment, 0x0AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, IsFocusable, 0x0AD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_9NPD, 0x0AD2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ThePropertyToControl, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, ItemToControl, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, AkOnCheckStateChanged, 0x0B28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnItemDropped, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, OnPropertyDropped, 0x0B48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCheckBox, UnknownData_ZP18, 0x0B58);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCheckBox, 0x0BA8);
		}

		// class UAkChinookPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkChinookPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkChinookPlatformInfo, 0x0078);
		}

		// class UAkMPXPlatformInfo : public UAkChinookPlatformInfo
		TEST_METHOD(Class__AkAudio__AkMPXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMPXPlatformInfo, 0x0078);
		}

		// class UAkXSXPlatformInfo : public UAkChinookPlatformInfo
		TEST_METHOD(Class__AkAudio__AkXSXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkXSXPlatformInfo, 0x0078);
		}

		// class UAkGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkGameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGameplayStatics, 0x0030);
		}

		// class UDBDPlayerController_Menu : public UDBDPlayerControllerBase
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerController_Menu)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerController_Menu, 0x0630);
		}

		// class UDBDPlayerLevelManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerLevelManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerLevelManager, UnknownData_ZJKD, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerLevelManager, 0x00D8);
		}

		// class UDBDPlayerPositionOffsetComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerPositionOffsetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerPositionOffsetComponent, _menuZHeadOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerPositionOffsetComponent, UnknownData_OYKA, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerPositionOffsetComponent, 0x00C0);
		}

		// class UDBDPlayerStart : public UPlayerStart
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerStart, UnknownData_D8DC, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerStart, 0x0270);
		}

		// class UDBDPlayerState : public UplayerState
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_QTFI, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, OnAIFinishedPlayingEvent, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, mirrorsId, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, ContentVersion, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _difficultyLevel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, isPlayerReady, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, GameRole, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_PCAO, 0x0373);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, RitualHandler, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, CamperData, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, SlasherData, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, playerData, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, PlayerCustomization, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_8T0D, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, OnPlayerGameplayEvent, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, OnGameStateChanged, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, OnPlayerGameStateChanged, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_E5SF, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _cachedUserGameStats, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _ongoingScoreEvents, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_QOW0, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _recentGameplayEvents, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_PLZL, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _inParadise, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_9D4G, 0x05D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _gameplayNotificationManager, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _achievementHandler, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _characterStatsHandler, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_RHE6, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _platformAccountId, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _selectedCamperIndex, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _selectedSlasherIndex, 0x0624);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_4RGL, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _platform, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_CTJO, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _provider, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_JO11, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _crossplayAllowed, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, _gameLevelLoaded, 0x06FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPlayerState, UnknownData_M6UX, 0x06FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerState, 0x0718);
		}

		// class UAkCallbackInfo : public UObject
		TEST_METHOD(Class__AkAudio__AkCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkCallbackInfo, AkComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkCallbackInfo, 0x0038);
		}

		// class UAkEventCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, PlayingID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkEventCallbackInfo, eventId, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkEventCallbackInfo, 0x0040);
		}

		// class UAkMIDIEventCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMIDIEventCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMIDIEventCallbackInfo, UnknownData_HEP9, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMIDIEventCallbackInfo, 0x0048);
		}

		// class UAkMarkerCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMarkerCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Identifier, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, position, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMarkerCallbackInfo, Label, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMarkerCallbackInfo, 0x0058);
		}

		// class UAkDurationCallbackInfo : public UAkEventCallbackInfo
		TEST_METHOD(Class__AkAudio__AkDurationCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, duration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, EstimatedDuration, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, AudioNodeID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, MediaID, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, bStreaming, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkDurationCallbackInfo, UnknownData_33IN, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDurationCallbackInfo, 0x0058);
		}

		// class UAkMusicSyncCallbackInfo : public UAkCallbackInfo
		TEST_METHOD(Class__AkAudio__AkMusicSyncCallbackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, PlayingID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, SegmentInfo, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, MusicSyncType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UnknownData_IWKW, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMusicSyncCallbackInfo, UserCueName, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMusicSyncCallbackInfo, 0x0078);
		}

		// class UAkGeometryComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkGeometryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, MeshType, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_Q7EB, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, LOD, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, StaticMeshSurfaceOverride, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, CollisionMeshSurfaceOverride, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_5MF1, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, AssociatedRoom, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_E8Z7, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, GeometryData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGeometryComponent, UnknownData_CWEK, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGeometryComponent, 0x0340);
		}

		// class UDBDPlayerState_Menu : public UDBDPlayerState
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerState_Menu)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerState_Menu, 0x0718);
		}

		// class UAkGroupValue : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkGroupValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, GroupShortID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkGroupValue, UnknownData_61M1, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkGroupValue, 0x0060);
		}

		// class UAkHololensInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkHololensInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkHololensInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkHololensInitializationSettings, 0x0100);
		}

		// class UDBDPlayerState_Lobby : public UDBDPlayerState_Menu
		TEST_METHOD(Class__DeadByDaylight__DBDPlayerState_Lobby)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPlayerState_Lobby, 0x0718);
		}

		// class UDBDProjectileUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDProjectileUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDProjectileUtilities, 0x0030);
		}

		// class UAkHololensPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkHololensPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkHololensPlatformInfo, 0x0078);
		}

		// class UDBDRankDesignTunables : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDRankDesignTunables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRankDesignTunables, UnbrokenTimeAlivePointsCurve, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRankDesignTunables, EvaderStealthPointsByDistanceWhileKillerNotChasingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRankDesignTunables, EvaderStealthPointsByDistanceWhileKillerIsChasingCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRankDesignTunables, EvaderChasePointsByDurationCurve, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRankDesignTunables, EvaderZAxisDistanceScalingCurve, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRankDesignTunables, ChaserChasePointsByDurationCurve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDRankDesignTunables, 0x0060);
		}

		// class UAkInitBankAssetData : public UAkAssetDataWithMedia
		TEST_METHOD(Class__AkAudio__AkInitBankAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBankAssetData, PluginInfos, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkInitBankAssetData, 0x00A0);
		}

		// class UAkInitBank : public UAkAssetBase
		TEST_METHOD(Class__AkAudio__AkInitBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBank, AvailableAudioCultures, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkInitBank, DefaultLanguage, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkInitBank, 0x0080);
		}

		// class UDBDRichPresenceSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__DBDRichPresenceSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, _userType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, _richPresenceStatus, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, UnknownData_FF4K, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, _timerRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, _timerDelay, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, _isValidSetup, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDRichPresenceSubsystem, UnknownData_MJSR, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDRichPresenceSubsystem, 0x0050);
		}

		// class UAkIOSInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkIOSInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, AudioSession, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_RJPX, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, CommunicationSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, AdvancedSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkIOSInitializationSettings, UnknownData_QDGE, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkIOSInitializationSettings, 0x0108);
		}

		// class UAkIOSPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkIOSPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkIOSPlatformInfo, 0x0078);
		}

		// class UAkItemBoolPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemBoolPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolPropertiesConv, 0x0030);
		}

		// class UDBDHostSettingsParamsBase : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDHostSettingsParamsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDHostSettingsParamsBase, UnknownData_3JSF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDHostSettingsParamsBase, 0x0040);
		}

		// class UAkItemBoolProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemBoolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnSelectionChanged, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, OnPropertyDragged, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemBoolProperties, UnknownData_NVFG, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemBoolProperties, 0x0168);
		}

		// class UBP_Menu_CamperMale02_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale02__BP_Menu_CamperMale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale02_C, 0x0649);
		}

		// class UDBDHostSettingsParamsSessionInvalid : public UDBDHostSettingsParamsBase
		TEST_METHOD(Class__DeadByDaylight__DBDHostSettingsParamsSessionInvalid)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDHostSettingsParamsSessionInvalid, 0x0040);
		}

		// class UDBDHostSettingsParamsJoinabilityPreset : public UDBDHostSettingsParamsBase
		TEST_METHOD(Class__DeadByDaylight__DBDHostSettingsParamsJoinabilityPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDHostSettingsParamsJoinabilityPreset, UnknownData_MHWP, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDHostSettingsParamsJoinabilityPreset, 0x0048);
		}

		// class UAkItemPropertiesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkItemPropertiesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemPropertiesConv, 0x0030);
		}

		// class UDBDHostSettingsParamsRanking : public UDBDHostSettingsParamsBase
		TEST_METHOD(Class__DeadByDaylight__DBDHostSettingsParamsRanking)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDHostSettingsParamsRanking, UnknownData_QD8I, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDHostSettingsParamsRanking, 0x0048);
		}

		// class UAkItemProperties : public UWidget
		TEST_METHOD(Class__AkAudio__AkItemProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnSelectionChanged, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, OnPropertyDragged, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkItemProperties, UnknownData_NFY2, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkItemProperties, 0x0168);
		}

		// class UDBDServerInstance : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDServerInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDServerInstance, UnknownData_242F, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDServerInstance, _pendingSessionUpdates, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDServerInstance, _gameInstance, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDServerInstance, 0x00B0);
		}

		// class UDBDSlasherData : public UDBDPlayerData
		TEST_METHOD(Class__DeadByDaylight__DBDSlasherData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSlasherData, UnknownData_I72T, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSlasherData, 0x0110);
		}

		// class UAkLateReverbComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkLateReverbComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_QLBY, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBus, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, AuxBusName, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, SendLevel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, FadeRate, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, priority, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_34FZ, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, NextLowerPriorityComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLateReverbComponent, UnknownData_X0SW, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLateReverbComponent, 0x0250);
		}

		// class UDBDSocialNotificationFactory : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDSocialNotificationFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSocialNotificationFactory, _toastMgr, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSocialNotificationFactory, _partyFacade, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSocialNotificationFactory, _friendManager, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSocialNotificationFactory, _toastTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSocialNotificationFactory, UnknownData_IWRV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSocialNotificationFactory, 0x0068);
		}

		// class UDBDSpecialEventUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDSpecialEventUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSpecialEventUtilities, 0x0030);
		}

		// class UAkLinuxInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkLinuxInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLinuxInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLinuxInitializationSettings, 0x00F8);
		}

		// class UDBDSpectator : public USpectatorPawn
		TEST_METHOD(Class__DeadByDaylight__DBDSpectator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpectator, UnknownData_I83O, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSpectator, 0x02D8);
		}

		// class UAkLinuxPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkLinuxPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLinuxPlatformInfo, 0x0078);
		}

		// class UDBDSpringArmComponent : public USpringArmComponent
		TEST_METHOD(Class__DeadByDaylight__DBDSpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, UnknownData_YAI5, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, ComponenwiseCameraLagSpeed, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, TargetArmMinLength, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, UnknownData_1RRG, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, CameraDistanceLagSpeed, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, UnknownData_D97X, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, UnknownData_PGLR, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, IgnoreActors, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSpringArmComponent, UnknownData_2TVG, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSpringArmComponent, 0x02F0);
		}

		// class UAkLuminInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkLuminInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLuminInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLuminInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkLuminInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLuminInitializationSettings, 0x00F8);
		}

		// class UAkLuminPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkLuminPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLuminPlatformInfo, 0x0078);
		}

		// class UAkMacInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkMacInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMacInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMacInitializationSettings, 0x00F8);
		}

		// class UDBDSurfaceTypeName : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDSurfaceTypeName)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSurfaceTypeName, 0x0030);
		}

		// class UAkMacPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkMacPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMacPlatformInfo, 0x0078);
		}

		// class UDBDTags : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDTags)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTags, 0x0030);
		}

		// class UAkMediaAssetData : public UObject
		TEST_METHOD(Class__AkAudio__AkMediaAssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, IsStreamed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, UseDeviceMemory, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAssetData, UnknownData_7UUQ, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMediaAssetData, 0x0048);
		}

		// class UDBDTimerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DBDTimerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTimerComponent, UnknownData_795R, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTimerComponent, 0x00E8);
		}

		// class UAkMediaAsset : public UObject
		TEST_METHOD(Class__AkAudio__AkMediaAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, Id, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UnknownData_DULG, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UserData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, CurrentMediaAssetData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkMediaAsset, UnknownData_I01I, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkMediaAsset, 0x0060);
		}

		// class UAkLocalizedMediaAsset : public UAkMediaAsset
		TEST_METHOD(Class__AkAudio__AkLocalizedMediaAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkLocalizedMediaAsset, 0x0060);
		}

		// class UDBDTunableUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDTunableUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTunableUtilities, 0x0030);
		}

		// class UAkExternalMediaAsset : public UAkMediaAsset
		TEST_METHOD(Class__AkAudio__AkExternalMediaAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkExternalMediaAsset, UnknownData_7MLR, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkExternalMediaAsset, 0x00C0);
		}

		// class UAkPellegrinoPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPellegrinoPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPellegrinoPlatformInfo, 0x0078);
		}

		// class UDBDUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDUtilities, 0x0030);
		}

		// class UAkDPXPlatformInfo : public UAkPellegrinoPlatformInfo
		TEST_METHOD(Class__AkAudio__AkDPXPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDPXPlatformInfo, 0x0078);
		}

		// class UAkPS5PlatformInfo : public UAkPellegrinoPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPS5PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS5PlatformInfo, 0x0078);
		}

		// class UAkPS4InitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkPS4InitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS4InitializationSettings, AdvancedSettings, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS4InitializationSettings, 0x00F8);
		}

		// class UAkPS4PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkPS4PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS4PlatformInfo, 0x0078);
		}

		// class UAkPS5InitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkPS5InitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, CommunicationSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, AdvancedSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkPS5InitializationSettings, UnknownData_CTK5, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkPS5InitializationSettings, 0x00F8);
		}

		// class UAkDPXInitializationSettings : public UAkPS5InitializationSettings
		TEST_METHOD(Class__AkAudio__AkDPXInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkDPXInitializationSettings, 0x00F8);
		}

		// class UAkReverbVolume : public Uvolume
		TEST_METHOD(Class__AkAudio__AkReverbVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, UnknownData_N20L, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, AuxBus, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, AuxBusName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, SendLevel, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, FadeRate, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, priority, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, UnknownData_XZM6, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkReverbVolume, LateReverbComponent, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkReverbVolume, 0x02A0);
		}

		// class UAkRoomComponent : public UAkGameObject
		TEST_METHOD(Class__AkAudio__AkRoomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_PMNG, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, NextLowerPriorityComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, priority, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, WallOcclusion, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, AuxSendLevel, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, AutoPost, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkRoomComponent, UnknownData_0B1Z, 0x024D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRoomComponent, 0x0260);
		}

		// class UAkRtpc : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkRtpc)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkRtpc, 0x0048);
		}

		// class UAkSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MaxSimultaneousReverbVolumes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_WA4D, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseProjectPath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseSoundDataFolder, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bAutoConnectToWAAPI, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, DefaultOcclusionCollisionChannel, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_4X2Q, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AkGeometryMap, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, SplitSwitchContainerMedia, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UseEventBasedPackaging, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, EnableAutomaticAssetSynchronization, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_9QVI, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, CommandletCommitMessage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnrealCultureToWwiseCulture, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, AskedToUseNewAssetManagement, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, bEnableMultiCoreRendering, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, MigratedEnableMultiCoreRendering, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, FixupRedirectorsDuringMigration, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_APTL, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseWindowsInstallationPath, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, WwiseMacInstallationPath, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettings, UnknownData_YNHZ, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettings, 0x0160);
		}

		// class UAkSettingsPerUser : public UObject
		TEST_METHOD(Class__AkAudio__AkSettingsPerUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseWindowsInstallationPath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WwiseMacInstallationPath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WaapiIPAddress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, WaapiPort, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, AutoSyncSelection, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, UnknownData_FEE3, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, SoundDataGenerationSkipLanguage, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSettingsPerUser, UnknownData_IAH7, 0x0067);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSettingsPerUser, 0x0068);
		}

		// class UAkSlider : public UWidget
		TEST_METHOD(Class__AkAudio__AkSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Value, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ValueDelegate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_U7GK, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, WidgetStyle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Orientation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_QSZB, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderBarColor, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, SliderHandleColor, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IndentHandle, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, Locked, 0x04D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_0Y3S, 0x04D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, StepSize, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, IsFocusable, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_5B53, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ThePropertyToControl, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, ItemToControl, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnValueChanged, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnItemDropped, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, OnPropertyDropped, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSlider, UnknownData_P4G5, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSlider, 0x0580);
		}

		// class UAkSpatialAudioVolume : public Uvolume
		TEST_METHOD(Class__AkAudio__AkSpatialAudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpatialAudioVolume, SurfaceReflectorSet, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpatialAudioVolume, LateReverb, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpatialAudioVolume, Room, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSpatialAudioVolume, 0x0280);
		}

		// class UAkSpotReflector : public Uactor
		TEST_METHOD(Class__AkAudio__AkSpotReflector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpotReflector, EarlyReflectionAuxBus, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpotReflector, EarlyReflectionAuxBusName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpotReflector, AcousticTexture, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpotReflector, DistanceScalingFactor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSpotReflector, level, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSpotReflector, 0x0258);
		}

		// class UAkStadiaInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkStadiaInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkStadiaInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkStadiaInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkStadiaInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkStadiaInitializationSettings, 0x00F8);
		}

		// class UAkQuailInitializationSettings : public UAkStadiaInitializationSettings
		TEST_METHOD(Class__AkAudio__AkQuailInitializationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkQuailInitializationSettings, 0x00F8);
		}

		// class UAkStadiaPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkStadiaPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkStadiaPlatformInfo, 0x0078);
		}

		// class UAkQuailPlatformInfo : public UAkStadiaPlatformInfo
		TEST_METHOD(Class__AkAudio__AkQuailPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkQuailPlatformInfo, 0x0078);
		}

		// class UAkStateValue : public UAkGroupValue
		TEST_METHOD(Class__AkAudio__AkStateValue)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkStateValue, 0x0060);
		}

		// class UAkSurfaceReflectorSetComponent : public USceneComponent
		TEST_METHOD(Class__AkAudio__AkSurfaceReflectorSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_U0BS, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AcousticPolys, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_XON0, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, AssociatedRoom, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSurfaceReflectorSetComponent, UnknownData_1LBU, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSurfaceReflectorSetComponent, 0x0250);
		}

		// class UAkSwitchInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkSwitchInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkSwitchInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchInitializationSettings, 0x00F8);
		}

		// class UAkSwitchPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkSwitchPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchPlatformInfo, 0x0078);
		}

		// class UAkSwitchValue : public UAkGroupValue
		TEST_METHOD(Class__AkAudio__AkSwitchValue)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkSwitchValue, 0x0060);
		}

		// class UAkTrigger : public UAkAudioType
		TEST_METHOD(Class__AkAudio__AkTrigger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTrigger, 0x0048);
		}

		// class UAkTVOSInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkTVOSInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, AudioSession, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_XESI, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, CommunicationSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, AdvancedSettings, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkTVOSInitializationSettings, UnknownData_3DZ3, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTVOSInitializationSettings, 0x0108);
		}

		// class UAkTVOSPlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkTVOSPlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkTVOSPlatformInfo, 0x0078);
		}

		// class UAkWaapiCalls : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiCalls)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiCalls, 0x0030);
		}

		// class USAkWaapiFieldNamesConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__SAkWaapiFieldNamesConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USAkWaapiFieldNamesConv, 0x0030);
		}

		// class UAkWaapiJsonManager : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiJsonManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiJsonManager, 0x0030);
		}

		// class UAkWaapiUriConv : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AkAudio__AkWaapiUriConv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWaapiUriConv, 0x0030);
		}

		// class UAkWindowsInitializationSettings : public UObject
		TEST_METHOD(Class__AkAudio__AkWindowsInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, CommonSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, CommunicationSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAkWindowsInitializationSettings, AdvancedSettings, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWindowsInitializationSettings, 0x0100);
		}

		// class UAkWin32PlatformInfo : public UAkPlatformInfo
		TEST_METHOD(Class__AkAudio__AkWin32PlatformInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAkWin32PlatformInfo, 0x0078);
		}

		// class UDBDUtilTimer : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DBDUtilTimer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDUtilTimer, 0x0030);
		}

		// class UDeadByDaylightGameMode : public UGameMode
		TEST_METHOD(Class__DeadByDaylight__DeadByDaylightGameMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeadByDaylightGameMode, 0x0328);
		}

		// class UDecoySlasherComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DecoySlasherComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, OnPalletStunned_Authority, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, TriggerDecoyVisibilityVFX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, HasTerrorRadius, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, HasRedGlow, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, _isActive, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, _initialized, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, UnknownData_4QHJ, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, _terrorRadiusEmitter, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecoySlasherComponent, _redStainComponent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecoySlasherComponent, 0x00F0);
		}

		// class UDedicatedServerManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__DedicatedServerManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerManager, _startupInitializer, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerManager, UnknownData_15A6, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerManager, _gameInstance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerManager, _onlineSystemHandler, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDedicatedServerManager, 0x0070);
		}

		// class UDedicatedServerStartupInitializerInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__DedicatedServerStartupInitializerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDedicatedServerStartupInitializerInterface, 0x0030);
		}

		// class UDefaultOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__DefaultOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultOutlineUpdateStrategy, _revealedColorToSurvivor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultOutlineUpdateStrategy, _revealedColorToKiller, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultOutlineUpdateStrategy, 0x00E0);
		}

		// class UDemogorgonPortal : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__DemogorgonPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _portalAreaCollider, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _destroyChargeable, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _teleportChargeable, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _portalState, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, UnknownData_H76C, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _portalIdleSound, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _portalDestroyingStart, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _portalTeleportingSound, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _destroyParticleSystem, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, _destroyDuration, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortal, UnknownData_ZCJX, 0x031C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPortal, 0x0380);
		}

		// class UDemogorgonPortalEffectComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DemogorgonPortalEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalEffectComponent, _statusEffectName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalEffectComponent, _effectLingerDuration, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalEffectComponent, _effect, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalEffectComponent, _originatingPlayer, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalEffectComponent, _originatingEffect, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalEffectComponent, UnknownData_88GH, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPortalEffectComponent, 0x0108);
		}

		// class UObjectPlacementValidationStrategy : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ObjectPlacementValidationStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPlacementValidationStrategy, 0x00B8);
		}

		// class UDefaultObjectPlacementValidationStrategy : public UObjectPlacementValidationStrategy
		TEST_METHOD(Class__DeadByDaylight__DefaultObjectPlacementValidationStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultObjectPlacementValidationStrategy, _objectPlacementRaycastStart, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultObjectPlacementValidationStrategy, _objectPlacementRaycastEnd, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultObjectPlacementValidationStrategy, _objectHeightRangeAroundBaseLocation, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultObjectPlacementValidationStrategy, 0x00E0);
		}

		// class UDemogorgonPortalPlacementValidationStrategy : public UDefaultObjectPlacementValidationStrategy
		TEST_METHOD(Class__DeadByDaylight__DemogorgonPortalPlacementValidationStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalPlacementValidationStrategy, _portalPlacerState, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalPlacementValidationStrategy, _chargedAttackState, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalPlacementValidationStrategy, _distanceForWorldCollisionDetection, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalPlacementValidationStrategy, _numberOfGroundTest, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalPlacementValidationStrategy, _portalEdgeTestRadius, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPortalPlacementValidationStrategy, _maxElevationDifferentialOnPortalEdge, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPortalPlacementValidationStrategy, 0x0100);
		}

		// class UDemogorgonStealthComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DemogorgonStealthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonStealthComponent, _stealthEffect, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonStealthComponent, UnknownData_N69N, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonStealthComponent, 0x00E0);
		}

		// class UDestroyBreakableDefinition : public UinteractionDefinition
		TEST_METHOD(Class__DeadByDaylight__DestroyBreakableDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyBreakableDefinition, _interactionTimePercentForDestroyEvent, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyBreakableDefinition, UnknownData_YKQ5, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyBreakableDefinition, _breakable, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyBreakableDefinition, UnknownData_9ZXZ, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyBreakableDefinition, 0x0540);
		}

		// class UDetectionZoneUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__DetectionZoneUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDetectionZoneUtilities, 0x0030);
		}

		// class UBaseProjectile : public Uactor
		TEST_METHOD(Class__Projectile__BaseProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectile, UnknownData_ZTHO, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectile, _multicastLaunch, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectile, _allowMultipleHits, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectile, _notifyClientOfServerHitValidationResult, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectile, UnknownData_R7GI, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectile, _replicationComponent, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseProjectile, 0x0280);
		}

		// class UDisciplineEffect : public UstatusEffect
		TEST_METHOD(Class__DeadByDaylight__DisciplineEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisciplineEffect, _deactivationDelay, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisciplineEffect, UnknownData_E1BU, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisciplineEffect, 0x02B0);
		}

		// class UDiscordancePerk : public Uperk
		TEST_METHOD(Class__DeadByDaylight__DiscordancePerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, _generatorQueryHandlePairs, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, UnknownData_294S, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, _effectRange, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, _auraLingerDuration, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, _numSurvivorsRepairingToReveal, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, UnknownData_W1L0, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, _isPerkConsideredActive, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, UnknownData_N53Y, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDiscordancePerk, _genratorToCheckNextFrame, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiscordancePerk, 0x03A8);
		}

		// class UDisplayStand : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DisplayStand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, UnknownData_BXDF, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _currentActorDisplayedClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, UnknownData_DQAN, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _currentActorDisplayed, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _nextActorToDisplayClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, UnknownData_CR17, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _offsetByClass, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _enableRotationByClass, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _defaultCharmClassDisplayable, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, UnknownData_90SD, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, _useOffsetMenuAnimations, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStand, UnknownData_68I3, 0x038A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayStand, 0x0390);
		}

		// class UPhysicsBasedProjectile : public UBaseProjectile
		TEST_METHOD(Class__Projectile__PhysicsBasedProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectile, Movement, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsBasedProjectile, 0x0288);
		}

		// class UBaseProjectileLauncher : public UactorComponent
		TEST_METHOD(Class__Projectile__BaseProjectileLauncher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, UnknownData_CLO3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, _requireLaunchImpactDetection, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, UnknownData_HT7Z, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, ProjectileClass, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, _ammo, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, _maxAmmo, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, _canLaunchWhileOutOfAmmo, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, UnknownData_5WCQ, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, _debugProjectile, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, UnknownData_R9P9, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseProjectileLauncher, _projectileReplicationComponent, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseProjectileLauncher, 0x0180);
		}

		// class UDisplayStandCharmRequesterComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DisplayStandCharmRequesterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandCharmRequesterComponent, _menuCharmClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandCharmRequesterComponent, UnknownData_RYLT, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayStandCharmRequesterComponent, 0x00E0);
		}

		// class UDisplayStandCurrencyRequesterComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DisplayStandCurrencyRequesterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandCurrencyRequesterComponent, UnknownData_710T, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandCurrencyRequesterComponent, _menuCurrencyDisplayableClass, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayStandCurrencyRequesterComponent, 0x00C8);
		}

		// class UDisplayStandItemRequesterComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DisplayStandItemRequesterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandItemRequesterComponent, UnknownData_GUOK, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayStandItemRequesterComponent, 0x00F8);
		}

		// class UDisplayStandMeatHookRequesterComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DisplayStandMeatHookRequesterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandMeatHookRequesterComponent, _meatHookClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplayStandMeatHookRequesterComponent, UnknownData_DS8M, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplayStandMeatHookRequesterComponent, 0x00D0);
		}

		// class UDlcHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__DlcHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDlcHelper, 0x0030);
		}

		// class UDoctorPowerAnimStateComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__DoctorPowerAnimStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoctorPowerAnimStateComponent, _abilityType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoctorPowerAnimStateComponent, _abilityPhase, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoctorPowerAnimStateComponent, UnknownData_MTIM, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoctorPowerAnimStateComponent, 0x00C0);
		}

		// class UPhysicsBasedProjectileMovementComponent : public UProjectileMovementComponent
		TEST_METHOD(Class__Projectile__PhysicsBasedProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, UnknownData_DG15, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, OnComponentToSweepCollisionBP, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, UnknownData_EJK9, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, _componentsToSweep, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, UnknownData_VR2V, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, _cachedUpdatedComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsBasedProjectileMovementComponent, UnknownData_ZCPL, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsBasedProjectileMovementComponent, 0x0250);
		}

		// class UVaultableOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__VaultableOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaultableOutlineUpdateStrategy, _canBeRevealedToLocalPlayer, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaultableOutlineUpdateStrategy, UnknownData_ZRHS, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaultableOutlineUpdateStrategy, 0x0138);
		}

		// class USingleProjectileProviderComponent : public UactorComponent
		TEST_METHOD(Class__Projectile__SingleProjectileProviderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleProjectileProviderComponent, UnknownData_K8CV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleProjectileProviderComponent, _projectileClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleProjectileProviderComponent, _projectile, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USingleProjectileProviderComponent, UnknownData_MV5I, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USingleProjectileProviderComponent, 0x00E8);
		}

		// class UPalletOutlineUpdateStrategy : public UVaultableOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__PalletOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletOutlineUpdateStrategy, _revealedByPowerColor, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPalletOutlineUpdateStrategy, 0x0148);
		}

		// class UDreamPalletOutlineUpdateStrategy : public UPalletOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__DreamPalletOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamPalletOutlineUpdateStrategy, _revealedByMapColor, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamPalletOutlineUpdateStrategy, UnknownData_A2KJ, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDreamPalletOutlineUpdateStrategy, 0x0170);
		}

		// class UAuthoritativePoolProjectileProviderAdapter : public UObject
		TEST_METHOD(Class__Projectile__AuthoritativePoolProjectileProviderAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativePoolProjectileProviderAdapter, UnknownData_G9C7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativePoolProjectileProviderAdapter, _pool, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAuthoritativePoolProjectileProviderAdapter, 0x0040);
		}

		// class UBaseProjectileReplicationComponent : public UactorComponent
		TEST_METHOD(Class__Projectile__BaseProjectileReplicationComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseProjectileReplicationComponent, 0x00B8);
		}

		// class UDreamSnareOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__DreamSnareOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamSnareOutlineUpdateStrategy, UnknownData_MIH4, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDreamSnareOutlineUpdateStrategy, 0x00F0);
		}

		// class UDreamSnareTrapPlacementValidationStrategy : public UDefaultObjectPlacementValidationStrategy
		TEST_METHOD(Class__DeadByDaylight__DreamSnareTrapPlacementValidationStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamSnareTrapPlacementValidationStrategy, NumberOfGroundTest, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamSnareTrapPlacementValidationStrategy, TrapRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamSnareTrapPlacementValidationStrategy, MaxElevationDifferentialOnTrapEdge, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamSnareTrapPlacementValidationStrategy, UnknownData_SV0B, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDreamSnareTrapPlacementValidationStrategy, 0x00F0);
		}

		// class UDreamworldOnlyComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__DreamworldOnlyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDreamworldOnlyComponent, UnknownData_PX3R, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDreamworldOnlyComponent, 0x0230);
		}

		// class UprojectileProvider : public UInterface
		TEST_METHOD(Class__Projectile__projectileProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UprojectileProvider, 0x0030);
		}

		// class UDynamicGrass : public Uactor
		TEST_METHOD(Class__DeadByDaylight__DynamicGrass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicGrass, _worldSettings, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicGrass, UnknownData_GJG5, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicGrass, 0x0248);
		}

		// class UEdgeObjectHandlingStrategy : public UObject
		TEST_METHOD(Class__DeadByDaylight__EdgeObjectHandlingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeObjectHandlingStrategy, _edgeObjectSpawners, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeObjectHandlingStrategy, _edgeObjectBlockers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdgeObjectHandlingStrategy, UnknownData_NHC8, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdgeObjectHandlingStrategy, 0x0158);
		}

		// class UEditorActorVisualization : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__EditorActorVisualization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorActorVisualization, ActorVisualization, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorActorVisualization, RelativeTransform, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditorActorVisualization, 0x0270);
		}

		// class UEditorMeshVisualization : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__EditorMeshVisualization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorMeshVisualization, MeshVisualization, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditorMeshVisualization, RelativeTransform, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditorMeshVisualization, 0x0270);
		}

		// class UEffectsLocator : public Uactor
		TEST_METHOD(Class__DeadByDaylight__EffectsLocator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEffectsLocator, AffectedActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEffectsLocator, ActorCaptureRadius, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEffectsLocator, UnknownData_YZM3, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEffectsLocator, 0x0298);
		}

		// class UEmblemRankContainer : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__EmblemRankContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmblemRankContainer, UnknownData_QLU1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmblemRankContainer, 0x0230);
		}

		// class UEmblemRankUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__EmblemRankUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmblemRankUtilities, 0x0030);
		}

		// class UEndGameComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__EndGameComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameComponent, UnknownData_TWQI, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameComponent, 0x0158);
		}

		// class UEndGameEntity : public Uactor
		TEST_METHOD(Class__DeadByDaylight__EndGameEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameEntity, _skeletalMeshComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameEntity, 0x0238);
		}

		// class UEndGameEntityAnimInstance : public UanimInstance
		TEST_METHOD(Class__DeadByDaylight__EndGameEntityAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameEntityAnimInstance, _isFront, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameEntityAnimInstance, _isBack, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameEntityAnimInstance, UnknownData_Z73O, 0x0272);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameEntityAnimInstance, 0x0280);
		}

		// class UEndGameStateComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__EndGameStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, UnknownData_CQE1, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, _isEndGameOver, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, UnknownData_UV1Y, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, _worldTimeAtLastModification, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, UnknownData_VYUB, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, _timeDilation, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, _normalTotalTimeElapsedAtLastDilationModification, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, _endGameScenarioTrigger, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndGameStateComponent, UnknownData_M7JG, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameStateComponent, 0x0118);
		}

		// class UEnduranceVFXComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__EnduranceVFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnduranceVFXComponent, UnknownData_MLCV, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnduranceVFXComponent, 0x00C0);
		}

		// class UEnergyPoweredInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__EnergyPoweredInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnergyPoweredInterface, 0x0030);
		}

		// class UEnsureLoggingSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__EnsureLoggingSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnsureLoggingSubsystem, UnknownData_N1CV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnsureLoggingSubsystem, 0x0070);
		}

		// class Uentity : public Uactor
		TEST_METHOD(Class__DeadByDaylight__entity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uentity, _dissolveCurve, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uentity, _revealsCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uentity, _materialHelper, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uentity, _skeletalMesh, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uentity, 0x0250);
		}

		// class UEscapeBlocker : public Uactor
		TEST_METHOD(Class__DeadByDaylight__EscapeBlocker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeBlocker, _blockAllSurvivors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeBlocker, UnknownData_NT8S, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeBlocker, _camperBlocker, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeBlocker, _playerDetectionZone, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeBlocker, UnknownData_5D77, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeBlocker, 0x0260);
		}

		// class UEscapeDoor : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__EscapeDoor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, UnknownData_MZO3, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, EscapePositions, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, EscapeFire, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _killerOpenChargeable, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _openChargeable, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _ak_audio_escape, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _escapeDoorAnimInstance, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _rootComponent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _activated, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, UnknownData_I3LX, 0x0329);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _spotlight, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, UnknownData_N9CR, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _localOverlappingCamper, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, UnknownData_L7R1, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _perceptionStimuliComponent, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, _doorSwitchBlockableComponent, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoor, UnknownData_3R2R, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeDoor, 0x03B8);
		}

		// class UEscapeDoorAnimInstance : public USleepingAnimInstance
		TEST_METHOD(Class__DeadByDaylight__EscapeDoorAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoorAnimInstance, _isOpen, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoorAnimInstance, _isOpenByKiller, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeDoorAnimInstance, UnknownData_XP2H, 0x0282);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeDoorAnimInstance, 0x0290);
		}

		// class UEscapeOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__EscapeOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeOutlineUpdateStrategy, _doorOpenColorForSurvivor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeOutlineUpdateStrategy, _doorOpenColorForKiller, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeOutlineUpdateStrategy, 0x00E0);
		}

		// class UEscapeRequirementTracker : public UObject
		TEST_METHOD(Class__DeadByDaylight__EscapeRequirementTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeRequirementTracker, _escapeGenerators, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeRequirementTracker, _dbdGameState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeRequirementTracker, UnknownData_3D84, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeRequirementTracker, 0x0060);
		}

		// class UEscapeTile : public UTile
		TEST_METHOD(Class__DeadByDaylight__EscapeTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEscapeTile, UnknownData_761Z, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeTile, 0x0348);
		}

		// class UEventObjectComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__EventObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventObjectComponent, _eventId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventObjectComponent, UnknownData_JSKU, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventObjectComponent, 0x00C8);
		}

		// class UEventGeneratorComponent : public UEventObjectComponent
		TEST_METHOD(Class__DeadByDaylight__EventGeneratorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventGeneratorComponent, _updateOultineForSurvivor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventGeneratorComponent, _updateOultineForSlasher, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventGeneratorComponent, UnknownData_1DY6, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventGeneratorComponent, 0x00D0);
		}

		// class UEventHookComponent : public UEventObjectComponent
		TEST_METHOD(Class__DeadByDaylight__EventHookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventHookComponent, UnknownData_EK8G, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventHookComponent, 0x00D8);
		}

		// class UEvilWithinComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__EvilWithinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvilWithinComponent, OnTierChange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvilWithinComponent, _currentTier, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvilWithinComponent, _lastTierTimeStart, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEvilWithinComponent, UnknownData_OWQB, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEvilWithinComponent, 0x0128);
		}

		// class URestrictedPlacementAreaStrategy : public UObject
		TEST_METHOD(Class__DeadByDaylight__RestrictedPlacementAreaStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedPlacementAreaStrategy, UnknownData_XDG3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedPlacementAreaStrategy, RestrictedRadius, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedPlacementAreaStrategy, UnknownData_V56T, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedPlacementAreaStrategy, MaxHeightRestriction, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedPlacementAreaStrategy, 0x0070);
		}

		// class UExitGateSwitchesRestrictedPlacementAreaStrategy : public URestrictedPlacementAreaStrategy
		TEST_METHOD(Class__DeadByDaylight__ExitGateSwitchesRestrictedPlacementAreaStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExitGateSwitchesRestrictedPlacementAreaStrategy, 0x0070);
		}

		// class UExitOpenedIndicatorWidget : public UBaseIndicatorWidget
		TEST_METHOD(Class__DeadByDaylight__ExitOpenedIndicatorWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExitOpenedIndicatorWidget, 0x0330);
		}

		// class UExposerCirclingComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__ExposerCirclingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, DirectionFollows, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, UnknownData_01F0, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, MinHeight, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, MaxHeight, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, MinRadius, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, MaxRadius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, CirclingSpeed, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, DistanceBetweenPoints, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, BezierModifier, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, Samples, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerCirclingComponent, UnknownData_ES1S, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExposerCirclingComponent, 0x0270);
		}

		// class UExposerInteriorZoneComponent : public UBoxComponent
		TEST_METHOD(Class__DeadByDaylight__ExposerInteriorZoneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExposerInteriorZoneComponent, ExposerSpawnPoints, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExposerInteriorZoneComponent, 0x0460);
		}

		// class UFadeable : public UInterface
		TEST_METHOD(Class__DeadByDaylight__Fadeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFadeable, 0x0030);
		}

		// class UFasterChestSearch : public UstatusEffect
		TEST_METHOD(Class__DeadByDaylight__FasterChestSearch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFasterChestSearch, 0x02A8);
		}

		// class UFearMarketManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__FearMarketManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFearMarketManager, PendingPurchaseFearMarketItem, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFearMarketManager, UnknownData_C8IB, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFearMarketManager, _existingFearMarket, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFearMarketManager, _gameInstance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFearMarketManager, UnknownData_BI9M, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFearMarketManager, 0x00F8);
		}

		// class UFearMarketPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__FearMarketPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFearMarketPopupScreen, 0x0140);
		}

		// class UFireCracker : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__FireCracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, _effectArea, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, DebugDisplayEnabled, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, UnknownData_VAMM, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, _effectModifiers, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, _exploded, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, UnknownData_MKYF, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, _actorsInRange, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireCracker, _playerOwner, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFireCracker, 0x0318);
		}

		// class UFirecrackerEffectHandlerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__FirecrackerEffectHandlerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirecrackerEffectHandlerComponent, OnFirecrackerInRangeBegin, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirecrackerEffectHandlerComponent, OnFirecrackerInRangeUpdate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirecrackerEffectHandlerComponent, OnFirecrackerInRangeEnd, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirecrackerEffectHandlerComponent, _effectDataList, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFirecrackerEffectHandlerComponent, 0x00F8);
		}

		// class UFirecrackerStateMachine : public UStateMachine
		TEST_METHOD(Class__DeadByDaylight__FirecrackerStateMachine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFirecrackerStateMachine, 0x0130);
		}

		// class UFirstPersonViewComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__FirstPersonViewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFirstPersonViewComponent, UnknownData_QBQZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFirstPersonViewComponent, 0x00C0);
		}

		// class UFleeComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__FleeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFleeComponent, _threat, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFleeComponent, UnknownData_3IBK, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFleeComponent, 0x00D8);
		}

		// class UFlickeringLight : public UGeneratorDrivenActor
		TEST_METHOD(Class__DeadByDaylight__FlickeringLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _lightComponentType, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, UnknownData_4BGU, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _detailLevelBeforeCastShadows, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _castShadow, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, UnknownData_TW2N, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _innerConneAngle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _outerConneAngle, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _sourceLength, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _sourceRadius, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _intensity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _generatorActivated, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, UnknownData_5NQ8, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _lightIntensityTimeline, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _pointLightComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _rectLightComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLight, _spotLightComponent, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlickeringLight, 0x0290);
		}

		// class UFoliageActor : public Uactor
		TEST_METHOD(Class__DeadByDaylight__FoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageActor, _foliageHISM, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageActor, 0x0238);
		}

		// class UFoliageDensityContainer : public Uactor
		TEST_METHOD(Class__DeadByDaylight__FoliageDensityContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageDensityContainer, _foliageActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageDensityContainer, _foliageHISMs, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageDensityContainer, UnknownData_FEXF, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageDensityContainer, _mapFoliageDensityTunables, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageDensityContainer, 0x0328);
		}

		// class UFoliageDensityHISM : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__DeadByDaylight__FoliageDensityHISM)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageDensityHISM, UnknownData_WFUX, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageDensityHISM, 0x0690);
		}

		// class UFootSteps : public Uactor
		TEST_METHOD(Class__DeadByDaylight__FootSteps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, UnknownData_CAAU, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _raycastHalfAngle, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _raycastZOffset, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _raycastDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _material, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _minimumDecalSize, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _maximumDecalSize, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _projectionTickness, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, UnknownData_91I5, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _fadeCurve, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _veinsCurve, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _decalPoolSize, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _recycleThresholdPercentage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _recycleDistancePercentage, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _maxOverlapping, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _footSteps, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, _decalSpawner, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootSteps, UnknownData_HREO, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFootSteps, 0x0558);
		}

		// class UFootstepsPerceptionComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__FootstepsPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootstepsPerceptionComponent, _allowFootstepsSeenPerkFlags, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootstepsPerceptionComponent, _disallowFootstepsSeenPerkFlags, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootstepsPerceptionComponent, UnknownData_ATOD, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFootstepsPerceptionComponent, 0x00E0);
		}

		// class UFranklinsDemiseConsumedByEntityComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__FranklinsDemiseConsumedByEntityComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, UnknownData_S78E, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, _consumeTimer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, UnknownData_EDJY, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, _camperStatus, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, _previousOwner, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, _originatingPerkOwner, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFranklinsDemiseConsumedByEntityComponent, UnknownData_GLXD, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFranklinsDemiseConsumedByEntityComponent, 0x0120);
		}

		// class UFrenzyComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__FrenzyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, OnFrenzyStarted, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, OnFrenzyEnded, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, OnFrenzyEndedNoCooldown, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, OnInjuredBleedoutStartedDuringFrenzy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, OnFrenzyReadyToStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, UnknownData_JBGZ, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, _slasher, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, UnknownData_POJC, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, _cooldownInteraction, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyComponent, UnknownData_RSSU, 0x01B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrenzyComponent, 0x01C8);
		}

		// class ULevelTransition_LightsEffects_C : public ULevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__LevelTransition_LightsEffects__LevelTransition_LightsEffects_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelTransition_LightsEffects_C, UberGraphFrame, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelTransition_LightsEffects_C, 0x0240);
		}

		// class UBlockListFacade : public UGameInstanceSubsystem
		TEST_METHOD(Class__SocialBlockList__BlockListFacade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlockListFacade, UnknownData_LJWB, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockListFacade, 0x00F0);
		}

		// class UFriendManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__FriendManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendManager, UnknownData_6V36, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendManager, 0x0268);
		}

		// class UFriendSearchPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__FriendSearchPopupScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendSearchPopupScreen, UnknownData_0Q32, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendSearchPopupScreen, 0x01A0);
		}

		// class UFriendsListScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__FriendsListScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFriendsListScreen, UnknownData_MS9B, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendsListScreen, 0x0210);
		}

		// class UGameAssetLibrary : public UAssetLibrary
		TEST_METHOD(Class__DeadByDaylight__GameAssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameAssetLibrary, _gameInstance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameAssetLibrary, UnknownData_4AFZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameAssetLibrary, 0x00C8);
		}

		// class UGameEventAnalyticsComponent : public UObject
		TEST_METHOD(Class__DeadByDaylight__GameEventAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventAnalyticsComponent, UnknownData_JMWA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventAnalyticsComponent, 0x0048);
		}

		// class UOngoingGameEvent : public UObject
		TEST_METHOD(Class__DeadByDaylight__OngoingGameEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOngoingGameEvent, _eventData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOngoingGameEvent, UnknownData_BF6L, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOngoingGameEvent, 0x00A0);
		}

		// class UgameEventDispatcher : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__gameEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameEventDispatcher, UnknownData_W2C2, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameEventDispatcher, _recentGameEventTracker, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameEventDispatcher, _ongoingEvents, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameEventDispatcher, UnknownData_XW05, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgameEventDispatcher, 0x00F0);
		}

		// class UGameEventListenerCollectionComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__GameEventListenerCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventListenerCollectionComponent, UnknownData_XHT9, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventListenerCollectionComponent, 0x00D0);
		}

		// class UGameEventTracker : public UObject
		TEST_METHOD(Class__DeadByDaylight__GameEventTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventTracker, OnGameplayEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventTracker, OnGameflowEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEventTracker, UnknownData_5IGV, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEventTracker, 0x0068);
		}

		// class UGameFlowContextSystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__GameFlowContextSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameFlowContextSystem, UnknownData_INXX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameFlowContextSystem, m_RootMovie, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameFlowContextSystem, UnknownData_5R9R, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameFlowContextSystem, 0x0110);
		}

		// class UGameplayModifierFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__GameplayModifierFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayModifierFunctionLibrary, 0x0030);
		}

		// class UGameplayNotificationManager : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__GameplayNotificationManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayNotificationManager, UnknownData_K9BJ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayNotificationManager, 0x00E0);
		}

		// class UGameplayNotificationUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__GameplayNotificationUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayNotificationUtilities, 0x0030);
		}

		// class UGateFactory : public Uactor
		TEST_METHOD(Class__DeadByDaylight__GateFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGateFactory, 0x0230);
		}

		// class Ugenerator : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__generator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_QQCF, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, Activated, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, IsRepaired, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, IsPlaySkillcheckAesthetic, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, ForceRevealToLocalPlayer, 0x02E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_HCZB, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, KillerOutlineFadeCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, NativePercentComplete, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_X31T, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, OnGeneratorRepaired, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, OnGeneratorRepairedBySurvivor, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, OnIsDamagedChanged, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_G9L1, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, FireLevelScoreEventOnFix, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_DFYR, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _perceptionStimuliComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_CV53, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _repairSemanticTag, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_14W7, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _damageData, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_65BJ, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _isBlocked, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _isBlockedFromCharging, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_C3PZ, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _blockingSources, 0x03A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _generatorCharge, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _playerStartTimes, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_BGT5, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _isAutoCompleted, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, UnknownData_MZDW, 0x0429);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ugenerator, _overchargeLevel, 0x042C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ugenerator, 0x0430);
		}

		// class UGeneratorEntity : public Uactor
		TEST_METHOD(Class__DeadByDaylight__GeneratorEntity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntity, _associatedGenerator, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntity, _montagePlayer, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntity, UnknownData_PG8W, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorEntity, 0x0258);
		}

		// class UGeneratorEntityAnimInstance : public UanimInstance
		TEST_METHOD(Class__DeadByDaylight__GeneratorEntityAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntityAnimInstance, IsCorrupted, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntityAnimInstance, IsCorrupted_End, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntityAnimInstance, IsUncorrupted, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntityAnimInstance, IsUncorrupted_End, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorEntityAnimInstance, UnknownData_15Z7, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorEntityAnimInstance, 0x0280);
		}

		// class UGeneratorIndicatorWidget : public UBaseIndicatorWidget
		TEST_METHOD(Class__DeadByDaylight__GeneratorIndicatorWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorIndicatorWidget, 0x0330);
		}

		// class UGeneratorOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__GeneratorOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorOutlineUpdateStrategy, _unrepairedAuraColor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorOutlineUpdateStrategy, _fullyRepairedAuraColor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorOutlineUpdateStrategy, UnknownData_NIFU, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorOutlineUpdateStrategy, 0x0168);
		}

		// class UGenericTextInputPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__GenericTextInputPopupScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenericTextInputPopupScreen, UnknownData_WJ1U, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTextInputPopupScreen, 0x0158);
		}

		// class UGestureInteractionDefinition : public UinteractionDefinition
		TEST_METHOD(Class__DeadByDaylight__GestureInteractionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGestureInteractionDefinition, _gestureID, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGestureInteractionDefinition, UnknownData_GUD5, 0x0501);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGestureInteractionDefinition, 0x0510);
		}

		// class UGhostStalkedComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__GhostStalkedComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, OnIsMarkedChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, OnIsSpottingKillerChanged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, _isMarked, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, UnknownData_I57Y, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, _ghostKillerInstinctEffect, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, UnknownData_KAV2, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, _markTimer, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, UnknownData_1JIS, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, _killer, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, _stalkedComponent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkedComponent, UnknownData_ZFAN, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostStalkedComponent, 0x01F8);
		}

		// class UGhostStalkPowerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__GhostStalkPowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, UnknownData_TFGQ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, _stalkerComponent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, _ghostStalkedComponentClassPtr, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, _crouchAttackRequiredTimeSeconds, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, UnknownData_UTRI, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, _debugMode, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStalkPowerComponent, UnknownData_JPLA, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostStalkPowerComponent, 0x0160);
		}

		// class UGhostStealthComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__GhostStealthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, OnSuccessfulAttackInStealth, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, OnStealthStateChanged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, OnIsStealthChanged, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, OnIsBeingSpotChanged, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, Local_OnStealthCancelledByPlayer, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _stealthState, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, UnknownData_AJ5B, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _cooldownTimer, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _markers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, UnknownData_T0GK, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _markerMaxAngleOffset, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _useKillerInstinctWhenSpotted, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, UnknownData_E47D, 0x01B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _sightableComponent, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, _stalkerComponent, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostStealthComponent, UnknownData_5IEF, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostStealthComponent, 0x0200);
		}

		// class UPlayerProfileDAL : public UObject
		TEST_METHOD(Class__DeadByDaylight__PlayerProfileDAL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerProfileDAL, UnknownData_3FHH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerProfileDAL, 0x0088);
		}

		// class UPS4GRDKBaseProfileDAL : public UPlayerProfileDAL
		TEST_METHOD(Class__DeadByDaylight__PS4GRDKBaseProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPS4GRDKBaseProfileDAL, 0x0088);
		}

		// class UGRDKProfileDAL : public UPS4GRDKBaseProfileDAL
		TEST_METHOD(Class__DeadByDaylight__GRDKProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGRDKProfileDAL, 0x0088);
		}

		// class UHalloweenEventComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__HalloweenEventComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHalloweenEventComponent, _toxinVialComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHalloweenEventComponent, UnknownData_2AIK, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHalloweenEventComponent, 0x0140);
		}

		// class UHasTokenOrActivationTimerElapsedIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__HasTokenOrActivationTimerElapsedIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasTokenOrActivationTimerElapsedIconStrategy, 0x0030);
		}

		// class UHasTokenPerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__HasTokenPerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasTokenPerkIconStrategy, 0x0030);
		}

		// class UHatch : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__Hatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, UnknownData_39VI, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, _hatchState, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, _isSurvivorEscaping, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, _isEndGameOver, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, _isForceOpen, 0x030B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, _attemptToCloseHatchOnNextEscape, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatch, UnknownData_XXYK, 0x030D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatch, 0x0330);
		}

		// class UHatchOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__HatchOutlineUpdateStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatchOutlineUpdateStrategy, 0x00E0);
		}

		// class UHexSpawner : public UActorSpawner
		TEST_METHOD(Class__DeadByDaylight__HexSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexSpawner, UnknownData_DQS5, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexSpawner, UnknownData_AUIU, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexSpawner, 0x02E0);
		}

		// class UPlayerOverlapHISMComponent : public UHISMMaterialHelperComponent
		TEST_METHOD(Class__DeadByDaylight__PlayerOverlapHISMComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerOverlapHISMComponent, _playerOverlapOverrides, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerOverlapHISMComponent, 0x06C0);
		}

		// class UHitValidationAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__HitValidationAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidationAnalyticsComponent, UnknownData_T44Z, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitValidationAnalyticsComponent, 0x00C8);
		}

		// class UHitValidationConfigsComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__HitValidationConfigsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidationConfigsComponent, UnknownData_JN3V, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitValidationConfigsComponent, 0x0100);
		}

		// class UHitValidatorAnalyticsListenerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__HitValidatorAnalyticsListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorAnalyticsListenerComponent, UnknownData_632V, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitValidatorAnalyticsListenerComponent, 0x00D0);
		}

		// class UHitValidatorConfigurator : public UBaseHitValidationConfigurator
		TEST_METHOD(Class__DeadByDaylight__HitValidatorConfigurator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorConfigurator, _configName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorConfigurator, UnknownData_3C58, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitValidatorConfigurator, 0x00D8);
		}

		// class UHookableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__HookableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookableComponent, UnknownData_BLSM, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookableComponent, 0x0150);
		}

		// class UHookAnalyticsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__HookAnalyticsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookAnalyticsBlueprintLibrary, 0x0030);
		}

		// class UHookedIndicatorWidget : public UBaseIndicatorWidget
		TEST_METHOD(Class__DeadByDaylight__HookedIndicatorWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookedIndicatorWidget, HookedIndicatorDuration, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookedIndicatorWidget, UnknownData_DYJZ, 0x0334);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookedIndicatorWidget, 0x0340);
		}

		// class UHooksWithSurvivorRestrictedPlacementAreaStrategy : public URestrictedPlacementAreaStrategy
		TEST_METHOD(Class__DeadByDaylight__HooksWithSurvivorRestrictedPlacementAreaStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHooksWithSurvivorRestrictedPlacementAreaStrategy, UnknownData_6LZP, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHooksWithSurvivorRestrictedPlacementAreaStrategy, 0x0088);
		}

		// class UHudScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__HudScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreen, UnknownData_1DID, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudScreen, 0x0210);
		}

		// class UHudScreenCoreUMG : public UHudScreen
		TEST_METHOD(Class__DeadByDaylight__HudScreenCoreUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _rootWidget, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, UnknownData_UF27, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _tutorialsUtilities, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _playerStatusInterfaces, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _hudObjectiveViewData, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _interactionProgressViewData, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _itemBundleViewData, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, UnknownData_XN33, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _powerBundleViewData, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, _playerStatusViewData, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenCoreUMG, UnknownData_UY35, 0x05F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudScreenCoreUMG, 0x06B8);
		}

		// class UHudScreenUMG : public UHudScreen
		TEST_METHOD(Class__DeadByDaylight__HudScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, UnknownData_4F75, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _atlantaHud, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _safeZoneManager, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _closeNoiseIndicatorWidgets, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _exitOpenedIndicatorWidgets, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _generatorIndicatorWidgets, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _hatchIndicatorWidgets, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _hookedIndicatorWidgets, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _killerCuesIndicatorWidgets, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _loudNoiseIndicatorWidgets, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _promptManager, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, _objectiveManager, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHudScreenUMG, AtlantaObjectiveClass, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudScreenUMG, 0x0318);
		}

		// class UCannibalChainsawPower : public UInterface
		TEST_METHOD(Class__DeadByDaylight__CannibalChainsawPower)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawPower, 0x0030);
		}

		// class UChainLinkable : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ChainLinkable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainLinkable, 0x0030);
		}

		// class UChargeableProgressSource : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ChargeableProgressSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargeableProgressSource, 0x0030);
		}

		// class UIdentityValidation : public UObject
		TEST_METHOD(Class__DeadByDaylight__IdentityValidation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIdentityValidation, UnknownData_34AZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIdentityValidation, 0x0040);
		}

		// class Uethereal : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ethereal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uethereal, 0x0030);
		}

		// class UMadness : public UInterface
		TEST_METHOD(Class__DeadByDaylight__Madness)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMadness, 0x0030);
		}

		// class UMovementSettings : public UInterface
		TEST_METHOD(Class__DeadByDaylight__MovementSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementSettings, 0x0030);
		}

		// class UInactiveCooldownTimerPerkIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__InactiveCooldownTimerPerkIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInactiveCooldownTimerPerkIconStrategy, 0x0030);
		}

		// class UInboxScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__InboxScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxScreen, _umgScreen, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxScreen, _newsMessages, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxScreen, _rewardsMessages, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxScreen, _socialMessages, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInboxScreen, UnknownData_VJVA, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInboxScreen, 0x01F0);
		}

		// class UInfectedInteractableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__InfectedInteractableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectedInteractableComponent, VomitAlphaCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectedInteractableComponent, VomitAlphaParameterName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectedInteractableComponent, UnknownData_H8IS, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectedInteractableComponent, _vomitAlphaTimeline, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectedInteractableComponent, UnknownData_ITLA, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfectedInteractableComponent, 0x01A8);
		}

		// class UIniAssetLibrary : public UAssetLibrary
		TEST_METHOD(Class__DeadByDaylight__IniAssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIniAssetLibrary, UnknownData_QFB5, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIniAssetLibrary, 0x00C0);
		}

		// class UInteractionAnimNotify : public UanimNotify
		TEST_METHOD(Class__DeadByDaylight__InteractionAnimNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAnimNotify, NotifyID, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAnimNotify, UnknownData_PADD, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionAnimNotify, 0x0050);
		}

		// class UInteractionDetectorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__InteractionDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionDetectorComponent, _detectionPrimitive, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionDetectorComponent, _overlappingInteractables, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionDetectorComponent, _overlappingPrimitiveComponents, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionDetectorComponent, _ignoredActors, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionDetectorComponent, 0x01B0);
		}

		// class UInteractionProficiency : public UObject
		TEST_METHOD(Class__DeadByDaylight__InteractionProficiency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionProficiency, InteractionIDs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionProficiency, UnknownData_39CU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionProficiency, 0x0048);
		}

		// class Uinteractor : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__interactor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, UnknownData_VQXY, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, interactorName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, UnknownData_3EJU, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, IsUsable, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, UnknownData_GREO, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, _lock, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, _reservation, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, UnknownData_96DP, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, _currentInteraction, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, _interactionDefinitions, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, _activationDefinition, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uinteractor, UnknownData_DVNL, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uinteractor, 0x02F0);
		}

		// class UinterruptionDefinition : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__interruptionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, InterruptionID, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _usesWorldCoordinates, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _snapInterruptor, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, UnknownData_HIYT, 0x021E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _interruptionSnapPointForInterruptor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _animationMontageToPlayOnInterruptionEnterForInterruptor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _animationMontageToPlayOnInterruptionForInterruptorNew, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _animationMontageToPlayOnInterruptionForInterrupteeNew, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _pickUpOnInterrupt, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _canInterruptWhileCarrying, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _useMontageFollower, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, UnknownData_FFJM, 0x02B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, _maxHeightDeltaBetweenCharacters, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UinterruptionDefinition, UnknownData_X461, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UinterruptionDefinition, 0x02C0);
		}

		// class UInventoryHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__InventoryHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInventoryHandler, UnknownData_I7YG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInventoryHandler, 0x00A8);
		}

		// class UIsMaximumInfected : public UGameplayModifierCondition
		TEST_METHOD(Class__DeadByDaylight__IsMaximumInfected)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsMaximumInfected, 0x00D0);
		}

		// class UIsNotSightedByAnyCharacter : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DeadByDaylight__IsNotSightedByAnyCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsNotSightedByAnyCharacter, UnknownData_FBJ8, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsNotSightedByAnyCharacter, 0x00F0);
		}

		// class UItemBlueprint : public USkeletalMeshActor
		TEST_METHOD(Class__DeadByDaylight__ItemBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemBlueprint, 0x02B8);
		}

		// class UItemPerformedInteraction : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ItemPerformedInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemPerformedInteraction, 0x0030);
		}

		// class URecommendationsFilter : public UObject
		TEST_METHOD(Class__DeadByDaylight__RecommendationsFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecommendationsFilter, UnknownData_1JMF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecommendationsFilter, 0x0038);
		}

		// class UItemRecommendationsFilter : public URecommendationsFilter
		TEST_METHOD(Class__DeadByDaylight__ItemRecommendationsFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UItemRecommendationsFilter, UnknownData_8VD4, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemRecommendationsFilter, 0x0060);
		}

		// class UItemVfx : public UBaseVFX
		TEST_METHOD(Class__DeadByDaylight__ItemVfx)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemVfx, 0x0238);
		}

		// class UTurn180 : public UInterface
		TEST_METHOD(Class__DeadByDaylight__Turn180)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurn180, 0x0030);
		}

		// class UViewRotationStrategy : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ViewRotationStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewRotationStrategy, 0x0030);
		}

		// class UKillerBlindingFXComponent : public UBlindingFXComponent
		TEST_METHOD(Class__DeadByDaylight__KillerBlindingFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerBlindingFXComponent, UnknownData_KMOI, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerBlindingFXComponent, _blindedSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerBlindingFXComponent, UnknownData_V97F, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerBlindingFXComponent, 0x0150);
		}

		// class UKillerFootstepsPerceptionComponent : public UFootstepsPerceptionComponent
		TEST_METHOD(Class__DeadByDaylight__KillerFootstepsPerceptionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerFootstepsPerceptionComponent, 0x00E0);
		}

		// class UKillerInstinctComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__KillerInstinctComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerInstinctComponent, _killerInstinctParticleSystem, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerInstinctComponent, UnknownData_9Z2H, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerInstinctComponent, _camperHighlightColorOverride, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerInstinctComponent, UnknownData_ITUO, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerInstinctComponent, 0x00E8);
		}

		// class UKillerIntroComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__KillerIntroComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerIntroComponent, UnknownData_BKJ6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerIntroComponent, _killerIntroCompletedPercentNeededToFPV, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerIntroComponent, UnknownData_CSIU, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerIntroComponent, 0x00D8);
		}

		// class UNoiseIndicatorWidget : public UBaseIndicatorWidget
		TEST_METHOD(Class__DeadByDaylight__NoiseIndicatorWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseIndicatorWidget, 0x0330);
		}

		// class UKillerNoiseIndicatorWidget : public UNoiseIndicatorWidget
		TEST_METHOD(Class__DeadByDaylight__KillerNoiseIndicatorWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerNoiseIndicatorWidget, 0x0330);
		}

		// class UKillerOpenGate : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DeadByDaylight__KillerOpenGate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerOpenGate, _openGateMontage, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerOpenGate, UnknownData_RRD4, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerOpenGate, 0x0680);
		}

		// class UKillerProjectileDodgeComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__KillerProjectileDodgeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectileDodgeComponent, _killerProjectile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectileDodgeComponent, _proximitySurvivors, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerProjectileDodgeComponent, UnknownData_J9PP, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerProjectileDodgeComponent, 0x00F0);
		}

		// class UKillerProjectileLauncher : public UBaseProjectileLauncher
		TEST_METHOD(Class__DeadByDaylight__KillerProjectileLauncher)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerProjectileLauncher, 0x0180);
		}

		// class UKillerSoundCuesComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__KillerSoundCuesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerSoundCuesComponent, UnknownData_X75X, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerSoundCuesComponent, 0x00C8);
		}

		// class UKillInteractionDefinition : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DeadByDaylight__KillInteractionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillInteractionDefinition, _nonOverrideableTargetInteractions, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillInteractionDefinition, _chargeCompleted, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillInteractionDefinition, _isKillShownInThirdPerson, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillInteractionDefinition, _manuallyManageMeshHiding, 0x063A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillInteractionDefinition, UnknownData_CG6A, 0x063B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillInteractionDefinition, 0x0640);
		}

		// class ULacerationUIData : public UInterface
		TEST_METHOD(Class__DeadByDaylight__LacerationUIData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULacerationUIData, 0x0030);
		}

		// class UlanternInteractable : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__lanternInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UlanternInteractable, OnLanternStateChanged, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlanternInteractable, OnLanternCollectedByPlayerCosmetic, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlanternInteractable, UnknownData_W88J, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlanternInteractable, _collectableClass, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UlanternInteractable, UnknownData_DFUN, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UlanternInteractable, 0x0330);
		}

		// class ULanternLightCollectable : public Ucollectable
		TEST_METHOD(Class__DeadByDaylight__LanternLightCollectable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULanternLightCollectable, _parentLantern, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULanternLightCollectable, 0x0428);
		}

		// class ULegalMenuScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__LegalMenuScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalMenuScreen, UnknownData_V4UL, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegalMenuScreen, 0x0168);
		}

		// class ULegalMenuScreenScaleform : public ULegalMenuScreen
		TEST_METHOD(Class__DeadByDaylight__LegalMenuScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegalMenuScreenScaleform, 0x0168);
		}

		// class ULegalMenuScreenUMG : public ULegalMenuScreen
		TEST_METHOD(Class__DeadByDaylight__LegalMenuScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegalMenuScreenUMG, _atlLegalMenuScreen, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegalMenuScreenUMG, 0x0170);
		}

		// class UWorldRunawayMeshComponent : public UskeletalMeshComponent
		TEST_METHOD(Class__DeadByDaylight__WorldRunawayMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldRunawayMeshComponent, _runAwayMustTickDuration, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldRunawayMeshComponent, _returnMustTickDuration, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldRunawayMeshComponent, UnknownData_8RHK, 0x0B64);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldRunawayMeshComponent, 0x0B80);
		}

		// class ULevelCrowWRMeshComponent : public UWorldRunawayMeshComponent
		TEST_METHOD(Class__DeadByDaylight__LevelCrowWRMeshComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCrowWRMeshComponent, 0x0B80);
		}

		// class ULevelParadise : public Uactor
		TEST_METHOD(Class__DeadByDaylight__LevelParadise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, LoopStartDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, LoopDistance, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, MainPlayerSpawnPoint, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, OtherSurvivorSpawnPoints, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, ParadiseTiles, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, ParadiseViewTarget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, UnknownData_3MKY, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, _spawnedMainPawn, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelParadise, _runnerComponent, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelParadise, 0x0320);
		}

		// class ULevelReadyToPlayPlayerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__LevelReadyToPlayPlayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelReadyToPlayPlayerComponent, _levelReadyToPlayRequirementsTarget, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelReadyToPlayPlayerComponent, UnknownData_G6GX, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelReadyToPlayPlayerComponent, 0x00E8);
		}

		// class ULevelUpPopupScreenUMG : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__LevelUpPopupScreenUMG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelUpPopupScreenUMG, 0x0140);
		}

		// class ULightFollower : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__LightFollower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightFollower, UnknownData_3IOY, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightFollower, 0x00E8);
		}

		// class ULightFunctionActorSpawner : public UActorSpawner
		TEST_METHOD(Class__DeadByDaylight__LightFunctionActorSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightFunctionActorSpawner, LightFunctionTexture, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightFunctionActorSpawner, 0x02D0);
		}

		// class ULightingData : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__LightingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingData, DefaultLighting, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingData, DefaultAtlantaLighting, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingData, Descriptions, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightingData, 0x00A8);
		}

		// class ULightingFactory : public UObject
		TEST_METHOD(Class__DeadByDaylight__LightingFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingFactory, _data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightingFactory, 0x0038);
		}

		// class ULightingHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__LightingHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingHelper, _levelLighting, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingHelper, _levelLightingWithoutExposure, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingHelper, _lightingInterpolator, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingHelper, _lightingFactory, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingHelper, _postProcessCache, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingHelper, UnknownData_34EI, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightingHelper, 0x0098);
		}

		// class ULightingInterpolator : public UObject
		TEST_METHOD(Class__DeadByDaylight__LightingInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingInterpolator, OnInterpolationDone, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingInterpolator, UnknownData_SIT2, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightingInterpolator, _targetLighting, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightingInterpolator, 0x0080);
		}

		// class ULoadingScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__LoadingScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreen, 0x0120);
		}

		// class ULoadingScreenScaleform : public ULoadingScreen
		TEST_METHOD(Class__DeadByDaylight__LoadingScreenScaleform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreenScaleform, UnknownData_8RMD, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreenScaleform, 0x0138);
		}

		// class ULoadingScreenUMG : public ULoadingScreen
		TEST_METHOD(Class__DeadByDaylight__LoadingScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadingScreenUMG, _loadingScreen, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadingScreenUMG, 0x0128);
		}

		// class ULobbyControllerSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__LobbyControllerSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyControllerSubsystem, _localPlayerDisplayStandController, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyControllerSubsystem, _displayStandControllers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyControllerSubsystem, UnknownData_XAXV, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyControllerSubsystem, 0x00B0);
		}

		// class ULobbyDisplayStandController : public UObject
		TEST_METHOD(Class__DeadByDaylight__LobbyDisplayStandController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyDisplayStandController, UnknownData_F449, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyDisplayStandController, 0x00F0);
		}

		// class ULocalEventManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__LocalEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalEventManager, UnknownData_EFXM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalEventManager, 0x0C48);
		}

		// class ULocalPlayerTrackerComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__LocalPlayerTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayerTrackerComponent, TrackerOnLocallyObservedChanged, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerTrackerComponent, 0x0220);
		}

		// class ULocker : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__Locker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, OnSurvivorInLockerChanged, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, FastDoorActivationAudibleRange, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, NormalDoorActivationAudibleRange, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _montageFollower, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _montagePlayer, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _playerOpeningLocker, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _survivorInLocker, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _mainInteractor, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _frontInteractionZone, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _searchEmpty, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _searchPlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _killerInteractionActor, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _interactionExitClosetSemantics, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, UnknownData_C77J, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _preventAllInteractions, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, _preventAllInteractionsLocally, 0x0399);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocker, UnknownData_J9R6, 0x039A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocker, 0x03B0);
		}

		// class ULockerAmmoActorOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__LockerAmmoActorOutlineUpdateStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockerAmmoActorOutlineUpdateStrategy, 0x00E0);
		}

		// class ULockerAnimInstance : public USleepingAnimInstance
		TEST_METHOD(Class__DeadByDaylight__LockerAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockerAnimInstance, 0x0280);
		}

		// class ULoudNoiseEventSystem : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__LoudNoiseEventSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseEventSystem, UnknownData_ZM12, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudNoiseEventSystem, 0x0128);
		}

		// class ULoudNoiseHUDIndicator : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__LoudNoiseHUDIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, MaskMesh, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, DistortionMesh, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, EdgePadding, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, CornerRoundness, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, ScreenFadeOutDistance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, UnknownData_VGZA, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, LoudNoiseAddedEvent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, UnknownData_WXI9, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoudNoiseHUDIndicator, _trackedNoises, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudNoiseHUDIndicator, 0x0280);
		}

		// class ULoudNoiseNotifier : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__LoudNoiseNotifier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudNoiseNotifier, 0x0030);
		}

		// class ULoudNoiseUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__LoudNoiseUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoudNoiseUtilities, 0x0030);
		}

		// class ULunarEventComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__LunarEventComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULunarEventComponent, UnknownData_3BL1, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULunarEventComponent, _lanternCollectedCount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULunarEventComponent, _additionalEventProgressCount, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULunarEventComponent, UnknownData_C2WG, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULunarEventComponent, 0x0108);
		}

		// class UMagicFountain : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__MagicFountain)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicFountain, 0x02D8);
		}

		// class UMagicFountainOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__MagicFountainOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicFountainOutlineUpdateStrategy, _outlineColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicFountainOutlineUpdateStrategy, UnknownData_VXQQ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicFountainOutlineUpdateStrategy, 0x00D8);
		}

		// class UManualIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__ManualIconStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UManualIconStrategy, UnknownData_C18A, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UManualIconStrategy, 0x0038);
		}

		// class UmapActorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__mapActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapActorComponent, category, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapActorComponent, UnknownData_Z3CG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapActorComponent, _mapActorCollider, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapActorComponent, UnknownData_RS4H, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapActorComponent, _detectionEnabled, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmapActorComponent, UnknownData_1N9C, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmapActorComponent, 0x00E8);
		}

		// class UMapActorDB : public UObject
		TEST_METHOD(Class__DeadByDaylight__MapActorDB)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapActorDB, UnknownData_VYUZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapActorDB, 0x0070);
		}

		// class UMapActorDetectorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__MapActorDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapActorDetectorComponent, OnActorDetected, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapActorDetectorComponent, CollectedCategories, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapActorDetectorComponent, _primitive, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapActorDetectorComponent, 0x00E0);
		}

		// class UMapData : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__MapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, themeName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, themeWeather, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, audioStateThemes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, audioStateWeather, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, audioGameStartEvent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, MapWidth, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, MapHeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, Draft, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, UnknownData_8AKV, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, MapTileProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, Blackboard, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, Gesture, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, UnknownData_F8BR, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapData, _proceduralGenerationData, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapData, 0x00A8);
		}

		// class UAudioCurveSourceComponent : public UAudioComponent
		TEST_METHOD(Class__FacialAnimation__AudioCurveSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSourceBindingName, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, CurveSyncOffset, 0x080C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCurveSourceComponent, UnknownData_VHZK, 0x0810);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCurveSourceComponent, 0x0840);
		}

		// class UMatchHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__MatchHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchHandler, 0x0030);
		}

		// class UMatchManagementScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__MatchManagementScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatchManagementScreen, UnknownData_5820, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchManagementScreen, 0x01E0);
		}

		// class UMaterialPerThemeData : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__MaterialPerThemeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialPerThemeData, _materialMap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialPerThemeData, 0x0088);
		}

		// class UMaterialPerThemeSettings : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__MaterialPerThemeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialPerThemeSettings, _themeMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialPerThemeSettings, _data, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialPerThemeSettings, 0x0090);
		}

		// class UMeatHook : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__MeatHook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_GLXF, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, IsSurvivorStruggling, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, WasSurvivorStruggleCancelled, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_YYNO, 0x02F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, ClipRegions, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, IsInBasement, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, IsBreakable, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, IsSabotageable, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_3FEX, 0x030B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, HookIdentityTag, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, SnapHookedCharacter, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, FullyHooked, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_6BWY, 0x031A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, YawAdjustTimer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, HookYaw, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, TargetHookYaw, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _struggleThreshold, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_MQ3K, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _characterPusher, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _slasherCollisionBlocker, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _eventListener, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _hookedSurvivor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _hookBreakerPlayer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_AJ17, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _hookAnalytics, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_B4H8, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _campersThatSabotagedMeatHook, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _mainInteractor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _meatHookEffect, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _unhook, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _camperHookedSnapTransform, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _entity, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_5HRL, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _perceptionStimuliComponent, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _interactingPlayer, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, _meathookInitilized, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHook, UnknownData_7G0V, 0x05E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeatHook, 0x0608);
		}

		// class UMeatHookAnimInstance : public UanimInstance
		TEST_METHOD(Class__DeadByDaylight__MeatHookAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookAnimInstance, isBroken, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookAnimInstance, UnknownData_TGLX, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookAnimInstance, Yaw, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookAnimInstance, UnknownData_CZ1Q, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeatHookAnimInstance, 0x0280);
		}

		// class UMeatHookOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__MeatHookOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookOutlineUpdateStrategy, HookedOutlineColorSlasher, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookOutlineUpdateStrategy, CarryingOutlineColorSlasher, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookOutlineUpdateStrategy, DefaultOutlineColorSlasher, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeatHookOutlineUpdateStrategy, VisibleOutlineColorCamper, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeatHookOutlineUpdateStrategy, 0x0170);
		}

		// class UMeatHookStateMachine : public UStateMachine
		TEST_METHOD(Class__DeadByDaylight__MeatHookStateMachine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeatHookStateMachine, 0x0130);
		}

		// class UMenuAssetLibrary : public UItemsAssetLibrary
		TEST_METHOD(Class__DeadByDaylight__MenuAssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAssetLibrary, UnknownData_ZG12, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAssetLibrary, 0x0130);
		}

		// class UMenuMeatHook : public Uactor
		TEST_METHOD(Class__DeadByDaylight__MenuMeatHook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuMeatHook, UnknownData_3RN1, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuMeatHook, _charmSpawnerComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuMeatHook, UnknownData_5YMS, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuMeatHook, 0x0258);
		}

		// class UMenuUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__MenuUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuUtilities, 0x0030);
		}

		// class UMigrationSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__MigrationSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMigrationSubsystem, UnknownData_I4ZV, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMigrationSubsystem, 0x0090);
		}

		// class UMobileProfileDAL : public UPlayerProfileDAL
		TEST_METHOD(Class__DeadByDaylight__MobileProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileProfileDAL, 0x0088);
		}

		// class UMontagePlayer : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__MontagePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, OnMontageStarted, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, UnknownData_EZ6H, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, OnMontageEnded, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, UnknownData_P3MC, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _animationMappingsTable, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _playerSpecificMappingsTable, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _currentlyPlayingMontage, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, UnknownData_MLWS, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _activeMontagesInfo, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _outSectionName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _timeBeforeOut, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, _skeletalMeshComponent, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMontagePlayer, UnknownData_KADU, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMontagePlayer, 0x0200);
		}

		// class UMoriableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__MoriableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoriableComponent, _moriInteractionRelativeLocation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoriableComponent, UnknownData_VG98, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoriableComponent, _moriInteraction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoriableComponent, UnknownData_OUKD, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoriableComponent, 0x00D8);
		}

		// class UMoriComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__MoriComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoriComponent, UnknownData_VGMB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoriComponent, _moriInteractionClasses, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoriComponent, 0x00E0);
		}

		// class UMovementModifierActor : public Uactor
		TEST_METHOD(Class__DeadByDaylight__MovementModifierActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementModifierActor, MaxSpeedMultiplier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementModifierActor, UnknownData_LKG6, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementModifierActor, 0x0238);
		}

		// class UMysteryBoxPopupScreenUMG : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__MysteryBoxPopupScreenUMG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMysteryBoxPopupScreenUMG, 0x0140);
		}

		// class UNavArea_Danger : public UNavArea
		TEST_METHOD(Class__DeadByDaylight__NavArea_Danger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Danger, 0x0050);
		}

		// class UNavArea_Slasher : public UNavArea
		TEST_METHOD(Class__DeadByDaylight__NavArea_Slasher)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Slasher, 0x0050);
		}

		// class UNavigationQueryFilter_EvadeLoop : public UNavigationQueryFilter
		TEST_METHOD(Class__DeadByDaylight__NavigationQueryFilter_EvadeLoop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_EvadeLoop, UnknownData_IGLQ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter_EvadeLoop, 0x0288);
		}

		// class UNavigationScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__NavigationScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationScreen, UnknownData_EA0X, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationScreen, 0x02B0);
		}

		// class UNavigationScreenScaleform : public UNavigationScreen
		TEST_METHOD(Class__DeadByDaylight__NavigationScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationScreenScaleform, 0x02B0);
		}

		// class UNavigationScreenUMG : public UNavigationScreen
		TEST_METHOD(Class__DeadByDaylight__NavigationScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationScreenUMG, UnknownData_N96L, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationScreenUMG, _atlNavigationScreen, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationScreenUMG, 0x02C0);
		}

		// class UNewContentPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__NewContentPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewContentPopupScreen, 0x0140);
		}

		// class UNewsContentManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__NewsContentManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsContentManager, UnknownData_KYGJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsContentManager, _gameInstance, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewsContentManager, UnknownData_45QF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewsContentManager, 0x00F8);
		}

		// class UNoPerkGeneratorRepairEscapeAchievement : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__NoPerkGeneratorRepairEscapeAchievement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoPerkGeneratorRepairEscapeAchievement, UnknownData_MYEZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoPerkGeneratorRepairEscapeAchievement, 0x00E0);
		}

		// class UNotExhaustedActivationTimerElapsedIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__NotExhaustedActivationTimerElapsedIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotExhaustedActivationTimerElapsedIconStrategy, 0x0030);
		}

		// class UObjectPlacementUpdateStrategy : public UObject
		TEST_METHOD(Class__DeadByDaylight__ObjectPlacementUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacementUpdateStrategy, UnknownData_46TS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPlacementUpdateStrategy, 0x0050);
		}

		// class UAlwaysUseCurrentLocationPlacementStrategy : public UObjectPlacementUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__AlwaysUseCurrentLocationPlacementStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlwaysUseCurrentLocationPlacementStrategy, 0x0050);
		}

		// class UBufferLastValidLocationObjectPlacementStrategy : public UObjectPlacementUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__BufferLastValidLocationObjectPlacementStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBufferLastValidLocationObjectPlacementStrategy, _maxDistanceToOwner, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBufferLastValidLocationObjectPlacementStrategy, UnknownData_Y827, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBufferLastValidLocationObjectPlacementStrategy, 0x0058);
		}

		// class UObjectPlacementValidationWithRestrictionStrategy : public UDefaultObjectPlacementValidationStrategy
		TEST_METHOD(Class__DeadByDaylight__ObjectPlacementValidationWithRestrictionStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacementValidationWithRestrictionStrategy, _restrictedAreas, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPlacementValidationWithRestrictionStrategy, 0x00F0);
		}

		// class UObjectPlacerComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__ObjectPlacerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _objectMesh, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _socketName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _indicatorOffsetY, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _indicatorOffsetX, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _itemObjectId, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _showIndicator, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _stayActiveWhileItemInUse, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, UnknownData_CV0E, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _objectPlacementUpdateStrategy, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, _objectPlacementValidationStrategy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPlacerComponent, UnknownData_PNZ2, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPlacerComponent, 0x0260);
		}

		// class UOfferingCard : public Uactor
		TEST_METHOD(Class__DeadByDaylight__OfferingCard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingCard, RarityTextures, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingCard, OfferingTypeTextures, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingCard, 0x0250);
		}

		// class UOfferingEffectCollection : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__OfferingEffectCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingEffectCollection, UnknownData_HCY1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingEffectCollection, 0x0088);
		}

		// class UOfferingHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__OfferingHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingHandler, _gameInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingHandler, _levelPerkIDs, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingHandler, 0x0048);
		}

		// class UOfferingSequenceAssets : public Uactor
		TEST_METHOD(Class__DeadByDaylight__OfferingSequenceAssets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceAssets, OfferingRevealDelays, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceAssets, Cards, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingSequenceAssets, 0x0250);
		}

		// class UOfferingSequenceManager : public Uactor
		TEST_METHOD(Class__DeadByDaylight__OfferingSequenceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, _gameInstance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, _localPlayerController, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, _offeringHandler, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, _sequenceAssets, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, _hud, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, _offeringCamera, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfferingSequenceManager, UnknownData_TD9K, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingSequenceManager, 0x0280);
		}

		// class UOfferingUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__OfferingUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingUtilities, 0x0030);
		}

		// class UOfflineLobbyLevel : public ULobbyLevel
		TEST_METHOD(Class__DeadByDaylight__OfflineLobbyLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbyInviteButtonOffset, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, UnknownData_ZD4H, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _roleSelectionCamperSpawns, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _roleSelectionSlasherSpawns, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _offlineLobbyLocalSlasherSpawn, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbyEmptySlotFxOffset, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _offlineLobbyLocalCamperSpawn, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, UnknownData_UETI, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbySlasherPOVTrackerOffsets, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbyEmptySlotSilhouette, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbySlasherDisplayStands, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbyCamperDisplayStands, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _meatHookForCustomization, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _meatHookSpawn, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _charmForCustomizationZoom, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _camperCharmSpawn, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _slasherCharmSpawn, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _partyLobbyEmptySlotPawns, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, UnknownData_FYJP, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, _destroyingPawns, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOfflineLobbyLevel, UnknownData_MW9R, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfflineLobbyLevel, 0x0470);
		}

		// class UOniBasicAttackComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__OniBasicAttackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniBasicAttackComponent, UnknownData_KXVF, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniBasicAttackComponent, 0x00C8);
		}

		// class UOniDemonModeAttackStateComponent : public UChargedAttackStateComponent
		TEST_METHOD(Class__DeadByDaylight__OniDemonModeAttackStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDemonModeAttackStateComponent, OnChargedAttackReadyChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDemonModeAttackStateComponent, UnknownData_FBCU, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonModeAttackStateComponent, 0x00D8);
		}

		// class UOnlineLobbyLevel : public ULobbyLevel
		TEST_METHOD(Class__DeadByDaylight__OnlineLobbyLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobbyLevel, ProceduralGenerationData, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobbyLevel, _onlineLobbySlasherPOVTrackerOffsets, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobbyLevel, _onlineLobbyCamperDisplayStands, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineLobbyLevel, _onlineLobbySlasherDisplayStands, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineLobbyLevel, 0x02D0);
		}

		// class UOnlinePrivilegeManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__OnlinePrivilegeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePrivilegeManager, UnknownData_4PHF, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePrivilegeManager, 0x0040);
		}

		// class UOnlineSystemHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__OnlineSystemHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, UnknownData_P06X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, _cachedLocalPlayer, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, _gameInstance, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, _gameSessionDS, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, UnknownData_FMB0, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, _serverInstance, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, UnknownData_8RPP, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, _crossPlatformManager, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSystemHandler, UnknownData_24LW, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSystemHandler, 0x0438);
		}

		// class UOutfitHelper : public UObject
		TEST_METHOD(Class__DeadByDaylight__OutfitHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutfitHelper, 0x0030);
		}

		// class UOutfitRecommendationsFilter : public URecommendationsFilter
		TEST_METHOD(Class__DeadByDaylight__OutfitRecommendationsFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutfitRecommendationsFilter, UnknownData_QUL0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutfitRecommendationsFilter, 0x0060);
		}

		// class UOutlineUpdateStrategyTickManager : public UWorldSubsystem
		TEST_METHOD(Class__DeadByDaylight__OutlineUpdateStrategyTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlineUpdateStrategyTickManager, UnknownData_46EW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutlineUpdateStrategyTickManager, 0x0040);
		}

		// class UOutOfSightMeshRotator : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__OutOfSightMeshRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfSightMeshRotator, _maxDistance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfSightMeshRotator, _dotProductThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfSightMeshRotator, _locallyObservedPlayer, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfSightMeshRotator, _meshesToRotate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutOfSightMeshRotator, UnknownData_3B0A, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutOfSightMeshRotator, 0x00E0);
		}

		// class UOverlayMenuScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__OverlayMenuScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMenuScreen, UnknownData_1UZD, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMenuScreen, 0x0378);
		}

		// class UOverlayMenuScreenScaleform : public UOverlayMenuScreen
		TEST_METHOD(Class__DeadByDaylight__OverlayMenuScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMenuScreenScaleform, 0x0378);
		}

		// class UOverlayMenuScreenUMG : public UOverlayMenuScreen
		TEST_METHOD(Class__DeadByDaylight__OverlayMenuScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlayMenuScreenUMG, _atlOverlayMenuScreen, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlayMenuScreenUMG, 0x0380);
		}

		// class Upallet : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__pallet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, PalletDownEvadeDoorFrontPointOffset, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _state, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _isIllusionaryPalletDown, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, UnknownData_BK6C, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _illusionaryPallet, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _destroyLeft, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _destroyRight, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _pushBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _maxDotproductThresholdForPulldownAccross, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _fallDuration, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _stunBox, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _stunnedActors, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _palletAnimInstance, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _playerExecutingPulldown, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _pushSettings, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, UnknownData_M3V7, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _navEvadeLoopComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _palletPulldownBlockerComponent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, _isDreamPallet, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upallet, UnknownData_RM1I, 0x03C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upallet, 0x03E0);
		}

		// class UPalletAnimInstance : public USleepingAnimInstance
		TEST_METHOD(Class__DeadByDaylight__PalletAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletAnimInstance, IsPulledDown, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletAnimInstance, IsBeingPulledUp, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletAnimInstance, UnknownData_TZYF, 0x0282);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPalletAnimInstance, 0x0290);
		}

		// class UBP_DBDGame_Start_C : public UDBDGame_Start
		TEST_METHOD(BlueprintGeneratedClass__BP_DBDGame_Start__BP_DBDGame_Start_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_DBDGame_Start_C, DefaultSceneRoot, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DBDGame_Start_C, 0x03E0);
		}

		// class UPalletPulldownBlockerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PalletPulldownBlockerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPulldownBlockerComponent, UnknownData_TTGT, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPulldownBlockerComponent, _isPalletPulldownBlockedByEntity, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPulldownBlockerComponent, UnknownData_4BTM, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPulldownBlockerComponent, _blockedDisappearFxTime, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPulldownBlockerComponent, UnknownData_8ECN, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPalletPulldownBlockerComponent, 0x0170);
		}

		// class UPalletTracker : public Uactor
		TEST_METHOD(Class__DeadByDaylight__PalletTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletTracker, _procedurallySpawnedPallet, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletTracker, _dreamPallet, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletTracker, _indicatorLocation, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletTracker, UnknownData_SME1, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPalletTracker, 0x0250);
		}

		// class UPanelScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__PanelScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelScreen, UnknownData_GDEY, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelScreen, 0x0318);
		}

		// class UPanelScreenScaleform : public UPanelScreen
		TEST_METHOD(Class__DeadByDaylight__PanelScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelScreenScaleform, 0x0318);
		}

		// class UPanelScreenUMG : public UPanelScreen
		TEST_METHOD(Class__DeadByDaylight__PanelScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelScreenUMG, UnknownData_7EQH, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelScreenUMG, _atlantaPanelScreen, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelScreenUMG, 0x0328);
		}

		// class UParticleSystemDistanceFaderComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ParticleSystemDistanceFaderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemDistanceFaderComponent, ParticleSystemComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemDistanceFaderComponent, OpacityParameterName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemDistanceFaderComponent, StartFadeDistance, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemDistanceFaderComponent, EndFadeDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemDistanceFaderComponent, UnknownData_WBDQ, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemDistanceFaderComponent, 0x00D8);
		}

		// class UPartyEventsManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__PartyEventsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyEventsManager, UnknownData_FTS5, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyEventsManager, 0x0048);
		}

		// class UPerformanceDataAccumulator : public UObject
		TEST_METHOD(Class__DeadByDaylight__PerformanceDataAccumulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerformanceDataAccumulator, UnknownData_UAIO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerformanceDataAccumulator, 0x0250);
		}

		// class UUMGLoadoutItemButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadoutItemButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, OnLoadoutItemButtonClicked, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, OnLoadoutItemButtonLongPress, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, HideStackCount, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, UnknownData_AY4R, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, EmptyCanvas, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, EmptyButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, LockedButton, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ActionCanvas, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImageRarityBG, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImageGradient, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImagePaint, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImageEventBorder, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImagePaintTop, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImagePaintBottom, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, EmptyCanvasVisibility, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ActionCanvasVisibility, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, PrivateCanvasVisibility, 0x037A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, LockIconVisibility, 0x037B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, EmptyIconVisibility, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, SpecialEventVisiblity, 0x037D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, LoadoutSelectedVisibility, 0x037E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, LoadoutLockVisibility, 0x037F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImageIcon, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ImageShadow, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, ActionButton, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, EmptyBGAsset, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, DisableBGAsset, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, LoadoutItemData, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, _triggerClickEventForLoadoutWidget, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutItemButton, UnknownData_5P62, 0x04A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadoutItemButton, 0x04D0);
		}

		// class UPerkActionButton : public UUMGLoadoutItemButton
		TEST_METHOD(Class__DeadByDaylight__PerkActionButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, TextUnlockLevelTitle, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, Activatable, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, SelectedImageVisibility, 0x04D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, ClickableButtonVisibility, 0x04DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, ClickableImageVisibility, 0x04DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, ProgressbarVisibility, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, UnknownData_21BV, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, IdleTime, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkActionButton, UnknownData_2OP6, 0x04E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkActionButton, 0x04E8);
		}

		// class UPerkAnalytics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__PerkAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkAnalytics, 0x0030);
		}

		// class UPerkCollectionComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PerkCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkCollectionComponent, _array, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkCollectionComponent, UnknownData_Q3XT, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkCollectionComponent, 0x00E0);
		}

		// class UPerkHudWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__PerkHudWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHudWidget, PerksClickable, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHudWidget, PerksExternal, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHudWidget, AtlantaPerkActionButtonClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHudWidget, _clickablePerksMap, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHudWidget, _externalPerksMap, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkHudWidget, UnknownData_UXA5, 0x03E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkHudWidget, 0x0438);
		}

		// class UPerkManager : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PerkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkManager, UnknownData_F5P2, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkManager, _perks, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkManager, _statusEffects, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkManager, UnknownData_UEZR, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkManager, 0x02C0);
		}

		// class UPerkManagerOwnerInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__PerkManagerOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkManagerOwnerInterface, 0x0030);
		}

		// class UPerkOwnerInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__PerkOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkOwnerInterface, 0x0030);
		}

		// class UPerkSelectionPopupScreenUMG : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__PerkSelectionPopupScreenUMG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkSelectionPopupScreenUMG, 0x0140);
		}

		// class UPerkSelectionSlotWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__PerkSelectionSlotWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PerkName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, TextChoose, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PerkActionButton, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, SelectedIcon, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, DescriptionText, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, SelectionButton, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PictureBackground, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PicturePerkBackground, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PictureHighlightFrame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PictureTopRightBackground, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PictureTopRightFrame, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, HighOpacity, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, LowOpacity, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, PerkBackgroundLowOpacity, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, DescriptionBackgroundLowOpacity, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSelectionSlotWidget, UnknownData_1XBH, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkSelectionSlotWidget, 0x0388);
		}

		// class UPerkSoundHudIcon : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__PerkSoundHudIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIcon, perkID, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIcon, UnknownData_803L, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkSoundHudIcon, 0x0310);
		}

		// class UPerkSoundHudIconSporadic : public UPerkSoundHudIcon
		TEST_METHOD(Class__DeadByDaylight__PerkSoundHudIconSporadic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, SporadicIcon, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, FadeInRate, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, FadeOutRate, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, AnimationStartOpacity, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, FadePolynomialOrder, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, DisplayIcon, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudIconSporadic, UnknownData_BOEK, 0x0329);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkSoundHudIconSporadic, 0x0348);
		}

		// class UPerkSoundHudWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__PerkSoundHudWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPerkSoundHudWidget, PerkIcons, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkSoundHudWidget, 0x0308);
		}

		// class UPhantomTrap : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__PhantomTrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhantomTrap, _terrorRadiusEmitter, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhantomTrap, _lineOfSightTraceMinInterval, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhantomTrap, UnknownData_9M5F, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhantomTrap, 0x02F0);
		}

		// class UPhaseWalkingComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PhaseWalkingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, OnPhaseWalkInfoReceived, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, OnGameEndedVFX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, TriggerSurvivorVisibilityVFX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, TriggerKillerVisibilityVFX, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, OnMaxActivePhaseWalkCharges, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _huskClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _isActivePhaseWalking, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _isPassivePhaseWalking, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _isInteractionPhaseWalking, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, UnknownData_65D7, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _husk, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _activePhaseWalkCharges, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, UnknownData_3FTD, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, _survivorsWereVisible, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhaseWalkingComponent, UnknownData_5BMN, 0x01A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhaseWalkingComponent, 0x01D8);
		}

		// class UPlagueUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__PlagueUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlagueUtilities, 0x0030);
		}

		// class UPlayerDataStorageFacade : public UObject
		TEST_METHOD(Class__DeadByDaylight__PlayerDataStorageFacade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDataStorageFacade, UnknownData_KQYQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerDataStorageFacade, 0x0088);
		}

		// class UPlayerDebugComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PlayerDebugComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDebugComponent, _disableStartUpdateMontageDuringEnter, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDebugComponent, _allowPalletPullUpInteraction, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerDebugComponent, UnknownData_AJZG, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerDebugComponent, 0x00C0);
		}

		// class UPlayerGameRelevancyComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PlayerGameRelevancyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerGameRelevancyComponent, _isRelevantToGameplay, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerGameRelevancyComponent, UnknownData_LGQP, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerGameRelevancyComponent, 0x0110);
		}

		// class UPlayerInteractionHandler : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PlayerInteractionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_WJOX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, PriorityConeAngle, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_EG3P, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, NewInteractionRequestedDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, ServerValidatedInteractionStartedDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, ServerValidatedInteractionEndedDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, InteractionLayer, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_N6NQ, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, OnDeactivateSkillCheckDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_3HDQ, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _hasInteractionRequest, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _hasInteractionRequestInBuffer, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_P3WN, 0x01C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _interactionToSwapTo, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_DK3B, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _currentInteraction, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_1NEI, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _currentPlayerDependencies, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _currentInteractionType, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_K7TB, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _skillCheck, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_23KD, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _progressBasedSkillChecks, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_KVUD, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _requestedInterruptionOtherParty, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _requestedInterruptionDefinition, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _requestedInterruptionIsInterruptor, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_E84A, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _currentInterruptionOtherParty, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _currentInterruptionDefinition, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _currentInterruptionIsInterruptor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _interactionInProgress, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_8KMH, 0x0372);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, _interactionsInZone, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerInteractionHandler, UnknownData_1UYL, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerInteractionHandler, 0x03D0);
		}

		// class UMovieSceneSignedObject : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSignedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, Signature, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSignedObject, UnknownData_PVBI, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSignedObject, 0x0058);
		}

		// class UMovieSceneSection : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EvalOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_BXR7, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, Easing, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, SectionRange, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollFrames, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollFrames, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, RowIndex, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, OverlapPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_8VOE, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, startTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, EndTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PreRollTime, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, PostRollTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_80O7, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, bSupportsInfiniteRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, BlendType, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSection, UnknownData_KEDQ, 0x00D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSection, 0x00E8);
		}

		// class UPlayerMoveBackAndForthComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PlayerMoveBackAndForthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerMoveBackAndForthComponent, UnknownData_SEKP, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerMoveBackAndForthComponent, 0x0100);
		}

		// class USpherePlayerOverlapComponent : public USphereComponent
		TEST_METHOD(Class__DeadByDaylight__SpherePlayerOverlapComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpherePlayerOverlapComponent, 0x0450);
		}

		// class UMovieSceneTrack : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, EvalOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_YDZR, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, bIsEvalDisabled, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneTrack, UnknownData_QJ1P, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTrack, 0x0060);
		}

		// class UCapsulePlayerOverlapComponent : public UCapsuleComponent
		TEST_METHOD(Class__DeadByDaylight__CapsulePlayerOverlapComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsulePlayerOverlapComponent, 0x0450);
		}

		// class UBoxPlayerOverlapComponent : public UBoxComponent
		TEST_METHOD(Class__DeadByDaylight__BoxPlayerOverlapComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxPlayerOverlapComponent, 0x0450);
		}

		// class UMovieSceneNameableTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__MovieSceneNameableTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNameableTrack, 0x0060);
		}

		// class UPlayerPerspectiveComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PlayerPerspectiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerPerspectiveComponent, UnknownData_TG40, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerPerspectiveComponent, 0x0130);
		}

		// class UMovieSceneSequence : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, PrecompiledEvaluationTemplate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, DefaultCompletionMode, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bParentContextsAreSignificant, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, bPlayableDirectly, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequence, UnknownData_N550, 0x034B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequence, 0x0350);
		}

		// class UPlayerReportManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__PlayerReportManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerReportManager, UnknownData_JHVO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerReportManager, 0x00E8);
		}

		// class UPollableEventListener : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PollableEventListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPollableEventListener, UnknownData_7UBZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPollableEventListener, 0x00C8);
		}

		// class UMovieSceneSequencePlayer : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_HAEU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlay, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPlayReverse, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnStop, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnPause, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, OnFinished, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, Status, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_Y11X, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_X1FO, 0x0465);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, sequence, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, startTime, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, DurationFrames, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, CurrentNumLoops, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_XPME, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackSettings, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_NQXS, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, RootTemplateInstance, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_5R1P, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, NetSyncProps, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, PlaybackClient, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSequencePlayer, UnknownData_Z2EG, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSequencePlayer, 0x0890);
		}

		// class UPoolableProjectileComponent : public UAuthoritativePoolableActorComponent
		TEST_METHOD(Class__DeadByDaylight__PoolableProjectileComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoolableProjectileComponent, 0x00D8);
		}

		// class UPopupFactory : public UObject
		TEST_METHOD(Class__DeadByDaylight__PopupFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPopupFactory, _gameInstance, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPopupFactory, 0x0038);
		}

		// class UPopupSequencer : public UObject
		TEST_METHOD(Class__DeadByDaylight__PopupSequencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPopupSequencer, UnknownData_6DVM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPopupSequencer, _gameInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPopupSequencer, UnknownData_29M6, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPopupSequencer, 0x0060);
		}

		// class UPortalOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__PortalOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalOutlineUpdateStrategy, _survivorAuraColor, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPortalOutlineUpdateStrategy, 0x00D0);
		}

		// class UPortalPlacerStateComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PortalPlacerStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, OnTeleportCooldownComplete, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, UnknownData_W0YI, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, _remainingPortals, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, UnknownData_QGVZ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, _placedPortals, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, _restrictedPortalLocations, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalPlacerStateComponent, UnknownData_QCI7, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPortalPlacerStateComponent, 0x0158);
		}

		// class UPortalRadiusDetectorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PortalRadiusDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalRadiusDetectorComponent, Portals, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalRadiusDetectorComponent, _playersInsideRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalRadiusDetectorComponent, UnknownData_KJ7L, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPortalRadiusDetectorComponent, 0x0110);
		}

		// class UPortalTargetingComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__PortalTargetingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalTargetingComponent, _targetedPortal, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalTargetingComponent, _portalPlacerState, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalTargetingComponent, UnknownData_7PVP, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPortalTargetingComponent, 0x00E8);
		}

		// class UMovieSceneSubSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__MovieSceneSubSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, Parameters, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, StartOffset, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TimeScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, PreRollTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, SubSequence, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, ActorToRecord, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, UnknownData_N4SR, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetSequenceName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubSection, TargetPathToRecordTo, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubSection, 0x0160);
		}

		// class UPowerButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__PowerButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, button, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, SwitchIcon, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, CountContainer, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, ProgressBarContainer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, CountLabel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, TierImage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, AddonsContainer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, FirstAddonSlot, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, SecondAddonSlot, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, DisabledOpacity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, EnabledOpacity, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerButton, PowerChargeProgression, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerButton, 0x0358);
		}

		// class UMovieSceneSubTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieScene__MovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSubTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSubTrack, 0x0070);
		}

		// class UMovieSceneCustomClockSource : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneCustomClockSource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCustomClockSource, 0x0030);
		}

		// class UPremiumTransactionSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__PremiumTransactionSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPremiumTransactionSubsystem, UnknownData_W674, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPremiumTransactionSubsystem, 0x0058);
		}

		// class UMovieScenePlaybackClient : public UInterface
		TEST_METHOD(Class__MovieScene__MovieScenePlaybackClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePlaybackClient, 0x0030);
		}

		// class UProceduralGenerationData : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__ProceduralGenerationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, QuadrantSpawnTypeProperties, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, QuadrantSpawnCategories, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ThemeProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, MaxSurvivorCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, UnknownData_MDOW, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, KillersItemDependencies, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, SurvivorItemPopulationProbability, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, SurvivorItemProperty, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, EscapeStrategyPopulationProbability, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, EscapeStrategyProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, EscapeTypeActors, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ElementsPopulation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ManagedElementsPopulation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, SurvivorGroupingProbabilities, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ProceduralMapOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ProceduralTileWidth, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ProceduralTileHeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ProceduralQuadTileMapOffset, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, ProceduralQuadTileCubeWidth, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, DifficultyModifier, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, CharacterCameraHeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, CharacterCollisionRadius, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, SpawnerCollisionRadius, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, TotemVisualHeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, SpecialBehaviourPopulation, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, _eventProperties, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralGenerationData, UnknownData_O6PM, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralGenerationData, 0x0160);
		}

		// class UMovieScene : public UMovieSceneSignedObject
		TEST_METHOD(Class__MovieScene__MovieScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Spawnables, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, Possessables, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ObjectBindings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, BindingGroups, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MasterTracks, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CameraCutTrack, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, SelectionRange, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, PlaybackRange, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, TickResolution, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, DisplayRate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, EvaluationType, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, ClockSource, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, UnknownData_SGVC, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, CustomClockSourcePath, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene, MarkedFrames, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene, 0x0158);
		}

		// class UMovieSceneBindingOverrides : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, BindingData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBindingOverrides, UnknownData_XOOC, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOverrides, 0x0098);
		}

		// class UMovieSceneBindingOwnerInterface : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneBindingOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBindingOwnerInterface, 0x0030);
		}

		// class UProceduralLevelBuilder : public Uactor
		TEST_METHOD(Class__DeadByDaylight__ProceduralLevelBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, PathToMapDirectory, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, PathToTilesDirectory, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, KillerMinProximityFromCamper, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SurvivorMinProximityFromOtherCamper, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, MinProximityBetweenGenerators, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, MinProximityBetweenChests, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, MinProximityBetweenTotems, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SurvivorMinProximityFromGenerator, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SurvivorMinProximityFromTotem, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SurvivorMaxLineOfSightFromTotem, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, MinProximityBetweenSpecialBehaviourItems, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SpecialBehaviourItemMinProximityFromSurvivor, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SpecialBehaviourItemMinProximityFromKiller, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_QD4K, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, DebugMap, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, DebugTiles, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, SmallMeatLockerMinProximityFromKillerLair, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, FactorToAdjustToWhenOutOfProximity, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, FactorToAdjustToWhenInLineOfSight, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, HeightAmplifier, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, HeightAmplifierActivationHeight, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_FR3U, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, ProceduralGenerationData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, TileWeightRateOfDecay, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, QuadTileWeightRateOfDecay, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_L4WP, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, DesignTunableClass, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _designTunables, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _generatedData, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _escapeDependencies, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_PEH6, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _tileClass, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_C5AG, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _mapData, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _availableTilesLibrary, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_CKBW, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _availableDerivedTileLibrary, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _tileMatrix, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _tileBank, 0x0AF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_LCO7, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _killerLairSpawner, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_8FIL, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _preloadAssetReferences, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _chestItemAssetReferences, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _slasherPawn, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_1OQ9, 0x0BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _tilesThatHaveBeenSpawned, 0x0BB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_RI3C, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _debugProceduralDatas, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _syncer, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _blackboardComp, 0x0BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_QVYV, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, _edgeObjectHandlingStrategy, 0x0C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelBuilder, UnknownData_G7HW, 0x0C50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralLevelBuilder, 0x0E50);
		}

		// class UMovieSceneBuiltInEasingFunction : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneBuiltInEasingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_3T6S, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBuiltInEasingFunction, UnknownData_4HK1, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBuiltInEasingFunction, 0x0040);
		}

		// class UMovieSceneEasingExternalCurve : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneEasingExternalCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, UnknownData_XHTT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEasingExternalCurve, curve, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingExternalCurve, 0x0040);
		}

		// class UMovieSceneEasingFunction : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneEasingFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEasingFunction, 0x0030);
		}

		// class UMovieSceneFolder : public UObject
		TEST_METHOD(Class__MovieScene__MovieSceneFolder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, FolderName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_U3V8, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildFolders, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildMasterTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, ChildObjectBindingStrings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFolder, UnknownData_KDHW, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFolder, 0x0080);
		}

		// class UMovieSceneKeyProxy : public UInterface
		TEST_METHOD(Class__MovieScene__MovieSceneKeyProxy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneKeyProxy, 0x0030);
		}

		// class UTestMovieSceneTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, bHighPassFilter, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, UnknownData_O2HG, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneTrack, SectionArray, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneTrack, 0x0078);
		}

		// class UTestMovieSceneSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSection, 0x00E8);
		}

		// class UTestMovieSceneSequence : public UMovieSceneSequence
		TEST_METHOD(Class__MovieScene__TestMovieSceneSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSequence, MovieScene, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSequence, 0x0358);
		}

		// class UTestMovieSceneSubTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovieSceneSubTrack, SectionArray, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubTrack, 0x0080);
		}

		// class UTestMovieSceneSubSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieScene__TestMovieSceneSubSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovieSceneSubSection, 0x0160);
		}

		// class UProceduralLevelData : public Uactor
		TEST_METHOD(Class__DeadByDaylight__ProceduralLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, SelectedPaperMap, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, GenerationSeed, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, LevelMood, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, UnknownData_0J87, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, GeneratedData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, Offerings, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, PerksLevel, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, UnknownData_XZFC, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, perks, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, SkipGameplayElementGeneration, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, UnknownData_3T4C, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, _builder, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralLevelData, _builderClassDef, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralLevelData, 0x0548);
		}

		// class UProcessingPopupScreen : public UBasePopupScreen
		TEST_METHOD(Class__DeadByDaylight__ProcessingPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProcessingPopupScreen, 0x0120);
		}

		// class UPromoCodeManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__PromoCodeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPromoCodeManager, UnknownData_J35M, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPromoCodeManager, 0x0050);
		}

		// class UPromptManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__PromptManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPromptManager, _promptWidget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPromptManager, _tutorialPromptWidget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPromptManager, UnknownData_P6S0, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPromptManager, 0x0068);
		}

		// class UProtectionHitComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ProtectionHitComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProtectionHitComponent, UnknownData_N21B, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProtectionHitComponent, 0x0128);
		}

		// class UPS4ProfileDAL : public UPS4GRDKBaseProfileDAL
		TEST_METHOD(Class__DeadByDaylight__PS4ProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPS4ProfileDAL, 0x0088);
		}

		// class UPS5ProfileDAL : public UPlayerProfileDAL
		TEST_METHOD(Class__DeadByDaylight__PS5ProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPS5ProfileDAL, 0x0088);
		}

		// class URankManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__RankManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URankManager, UnknownData_7WDV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URankManager, 0x00B0);
		}

		// class URBTOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__RBTOutlineUpdateStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URBTOutlineUpdateStrategy, 0x00E0);
		}

		// class URecentGameEventTracker : public UObject
		TEST_METHOD(Class__DeadByDaylight__RecentGameEventTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecentGameEventTracker, UnknownData_729U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecentGameEventTracker, 0x0080);
		}

		// class URecommendationsGenerator : public UObject
		TEST_METHOD(Class__DeadByDaylight__RecommendationsGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecommendationsGenerator, _shopManager, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecommendationsGenerator, _gameInstance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecommendationsGenerator, _filters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecommendationsGenerator, UnknownData_XDJH, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecommendationsGenerator, 0x00C0);
		}

		// class URedStainComponent : public USpotLightComponent
		TEST_METHOD(Class__DeadByDaylight__RedStainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URedStainComponent, _initialSpotLightColor, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URedStainComponent, UnknownData_J5O0, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URedStainComponent, 0x03E0);
		}

		// class URegionFinder : public UObject
		TEST_METHOD(Class__DeadByDaylight__RegionFinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionFinder, Regions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionFinder, TimeOut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URegionFinder, UnknownData_U0IV, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URegionFinder, 0x00A8);
		}

		// class URenderingFeaturesSequencer : public UObject
		TEST_METHOD(Class__DeadByDaylight__RenderingFeaturesSequencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderingFeaturesSequencer, UnknownData_S69A, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderingFeaturesSequencer, _aggregateCullDistanceVolumes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderingFeaturesSequencer, _world, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenderingFeaturesSequencer, UnknownData_TJOF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URenderingFeaturesSequencer, 0x0060);
		}

		// class UReportPlayerPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__ReportPlayerPopupScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReportPlayerPopupScreen, UnknownData_AE83, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReportPlayerPopupScreen, 0x0170);
		}

		// class URestrictedPlacementAreaDefaultStrategy : public URestrictedPlacementAreaStrategy
		TEST_METHOD(Class__DeadByDaylight__RestrictedPlacementAreaDefaultStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedPlacementAreaDefaultStrategy, RestrictedActor, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedPlacementAreaDefaultStrategy, 0x0078);
		}

		// class UReverseBearTrap : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__ReverseBearTrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, UnknownData_0H6N, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, _rbtMesh, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, _animMontageSlave, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, UnknownData_R7QF, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, _exitGatesPoweredAfterAttachment, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, _generatorFixedAfterAttachment, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrap, UnknownData_O1BH, 0x038A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverseBearTrap, 0x0390);
		}

		// class UReverseBearTrapRemover : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__ReverseBearTrapRemover)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrapRemover, UnknownData_4F2V, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrapRemover, _keys, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrapRemover, UnknownData_718B, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverseBearTrapRemover, _mapActor, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverseBearTrapRemover, 0x0348);
		}

		// class UReverseBearTrapUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__ReverseBearTrapUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverseBearTrapUtilities, 0x0030);
		}

		// class URewardTrackContainer : public UObject
		TEST_METHOD(Class__DeadByDaylight__RewardTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URewardTrackContainer, UnknownData_U3PF, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URewardTrackContainer, 0x0200);
		}

		// class URewardUtilities : public UObject
		TEST_METHOD(Class__DeadByDaylight__RewardUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URewardUtilities, 0x0030);
		}

		// class URitualAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__RitualAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URitualAnalyticsComponent, UnknownData_ZLB7, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URitualAnalyticsComponent, 0x00C8);
		}

		// class URitualHandlerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__RitualHandlerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URitualHandlerComponent, UnknownData_0UYK, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URitualHandlerComponent, _evaluators, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URitualHandlerComponent, UnknownData_FAWY, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URitualHandlerComponent, 0x01F8);
		}

		// class URoleSelectionScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__RoleSelectionScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URoleSelectionScreen, UnknownData_A5O3, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URoleSelectionScreen, 0x0150);
		}

		// class URootMovie : public UObject
		TEST_METHOD(Class__DeadByDaylight__RootMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, SwfAssetName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, SwfMoviePlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, UnknownData_E3CY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, m_ScreenController, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, m_UIController, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, m_GameInstance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, _inputManager, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootMovie, UnknownData_VTSR, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URootMovie, 0x0098);
		}

		// class US3GameConfigs : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__S3GameConfigs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::US3GameConfigs, UnknownData_WS42, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::US3GameConfigs, 0x0140);
		}

		// class USafeZoneManagerWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__SafeZoneManagerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneManagerWidget, SafeZonePanel, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneManagerWidget, 0x0308);
		}

		// class UScreamComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ScreamComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreamComponent, _customizedAudio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreamComponent, _audioComponent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreamComponent, _perkManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreamComponent, _montagePlayer, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreamComponent, 0x00D8);
		}

		// class UScreenController : public UObject
		TEST_METHOD(Class__DeadByDaylight__ScreenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, _gameInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, _screenControllerObj, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, _moviePlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, _screenDictionary, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, _screenTypeDictionary, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, _cachedUMGScreens, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenController, UnknownData_N4Y3, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreenController, 0x0290);
		}

		// class UScreenSpaceLocationComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__ScreenSpaceLocationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, ScreenSpaceX, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, ScreenSpaceY, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, FrameDelay, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, _currentResolution, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, UnknownData_0EZ9, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, _previousTransforms, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreenSpaceLocationComponent, UnknownData_R389, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreenSpaceLocationComponent, 0x0240);
		}

		// class USearchable : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__Searchable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, UnknownData_0CZG, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, Weight, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, ItemRarity, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, UnknownData_2J5W, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, OnSearchedChanged, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, _searchableSpawnPoint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, _itemIdToSpawn, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, _hasBeenSearched, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, UnknownData_FM6J, 0x030D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, _itemInsideSearchable, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, _numberOfSearchesWhileOpenPerPlayer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchable, UnknownData_KITU, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchable, 0x0390);
		}

		// class USearchableOutlineUpdateStrategy : public UDefaultOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__SearchableOutlineUpdateStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchableOutlineUpdateStrategy, 0x00E0);
		}

		// class UtileSpawnPoint : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__tileSpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, UnknownData_PSHI, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, TileSpawnPointType, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, UnknownData_MONF, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, Weight, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, Visualization, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, UnknownData_7YZJ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, _spawnedObject, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, ObjectSpawnModifier, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, _spawnPriorityTier, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, _weightInfluenceable, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, _weightInfluencer, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, _activated, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UtileSpawnPoint, UnknownData_PUIM, 0x027F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtileSpawnPoint, 0x0280);
		}

		// class USearchableSpawnPoint : public UtileSpawnPoint
		TEST_METHOD(Class__DeadByDaylight__SearchableSpawnPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchableSpawnPoint, ActorToSpawn, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchableSpawnPoint, UnknownData_1SAH, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchableSpawnPoint, 0x0290);
		}

		// class USeasonEndPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__SeasonEndPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeasonEndPopupScreen, 0x0140);
		}

		// class USeasonEndRankRewardsPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__SeasonEndRankRewardsPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeasonEndRankRewardsPopupScreen, 0x0140);
		}

		// class USeasonManager : public Uactor
		TEST_METHOD(Class__DeadByDaylight__SeasonManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonManager, _gameInstance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USeasonManager, UnknownData_4J1Q, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USeasonManager, 0x0240);
		}

		// class USectionnedChargeableComponent : public UchargeableComponent
		TEST_METHOD(Class__DeadByDaylight__SectionnedChargeableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USectionnedChargeableComponent, _sections, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USectionnedChargeableComponent, UnknownData_F5F3, 0x0291);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USectionnedChargeableComponent, 0x0298);
		}

		// class USelectiveVisibilityComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__SelectiveVisibilityComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelectiveVisibilityComponent, 0x0210);
		}

		// class UShopCameraManager : public UInfo
		TEST_METHOD(Class__DeadByDaylight__ShopCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopCameraManager, CatalogCharactersCamera, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopCameraManager, StoryCharactersCamera, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShopCameraManager, 0x0250);
		}

		// class UShopManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__ShopManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopManager, UnknownData_CFJR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopManager, _gameInstance, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopManager, UnknownData_5P4R, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopManager, _bannerDataProcessor, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopManager, _recommendationsGenerator, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopManager, UnknownData_WF06, 0x04F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShopManager, 0x05F8);
		}

		// class USkillCheck : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__SkillCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCheck, UnknownData_S9Y1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCheck, _owner, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCheck, _currentInteraction, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCheck, UnknownData_4CKY, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCheck, 0x0330);
		}

		// class USlasherAnimInstance : public UanimInstance
		TEST_METHOD(Class__DeadByDaylight__SlasherAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, OnFootTrapped, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isCrouched, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isRevvingChainsaw, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isAttackSuccessMontagePlaying, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isCamOn, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isAttacking, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isAnyMontagePlaying, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isFrenzy, 0x0286);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isFrenzyCD, 0x0287);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isInParadise, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _enableArmOverrideTier3, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isRingingBell, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isCarrying, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _firstPersonCarryOffset, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _firstPersonCarryOffsetLookingDown, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isPassivePhaseWalking, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isActivePhaseWalking, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isInAir, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isVaultingToFall, 0x02A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isSpectator, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _firstPersonView, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isIdle, 0x02AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _validSlasher, 0x02AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _animDirection, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _animSpeed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _animPitch, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _animTurning, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _animYaw, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _pelvisHeight, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _idleTime, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _directionSwitch, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _leftClearFrontSpaceVector, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _rightClearFrontSpaceVector, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _velocity, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _rightFootEffectorLocation, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _leftFootEffectorLocation, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _meshRotation, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_ULY9, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _attackSuccessAnimations, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _camOnAnimations, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _mySlasher, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isVaultingToFallState, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _interactionType, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_WUA1, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _demogorgonPortalPlacerState, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _demogorgonTeleportDuration, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_NVFC, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _demogorgonChargedAttackStateComponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isDemogorgonCharging, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_I2VG, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _demogorgonChargingPercent, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _oniAttackState, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _isOniCharging, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _oniAttackType, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_EGMS, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _oniChargeDuration, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _previousAttackSubstate, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _attackSubstate, 0x03A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_CH0X, 0x03AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _evilWithinComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _frenzyComponent, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _phaseWalkingComponent, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, _armIKSensorComponent, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimInstance, UnknownData_7Z2Q, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherAnimInstance, 0x03E0);
		}

		// class USlasherAttackPickerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__SlasherAttackPickerComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherAttackPickerComponent, 0x00B8);
		}

		// class USlasherHitsWhileCarryingTrackerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__SlasherHitsWhileCarryingTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherHitsWhileCarryingTrackerComponent, _campersHitDuringLastCarry, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherHitsWhileCarryingTrackerComponent, UnknownData_ARLB, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherHitsWhileCarryingTrackerComponent, 0x0120);
		}

		// class USlasherMovementComponent : public UDBDCharacterMovementComponent
		TEST_METHOD(Class__DeadByDaylight__SlasherMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherMovementComponent, UnknownData_WRWI, 0x08C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherMovementComponent, 0x08E0);
		}

		// class USlasherOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__SlasherOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherOutlineUpdateStrategy, OnRevealed, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherOutlineUpdateStrategy, _nonRevealedColor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherOutlineUpdateStrategy, _revealedColor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherOutlineUpdateStrategy, _revealedColorForKiller, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherOutlineUpdateStrategy, UnknownData_Y5CH, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherOutlineUpdateStrategy, 0x0108);
		}

		// class UslasherPlayer : public UdbdPlayer
		TEST_METHOD(Class__DeadByDaylight__slasherPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_D18T, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_A9W2, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, OnOffensiveAction, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, PutDownTraceLocation, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, DefaultSlasherPower, 0x1024);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, LoudNoiseDisplayTime, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, TargetPriorityFactor, 0x1034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, ShouldDisplayAttackZones, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_H96U, 0x1041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, CamperExposer, 0x1048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, KillerMoodInfluence, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_VRHO, 0x1051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, KillerAbilities, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, KillerSoundCuesComponent, 0x1068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, ShowKillerPowerDebugInfo, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, HasDamagedGeneratorSinceHook, 0x1071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_LI1E, 0x1072);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, OnStalkModeChangedEvent, 0x1078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_PD65, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _audioComponent, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _terrorNavModifierComponent, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _slasherLightIntensity, 0x10B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_0OAS, 0x10B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _stalkTimers, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _stillnessTracker, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _aimAssistComponent, 0x1118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _recentlyCloakedTimer, 0x1120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _flashlightBlindEvasionScoreTimer, 0x1148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _flashlightBurnoutEvasionScoreTimer, 0x1170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _predictedCamperHitMontages, 0x1198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_U9SY, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _terrorRadiusEmitter, 0x11F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_IJ9F, 0x11F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _loudNoiseIndicator, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _hitsWhileCarryingTracker, 0x1208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _stealthIncreaseRate, 0x1210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _stealthDecreaseRate, 0x1214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _stillnessStartTime, 0x1218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_LS2D, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _isInStalkMode, 0x1288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_3XVT, 0x12B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _isKilling, 0x1378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _allowedKillCount, 0x1379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _allowedKillAfterStrugglePhase, 0x137A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _allowedKillLastSurvivor, 0x137B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_HCYW, 0x137C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _cachedBloodlustTier, 0x1384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_O444, 0x1388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _killerPowerDebugFlags, 0x1390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _presenceTag, 0x1394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _persistantStateTags, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _enableKillerCrouchInput, 0x13C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _canStartAttackWhileCrouched, 0x13C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_T64M, 0x13C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _carriedCamper, 0x13C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _moriComponent, 0x13D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _hitValidatorComponent, 0x13D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _hitValidationConfigurator, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _attackerComponent, 0x13E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_0C5F, 0x13F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _basicAttackType, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_E1UH, 0x1401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _armIKSensorComponent, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _survivorBeingKilled, 0x1410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_W6ZV, 0x1418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _firstPersonViewComponent, 0x1430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _killerIntroComponent, 0x1438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, _blindingFXComponent, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UslasherPlayer, UnknownData_QAIE, 0x1448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UslasherPlayer, 0x1450);
		}

		// class USlasherStateMachine : public UPlayerStateMachine
		TEST_METHOD(Class__DeadByDaylight__SlasherStateMachine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherStateMachine, 0x0130);
		}

		// class UTerrorRadiusEmitterComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__TerrorRadiusEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, UnknownData_MVBD, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, _simulatedFixedDistance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, _imitatesAudioOnly, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, _generatesChaseMusic, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, _active, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, _isFakeTerrorRadius, 0x022F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, _radius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusEmitterComponent, UnknownData_06DF, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTerrorRadiusEmitterComponent, 0x0238);
		}

		// class USlasherTREmitterComponent : public UTerrorRadiusEmitterComponent
		TEST_METHOD(Class__DeadByDaylight__SlasherTREmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherTREmitterComponent, _receiverRadiusOverrides, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherTREmitterComponent, UnknownData_IULS, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherTREmitterComponent, 0x02A0);
		}

		// class USoftBanManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__SoftBanManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftBanManager, UnknownData_WLAI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftBanManager, 0x0070);
		}

		// class USoundIndicatorUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__SoundIndicatorUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundIndicatorUtilities, 0x0030);
		}

		// class USoundMarker : public Uactor
		TEST_METHOD(Class__DeadByDaylight__SoundMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMarker, HudIndicatorIconType, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMarker, HudOffscreenIndicatorType, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMarker, UnknownData_ENC8, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMarker, VisibleDistanceRange, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMarker, UnknownData_JV6U, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMarker, 0x0248);
		}

		// class USpawnElement : public UInterface
		TEST_METHOD(Class__DeadByDaylight__SpawnElement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnElement, 0x0030);
		}

		// class USpecialEventLoadingScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__SpecialEventLoadingScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpecialEventLoadingScreen, UnknownData_7DYT, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpecialEventLoadingScreen, 0x0138);
		}

		// class USpecialEventManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__SpecialEventManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpecialEventManager, UnknownData_G0V1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpecialEventManager, _specialEventsContainer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpecialEventManager, UnknownData_1CF9, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpecialEventManager, 0x02D8);
		}

		// class USpecialEventsContainer : public UObject
		TEST_METHOD(Class__DeadByDaylight__SpecialEventsContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpecialEventsContainer, UnknownData_TC40, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpecialEventsContainer, 0x0128);
		}

		// class USpecialEventSpawnerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__SpecialEventSpawnerComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpecialEventSpawnerComponent, 0x00B8);
		}

		// class USplashScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__SplashScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplashScreen, UnknownData_9U1U, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplashScreen, 0x0138);
		}

		// class USplashScreenScaleform : public USplashScreen
		TEST_METHOD(Class__DeadByDaylight__SplashScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplashScreenScaleform, 0x0138);
		}

		// class USplashScreenUMG : public USplashScreen
		TEST_METHOD(Class__DeadByDaylight__SplashScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplashScreenUMG, _splashScreen, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplashScreenUMG, 0x0140);
		}

		// class USpringArmCameraTargetingStrategy : public UBaseCameraTargetingStrategy
		TEST_METHOD(Class__DeadByDaylight__SpringArmCameraTargetingStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmCameraTargetingStrategy, 0x0050);
		}

		// class UStadiaProfileDAL : public UPS4GRDKBaseProfileDAL
		TEST_METHOD(Class__DeadByDaylight__StadiaProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStadiaProfileDAL, 0x0088);
		}

		// class UStadiaVirtualKeyboardManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DeadByDaylight__StadiaVirtualKeyboardManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStadiaVirtualKeyboardManager, UnknownData_O1RR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStadiaVirtualKeyboardManager, 0x0070);
		}

		// class UStakeOutPerk : public Uperk
		TEST_METHOD(Class__DeadByDaylight__StakeOutPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStakeOutPerk, MaxTokensByLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStakeOutPerk, TokenChargeTime, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStakeOutPerk, UnknownData_PTTZ, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStakeOutPerk, 0x0360);
		}

		// class UStalkedComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__StalkedComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, OnBeingStalkedChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, _maxStalkPoints, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, _stalkableWhileSightingStalker, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, _isBeingStalked, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, UnknownData_KYNQ, 0x00CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, _stalkPointsChargeable, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkedComponent, UnknownData_QOVQ, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStalkedComponent, 0x0130);
		}

		// class UStalkerComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__StalkerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, UnknownData_0VU1, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, _distributeStalkRate, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, _canStalkWhileInChase, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, UnknownData_VNK1, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, _playerStalkedComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, UnknownData_4B3A, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, _stalkPointsChargeable, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStalkerComponent, UnknownData_WI1N, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStalkerComponent, 0x0130);
		}

		// class UStandDisplayable : public UInterface
		TEST_METHOD(Class__DeadByDaylight__StandDisplayable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStandDisplayable, 0x0030);
		}

		// class UStartLitActivationTimerRemainingCooldownElapsedIconStrategy : public UBasePerkIconStrategy
		TEST_METHOD(Class__DeadByDaylight__StartLitActivationTimerRemainingCooldownElapsedIconStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartLitActivationTimerRemainingCooldownElapsedIconStrategy, 0x0030);
		}

		// class UStartScreenBase : public ULevelScriptActor
		TEST_METHOD(Class__DeadByDaylight__StartScreenBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartScreenBase, UnknownData_NYG1, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartScreenBase, 0x0250);
		}

		// class UStartupInitializerInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__StartupInitializerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartupInitializerInterface, 0x0030);
		}

		// class UStateTagUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__StateTagUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStateTagUtilities, 0x0030);
		}

		// class UStationaryPointLightComponent : public UPointLightComponent
		TEST_METHOD(Class__DeadByDaylight__StationaryPointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStationaryPointLightComponent, UnknownData_IEU1, 0x03BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStationaryPointLightComponent, 0x03C0);
		}

		// class UStationarySpotLightComponent : public USpotLightComponent
		TEST_METHOD(Class__DeadByDaylight__StationarySpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStationarySpotLightComponent, UnknownData_OYWF, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStationarySpotLightComponent, 0x03D0);
		}

		// class UStatusEffectCollectionComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__StatusEffectCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectCollectionComponent, _array, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusEffectCollectionComponent, UnknownData_FDJZ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectCollectionComponent, 0x00E0);
		}

		// class UStatusView : public Uactor
		TEST_METHOD(Class__DeadByDaylight__StatusView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, isActive, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, UnknownData_HNGC, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, level, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, PercentageFill, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, IsClockwiseTimer, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, UnknownData_79EO, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStatusView, _localDBDPlayer, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusView, 0x02A0);
		}

		// class USteamProfileDAL : public UPlayerProfileDAL
		TEST_METHOD(Class__DeadByDaylight__SteamProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamProfileDAL, 0x0088);
		}

		// class UStoreScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__StoreScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreen, UnknownData_B3DG, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreScreen, 0x0338);
		}

		// class UStoreScreenScaleform : public UStoreScreen
		TEST_METHOD(Class__DeadByDaylight__StoreScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreScreenScaleform, 0x0338);
		}

		// class UStoreScreenUMG : public UStoreScreen
		TEST_METHOD(Class__DeadByDaylight__StoreScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreenUMG, _customizationScreen, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreenUMG, _storeScreen, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStoreScreenUMG, UnknownData_DGO7, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoreScreenUMG, 0x03A0);
		}

		// class UStruggleComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__StruggleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruggleComponent, UnknownData_2EZA, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruggleComponent, _skillCheckCount, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruggleComponent, UnknownData_0VM5, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruggleComponent, 0x0140);
		}

		// class UstunnableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__stunnableComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UstunnableComponent, 0x00B8);
		}

		// class USurveillancePerk : public Uperk
		TEST_METHOD(Class__DeadByDaylight__SurveillancePerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurveillancePerk, generatorRegressionStopRevealTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurveillancePerk, UnknownData_1WGA, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurveillancePerk, 0x0350);
		}

		// class USurviveTimerScoreEventComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__SurviveTimerScoreEventComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurviveTimerScoreEventComponent, UnknownData_RD4F, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurviveTimerScoreEventComponent, 0x00E8);
		}

		// class USurvivorAttackableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__SurvivorAttackableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAttackableComponent, UnknownData_94XR, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorAttackableComponent, 0x00E0);
		}

		// class USurvivorCollectableOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__SurvivorCollectableOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorCollectableOutlineUpdateStrategy, _outlineColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorCollectableOutlineUpdateStrategy, _nearlyConsumedColor, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorCollectableOutlineUpdateStrategy, 0x00E0);
		}

		// class USurvivorDisconnectionComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__SurvivorDisconnectionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorDisconnectionComponent, 0x00B8);
		}

		// class USurvivorFootstepsPerceptionComponent : public UFootstepsPerceptionComponent
		TEST_METHOD(Class__DeadByDaylight__SurvivorFootstepsPerceptionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorFootstepsPerceptionComponent, 0x00E0);
		}

		// class USurvivorOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__SurvivorOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _inDangerColorForSurvivor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _noRecoveryDyingColor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _fullRecoveryDyingColor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _saviourColorForSurvivor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _colorForKiller, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _revealedGradient, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _nonRevealedGradient, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, _trappedIconActive, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorOutlineUpdateStrategy, UnknownData_RISP, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorOutlineUpdateStrategy, 0x0128);
		}

		// class USurvivorPlagueEffect : public UstatusEffect
		TEST_METHOD(Class__DeadByDaylight__SurvivorPlagueEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, UnknownData_5V5Y, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _sicknessAmount, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _sicknessCap, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _vomitSlowDuration, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _vomitSlowAmount, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _sicknessThresholds, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _wasRecentlyHitByVomit, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, UnknownData_OTZC, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _nonNauseatingInteractions, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, UnknownData_7YT8, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, _debugMode, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorPlagueEffect, UnknownData_VEFJ, 0x03C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorPlagueEffect, 0x0400);
		}

		// class USurvivorStatusInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__SurvivorStatusInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorStatusInterface, 0x0030);
		}

		// class USwitchProfileDAL : public UPlayerProfileDAL
		TEST_METHOD(Class__DeadByDaylight__SwitchProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwitchProfileDAL, 0x0088);
		}

		// class UTallyScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__TallyScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTallyScreen, UnknownData_T9Z3, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTallyScreen, 0x01F8);
		}

		// class UTallyScreenScaleform : public UTallyScreen
		TEST_METHOD(Class__DeadByDaylight__TallyScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTallyScreenScaleform, 0x01F8);
		}

		// class UTallyScreenUMG : public UTallyScreen
		TEST_METHOD(Class__DeadByDaylight__TallyScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTallyScreenUMG, _atlTallyScreen, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTallyScreenUMG, 0x0200);
		}

		// class UTerrorRadiusReceiverComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__TerrorRadiusReceiverComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusReceiverComponent, OnIsInTerrorRadiusChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusReceiverComponent, _trVerticalDistanceFactor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusReceiverComponent, _heartbeatMasterVolumeInterpolationSpeed, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTerrorRadiusReceiverComponent, UnknownData_OJIE, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTerrorRadiusReceiverComponent, 0x0120);
		}

		// class UTheGhostUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__TheGhostUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheGhostUtilities, 0x0030);
		}

		// class UTickInEditorSkeletalMesh : public USkeletalMeshActor
		TEST_METHOD(Class__DeadByDaylight__TickInEditorSkeletalMesh)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTickInEditorSkeletalMesh, 0x02B8);
		}

		// class UTileBank : public UObject
		TEST_METHOD(Class__DeadByDaylight__TileBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBank, UnknownData_XBZV, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBank, _allTileBlueprints, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileBank, 0x0130);
		}

		// class UTileEventComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__TileEventComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileEventComponent, UnknownData_HX7J, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileEventComponent, 0x00C8);
		}

		// class UTileMatrix : public UObject
		TEST_METHOD(Class__DeadByDaylight__TileMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileMatrix, _matrix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileMatrix, _tiles, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileMatrix, _extraTiles, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileMatrix, _quadInfoArray, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileMatrix, _quadIndexMatrix, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMatrix, 0x0080);
		}

		// class UTileVisitedAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__TileVisitedAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileVisitedAnalyticsComponent, UnknownData_N3VJ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileVisitedAnalyticsComponent, 0x0108);
		}

		// class UTimerGate : public UGate
		TEST_METHOD(Class__DeadByDaylight__TimerGate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimerGate, _currentTime, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimerGate, UnknownData_LSK9, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimerGate, 0x0258);
		}

		// class UTimerGateDecrease : public Uactor
		TEST_METHOD(Class__DeadByDaylight__TimerGateDecrease)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimerGateDecrease, TimerGate, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimerGateDecrease, 0x0238);
		}

		// class UDBDTimeTravelManager : public UObject
		TEST_METHOD(Class__DeadByDaylight__DBDTimeTravelManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTimeTravelManager, UnknownData_QPLU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTimeTravelManager, 0x0098);
		}

		// class UToastNotificationScreen : public UScreenBase
		TEST_METHOD(Class__DeadByDaylight__ToastNotificationScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToastNotificationScreen, UnknownData_PUBU, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToastNotificationScreen, 0x0168);
		}

		// class UToastNotificationScreenScaleform : public UToastNotificationScreen
		TEST_METHOD(Class__DeadByDaylight__ToastNotificationScreenScaleform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToastNotificationScreenScaleform, 0x0168);
		}

		// class UToastNotificationScreenUMG : public UToastNotificationScreen
		TEST_METHOD(Class__DeadByDaylight__ToastNotificationScreenUMG)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToastNotificationScreenUMG, _toastNotificationScreen, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToastNotificationScreenUMG, 0x0170);
		}

		// class UToolBoxInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__ToolBoxInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolBoxInterface, 0x0030);
		}

		// class UTormentAttackDamageCooldownInterface : public UInterface
		TEST_METHOD(Class__DeadByDaylight__TormentAttackDamageCooldownInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentAttackDamageCooldownInterface, 0x0030);
		}

		// class UTotem : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__Totem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotem, UnknownData_P43F, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotem, HexPerkID, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotem, IsCleansed, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotem, UnknownData_0ZGY, 0x02ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotem, _perceptionStimuliComponent, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTotem, 0x0308);
		}

		// class UTotemOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__DeadByDaylight__TotemOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotemOutlineUpdateStrategy, _revealedColorToSurvivor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTotemOutlineUpdateStrategy, _revealedColorToKiller, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTotemOutlineUpdateStrategy, 0x00D8);
		}

		// class UTreatmentComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__TreatmentComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreatmentComponent, UnknownData_HKUB, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreatmentComponent, 0x00E8);
		}

		// class UTREmitterFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__TREmitterFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTREmitterFunctionLibrary, 0x0030);
		}

		// class UTriggerableActivatorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__TriggerableActivatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableActivatorComponent, _triggerableClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableActivatorComponent, _triggerables, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerableActivatorComponent, 0x00F8);
		}

		// class UTriggerableWorldObjectComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__TriggerableWorldObjectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, OnTriggered, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, OnTriggerReset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, _triggerResetTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, _randomChance, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, _rollFrequency, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, UnknownData_J2R8, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, _conditionalTriggerVolume, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, _conditionalVolumeOverlappingPlayers, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerableWorldObjectComponent, _guaranteedTriggerVolume, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerableWorldObjectComponent, 0x0150);
		}

		// class UTriplanarDecalComponent : public USceneComponent
		TEST_METHOD(Class__DeadByDaylight__TriplanarDecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, MinHeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, Height, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, MaskIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, UnknownData_Z8QX, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, TopTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, BottomTexture, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, MaskTexture, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, MinQualitySetting, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, UnknownData_ES8W, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, _triPlanarDecal, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, _triPlanarDecalClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, _decalMaterial, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriplanarDecalComponent, UnknownData_D8JV, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriplanarDecalComponent, 0x0260);
		}

		// class UTutorialAssetLibrary : public UAssetLibrary
		TEST_METHOD(Class__DeadByDaylight__TutorialAssetLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialAssetLibrary, UnknownData_WG3Z, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialAssetLibrary, 0x00C0);
		}

		// class UTutorialFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__TutorialFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialFunctionLibrary, 0x0030);
		}

		// class UTutorialGameMode : public UDBDBaseMatchGameMode
		TEST_METHOD(Class__DeadByDaylight__TutorialGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameMode, _tutorialObjectiveController, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameMode, _tutorialNotificationController, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameMode, _tutorialHighlightController, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialGameMode, 0x0388);
		}

		// class UTutorialGameState : public UDBDGameState
		TEST_METHOD(Class__DeadByDaylight__TutorialGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameState, OnCurrentTutorialStepChanged, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameState, UnknownData_NNN9, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameState, _forceHatchVisible, 0x077A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialGameState, UnknownData_V1D0, 0x077B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialGameState, 0x07B8);
		}

		// class UTutorialHighlightController : public UObject
		TEST_METHOD(Class__DeadByDaylight__TutorialHighlightController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialHighlightController, UnknownData_JQPX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialHighlightController, 0x0048);
		}

		// class UTutorialNotificationController : public UObject
		TEST_METHOD(Class__DeadByDaylight__TutorialNotificationController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialNotificationController, OnBlockingNotificationDismissedEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialNotificationController, UnknownData_HYVG, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialNotificationController, 0x00B0);
		}

		// class UTutorialObjectiveController : public UObject
		TEST_METHOD(Class__DeadByDaylight__TutorialObjectiveController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialObjectiveController, UnknownData_0XP1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialObjectiveController, 0x00E0);
		}

		// class UTutorialPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__TutorialPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialPopupScreen, 0x0140);
		}

		// class UTutorialsUtilities : public Uactor
		TEST_METHOD(Class__DeadByDaylight__TutorialsUtilities)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialsUtilities, OnTutorialUIReady, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTutorialsUtilities, UnknownData_ITTZ, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialsUtilities, 0x0268);
		}

		// class UAnimationWidget : public UUserWidget
		TEST_METHOD(Class__DeadByDaylight__AnimationWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationWidget, _playRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationWidget, UnknownData_L77K, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationWidget, 0x0268);
		}

		// class UUIController : public UObject
		TEST_METHOD(Class__DeadByDaylight__UIController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIController, m_UIControllerObj, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIController, _atlantaLoadingWidget, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIController, UnknownData_S5MM, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIController, 0x0048);
		}

		// class UUIScreenshotTool : public UCharacterTool
		TEST_METHOD(Class__DeadByDaylight__UIScreenshotTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, PostProcessVolume, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, ScreenshotFolderPath, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, ScreenshotResolution, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, IconResolution, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, DelayBeforeTakingScreenshot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, PhotoshopScriptWaitTimeout, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, Batching, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, UnknownData_5EU8, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CurrentPart, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CurrentPartCategory, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, UnknownData_4ZOX, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CurrentSetting, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, ScreenshotCamera, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, UpdateCameraFromViewSettings, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, UnknownData_DLOO, 0x0389);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, SurvivorHeadView, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, SurvivorTorsoView, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, SurvivorLegsView, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, KillerHeadView, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, KillerBodyView, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, KillerWeaponView, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, UnknownData_NC59, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, GenderViewOverrides, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CharacterViewOverrides, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, ItemViewOverrides, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, OutfitView, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, OutfitCharacterOverrides, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, OutfitTwoPartsView, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, OutfitOverrides, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, AnimationOverrides, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CharmsView, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CharmsCategoryOverrides, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, CharmOverrides, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, ReloadDBButton, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, UnknownData_0BR4, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, _spawnedCharm, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIScreenshotTool, ShowIconHelp, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIScreenshotTool, 0x05F0);
		}

		// class UAddPatchToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolBuilder, UnknownData_4CNG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolBuilder, 0x0038);
		}

		// class UAddPatchToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AddPatchToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Width, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, rotation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Subdivisions, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchToolProperties, Shift, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchToolProperties, 0x0068);
		}

		// class UAddPatchTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPatchTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_O97V, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, ShapeSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, MaterialProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, PreviewMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPatchTool, UnknownData_OYNS, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPatchTool, 0x0108);
		}

		// class UUMGAlertsWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAlertsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, AtlantaScoreAlertComponentClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, AtlantaStatusEffectAlertComponentClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, CanvasPanelAlerts, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, IdleTime, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, UnknownData_4XXX, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, _scoreAlertClass, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAlertsWidget, _statusEffectAlertClass, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAlertsWidget, 0x03C0);
		}

		// class UAddPrimitiveToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveToolBuilder, UnknownData_W9MC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveToolBuilder, 0x0038);
		}

		// class UProceduralShapeToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ProceduralShapeToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bInstanceIfPossible, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_ORD2, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Shape, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_2ZXH, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Width, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Height, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, FeatureRadius, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Slices, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, Subdivisions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PolygroupMode, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PlaceMode, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, PivotLocation, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_Z283, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, rotation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, bAlignShapeToPlacementSurface, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralShapeToolProperties, UnknownData_YL1F, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralShapeToolProperties, 0x0080);
		}

		// class UUMGAtlantaCreditsPopup : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaCreditsPopup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaCreditsPopup, RichTitleText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaCreditsPopup, RichContentText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaCreditsPopup, _titleDefaultStyle, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaCreditsPopup, 0x0320);
		}

		// class UUMGAtlantaFriendListScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaFriendListScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, UnknownData_ECPC, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, ListSwitcher, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, SearchResultSwitcher, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, NonFriendSearchResult, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, RequestReceivedSearchResult, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, RequestSentSearchResult, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendSearchResult, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, SearchFailureText, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, CloseButton, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, SearchBar, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, ButtonTabContainer, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendListTabWidget, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, SuggestionListTabWidget, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, RequestListTabWidget, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendsTabButton, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, SuggestionsTabButton, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, RequestsTabButton, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, CurrentContextualMenuWidget, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendWidget, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, RequestSentWidget, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendRequestReceivedWidget, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendsSuggestionWidget, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendsSuggestion, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, FriendPartyInviteWidgetClass, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, ContextualMenuInvite, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, ContextualMenuConfirmDeclineAction, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, UnknownData_CQ7S, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, _existingFriendListWidgets, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, _existingFriendInvitePartyWidget, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaFriendListScreen, UnknownData_ANVF, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaFriendListScreen, 0x06B0);
		}

		// class ULastActorInfo : public UObject
		TEST_METHOD(Class__MeshModelingTools__LastActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, UnknownData_JSPD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, actor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, StaticMesh, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, ShapeSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULastActorInfo, MaterialProperties, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULastActorInfo, 0x0060);
		}

		// class UAddPrimitiveTool : public USingleClickTool
		TEST_METHOD(Class__MeshModelingTools__AddPrimitiveTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_NKIK, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, ShapeSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, MaterialProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, PreviewMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, LastGenerated, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddPrimitiveTool, UnknownData_GD7W, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddPrimitiveTool, 0x00E8);
		}

		// class UAlignObjectsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolBuilder, 0x0030);
		}

		// class UAlignObjectsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_P5J7, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, AlignTo, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_Q57V, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, BoxPosition, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_WO1Q, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignX, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignY, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, bAlignZ, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsToolProperties, UnknownData_HC2U, 0x0067);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsToolProperties, 0x0068);
		}

		// class UUMGAtlantaLegalMenuScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaLegalMenuScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaLegalMenuScreen, UnknownData_1I6J, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaLegalMenuScreen, 0x0310);
		}

		// class UAlignObjectsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__AlignObjectsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_TXXU, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, AlignProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlignObjectsTool, UnknownData_OF0U, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlignObjectsTool, 0x0148);
		}

		// class UUMGGenericPopup : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGGenericPopup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, title, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, message, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, TitleBackground, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, TitleSmoke, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, RegressionPopupButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, AlternativePopupButton, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, ProgressionPopupButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, ErrorTitleSmokeColor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, ErrorTitleBackgroundColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, DefaultTitleSmokeColor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, DefaultTitleBackgroundColor, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGenericPopup, UnknownData_M5AE, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGGenericPopup, 0x03E8);
		}

		// class UBakeTransformToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolBuilder, UnknownData_URV5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolBuilder, 0x0038);
		}

		// class UBakeTransformToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BakeTransformToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bBakeRotation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, BakeScale, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, bRecenterPivot, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformToolProperties, UnknownData_196L, 0x005B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformToolProperties, 0x0060);
		}

		// class UUMGAtlantaLevelUpPopup : public UUMGGenericPopup
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaLevelUpPopup)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaLevelUpPopup, 0x03E8);
		}

		// class UBakeTransformTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__BakeTransformTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBakeTransformTool, UnknownData_SYHD, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBakeTransformTool, 0x00C0);
		}

		// class UUMGAtlantaNavigationScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaNavigationScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, BankAndPlayerInfoWidget, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, TextButtonStart, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, PlayModeSelectionVisibility, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, CharacterInfoVisibility, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, BackButtonVisibility, 0x0312);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, MenuButtonsVisibility, 0x0313);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, ButtonRoleVisibility, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, UnknownData_6HF3, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, ButtonRole, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, BottomRightWidgetSwitcher, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, PartyPlayerSlots, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, PartyCountdownLarge, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, _partyMembers, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaNavigationScreen, UnknownData_6SKY, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaNavigationScreen, 0x0360);
		}

		// class UCombineMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolBuilder, UnknownData_B1IG, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolBuilder, 0x0040);
		}

		// class UCombineMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, bDeleteSourceActors, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesToolProperties, UnknownData_7BR8, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesToolProperties, 0x0060);
		}

		// class UCombineMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__CombineMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCombineMeshesTool, UnknownData_ESB9, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCombineMeshesTool, 0x00B8);
		}

		// class UUMGAltantaRitual : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAltantaRitual)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAltantaRitual, _claimText, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAltantaRitual, _claimedText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAltantaRitual, _completedText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAltantaRitual, UnknownData_C17I, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAltantaRitual, 0x0358);
		}

		// class UConvertToPolygonsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolBuilder, 0x0030);
		}

		// class UConvertToPolygonsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, ConversionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_VP65, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, AngleTolerance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bCalculateNormals, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, bShowGroupColors, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsToolProperties, UnknownData_PTTX, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsToolProperties, 0x0068);
		}

		// class UUMGAtlantaRitualsScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaRitualsScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, DailyTab, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, WeeklyTab, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, _atlantaRitualTitle, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, _endInLabel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, _dailyButtonLabel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, _weeklyButtonLabel, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, _dailyRemainingTime, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, _weeklyRemainingTime, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualsScreen, UnknownData_R760, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaRitualsScreen, 0x03F0);
		}

		// class UConvertToPolygonsTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__ConvertToPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, PreviewMesh, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConvertToPolygonsTool, UnknownData_6TWS, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConvertToPolygonsTool, 0x0510);
		}

		// class UDeformMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsToolBuilder, 0x0038);
		}

		// class UDeformMeshPolygonsTransformProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTransformProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, DeformationStrategy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, TransformMode, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectFaces, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectEdges, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSelectVertices, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bShowWireframe, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bSnapToWorldGrid, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_C592, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, SelectedWeightScheme, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_TYWN, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_XNND, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, HandleWeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, bPostFixHandles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTransformProperties, UnknownData_88EJ, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTransformProperties, 0x0078);
		}

		// class UUMGAtlantaRitualTab : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaRitualTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualTab, ContainerBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualTab, _itemWidgetClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaRitualTab, UnknownData_0LQW, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaRitualTab, 0x0348);
		}

		// class UUMGAtlantaSettingScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaSettingScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, UnknownData_590Y, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, SettingContextSwitcher, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, SettingTabBox, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, AlwaysDisplayButtonBox, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, _settingTabButtonClass, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, _settingAlwaysDisplayButtonClass, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, _buttonBoxDividerAsset, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, _overlayContextWidgetMap, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, _contextWidgetMap, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaSettingScreen, UnknownData_8OWD, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaSettingScreen, 0x0500);
		}

		// class UDeformMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DeformMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_LIX0, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, DynamicMeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, TransformProps, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeformMeshPolygonsTool, UnknownData_9IOW, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeformMeshPolygonsTool, 0x1680);
		}

		// class UDisplaceMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshToolBuilder, 0x0030);
		}

		// class UDisplaceMeshTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__DisplaceMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DisplacementType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, UnknownData_RMCC, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DisplaceIntensity, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, RandomSeed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, Subdivisions, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DisplacementMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DisplaceFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, DisplacePhaseShift, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDisplaceMeshTool, UnknownData_LUAK, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDisplaceMeshTool, 0x0358);
		}

		// class UUMGAtlantaStoreScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaStoreScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaStoreScreen, UnknownData_QQSW, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaStoreScreen, AuricCellsWidget, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaStoreScreen, AuricCellsGridPanel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaStoreScreen, UnknownData_E7N8, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaStoreScreen, 0x0338);
		}

		// class UDrawPolygonToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolBuilder, UnknownData_3OCJ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolBuilder, 0x0038);
		}

		// class UUMGAtlantaTallyScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaTallyScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, OnTallyLeft, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, OnTallySpectateClicked, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, OnTallyAddFriendEvent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, OnTallyReportEvent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TallyScrollWidget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TallyScoreboardClass, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TallyBloodpointsClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TallyRankClass, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TallyPlayerLevelClass, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TallyCharacterProgressionClass, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, TextLeaveLobby, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, SpectateButtonText, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, playerRole, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, GameType, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, UnknownData_JEGZ, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, PlayerStatus, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, FromSpectateMode, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, UnknownData_LNJ7, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, _scoreboardWidget, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, _bloodpointsWidget, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, _rankWidget, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, _playerLevelWidget, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, _characterLevelWidget, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAtlantaTallyScreen, UnknownData_TSI2, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaTallyScreen, 0x04C8);
		}

		// class UDrawPolygonToolStandardProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolStandardProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, PolygonType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, OutputMode, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_SMR5, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, FeatureSizeRatio, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, ExtrudeHeight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, Steps, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bAllowSelfIntersections, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, bShowGizmo, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolStandardProperties, UnknownData_J0ED, 0x006A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolStandardProperties, 0x0070);
		}

		// class UDrawPolygonToolSnapProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonToolSnapProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bEnableSnapping, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToWorldGrid, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToVertices, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToEdges, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToAngles, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bSnapToLengths, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_CLA3, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, SegmentLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, bHitSceneObjects, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_GT1R, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, HitNormalOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonToolSnapProperties, UnknownData_4UTE, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonToolSnapProperties, 0x0070);
		}

		// class UDrawPolygonTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolygonTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_B7X4, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PolygonProperties, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, SnapProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, MaterialProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_2D98, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PreviewMesh, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformGizmo, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, PlaneTransformProxy, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_U52R, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, HeightMechanic, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolygonTool, UnknownData_6G92, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolygonTool, 0x05B0);
		}

		// class UUMGAtlantaTutorialScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGAtlantaTutorialScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAtlantaTutorialScreen, 0x0300);
		}

		// class UUMGBankAndPlayerInfoWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBankAndPlayerInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBankAndPlayerInfoWidget, LevelBanner, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBankAndPlayerInfoWidget, PrestigeButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBankAndPlayerInfoWidget, UnknownData_7G80, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBankAndPlayerInfoWidget, 0x0330);
		}

		// class UDrawPolyPathToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathToolBuilder, UnknownData_YBCU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathToolBuilder, 0x0040);
		}

		// class UDrawPolyPathProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, OutputType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_S9DT, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, WidthMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_RWHB, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Width, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, HeightMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_LQNB, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, Height, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, RampStartRatio, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, bSnapToWorldGrid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathProperties, UnknownData_U5YS, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathProperties, 0x0078);
		}

		// class UUMGBaseAlertWidget : public UUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBaseAlertWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseAlertWidget, UnknownData_J57W, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseAlertWidget, 0x0290);
		}

		// class UUMGBaseCountdownWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBaseCountdownWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseCountdownWidget, TimerTextBlock, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseCountdownWidget, _timerThreshold, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseCountdownWidget, UnknownData_GV1G, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseCountdownWidget, _timerColorBelowThreshold, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseCountdownWidget, _timerColorBeyondThreshold, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseCountdownWidget, UnknownData_EOFH, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseCountdownWidget, 0x0368);
		}

		// class UDrawPolyPathExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, direction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_NXZO, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathExtrudeProperties, UnknownData_0LUN, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathExtrudeProperties, 0x0060);
		}

		// class UUMGBaseToastWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBaseToastWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseToastWidget, ToastIcon, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseToastWidget, ToastText, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseToastWidget, TimeToastProgression, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseToastWidget, UnknownData_74N0, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseToastWidget, 0x0368);
		}

		// class UDrawPolyPathTool : public UInteractiveTool
		TEST_METHOD(Class__MeshModelingTools__DrawPolyPathTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_W3IQ, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, TransformProps, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeProperties, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, MaterialProperties, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_RIPU, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, PlaneMechanic, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_MUIA, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, EditPreview, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, ExtrudeHeightMechanic, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, CurveDistMechanic, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, SurfacePathMechanic, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawPolyPathTool, UnknownData_XUVM, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawPolyPathTool, 0x0210);
		}

		// class UUMGBloodStoreArrayWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreArrayWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, UnknownData_LGAD, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, FirstBloodStoreRowWidget, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, SecondBloodStoreRowWidget, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, ThirdBloodStoreRowWidget, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, FourthBloodStoreRowWidget, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, FifthBloodStoreRowWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreArrayWidget, UnknownData_GQ9W, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreArrayWidget, 0x0370);
		}

		// class UDynamicMeshBrushTool : public UBaseBrushTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshBrushTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, PreviewMesh, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshBrushTool, UnknownData_P9UH, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshBrushTool, 0x0210);
		}

		// class UUMGBloodStoreItemPreviewWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreItemPreviewWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, UnknownData_VC4L, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _itemName, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _itemDescription, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _itemPrice, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, UnknownData_O1VL, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _refreshPrice, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _nodeStatusText, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _refreshTitle, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _itemSelectionTitle, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _itemSelectionText, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, _purchaseTitle, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemPreviewWidget, UnknownData_SVUB, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreItemPreviewWidget, 0x0408);
		}

		// class UDynamicMeshSculptToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptToolBuilder, UnknownData_OYSG, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptToolBuilder, 0x0040);
		}

		// class USculptBrushProperties : public UBrushBaseProperties
		TEST_METHOD(Class__MeshModelingTools__SculptBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, Depth, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, bHitBackFaces, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptBrushProperties, UnknownData_6MH6, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptBrushProperties, 0x0078);
		}

		// class UBrushSculptProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__BrushSculptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bIsRemeshingEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushType, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_9WXQ, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, PrimaryBrushSpeed, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bPreserveUVFlow, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bFreezeTarget, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_413L, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, SmoothBrushSpeed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, bDetailPreservingSmooth, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushSculptProperties, UnknownData_GDHG, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushSculptProperties, 0x0070);
		}

		// class UUMGBloodStoreItemWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, UnknownData_5KCP, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, NodeImage, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, BackgroundImage, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, RarityBackground, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, ItemPanel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, MysteryBoxPanel, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, MysteryBoxRarityBackground, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, CollectedPanel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, ConsumedPanel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, _contentType, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, _isMysteryBox, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, UnknownData_TJTZ, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, _bigItemScale, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, _normalItemScale, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, _consumedOpacity, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreItemWidget, UnknownData_BPQW, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreItemWidget, 0x0380);
		}

		// class UPlaneBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PlaneBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushProperties, WhichSide, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneBrushProperties, UnknownData_AOX9, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneBrushProperties, 0x0060);
		}

		// class UClothConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigBase, 0x0030);
		}

		// class UClothingSimulationFactory : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactory, 0x0030);
		}

		// class UFixedPlaneBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__FixedPlaneBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bPropertySetEnabled, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bShowGizmo, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, bSnapToGrid, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, UnknownData_9Z8B, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, position, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, UnknownData_72KV, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedPlaneBrushProperties, rotation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedPlaneBrushProperties, 0x0080);
		}

		// class UClothingSimulationInteractor : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractor, UnknownData_F8I5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractor, 0x0038);
		}

		// class USculptMaxBrushProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__SculptMaxBrushProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, MaxHeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, bFreezeCurrentHeight, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USculptMaxBrushProperties, UnknownData_90JZ, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USculptMaxBrushProperties, 0x0060);
		}

		// class UUMGBloodStoreMysteryBoxPopup : public UUMGGenericPopup
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreMysteryBoxPopup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreMysteryBoxPopup, MysteryItem, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreMysteryBoxPopup, _itemDisplayName, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreMysteryBoxPopup, _itemRarityName, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreMysteryBoxPopup, _itemRarityColor, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreMysteryBoxPopup, _addedToInventory, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreMysteryBoxPopup, 0x0460);
		}

		// class UClothSharedSimConfigBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothSharedSimConfigBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedSimConfigBase, 0x0030);
		}

		// class UMeshConstraintProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshConstraintProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreserveSharpEdges, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MeshBoundaryConstraint, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, GroupBoundaryConstraint, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, MaterialBoundaryConstraint, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, bPreventNormalFlips, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshConstraintProperties, UnknownData_A3I6, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshConstraintProperties, 0x0060);
		}

		// class UClothingAssetBase : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothingAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, ImportedFilePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetBase, AssetGuid, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetBase, 0x0050);
		}

		// class UUMGBloodStoreRowWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreRowWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, UnknownData_32EJ, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, ItemContainer, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, LockStatusPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, HardLockedStatusPanel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, _purchasedItemsNbr, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, _requiredItemNbr, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, _rowStyle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, UnknownData_MYYO, 0x0331);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, _itemPadding, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, UnknownData_4YE8, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, _itemWidgetClass, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, _itemClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreRowWidget, UnknownData_FA4S, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreRowWidget, 0x0398);
		}

		// class UClothPhysicalMeshDataBase_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeInterface__ClothPhysicalMeshDataBase_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Vertices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Normals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, Indices, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, InverseMasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, BoneData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, NumFixedVerts, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, MaxBoneWeights, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, SelfCollisionIndices, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataBase_Legacy, UnknownData_GDKT, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataBase_Legacy, 0x00E8);
		}

		// class URemeshProperties : public UMeshConstraintProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, SmoothingStrength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bFlips, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bSplits, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, bCollapses, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshProperties, UnknownData_QQM8, 0x0067);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshProperties, 0x0068);
		}

		// class UBrushRemeshProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__BrushRemeshProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, bEnableRemeshing, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_3M8T, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, TriangleSize, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, PreserveDetail, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushRemeshProperties, UnknownData_EQ54, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushRemeshProperties, 0x0078);
		}

		// class UUMGBloodStoreSubMenu : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreSubMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreSubMenu, UnknownData_6E6Y, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreSubMenu, SurvivorTimer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreSubMenu, KillerTimer, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreSubMenu, 0x0330);
		}

		// class UDynamicMeshSculptTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__DynamicMeshSculptTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushProperties, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptProperties, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneBrushProperties, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, SculptMaxBrushProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, RemeshProperties, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, GizmoProperties, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ViewProperties, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_B2BQ, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicator, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMaterial, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, BrushIndicatorMesh, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, DynamicMeshComponent, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, ActiveOverrideMaterial, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_U0CE, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformGizmo, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, PlaneTransformProxy, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshSculptTool, UnknownData_IN4N, 0x0CB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshSculptTool, 0x0CC0);
		}

		// class UUMGBloodStoreTimer : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreTimer, UnknownData_9O2F, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreTimer, _normalColor, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreTimer, _warningColor, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreTimer, RemainingTimeTextBlock, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreTimer, RefreshImage, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreTimer, UnknownData_I5JD, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreTimer, 0x0388);
		}

		// class UUMGBloodStoreWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGBloodStoreWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, OnBloodNodeSelected, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, OnBloodNodePurchase, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, OnBloodStoreRegenerate, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, OnCharacterRoleButtonClicked, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, BloodStoreArrayWidget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, ItemPreviewWidget, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, BloodStoreSubMenuWidget, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, _bloodStoreTitle, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, _killersTitle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, _survivorsTitle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBloodStoreWidget, UnknownData_9J6F, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBloodStoreWidget, 0x03C0);
		}

		// class UEditMeshPolygonsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolBuilder, UnknownData_BU1Z, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolBuilder, 0x0040);
		}

		// class UPolyEditTransformProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditTransformProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, bShowWireframe, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, UnknownData_TAPJ, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, LocalFrameMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, UnknownData_HBHI, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, bLockRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, bSnapToWorldGrid, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditTransformProperties, UnknownData_SNN8, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditTransformProperties, 0x0068);
		}

		// class UEditMeshPolygonsToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsToolActionPropertySet, UnknownData_3Z6F, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActionPropertySet, 0x0060);
		}

		// class UEditMeshPolygonsToolActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions, 0x0060);
		}

		// class UEditMeshPolygonsToolActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolActions_Triangles, 0x0060);
		}

		// class UEditMeshPolygonsToolUVActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolUVActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolUVActions, 0x0060);
		}

		// class UEditMeshPolygonsToolEdgeActions : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions, 0x0060);
		}

		// class UEditMeshPolygonsToolEdgeActions_Triangles : public UEditMeshPolygonsToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsToolEdgeActions_Triangles)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsToolEdgeActions_Triangles, 0x0060);
		}

		// class UPolyEditExtrudeProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditExtrudeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, direction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_1CL8, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditExtrudeProperties, UnknownData_EZBU, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditExtrudeProperties, 0x0060);
		}

		// class UUMGCharacterButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, UnknownData_OA36, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, PortraitIcon, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, CharacterSelectedPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, UnknownData_S1BV, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, LevelPanel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, CharacterLevelText, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, OwnedCustomizationText, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, TotalCustomizationText, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, PricePanel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, CellPrice, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, ShardPrice, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterButton, CharacterSlotData, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterButton, 0x0458);
		}

		// class UPolyEditCutProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditCutProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, Orientation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_ZX3R, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, bSnapToVertices, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditCutProperties, UnknownData_RUKA, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditCutProperties, 0x0060);
		}

		// class UPolyEditSetUVProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PolyEditSetUVProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, bShowMaterial, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditSetUVProperties, UnknownData_NTGB, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditSetUVProperties, 0x0060);
		}

		// class UEditMeshPolygonsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditMeshPolygonsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_ZID2, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, DynamicMeshComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, TransformProps, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_L3JG, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditActions_Triangles, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditEdgeActions_Triangles, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditUVActions, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeProperties, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_5OYN, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CutProperties, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SetUVProperties, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SelectionMechanic, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_JOAH, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, MultiTransformer, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_LS22, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, EditPreview, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_7HEI, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, ExtrudeHeightMechanic, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, CurveDistMechanic, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, SurfacePathMechanic, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditMeshPolygonsTool, UnknownData_QHKO, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditMeshPolygonsTool, 0x09D0);
		}

		// class UUMGCharacterInfoWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, CharacterInfoScrollBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, CharacterScrollingInfoWidget, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, CharacterDLCPanel, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _characterNameText, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _characterDifficultyText, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _characterDLCText, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _isKiller, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, UnknownData_6TF8, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _easyColor, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _intermediaryColor, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _hardColor, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _currentColor, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterInfoWidget, _characterDLCTitle, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterInfoWidget, 0x0410);
		}

		// class UBP_Menu_CamperFemale03_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale03__BP_Menu_CamperFemale03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale03_C, 0x0649);
		}

		// class UUMGPageScrollWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGPageScrollWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ItemWidth, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ItemHeight, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, RowCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ColumnCount, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ItemGapDistance, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, TotalPageCount, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ButtonWidth, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, UnknownData_OA3H, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ContainerPanel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, ButtonsPanel, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, _pageButtonWidgetClass, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, _itemArray, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, _currentPageIndex, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPageScrollWidget, UnknownData_19SX, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPageScrollWidget, 0x03C0);
		}

		// class UEditNormalsToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolBuilder, UnknownData_I1AB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolBuilder, 0x0038);
		}

		// class UEditNormalsToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bRecomputeNormals, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, NormalCalculationMethod, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bFixInconsistentNormals, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bInvertNormals, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SplitNormalMethod, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_BZKY, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, SharpEdgeAngleThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, bAllowSharpVertices, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsToolProperties, UnknownData_KNVH, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsToolProperties, 0x0068);
		}

		// class UUMGGridPageScrollWidget : public UUMGPageScrollWidget
		TEST_METHOD(Class__DeadByDaylight__UMGGridPageScrollWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGridPageScrollWidget, UnknownData_I1KK, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGGridPageScrollWidget, 0x03C8);
		}

		// class UUMGCharacterPageScrollWidget : public UUMGGridPageScrollWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterPageScrollWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, UnknownData_IRE6, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, _characterButtonWidgetClass, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, _charactersData, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, _isKiller, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, UnknownData_EJ0H, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, _charactersTitleText, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, _killersTitleText, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, _survivorsTitleText, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPageScrollWidget, UnknownData_CMUN, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterPageScrollWidget, 0x0470);
		}

		// class UEditNormalsAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditNormalsAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsAdvancedProperties, 0x0058);
		}

		// class UUMGCharacterPrestigeIcon : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterPrestigeIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrestigeIcon, PrestigeImage, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterPrestigeIcon, 0x0308);
		}

		// class UUMGCharacterPrestigeButton : public UUMGCharacterPrestigeIcon
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterPrestigeButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrestigeButton, PrestigeButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrestigeButton, PrestigeAnimationCanvas, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrestigeButton, UnknownData_7X2F, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterPrestigeButton, 0x0328);
		}

		// class UUMGCharacterPrice : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterPrice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrice, PriceTextBlock, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrice, AffordableColor, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterPrice, UnaffordableColor, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterPrice, 0x0310);
		}

		// class UUMGCharacterScrollingInfoWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterScrollingInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, FirstTeachablePerk, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, SecondTeachablePerk, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, ThirdTeachablePerk, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, KillerInfoPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, KillerPower, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _killerPowerName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _killerSpeedText, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _killerTerrorRadiusText, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _killerHeightText, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _characterBioText, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _perksTitle, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _teachablesTitle, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _powerTitle, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, _attributesTitle, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterScrollingInfoWidget, UnknownData_A9I4, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterScrollingInfoWidget, 0x0410);
		}

		// class UEditNormalsOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__EditNormalsOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_RXGT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, Tool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsOperatorFactory, UnknownData_O5WW, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsOperatorFactory, 0x0048);
		}

		// class UEditNormalsTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditNormalsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, AdvancedProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, Previews, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditNormalsTool, UnknownData_1IO0, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditNormalsTool, 0x0110);
		}

		// class UUMGCharacterSelectionWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterSelectionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, OnCharacterSelected, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, OnCharacterRoleButtonClicked, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, OnCharacterInfoButtonClicked, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, CharacterPageScrollWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, CharacterSelectSubMenu, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, CharacterInfoWidget, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, CharacterSwitcher, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, _isKiller, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectionWidget, UnknownData_EA3G, 0x0351);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterSelectionWidget, 0x0358);
		}

		// class UEditPivotToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolBuilder, 0x0030);
		}

		// class UEditPivotToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, bEnableSnapDragging, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, RotationMode, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolProperties, UnknownData_2B9W, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolProperties, 0x0060);
		}

		// class UUMGCharacterSelectSubmenu : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterSelectSubmenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSelectSubmenu, UnknownData_JC1P, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterSelectSubmenu, 0x0320);
		}

		// class UEditPivotToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__EditPivotToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_Q4OB, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, bUseWorldBox, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotToolActionPropertySet, UnknownData_0WLO, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotToolActionPropertySet, 0x0068);
		}

		// class UUMGCharacterSlideShowWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCharacterSlideShowWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSlideShowWidget, _perkCategoriesIcons, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSlideShowWidget, SecondsBeforeNextSlide, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCharacterSlideShowWidget, UnknownData_SGY1, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCharacterSlideShowWidget, 0x0370);
		}

		// class UUMGChargeableInteractionWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGChargeableInteractionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGChargeableInteractionWidget, ItemIcon, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGChargeableInteractionWidget, InteractionIconVisibility, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGChargeableInteractionWidget, ItemChargeVisibility, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGChargeableInteractionWidget, InteractionHudVisibility, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGChargeableInteractionWidget, UnknownData_R0MW, 0x030B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGChargeableInteractionWidget, 0x0328);
		}

		// class UEditPivotTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__EditPivotTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_VRW5, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, TransformProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, EditPivotActions, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_QI7X, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, ActiveGizmos, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditPivotTool, UnknownData_A6R1, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditPivotTool, 0x0210);
		}

		// class UEditUVIslandsToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsToolBuilder, 0x0038);
		}

		// class UEditUVIslandsTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__EditUVIslandsTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_QWH4, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, DynamicMeshComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, SelectionMechanic, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_7ZLL, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, MultiTransformer, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditUVIslandsTool, UnknownData_3377, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditUVIslandsTool, 0x03C0);
		}

		// class UUMGCommandDebugButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCommandDebugButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCommandDebugButton, CommandLabel, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCommandDebugButton, CommandButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCommandDebugButton, CommandName, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCommandDebugButton, 0x0320);
		}

		// class UUMGCustomizationCategoriesBar : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCustomizationCategoriesBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationCategoriesBar, UnknownData_386B, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCustomizationCategoriesBar, 0x0310);
		}

		// class UMeshAnalysisProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshAnalysisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, SurfaceArea, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshAnalysisProperties, volume, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshAnalysisProperties, 0x0078);
		}

		// class UMeshInspectorToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorToolBuilder, 0x0030);
		}

		// class UUMGCustomizationItemPriceWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCustomizationItemPriceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, CurrencyValue, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, DiscountPercentageContainer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, DiscountPercentage, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, CurrencyIcon, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, CurrencyTextures, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, AffordableCurrencyTextColor, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, AffordableSpecialCurrencyTextColor, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, NonAffordableCurrencyTextColor, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, _itemId, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, _currencyType, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, _hasDiscountPercentage, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemPriceWidget, UnknownData_GMXJ, 0x03FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCustomizationItemPriceWidget, 0x0400);
		}

		// class UMeshInspectorProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bWireframe, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bBoundaryEdges, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bPolygonBorders, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bUVSeams, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalSeams, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bNormalVectors, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, bTangentVectors, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, UnknownData_ICUU, 0x005F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, NormalLength, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorProperties, TangentLength, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorProperties, 0x0068);
		}

		// class UUMGCustomizationItemBuyButton : public UUMGCustomizationItemPriceWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCustomizationItemBuyButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemBuyButton, UnknownData_RKZ6, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemBuyButton, CurrencyColorStripe, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemBuyButton, _currencyStripeColors, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemBuyButton, _disabledOpacity, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemBuyButton, _enabledOpacity, 0x0478);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCustomizationItemBuyButton, 0x0488);
		}

		// class UMeshInspectorTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__MeshInspectorTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, MaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_J67T, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, PreviewMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, DefaultMaterial, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshInspectorTool, UnknownData_XGYH, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshInspectorTool, 0x00F8);
		}

		// class UUMGCustomizationItemWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCustomizationItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, UnknownData_E214, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, RarityBackground, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, PaintOverlay, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, icon, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, NewIndicator, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, OutfitIndicator, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, PricesContainer, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, ItemSelectedBorder, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, EquippedContainer, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, _customizationItemPriceWidgetClass, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, _priceWidgets, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, _itemIndex, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationItemWidget, _itemId, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCustomizationItemWidget, 0x03A0);
		}

		// class UNewMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__NewMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, MATERIAL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UVScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWorldSpaceUVScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bWireframe, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, bShowExtendedOptions, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNewMeshMaterialProperties, UnknownData_91NC, 0x0067);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNewMeshMaterialProperties, 0x0068);
		}

		// class UExistingMeshMaterialProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__ExistingMeshMaterialProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, MaterialMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, UnknownData_59WI, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerDensity, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, OverrideMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExistingMeshMaterialProperties, CheckerMaterial, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExistingMeshMaterialProperties, 0x0070);
		}

		// class UUMGCustomizationPageScrollWidget : public UUMGGridPageScrollWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCustomizationPageScrollWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationPageScrollWidget, UnknownData_79C5, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationPageScrollWidget, _customizationItemWidgetClass, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationPageScrollWidget, _availableItemsData, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationPageScrollWidget, _itemWidgets, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationPageScrollWidget, UnknownData_N9E5, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCustomizationPageScrollWidget, 0x0430);
		}

		// class UMeshEditingViewProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshEditingViewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bShowWireframe, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_FAML, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, MaterialMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_UVL8, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, bFlatShading, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_D69S, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, color, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, UnknownData_FTEA, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshEditingViewProperties, image, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshEditingViewProperties, 0x0080);
		}

		// class UUMGCustomizationScreenWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGCustomizationScreenWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, UnknownData_G2J4, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, PageScrollWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, CustomizationCategoriesBar, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, CategoryLabel, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, CurrentlyEquippedLabel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, AvailableInOutfitsContainer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, UnlockItemContainer, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, OutfitItem, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, PriceContainer, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, PriceButtonWidgetClass, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, UnknownData_BTNI, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGCustomizationScreenWidget, _currentSelectedItem, 0x03A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGCustomizationScreenWidget, 0x03B0);
		}

		// class UMeshSelectionToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolBuilder, UnknownData_DVLN, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolBuilder, 0x0040);
		}

		// class UMeshSelectionToolActionPropertySet : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolActionPropertySet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolActionPropertySet, UnknownData_5ZNR, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolActionPropertySet, 0x0060);
		}

		// class UMeshSelectionEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionEditActions, 0x0060);
		}

		// class UUMGDownloadProgressionWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGDownloadProgressionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGDownloadProgressionWidget, ProgressBar, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGDownloadProgressionWidget, DownloadPercentage, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGDownloadProgressionWidget, DownloadDescription, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGDownloadProgressionWidget, 0x0318);
		}

		// class UMeshSelectionMeshEditActions : public UMeshSelectionToolActionPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionMeshEditActions)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionMeshEditActions, 0x0060);
		}

		// class UMeshSelectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, SelectionMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_6C69, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, AngleTolerance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bHitBackFaces, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, bShowWireframe, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_99CN, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, FaceColorMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionToolProperties, UnknownData_TRDN, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionToolProperties, 0x0068);
		}

		// class UUMGEndGameCollapseProgressWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGEndGameCollapseProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseProgressWidget, ProgressBar, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseProgressWidget, MarkerLeftCanvas, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseProgressWidget, MarkerRightCanvas, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseProgressWidget, _markerLeftBox, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseProgressWidget, _markerRightBox, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseProgressWidget, UnknownData_RT7E, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGEndGameCollapseProgressWidget, 0x0340);
		}

		// class UMeshSelectionTool : public UDynamicMeshBrushTool
		TEST_METHOD(Class__MeshModelingTools__MeshSelectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionProps, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SelectionActions, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, EditActions, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, Selection, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, SpawnedActors, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSelectionTool, UnknownData_9AWQ, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSelectionTool, 0x05E0);
		}

		// class UUMGEndGameCollapseWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGEndGameCollapseWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, UnknownData_9CV7, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, _progressBarInterpSpeed, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, _slowMode, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, UnknownData_QKQZ, 0x030D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, NormalBar, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, SlowBar, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, NormalProgressBar, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, SlowProgressBar, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, UnknownData_WECY, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGEndGameCollapseWidget, _topBar, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGEndGameCollapseWidget, 0x0380);
		}

		// class UMeshSpaceDeformerToolBuilder : public UMeshSurfacePointToolBuilder
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerToolBuilder, 0x0038);
		}

		// class USpaceDeformerOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__SpaceDeformerOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, UnknownData_A7C0, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpaceDeformerOperatorFactory, SpaceDeformerTool, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpaceDeformerOperatorFactory, 0x0040);
		}

		// class UUMGFogWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGFogWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFogWidget, BankAndPlayerInfoWidget, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFogWidget, 0x0308);
		}

		// class UMeshSpaceDeformerTool : public UMeshSurfacePointTool
		TEST_METHOD(Class__MeshModelingTools__MeshSpaceDeformerTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, SelectedOperationType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_0JYR, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpperBoundsInterval, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, LowerBoundsInterval, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ModifierPercent, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, StateTarget, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_1DQJ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, Preview, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_61WL, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoCenter, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_QHDT, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, GizmoOrientation, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, IntervalGizmo, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformGizmo, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, TransformProxy, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UpIntervalSource, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, DownIntervalSource, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, ForwardIntervalSource, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSpaceDeformerTool, UnknownData_FX3L, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSpaceDeformerTool, 0x01B0);
		}

		// class UUMGGameplayAlertWidget : public UUMGBaseAlertWidget
		TEST_METHOD(Class__DeadByDaylight__UMGGameplayAlertWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGGameplayAlertWidget, 0x0290);
		}

		// class UUMGGhostfaceSpecific : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGGhostfaceSpecific)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGhostfaceSpecific, LeftLeanImage, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGGhostfaceSpecific, RightLeanImage, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGGhostfaceSpecific, 0x0310);
		}

		// class UUMGHtmlRichText : public URichTextBlock
		TEST_METHOD(Class__DeadByDaylight__UMGHtmlRichText)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGHtmlRichText, 0x06C8);
		}

		// class UUMGHtmlTextDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__DeadByDaylight__UMGHtmlTextDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGHtmlTextDecorator, 0x0030);
		}

		// class UMeshStatisticsProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__MeshStatisticsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, mesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, UV, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshStatisticsProperties, Attributes, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshStatisticsProperties, 0x0088);
		}

		// class UUMGInboxMessageEntryWidget : public UUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGInboxMessageEntryWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGInboxMessageEntryWidget, _messageData, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGInboxMessageEntryWidget, _isCurrentSelection, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGInboxMessageEntryWidget, UnknownData_QV2J, 0x02C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGInboxMessageEntryWidget, 0x02C8);
		}

		// class UPlaneCutToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolBuilder, UnknownData_HJLA, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolBuilder, 0x0038);
		}

		// class UUMGInboxScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGInboxScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGInboxScreen, UnknownData_L35F, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGInboxScreen, 0x03A8);
		}

		// class UAcceptOutputProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__AcceptOutputProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, bExportSeparatedPiecesAsNewMeshAssets, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAcceptOutputProperties, UnknownData_MUKJ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAcceptOutputProperties, 0x0060);
		}

		// class UPlaneCutToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__PlaneCutToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bSnapToWorldGrid, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bKeepBothHalves, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_N1NB, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, SpacingBetweenHalves, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillCutHole, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bShowPreview, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, bFillSpans, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutToolProperties, UnknownData_CW2O, 0x0063);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutToolProperties, 0x0068);
		}

		// class UPlaneCutOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__PlaneCutOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_00UT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, CutTool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutOperatorFactory, UnknownData_9OIV, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutOperatorFactory, 0x0048);
		}

		// class UPlaneCutTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__PlaneCutTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_QT2D, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, BasicProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, AcceptProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrigin, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_34S8, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, CutPlaneOrientation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, Previews, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, MeshesToCut, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_0OOB, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformGizmo, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, PlaneTransformProxy, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneCutTool, UnknownData_5RTU, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneCutTool, 0x0170);
		}

		// class UUMGInventoryItemButton : public UUMGLoadoutItemButton
		TEST_METHOD(Class__DeadByDaylight__UMGInventoryItemButton)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGInventoryItemButton, 0x04D0);
		}

		// class UUmgPlayerHud : public UUserWidget
		TEST_METHOD(Class__DeadByDaylight__UmgPlayerHud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, SkillCheckWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaAlertsWidget, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaObjectivesWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaPerksWidget, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaStatusEffectsWidget, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaInteractionWidget, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaPromptWidget, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaTutorialPromptWidget, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaPlayersStatusWidget, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaObjectivesContainer, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, PerkSoundHudWidget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, CenterInteractionButton, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, EndGameCollapseWidget, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, OnPerkClickedEvent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, OnTutorialLeaveClickedEvent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, OnTutorialNextClickedEvent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, OnSettingsClickedEvent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, LocalController, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, AtlantaDirectionalStick, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, _localPlayer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, UnknownData_SIUR, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, _unlockedVirtualJoystickThumbImage, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, _lockedVirtualJoystickThumbImage, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgPlayerHud, UnknownData_UD5P, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUmgPlayerHud, 0x0358);
		}

		// class UPositionPlaneGizmoBuilder : public UInteractiveGizmoBuilder
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmoBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmoBuilder, 0x0030);
		}

		// class UPositionPlaneGizmo : public UInteractiveGizmo
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_0RDJ, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallShape, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, CenterBallMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneGizmo, UnknownData_B1KT, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneGizmo, 0x0520);
		}

		// class UPositionPlaneOnSceneInputBehavior : public UAnyButtonInputBehavior
		TEST_METHOD(Class__MeshModelingTools__PositionPlaneOnSceneInputBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPositionPlaneOnSceneInputBehavior, UnknownData_L70R, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPositionPlaneOnSceneInputBehavior, 0x00B0);
		}

		// class URemeshMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolBuilder, UnknownData_GIYC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolBuilder, 0x0038);
		}

		// class URemeshMeshToolProperties : public URemeshProperties
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetTriangleCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, SmoothingType, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_ZA9F, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, RemeshIterations, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bDiscardAttributes, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowWireframe, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bShowGroupColors, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bUseTargetEdgeLength, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, TargetEdgeLength, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, bReproject, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshToolProperties, UnknownData_0WMW, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshToolProperties, 0x0080);
		}

		// class UUmgKillerHud : public UUmgPlayerHud
		TEST_METHOD(Class__DeadByDaylight__UmgKillerHud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgKillerHud, PowerButton, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgKillerHud, SecondAbilityButton, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgKillerHud, AttackButton, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgKillerHud, GhostfaceSpecific, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgKillerHud, Killer, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgKillerHud, UnknownData_0H5F, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUmgKillerHud, 0x0398);
		}

		// class URemeshMeshTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemeshMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_7KHH, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, MeshStatisticsProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemeshMeshTool, UnknownData_47W2, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemeshMeshTool, 0x0210);
		}

		// class URemoveOccludedTrianglesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolBuilder, UnknownData_WNYL, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolBuilder, 0x0038);
		}

		// class URemoveOccludedTrianglesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, OcclusionTestMethod, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, TriangleSampling, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_ZF6P, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, WindingIsoValue, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddRandomRays, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, AddTriangleSamples, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, bOnlySelfOcclude, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesToolProperties, UnknownData_S64R, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesToolProperties, 0x0078);
		}

		// class UUMGLevelBannerWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLevelBannerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLevelBannerWidget, TooltipButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLevelBannerWidget, UnknownData_2F79, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLevelBannerWidget, 0x0318);
		}

		// class URemoveOccludedTrianglesAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesAdvancedProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesAdvancedProperties, UnknownData_OU89, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesAdvancedProperties, 0x0060);
		}

		// class UUMGLoadingScreenWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadingScreenWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadingScreenWidget, description, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadingScreenWidget, HintIcon, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadingScreenWidget, LoadingBar, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadingScreenWidget, KillerPanel, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadingScreenWidget, SurvivorPanel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadingScreenWidget, title, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadingScreenWidget, 0x0330);
		}

		// class URemoveOccludedTrianglesOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_30BH, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, Tool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesOperatorFactory, UnknownData_NYXG, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesOperatorFactory, 0x0048);
		}

		// class URemoveOccludedTrianglesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__RemoveOccludedTrianglesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, AdvancedProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, Previews, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, PreviewCopies, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOccludedTrianglesTool, UnknownData_8TON, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOccludedTrianglesTool, 0x0160);
		}

		// class UUMGLoadoutBaseWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadoutBaseWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, ItemOrPowerButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, AddonFirstButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, AddonSecondButton, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, OfferingButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, PerkFirstButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, PerkSecondButton, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, PerkThirdButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, PerkFourthButton, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, LoadoutItemButtons, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, UsingMatchRules, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, PerkSlotsLockedByAdmin, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, isSlasher, 0x0352);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutBaseWidget, UnknownData_8W1U, 0x0353);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadoutBaseWidget, 0x0358);
		}

		// class USmoothMeshToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshToolBuilder, UnknownData_1RT9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshToolBuilder, 0x0038);
		}

		// class USmoothMeshTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__SmoothMeshTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_H9FD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, SmoothType, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_35I3, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, SmoothSpeed, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, SmoothIterations, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_JKPC, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, Preview, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmoothMeshTool, UnknownData_RPRE, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmoothMeshTool, 0x0320);
		}

		// class UUMGLoadoutFilterButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadoutFilterButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterButton, ActionButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterButton, OnLoadoutFilterButtonClicked, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterButton, UnknownData_4EGV, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadoutFilterButton, 0x0328);
		}

		// class UTransformMeshesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolBuilder, 0x0030);
		}

		// class UTransformMeshesToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, TransformMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bSetPivot, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, bEnableSnapDragging, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, SnapDragSource, 0x005B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, RotationMode, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesToolProperties, UnknownData_E527, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesToolProperties, 0x0060);
		}

		// class UUMGLoadoutFilterWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadoutFilterWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, OnLoadoutFilterClicked, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, AtlantaLoadoutFilterButtonClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, FilterContainerBox, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, Filters, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, FilterButtons, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, SelectedFilterButton, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutFilterWidget, UnknownData_UWQS, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadoutFilterWidget, 0x0378);
		}

		// class UTransformMeshesTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__TransformMeshesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_YRBH, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, TransformProps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_0YVG, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, ActiveGizmos, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTransformMeshesTool, UnknownData_6E1Z, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTransformMeshesTool, 0x0150);
		}

		// class UUVProjectionToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolBuilder, UnknownData_882O, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolBuilder, 0x0038);
		}

		// class UUMGLoadoutPageScrollWidget : public UUMGPageScrollWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadoutPageScrollWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, ShouldResizeWidget, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, UnknownData_EFCY, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, _itemWidgetClass, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, _gridFormat, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, UnknownData_JOQT, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, _inventoryData, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, _inventorySelectedItemIndexes, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, _subtitle, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutPageScrollWidget, UnknownData_WGJM, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadoutPageScrollWidget, 0x04D0);
		}

		// class UUVProjectionToolProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionToolProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVProjectionMethod, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_7PX7, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, ProjectionPrimitiveScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, CylinderProjectToTopOrBottomAngleThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVScale, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UVOffset, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, bWorldSpaceUVScale, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionToolProperties, UnknownData_SA4E, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionToolProperties, 0x0080);
		}

		// class UUVProjectionAdvancedProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__MeshModelingTools__UVProjectionAdvancedProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionAdvancedProperties, 0x0058);
		}

		// class UUMGLoadoutWidget : public UUMGLoadoutBaseWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLoadoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutWidget, InventoryItemTypeText, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutWidget, InventoryFilterText, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutWidget, PageScrollWidget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutWidget, LoadoutTitleText, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLoadoutWidget, InventoryPanelTitleText, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLoadoutWidget, 0x03C0);
		}

		// class UUVProjectionOperatorFactory : public UObject
		TEST_METHOD(Class__MeshModelingTools__UVProjectionOperatorFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_KP0P, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, Tool, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionOperatorFactory, UnknownData_7FKW, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionOperatorFactory, 0x0048);
		}

		// class UUVProjectionTool : public UMultiSelectionTool
		TEST_METHOD(Class__MeshModelingTools__UVProjectionTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, BasicProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, AdvancedProperties, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, MaterialSettings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, Previews, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, CheckerMaterial, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformGizmos, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, TransformProxies, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUVProjectionTool, UnknownData_51EL, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUVProjectionTool, 0x0220);
		}

		// class UUMGLobbyJoinedWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLobbyJoinedWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyJoinedWidget, TextLeaveLobby, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyJoinedWidget, TextPlayerNotReadyYet, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyJoinedWidget, TextWaitingPlayers, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyJoinedWidget, TextToBeReady, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyJoinedWidget, CommandButtonsContainer, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLobbyJoinedWidget, 0x0368);
		}

		// class UWeldMeshEdgesToolBuilder : public UInteractiveToolBuilder
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesToolBuilder)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesToolBuilder, 0x0030);
		}

		// class UWeldMeshEdgesTool : public USingleSelectionTool
		TEST_METHOD(Class__MeshModelingTools__WeldMeshEdgesTool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, tolerance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, bOnlyUnique, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeldMeshEdgesTool, UnknownData_YS31, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeldMeshEdgesTool, 0x0308);
		}

		// class UUMGLobbyOfferingItemWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLobbyOfferingItemWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLobbyOfferingItemWidget, 0x0300);
		}

		// class UUMGLobbyOfferingWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLobbyOfferingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyOfferingWidget, CanvasOffering, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyOfferingWidget, LobbyOfferingItemClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyOfferingWidget, UnknownData_DVR7, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLobbyOfferingWidget, 0x0360);
		}

		// class UUMGLobbyScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLobbyScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, LobbySearchingWidget, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, OnJoinedLobbyLeaved, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, OnSearchingLobbyCancelled, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, LobbySwitcher, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, LobbyJoinedWidget, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, OfferingWidget, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbyScreen, FogWidget, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLobbyScreen, 0x0348);
		}

		// class UUMGLobbySearchingWidget : public UUMGLoadoutBaseWidget
		TEST_METHOD(Class__DeadByDaylight__UMGLobbySearchingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, BankAndPlayerInfoWidget, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, ItemOrPowerText, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, AddonText, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, OfferingText, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, PerksText, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, TextWaitingForPlayers, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGLobbySearchingWidget, TextEstimatedTimeTitle, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGLobbySearchingWidget, 0x03F0);
		}

		// class UUMGObjectivesWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGObjectivesWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGObjectivesWidget, PanelEscapeRequirementsVisibility, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGObjectivesWidget, PanelGeneratorVisibility, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGObjectivesWidget, PanelFindExitVisibility, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGObjectivesWidget, PanelHatchVisibility, 0x0303);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGObjectivesWidget, UnknownData_RGG9, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGObjectivesWidget, 0x0308);
		}

		// class UUMGPartyPlayerSlotWidget : public UUMGBaseButtonWidget
		TEST_METHOD(Class__DeadByDaylight__UMGPartyPlayerSlotWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPartyPlayerSlotWidget, playerName, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPartyPlayerSlotWidget, CharacterName, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPartyPlayerSlotWidget, FriendIcon, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPartyPlayerSlotWidget, UnknownData_RJ0N, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPartyPlayerSlotWidget, 0x0480);
		}

		// class UUMGPartySlotsWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGPartySlotsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPartySlotsWidget, PartyPlayerSlotsContainer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPartySlotsWidget, _partySlots, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPartySlotsWidget, 0x0318);
		}

		// class UUMGPerkSelectionPopup : public UUMGGenericPopup
		TEST_METHOD(Class__DeadByDaylight__UMGPerkSelectionPopup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, LargePerkSelectionSlot, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, FirstSmallSlot, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, SecondSmallSlot, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, PictureCharacterBackground, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, SelectablePerksContainer, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, UMGPerkSelectionSlotWidget, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, SmallSlotContainer, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, RewardSubTitle, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, PerkSelectionTitle, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, _selectablePerk, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPerkSelectionPopup, UnknownData_D74L, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPerkSelectionPopup, 0x0470);
		}

		// class UUMGPlayersStatusWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGPlayersStatusWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayersStatusWidget, PlayerStatusIconClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayersStatusWidget, playersContainer, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayersStatusWidget, playerIcons, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayersStatusWidget, playerIconsByName, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayersStatusWidget, UnknownData_RT1K, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPlayersStatusWidget, 0x03E0);
		}

		// class UUMGPlayerStatusIcon : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGPlayerStatusIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, HealthBar, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, TimerBar, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, HealthBarContainer, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, TimerBarContainer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, playerName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, StatusIconBloodTop, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, StatusIconBloodBottom, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, StatusIcon, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, ObsessionCanvas, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, BrokenIndicatorCanvas, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, AfflictionCanvas, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, AfflictionIntroCanvas, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, SleepCanvas, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, ReverseBearTrapCanvas, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, ReverseBearTrapArrow, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _hookedTexture, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _hookedBloodTexture, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _trappedTexture, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _trappedBloodTexture, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _deadTexture, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _deadBloodTexture, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _escapedTexture, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _injuredTexture, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _injuredBloodTexture, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _crawlingTexture, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _crawlingBloodTexture, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _sacrificedTexture, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _sacrificedBloodTexture, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _disconnectedTexture, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _defaultTexture, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, _maxNumberCharacterInName, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPlayerStatusIcon, UnknownData_BFH6, 0x03F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPlayerStatusIcon, 0x0400);
		}

		// class UBP_K22_Hat_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_K22_Hat_ACC01__BP_K22_Hat_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_K22_Hat_ACC01_C, 0x02B8);
		}

		// class UUMGPopupButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGPopupButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPopupButton, Label, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPopupButton, UmgButton, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPopupButton, UnknownData_58NM, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPopupButton, DisabledOpacity, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPopupButton, EnabledOpacity, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGPopupButton, UnknownData_44UX, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGPopupButton, 0x0330);
		}

		// class UUMGRankBanner : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGRankBanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGRankBanner, Frame, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGRankBanner, Label, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGRankBanner, 0x0310);
		}

		// class UUMGReceivedFriendRequestListElement : public UUMGBaseFriendListElement
		TEST_METHOD(Class__DeadByDaylight__UMGReceivedFriendRequestListElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGReceivedFriendRequestListElement, FriendRequestStatusRichText, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGReceivedFriendRequestListElement, 0x03C8);
		}

		// class UUMGRoleSelectionScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGRoleSelectionScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGRoleSelectionScreen, _newInboxMessageCount, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGRoleSelectionScreen, UnknownData_LGMU, 0x0304);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGRoleSelectionScreen, 0x0320);
		}

		// class UUMGScoreAlertWidget : public UUMGBaseAlertWidget
		TEST_METHOD(Class__DeadByDaylight__UMGScoreAlertWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGScoreAlertWidget, 0x0290);
		}

		// class UUMGScrollListPageButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGScrollListPageButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGScrollListPageButton, OnClicked, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGScrollListPageButton, PageIndex, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGScrollListPageButton, UnknownData_JJP3, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGScrollListPageButton, ActionButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGScrollListPageButton, SelectedImage, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGScrollListPageButton, 0x0328);
		}

		// class UUMGSettingContextWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSettingContextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingContextWidget, UnknownData_XALZ, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSettingContextWidget, 0x0318);
		}

		// class UUMGSettingAboutContextWidget : public UUMGSettingContextWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSettingAboutContextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingAboutContextWidget, EULAButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingAboutContextWidget, CreditsButton, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSettingAboutContextWidget, 0x0328);
		}

		// class UUMGSettingContextButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSettingContextButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingContextButton, OnSettingContextButtonClickEvent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingContextButton, UnknownData_XI9W, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSettingContextButton, 0x0318);
		}

		// class UUMGSettingControlsContextWidget : public UUMGSettingContextWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSettingControlsContextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, UnknownData_4QC8, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, AimAssist, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, UnknownData_4H1C, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, HandSide, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, InteractionButton, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, InvertY, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, UnknownData_YXY3, 0x0385);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, KillerCameraSensitivity, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, SurvivorCameraSensitivity, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingControlsContextWidget, UnknownData_S5JY, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSettingControlsContextWidget, 0x03A8);
		}

		// class UUMGSettingLanguageContextWidget : public UUMGSettingContextWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSettingLanguageContextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingLanguageContextWidget, LanguageScrollBox, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingLanguageContextWidget, _languageButtonClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingLanguageContextWidget, _languageListRowGap, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingLanguageContextWidget, UnknownData_BZ58, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingLanguageContextWidget, _selectedLanguageButton, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSettingLanguageContextWidget, 0x0360);
		}

		// class UUMGSettingMenuButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSettingMenuButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSettingMenuButton, UnknownData_WPDX, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSettingMenuButton, 0x0318);
		}

		// class UUMGSplashScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSplashScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, OnSaveGamePopupCompleteEvent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, OnScreenTouched, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, SavePopup, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, GameVersion, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, LoadingState, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, PressKey, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, TapButton, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, SaveGameTitle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, SaveGameDescription, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, downloadProgression, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, CharacterSlideShow, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSplashScreen, UnknownData_PSAV, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSplashScreen, 0x0370);
		}

		// class UUMGStatusEffectIcon : public UUMGLoadoutItemButton
		TEST_METHOD(Class__DeadByDaylight__UMGStatusEffectIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStatusEffectIcon, StatusEffectData, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGStatusEffectIcon, 0x0518);
		}

		// class UUMGStatusEffectsWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGStatusEffectsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStatusEffectsWidget, AtlantaStatusEffectIconClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStatusEffectsWidget, StatusEffectsBox, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStatusEffectsWidget, _statusEffectsMap, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStatusEffectsWidget, UnknownData_ISCW, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGStatusEffectsWidget, 0x0390);
		}

		// class UUMGStoreAuricCellButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGStoreAuricCellButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStoreAuricCellButton, UnknownData_ZBQP, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStoreAuricCellButton, CurrencyPurchaseData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStoreAuricCellButton, AuricCellTitleText, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGStoreAuricCellButton, UnknownData_V18C, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGStoreAuricCellButton, 0x0378);
		}

		// class UUmgSurvivorHud : public UUmgPlayerHud
		TEST_METHOD(Class__DeadByDaylight__UmgSurvivorHud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, UnknownData_WZ8E, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, CrouchButton, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, Survivor, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, UnknownData_DBUK, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, _unpressedLookBackJoystickThumbImage, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, _pressedLookBackJoystickThumbImage, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, UnknownData_THPW, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, _unpressedLookBackJoystickBackgroundImage, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, _pressedLookBackJoystickBackgroundImage, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUmgSurvivorHud, UnknownData_OTFW, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUmgSurvivorHud, 0x03D8);
		}

		// class UUMGSwitcherScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGSwitcherScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, OnLoadoutWidgetSlotClicked, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, OnLoadoutWidgetInventoryItemSelected, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, OnLoadoutWidgetInventoryItemUnselected, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, UnknownData_MCXE, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, ContainerWidgetSwitcher, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, BloodStoreWidget, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, LoadoutWidget, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSwitcherScreen, CharacterSelectionWidget, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSwitcherScreen, 0x03B0);
		}

		// class UUMGTallyBloodpointsScoreWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyBloodpointsScoreWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyBloodpointsScoreWidget, 0x0300);
		}

		// class UUMGTallyListElementWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyListElementWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListElementWidget, ElementIndex, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListElementWidget, WidgetSize, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListElementWidget, UnknownData_TR14, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyListElementWidget, 0x0310);
		}

		// class UUMGTallyBloodpointsWidget : public UUMGTallyListElementWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyBloodpointsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, _itemBoxVisibility, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, UnknownData_DMMT, 0x0311);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, _labelTotalScore, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, _labelItemTitle, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, _labelItemAddOnTitle, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, _labelItemTitleColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, BoxScoreCategory, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, _scoreCategoryExtraDataMap, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyBloodpointsWidget, UnknownData_LTIR, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyBloodpointsWidget, 0x04B0);
		}

		// class UUMGTallyCharacterProgressionBar : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyCharacterProgressionBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionBar, UnknownData_QV21, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionBar, ProgressBar, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyCharacterProgressionBar, 0x0328);
		}

		// class UUMGTallyCharacterProgressionWidget : public UUMGTallyListElementWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyCharacterProgressionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, CharacterProgressionBar, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, TextCharacterCurrentExperience, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, TextExperienceForNextLevel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, TextExperienceEarned, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, TextCurrentLevel, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, CharacterPicture, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, PrestigeIcon, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, TextCharacterName, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, ExperiencePerSecond, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyCharacterProgressionWidget, UnknownData_TLF2, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyCharacterProgressionWidget, 0x0398);
		}

		// class UUMGTallyEmblemWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyEmblemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyEmblemWidget, _emblemBackgrounds, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyEmblemWidget, BackgroundImage, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyEmblemWidget, IconImage, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyEmblemWidget, 0x0360);
		}

		// class UUMGTallyListWidget : public UUMGPageScrollWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, TopLeftText, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, TopRightText, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, ListBGPanel, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, _playerRole, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, UnknownData_1A2C, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, _inAnimationPlayedPages, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, _listItemWidgets, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyListWidget, UnknownData_CSMC, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyListWidget, 0x04B0);
		}

		// class UUMGTallyPip : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyPip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyPip, Filling, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyPip, 0x0308);
		}

		// class UUMGTallyPlayerLevelWidget : public UUMGTallyListElementWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyPlayerLevelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyPlayerLevelWidget, UnknownData_JYBN, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyPlayerLevelWidget, 0x0358);
		}

		// class UUMGTallyProgressBar : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyProgressBar, ProgressBar, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyProgressBar, PipsContainer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyProgressBar, _pipsClasses, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyProgressBar, _pipsAlignment, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyProgressBar, 0x0328);
		}

		// class UUMGTallyRankBanner : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyRankBanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankBanner, PipsContainer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankBanner, RankBanner, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankBanner, _pipsClasses, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankBanner, _pipsPadding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankBanner, Pips, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyRankBanner, 0x0340);
		}

		// class UUMGTallyRankWidget : public UUMGTallyListElementWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyRankWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, _emblemsPadding, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, EmblemWidgetClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, EmblemsContainer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, ProgressBar, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, RankBanner, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, RankProgressLabel, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, _emblems, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyRankWidget, _scoreData, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyRankWidget, 0x03B0);
		}

		// class UUMGTallyScoreboardPlayerInfoWidget : public UUMGLoadoutBaseWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyScoreboardPlayerInfoWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardPlayerInfoWidget, OnTallyScoreboardAddFriendEvent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardPlayerInfoWidget, OnTallyScoreboardReportEvent, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardPlayerInfoWidget, ImageHorizontalSeparation, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardPlayerInfoWidget, PlayerResultData, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardPlayerInfoWidget, LoadoutIsBlocked, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardPlayerInfoWidget, UnknownData_YS01, 0x05F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyScoreboardPlayerInfoWidget, 0x0600);
		}

		// class UUMGTallyScoreboardWidget : public UUMGTallyListElementWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTallyScoreboardWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, OnTallyScoreboardAddFriendEvent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, OnTallyScoreboardReportEvent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, LabelTextRank, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, LabelTextScore, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, LabelTextStatus, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, KillerWidget, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, FirstSurvivorWidget, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, SecondSurvivorWidget, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, ThirdSurvivorWidget, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, FourthSurvivorWidget, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTallyScoreboardWidget, SurvivorWidgets, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTallyScoreboardWidget, 0x03B0);
		}

		// class UUMGTeachablePerkButton : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGTeachablePerkButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTeachablePerkButton, TeachablePerkButton, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGTeachablePerkButton, LockedStatusIcon, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGTeachablePerkButton, 0x0310);
		}

		// class UUMGToastNotificationScreen : public UMobileBaseUserWidget
		TEST_METHOD(Class__DeadByDaylight__UMGToastNotificationScreen)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGToastNotificationScreen, NotificationToast, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGToastNotificationScreen, InvitationPartyToast, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGToastNotificationScreen, ToastsContainer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGToastNotificationScreen, UnknownData_RLDQ, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGToastNotificationScreen, _toastsDisplayedOnScreen, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGToastNotificationScreen, UnknownData_3XR3, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGToastNotificationScreen, 0x0468);
		}

		// class UUnlockPersonalPerksPopupScreen : public UGenericPopupScreen
		TEST_METHOD(Class__DeadByDaylight__UnlockPersonalPerksPopupScreen)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUnlockPersonalPerksPopupScreen, 0x0140);
		}

		// class UVaultableComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__VaultableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaultableComponent, OnVault, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaultableComponent, _vaultableScoreEvent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVaultableComponent, UnknownData_7J0K, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVaultableComponent, 0x00E8);
		}

		// class UVersioningUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DeadByDaylight__VersioningUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVersioningUtilities, 0x0030);
		}

		// class UVideoNativePlayer : public Uactor
		TEST_METHOD(Class__DeadByDaylight__VideoNativePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoNativePlayer, UnknownData_QVTK, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoNativePlayer, 0x0260);
		}

		// class UVideoPlayer : public UInterface
		TEST_METHOD(Class__DeadByDaylight__VideoPlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoPlayer, 0x0030);
		}

		// class UVideoThumbnailPlayer : public Uactor
		TEST_METHOD(Class__DeadByDaylight__VideoThumbnailPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, UnknownData_2TM9, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, MediaPlayer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, SoundComponent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, VideoPlayerWidget, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, _audioComponent, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, UnknownData_OS4H, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, _source, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoThumbnailPlayer, UnknownData_F7LN, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoThumbnailPlayer, 0x02C8);
		}

		// class UVisibleHatchRestrictedPlacementAreaStrategy : public URestrictedPlacementAreaStrategy
		TEST_METHOD(Class__DeadByDaylight__VisibleHatchRestrictedPlacementAreaStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisibleHatchRestrictedPlacementAreaStrategy, UnknownData_L87H, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibleHatchRestrictedPlacementAreaStrategy, 0x0078);
		}

		// class UVomitStateComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__VomitStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVomitStateComponent, UnknownData_U2R6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVomitStateComponent, _isCharging, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVomitStateComponent, 0x00F0);
		}

		// class UWakerObject : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__WakerObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObject, UnknownData_BWMN, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObject, _linkedCamperDreamworldComponent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObject, isInteracting, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObject, _chargeComplete, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObject, UnknownData_7IZV, 0x02EA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWakerObject, 0x0308);
		}

		// class UMagicLeapControllerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapController__MagicLeapControllerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapControllerFunctionLibrary, 0x0030);
		}

		// class UWalesCypherHandler : public ULocalPlayerSubsystem
		TEST_METHOD(Class__DeadByDaylight__WalesCypherHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWalesCypherHandler, _walesCypherParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWalesCypherHandler, UnknownData_CP0J, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWalesCypherHandler, 0x0048);
		}

		// class UWalesCypherParameters : public UDataAsset
		TEST_METHOD(Class__DeadByDaylight__WalesCypherParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWalesCypherParameters, AUDIO_EVENT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWalesCypherParameters, SLASHER_INDEX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWalesCypherParameters, CAMPER_INDEX, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWalesCypherParameters, 0x0050);
		}

		// class UWalletHandler : public UObject
		TEST_METHOD(Class__DeadByDaylight__WalletHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWalletHandler, UnknownData_LM72, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWalletHandler, 0x0150);
		}

		// class UWeightedElement : public UInterface
		TEST_METHOD(Class__DeadByDaylight__WeightedElement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeightedElement, 0x0030);
		}

		// class UWindow : public Uinteractable
		TEST_METHOD(Class__DeadByDaylight__Window)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, NativeSmokeOtherIndicatorData, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, NativeEntityIndicatorData, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, NativeSmokeSelfIndicatorData, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _isBlockedByLevel, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, UnknownData_FQJ7, 0x0321);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _entityAssets, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _materialHelper, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _akAudioWindow, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, akAudioEventWindowsBlocStart, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, akAudioEventWindowsBlocStop, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _survivorVaultData, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, UnknownData_HZ95, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _localPlayerTracker, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _blockableComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, UnknownData_GN42, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindow, _navEvadeLoopComponent, 0x03C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindow, 0x03D0);
		}

		// class UXboxProfileDAL : public UPlayerProfileDAL
		TEST_METHOD(Class__DeadByDaylight__XboxProfileDAL)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXboxProfileDAL, 0x0088);
		}

		// class UZoneDetectorComponent : public UactorComponent
		TEST_METHOD(Class__DeadByDaylight__ZoneDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneDetectorComponent, UnknownData_C4ZV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneDetectorComponent, _zones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZoneDetectorComponent, _tags, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZoneDetectorComponent, 0x00F0);
		}

		// class UAB_DK_Watch_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_DK_Watch__AB_DK_Watch_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_UseCachedPose_3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_LocalToComponentSpace_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_StateResult_3, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_UseCachedPose_2, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_LocalToComponentSpace, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_ComponentToLocalSpace, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_StateResult_2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_UseCachedPose, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_StateResult, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_StateMachine, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_CopyPoseFromMesh, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Watch_C, AnimGraphNode_SaveCachedPose, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_DK_Watch_C, 0x0770);
		}

		// class UMagicLeapTouchpadGesturesComponent : public UactorComponent
		TEST_METHOD(Class__MagicLeapController__MagicLeapTouchpadGesturesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_0M2W, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureStart, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureContinue, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, OnTouchpadGestureEnd, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapTouchpadGesturesComponent, UnknownData_PPKD, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapTouchpadGesturesComponent, 0x0148);
		}

		// class UBP_GK_Flower_ACC01_C : public UBP_GK_KeyRing_ACC01_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GK_Flower_ACC01__BP_GK_Flower_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GK_Flower_ACC01_C, 0x02B8);
		}

		// class UMagicLeapSharedWorldGameMode : public UGameMode
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameMode, SharedWorldData, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameMode, OnNewLocalDataFromClients, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameMode, PinSelectionConfidenceThreshold, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameMode, UnknownData_7MI6, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameMode, ChosenOne, 0x03F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSharedWorldGameMode, 0x03F8);
		}

		// class UMagicLeapSharedWorldGameState : public UgameState
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameState, SharedWorldData, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameState, AlignmentTransforms, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameState, OnSharedWorldDataUpdated, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldGameState, OnAlignmentTransformsUpdated, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSharedWorldGameState, 0x02E8);
		}

		// class UMagicLeapSharedWorldPlayerController : public UplayerController
		TEST_METHOD(Class__MagicLeapSharedWorld__MagicLeapSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSharedWorldPlayerController, UnknownData_RWYL, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSharedWorldPlayerController, 0x05A0);
		}

		// class UAnalyticsDelegates : public UGameInstanceSubsystem
		TEST_METHOD(Class__DBDAnalytics__AnalyticsDelegates)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnalyticsDelegates, 0x0038);
		}

		// class UAnalyticsFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDAnalytics__AnalyticsFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnalyticsFunctionLibrary, 0x0030);
		}

		// class UAnalyticsManager : public UAbstractAnalyticsManager
		TEST_METHOD(Class__DBDAnalytics__AnalyticsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnalyticsManager, UnknownData_6IWK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnalyticsManager, 0x2570);
		}

		// class UClosetAnalytics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDAnalytics__ClosetAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClosetAnalytics, 0x0030);
		}

		// class UEmblemAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__DBDAnalytics__EmblemAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmblemAnalyticsComponent, UnknownData_OMDL, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmblemAnalyticsComponent, 0x0170);
		}

		// class UAB_GK_KeyRing_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_GK_KeyRing_ACC01__AB_GK_KeyRing_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_TransitionResult, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_StateResult_3, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, UnknownData_KDWD, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_AnimDynamics, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_StateResult_2, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_UseCachedPose, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_StateResult, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_StateMachine, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, AnimGraphNode_SaveCachedPose, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, OwningCharacterSkeletalMesh, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, Initialized, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_KeyRing_ACC01_C, InMenu, 0x1031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_GK_KeyRing_ACC01_C, 0x1032);
		}

		// class UInteractionAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__DBDAnalytics__InteractionAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAnalyticsComponent, UnknownData_421G, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionAnalyticsComponent, 0x0140);
		}

		// class UPigAnalytics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDAnalytics__PigAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAnalytics, 0x0030);
		}

		// class UPulldownAnalytics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDAnalytics__PulldownAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPulldownAnalytics, 0x0030);
		}

		// class USurvivorInteractionAnalytics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDAnalytics__SurvivorInteractionAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorInteractionAnalytics, 0x0030);
		}

		// class UBP_Menu_Slasher01_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher01__BP_Menu_Slasher01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher01_C, UnknownData_HBF8, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher01_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher01_C, BP_Audio_KLR_01, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher01_C, 0x0680);
		}

		// class UPoolableActor : public UInterface
		TEST_METHOD(Class__GameplayUtilities__PoolableActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoolableActor, 0x0030);
		}

		// class UAuthoritativeActorPoolComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__AuthoritativeActorPoolComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeActorPoolComponent, UnknownData_V50A, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeActorPoolComponent, _actorClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeActorPoolComponent, _size, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeActorPoolComponent, UnknownData_JWWF, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativeActorPoolComponent, _pool, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAuthoritativeActorPoolComponent, 0x00F0);
		}

		// class UMockAuthoritativeActorPoolComponent : public UAuthoritativeActorPoolComponent
		TEST_METHOD(Class__GameplayUtilities__MockAuthoritativeActorPoolComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockAuthoritativeActorPoolComponent, 0x00F0);
		}

		// class UMockPoolableActor : public Uactor
		TEST_METHOD(Class__GameplayUtilities__MockPoolableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockPoolableActor, _poolable, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockPoolableActor, 0x0238);
		}

		// class UMovableCamera : public Upawn
		TEST_METHOD(Class__GameplayUtilities__MovableCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovableCamera, MovementSpeed, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovableCamera, RequiresShiftModifierForInput, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovableCamera, UnknownData_VGVN, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovableCamera, _playerController, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovableCamera, 0x02B8);
		}

		// class UMoveActorToComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__MoveActorToComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveActorToComponent, UnknownData_4WX0, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveActorToComponent, 0x00F0);
		}

		// class UMovementUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__MovementUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementUtilities, 0x0030);
		}

		// class UPawnUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__PawnUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnUtilities, 0x0030);
		}

		// class UBP_HS_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_HS_Hair_ACC01__BP_HS_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HS_Hair_ACC01_C, 0x02B8);
		}

		// class UPlayerStateExt : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__PlayerStateExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStateExt, 0x0030);
		}

		// class UBasePoolableActorComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__BasePoolableActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePoolableActorComponent, UnknownData_FUCE, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePoolableActorComponent, OnAcquiredChanged, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePoolableActorComponent, 0x00D0);
		}

		// class UPoolableActorComponent : public UBasePoolableActorComponent
		TEST_METHOD(Class__GameplayUtilities__PoolableActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoolableActorComponent, UnknownData_4CP5, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoolableActorComponent, 0x00D8);
		}

		// class USceneComponentExt : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__SceneComponentExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponentExt, 0x0030);
		}

		// class UBasePushStrategyComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__BasePushStrategyComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePushStrategyComponent, 0x00B8);
		}

		// class USidePushStrategyComponent : public UBasePushStrategyComponent
		TEST_METHOD(Class__GameplayUtilities__SidePushStrategyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USidePushStrategyComponent, _maxImpulseStrength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USidePushStrategyComponent, _minImpulseStrength, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USidePushStrategyComponent, _detectorCapsuleInflation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USidePushStrategyComponent, UnknownData_VKXI, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USidePushStrategyComponent, 0x00C8);
		}

		// class UVisualLoggerExt : public UObject
		TEST_METHOD(Class__GameplayUtilities__VisualLoggerExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExt, 0x0030);
		}

		// class UCharacterPusherComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__CharacterPusherComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, UnknownData_225C, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, _charactersToPush, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, _ignoredCharacters, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, _characterDetector, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, _characterCollision, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, _pushStrategy, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPusherComponent, _ignoredByPushedCharacters, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterPusherComponent, 0x0170);
		}

		// class UAuthoritativePoolableActorComponent : public UBasePoolableActorComponent
		TEST_METHOD(Class__GameplayUtilities__AuthoritativePoolableActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativePoolableActorComponent, _acquired, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAuthoritativePoolableActorComponent, UnknownData_L7JY, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAuthoritativePoolableActorComponent, 0x00D8);
		}

		// class UBaseInputAccelerationConstraintStrategy : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__BaseInputAccelerationConstraintStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseInputAccelerationConstraintStrategy, 0x00B8);
		}

		// class UBaseCharacterVelocityAdditiveStrategy : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__BaseCharacterVelocityAdditiveStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseCharacterVelocityAdditiveStrategy, 0x00B8);
		}

		// class UBoxOcclusionQueryComponent : public UBoxComponent
		TEST_METHOD(Class__GameplayUtilities__BoxOcclusionQueryComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxOcclusionQueryComponent, TimeUntilOccluded, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxOcclusionQueryComponent, UnknownData_WC85, 0x0454);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxOcclusionQueryComponent, 0x0470);
		}

		// class UCameraUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__CameraUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraUtilities, 0x0030);
		}

		// class UCharacterPositionRecorderComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__CharacterPositionRecorderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPositionRecorderComponent, _cacheTimespan, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterPositionRecorderComponent, UnknownData_NUMU, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterPositionRecorderComponent, 0x00D8);
		}

		// class UCharacterSightableComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__CharacterSightableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightableComponent, UnknownData_PEI6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightableComponent, OnHighestSightStatusChangedBP, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightableComponent, _sightDelegateHandles, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightableComponent, _sightersStatus, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightableComponent, UnknownData_3FIQ, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSightableComponent, 0x01A0);
		}

		// class UCharacterSightComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__CharacterSightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, UnknownData_1FQD, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _minimumCharacterScreenPercent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _minimumCharacterVisiblePixelsPercent, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _maximumSightDistance, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _screenVisibilityZoneRadiusPercent, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _sightingDelay, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _discerningDelay, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _undiscerningDelay, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, UnknownData_6PIT, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _sightableCharacterClass, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _discernedCharacters, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _localDiscernibleCharacters, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _debugMode, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _canSee, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, UnknownData_002U, 0x013A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, _activationDefinition, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterSightComponent, UnknownData_9OPZ, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterSightComponent, 0x0170);
		}

		// class UChargeableUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__ChargeableUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargeableUtilities, 0x0030);
		}

		// class UContainerUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayUtilities__ContainerUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContainerUtilities, 0x0030);
		}

		// class UHitValidatorComponent : public UactorComponent
		TEST_METHOD(Class__GameplayUtilities__HitValidatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorComponent, UnknownData_WZ9M, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorComponent, _maximumDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorComponent, _maximumSquareDistance, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorComponent, _hittableCapsuleInflation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorComponent, _enableCollisionCheck, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHitValidatorComponent, UnknownData_1YU3, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHitValidatorComponent, 0x00E0);
		}

		// class UEditableMeshAdapter : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshAdapter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshAdapter, 0x0030);
		}

		// class UEditableGeometryCollectionAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableGeometryCollectionAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, OriginalGeometryCollection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, GeometryCollectionLODIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGeometryCollectionAdapter, UnknownData_YF6W, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGeometryCollectionAdapter, 0x00E0);
		}

		// class UEditableMesh : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_WC7W, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, Adapters, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_8YG7, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, TextureCoordinateCount, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_A74G, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, PendingCompactCounter, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, SubdivisionCount, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableMesh, UnknownData_MA6M, 0x052C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMesh, 0x0710);
		}

		// class UAB_Menu_Slasher23_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher23__AB_Menu_Slasher23_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_RandomPlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_SequencePlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_RandomPlayer, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_BlendListByBool, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher23_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher23_C, 0x0642);
		}

		// class UEditableMeshFactory : public UObject
		TEST_METHOD(Class__EditableMesh__EditableMeshFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableMeshFactory, 0x0030);
		}

		// class UEditableStaticMeshAdapter : public UEditableMeshAdapter
		TEST_METHOD(Class__EditableMesh__EditableStaticMeshAdapter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, OriginalStaticMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, StaticMeshLODIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableStaticMeshAdapter, UnknownData_Z024, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableStaticMeshAdapter, 0x00E8);
		}

		// class UMagicLeapImageTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, TargetImageTexture, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, name, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, LongerDimension, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bIsStationary, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, bUseUnreliablePose, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_Y36G, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetSucceeded, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnSetImageTargetFailed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetFound, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetLost, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, OnImageTargetUnreliableTracking, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapImageTrackerComponent, UnknownData_GWBG, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerComponent, 0x0290);
		}

		// class UMagicLeapImageTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapImageTracker__MagicLeapImageTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapImageTrackerFunctionLibrary, 0x0030);
		}

		// class UHagAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheHag__HagAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHagAnimInstance, UnknownData_HQ07, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHagAnimInstance, 0x05B0);
		}

		// class UPhantomTrapBurnable : public ULightBurnable
		TEST_METHOD(Class__TheHag__PhantomTrapBurnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhantomTrapBurnable, _traceZOffset, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhantomTrapBurnable, UnknownData_T2AZ, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhantomTrapBurnable, 0x0108);
		}

		// class UHagSlowdownAfterTeleportEffect : public UstatusEffect
		TEST_METHOD(Class__TheHag__HagSlowdownAfterTeleportEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHagSlowdownAfterTeleportEffect, _postTeleportSlowdownCurve, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHagSlowdownAfterTeleportEffect, _slowdownTimeAfterTeleport, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHagSlowdownAfterTeleportEffect, 0x02D8);
		}

		// class ULobbyBeaconClient : public UOnlineBeaconClient
		TEST_METHOD(Class__Lobby__LobbyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconClient, lobbyState, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconClient, playerState, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconClient, UnknownData_TESB, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconClient, LobbyJoinServerState, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconClient, UnknownData_9RVI, 0x02DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyBeaconClient, 0x0350);
		}

		// class ULobbyBeaconHost : public UOnlineBeaconHostObject
		TEST_METHOD(Class__Lobby__LobbyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconHost, UnknownData_M1F3, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconHost, LobbyStateClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconHost, lobbyState, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyBeaconHost, 0x02A0);
		}

		// class ULobbyBeaconPlayerState : public UInfo
		TEST_METHOD(Class__Lobby__LobbyBeaconPlayerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, DisplayName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, UniqueID, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, PartyOwnerUniqueId, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, bInLobby, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, UnknownData_CCKE, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, ClientActor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconPlayerState, UnknownData_9OYI, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyBeaconPlayerState, 0x02F0);
		}

		// class ULobbyBeaconState : public UInfo
		TEST_METHOD(Class__Lobby__LobbyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, MaxPlayers, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, UnknownData_9ZXJ, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, LobbyBeaconPlayerStateClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, UnknownData_JVS8, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, bLobbyStarted, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, UnknownData_UF2E, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, WaitForPlayersTimeRemaining, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, players, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULobbyBeaconState, UnknownData_U9UJ, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULobbyBeaconState, 0x03D8);
		}

		// class UAB_MKW01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_MKW01__AB_MKW01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, UnknownData_ZDYT, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_10, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_ComponentToLocalSpace_3, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_LocalToComponentSpace_3, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_8, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_10, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_9, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_8, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_7, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_6, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_5, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_9, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult_7, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_8, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult_6, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_7, 0x0A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult_5, 0x0A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_6, 0x0AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_7, 0x0B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_6, 0x0BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_5, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_4, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult_4, 0x0D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateMachine_2, 0x0DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SaveCachedPose_2, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose_7, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_4, 0x0F38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_3, 0x0F60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult_2, 0x0F88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_TransitionResult, 0x0FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_3, 0x0FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult_3, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer_2, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult_2, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SequencePlayer, 0x1138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateResult, 0x11B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_StateMachine, 0x11E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_5, 0x1298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose_6, 0x1338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_4, 0x1368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_Root, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_LocalToComponentSpace_2, 0x1460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose_5, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_3, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose_4, 0x1550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_SaveCachedPose, 0x1580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool_2, 0x1638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, UnknownData_15TG, 0x16D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_9, 0x16E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_BlendListByBool, 0x1B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose_3, 0x1BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_LocalToComponentSpace, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_ComponentToLocalSpace, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose_2, 0x1C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_8, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_UseCachedPose, 0x20E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_7, 0x2110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_6, 0x2570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_5, 0x29D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_4, 0x2E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_3, 0x3290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics_2, 0x36F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, AnimGraphNode_AnimDynamics, 0x3B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, OwningCharacterSkeletalMesh, 0x3FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, Initialized, 0x3FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsFirstPerson, 0x3FB9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsAttackSwing, 0x3FBA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsAttackOver, 0x3FBB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsTurnOffDynamic, 0x3FBC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, UnknownData_AIAH, 0x3FBD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, DeltaTimer, 0x3FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, startTime, 0x3FC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsMori, 0x3FC5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, InMenu, 0x3FC6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsAttackCarry, 0x3FC7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsEdgeCase, 0x3FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsIntroComplete, 0x3FC9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MKW01_C, IsRoleSelection, 0x3FCA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_MKW01_C, 0x3FCB);
		}

		// class UNamedInterfaces : public UObject
		TEST_METHOD(Class__OnlineSubsystem__NamedInterfaces)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, NamedInterfaceDefs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedInterfaces, UnknownData_9ADU, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedInterfaces, 0x0068);
		}

		// class UTurnBasedMatchInterface : public UInterface
		TEST_METHOD(Class__OnlineSubsystem__TurnBasedMatchInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedMatchInterface, 0x0030);
		}

		// class UScrollBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxWidgetStyle, ScrollBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxWidgetStyle, 0x0280);
		}

		// class USlateSettings : public UObject
		TEST_METHOD(Class__Slate__SlateSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, bExplicitCanvasChildZOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateSettings, UnknownData_VB1J, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateSettings, 0x0038);
		}

		// class USpinBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__SpinBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBoxWidgetStyle, SpinBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBoxWidgetStyle, 0x0348);
		}

		// class UTextBlockWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__TextBlockWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlockWidgetStyle, TextBlockStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlockWidgetStyle, 0x02C0);
		}

		// class UToolMenuBase : public UObject
		TEST_METHOD(Class__Slate__ToolMenuBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToolMenuBase, 0x0030);
		}

		// class UButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonWidgetStyle, ButtonStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonWidgetStyle, 0x02E0);
		}

		// class UCheckBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__CheckBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxWidgetStyle, CheckBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxWidgetStyle, 0x0618);
		}

		// class UComboBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxWidgetStyle, ComboBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxWidgetStyle, 0x0478);
		}

		// class UComboButtonWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ComboButtonWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboButtonWidgetStyle, ComboButtonStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboButtonWidgetStyle, 0x0430);
		}

		// class UEditableTextBoxWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextBoxWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBoxWidgetStyle, EditableTextBoxStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBoxWidgetStyle, 0x0898);
		}

		// class UEditableTextWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__EditableTextWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextWidgetStyle, EditableTextStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextWidgetStyle, 0x0270);
		}

		// class UProgressWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ProgressWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressWidgetStyle, ProgressBarStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressWidgetStyle, 0x01F0);
		}

		// class UScrollBarWidgetStyle : public USlateWidgetStyleContainerBase
		TEST_METHOD(Class__Slate__ScrollBarWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBarWidgetStyle, ScrollBarStyle, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBarWidgetStyle, 0x0550);
		}

		// class USteamAuthComponentModuleInterface : public UHandlerComponentFactory
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamAuthComponentModuleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamAuthComponentModuleInterface, 0x0030);
		}

		// class USteamNetDriver : public UIpNetDriver
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetDriver, UnknownData_Z9LK, 0x07D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetDriver, 0x07D8);
		}

		// class USteamNetConnection : public UIpConnection
		TEST_METHOD(Class__OnlineSubsystemSteam__SteamNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, bIsPassthrough, 0x1AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USteamNetConnection, UnknownData_80EC, 0x1AE9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamNetConnection, 0x1AF0);
		}

		// class UCrowdAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__CrowdAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdAgentInterface, 0x0030);
		}

		// class UPathFollowingComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__PathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_Z0ES, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MovementComp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_I9NV, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, MyNavData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathFollowingComponent, UnknownData_TD2A, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingComponent, 0x0260);
		}

		// class UCrowdFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__CrowdFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_T4WH, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CharacterMovement, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, CrowdAgentMoveDirection, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdFollowingComponent, UnknownData_HX7P, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdFollowingComponent, 0x02A0);
		}

		// class UActiveGasCloudTrackerComponent : public UactorComponent
		TEST_METHOD(Class__TheClown__ActiveGasCloudTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveGasCloudTrackerComponent, _activeToxinClouds, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActiveGasCloudTrackerComponent, _activeAntidoteClouds, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActiveGasCloudTrackerComponent, 0x00D8);
		}

		// class UCrowdManager : public UCrowdManagerBase
		TEST_METHOD(Class__AIModule__CrowdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MyNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, AvoidanceConfig, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SamplingPatterns, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAgentRadius, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedAgents, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, MaxAvoidedWalls, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, NavmeshCheckInterval, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOptimizationInterval, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, SeparationDirClamp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, PathOffsetRadiusMultiplier, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdManager, UnknownData_CWHJ, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManager, 0x00F8);
		}

		// class UBaseGasCloudProjectile : public UPhysicsBasedProjectile
		TEST_METHOD(Class__TheClown__BaseGasCloudProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasType, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, UnknownData_0YPP, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _poolableProjectile, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudDuration, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudGravityScale, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudBounciness, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudFriction, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _dissipateGasCloudTime, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudMinimumLifetime, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudSimpleCollisionRadius, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudComplexCollisionRadius, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudSurvivorDetectionRadius, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudDetectionDelay, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasCloudCosmeticFadeDuration, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _overlappingTime, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _dissipating, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, UnknownData_6BO1, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _overlappingSurvivors, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _gasParticleSystem, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _simpleCollider, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _complexCollider, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _survivorDetector, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _activeGasCloudTracker, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _cloudSizeModifierTag, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, UnknownData_8FFC, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, _cumulativeLifetime, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGasCloudProjectile, UnknownData_XL38, 0x04A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseGasCloudProjectile, 0x04B0);
		}

		// class UaiController : public Ucontroller
		TEST_METHOD(Class__AIModule__aiController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, UnknownData_94T9, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, UnknownData_VTP5, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, PathFollowingComponent, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, BrainComponent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, PerceptionComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, ActionsComp, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, Blackboard, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, CachedGameplayTasksComponent, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, DefaultNavigationFilterClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, ReceiveMoveCompleted, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UaiController, UnknownData_LWN3, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UaiController, 0x0340);
		}

		// class UAntidoteCloudProjectile : public UBaseGasCloudProjectile
		TEST_METHOD(Class__TheClown__AntidoteCloudProjectile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAntidoteCloudProjectile, 0x04B0);
		}

		// class UBombLauncher : public UKillerProjectileLauncher
		TEST_METHOD(Class__TheClown__BombLauncher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombLauncher, _speedCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombLauncher, _pitchCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombLauncher, _currentBombType, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBombLauncher, UnknownData_3Q3X, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBombLauncher, 0x0198);
		}

		// class UGassedStatusEffect : public UstatusEffect
		TEST_METHOD(Class__TheClown__GassedStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _onIsInCloudChanged, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _onIsInAntidoteCloudChanged, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _onOverlappingCloudAdded, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _isInCloud, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _isInAntidoteCloud, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, UnknownData_U9UQ, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _overlappingClouds, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, _overlappingAntidoteClouds, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedStatusEffect, UnknownData_264V, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGassedStatusEffect, 0x0388);
		}

		// class UDetourCrowdAIController : public UaiController
		TEST_METHOD(Class__AIModule__DetourCrowdAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDetourCrowdAIController, 0x0340);
		}

		// class UEnvQuery : public UDataAsset
		TEST_METHOD(Class__AIModule__EnvQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, QueryName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, UnknownData_IARD, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQuery, Options, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQuery, 0x0058);
		}

		// class UEnvQueryContext : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryContext)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext, 0x0030);
		}

		// class UGassedSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheClown__GassedSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedSurvivorSubAnimInstance, _isGassed, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGassedSurvivorSubAnimInstance, UnknownData_AXH1, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGassedSurvivorSubAnimInstance, 0x0500);
		}

		// class UTheClownUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TheClown__TheClownUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheClownUtilities, 0x0030);
		}

		// class UGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, ConfigFileName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsList, GameplayTagList, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsList, 0x0050);
		}

		// class UGameplayTagsSettings : public UGameplayTagsList
		TEST_METHOD(Class__GameplayTags__GameplayTagsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, ImportTagsFromConfig, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, WarnOnInvalidTags, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, FastReplication, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, UnknownData_0VHV, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, InvalidTagCharacters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CategoryRemapping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagTableList, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, GameplayTagRedirects, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, CommonlyReplicatedTags, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NumBitsForContainerSize, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, NetIndexFirstBitSegment, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsSettings, RestrictedConfigFiles, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsSettings, 0x00C0);
		}

		// class UGameplayTagsDeveloperSettings : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsDeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsDeveloperSettings, DeveloperConfigName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsDeveloperSettings, 0x0040);
		}

		// class UBlueprintGameplayTagLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTags__BlueprintGameplayTagLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGameplayTagLibrary, 0x0030);
		}

		// class UGameplayTagAssetInterface : public UInterface
		TEST_METHOD(Class__GameplayTags__GameplayTagAssetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagAssetInterface, 0x0030);
		}

		// class UEditableGameplayTagQuery : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UserDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, UnknownData_7VX8, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, RootExpression, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQuery, TagQueryExportText_Helper, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQuery, 0x00A0);
		}

		// class UEditableGameplayTagQueryExpression : public UObject
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression, 0x0030);
		}

		// class UEditableGameplayTagQueryExpression_AnyTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyTagsMatch, 0x0050);
		}

		// class UEditableGameplayTagQueryExpression_AllTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllTagsMatch, 0x0050);
		}

		// class UEditableGameplayTagQueryExpression_NoTagsMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoTagsMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, tags, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoTagsMatch, 0x0050);
		}

		// class UEditableGameplayTagQueryExpression_AnyExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AnyExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, Expressions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AnyExprMatch, 0x0040);
		}

		// class UEditableGameplayTagQueryExpression_AllExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_AllExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_AllExprMatch, Expressions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_AllExprMatch, 0x0040);
		}

		// class UEditableGameplayTagQueryExpression_NoExprMatch : public UEditableGameplayTagQueryExpression
		TEST_METHOD(Class__GameplayTags__EditableGameplayTagQueryExpression_NoExprMatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableGameplayTagQueryExpression_NoExprMatch, Expressions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableGameplayTagQueryExpression_NoExprMatch, 0x0040);
		}

		// class UGameplayTagsManager : public UObject
		TEST_METHOD(Class__GameplayTags__GameplayTagsManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_5LAR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, TagSources, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_B82P, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, GameplayTagTables, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagsManager, UnknownData_ZE5R, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagsManager, 0x0218);
		}

		// class UAB_US_Necklace_ACC02_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_US_Necklace_ACC02__AB_US_Necklace_ACC02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_10, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_9, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_8, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_7, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_6, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_UseCachedPose_3, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_LocalToComponentSpace_2, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_StateResult_3, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, UnknownData_LE52, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_5, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_4, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_3, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_AnimDynamics, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_ComponentToLocalSpace, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_UseCachedPose_2, 0x2FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_LocalToComponentSpace, 0x2FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_StateResult_2, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_UseCachedPose, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_StateResult, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_StateMachine, 0x3090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_CopyPoseFromMesh, 0x3140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Necklace_ACC02_C, AnimGraphNode_SaveCachedPose, 0x3280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_US_Necklace_ACC02_C, 0x3338);
		}

		// class URestrictedGameplayTagsList : public UObject
		TEST_METHOD(Class__GameplayTags__RestrictedGameplayTagsList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, ConfigFileName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URestrictedGameplayTagsList, RestrictedGameplayTagList, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URestrictedGameplayTagsList, 0x0050);
		}

		// class UEnvQueryContext_BlueprintBase : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryContext_BlueprintBase, UnknownData_C0PU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_BlueprintBase, 0x0038);
		}

		// class UEnvQueryContext_Item : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Item)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Item, 0x0030);
		}

		// class UEnvQueryContext_Querier : public UEnvQueryContext
		TEST_METHOD(Class__AIModule__EnvQueryContext_Querier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_Querier, 0x0030);
		}

		// class UEnvQueryDebugHelpers : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryDebugHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryDebugHelpers, 0x0030);
		}

		// class UEnvQueryNode : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, VerNum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryNode, UnknownData_LM74, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryNode, 0x0038);
		}

		// class UEnvQueryGenerator : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, OptionName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, itemType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator, UnknownData_E21U, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator, 0x0058);
		}

		// class UEnvQueryGenerator_ActorsOfClass : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ActorsOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchedActorClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, GenerateOnlyActorsInRadius, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ActorsOfClass, SearchCenter, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ActorsOfClass, 0x00E8);
		}

		// class UEnvQueryGenerator_BlueprintBase : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratorsActionDescription, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, Context, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, GeneratedItemType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_BlueprintBase, UnknownData_FCYG, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_BlueprintBase, 0x0088);
		}

		// class UEnvQueryGenerator_Composite : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Composite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, Generators, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, UnknownData_5S9G, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Composite, ForcedItemType, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Composite, 0x0078);
		}

		// class UEnvQueryGenerator_ProjectedPoints : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_ProjectedPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_ProjectedPoints, ProjectionData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_ProjectedPoints, 0x0088);
		}

		// class UEnvQueryGenerator_Cone : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AlignedPointsDistance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, ConeDegrees, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, AngleStep, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, range, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, CenterActor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Cone, UnknownData_6M7B, 0x0191);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Cone, 0x0198);
		}

		// class UEnvQueryGenerator_CurrentLocation : public UEnvQueryGenerator
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_CurrentLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_CurrentLocation, QueryContext, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_CurrentLocation, 0x0060);
		}

		// class UEnvQueryGenerator_Donut : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_Donut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, InnerRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, OuterRadius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, NumberOfRings, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, PointsPerRing, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcDirection, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, ArcAngle, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, bUseSpiralPattern, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_HOPH, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, center, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_Donut, UnknownData_9O7Q, 0x01F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_Donut, 0x0200);
		}

		// class UEnvQueryGenerator_OnCircle : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_OnCircle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleRadius, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, SpaceBetween, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, NumberOfPoints, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, PointOnCircleSpacingMethod, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_KFMR, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcDirection, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, ArcAngle, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, AngleRadians, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_95Q7, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenter, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, bIgnoreAnyContextActorsWhenGeneratingCircle, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_N5Q5, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, CircleCenterZOffset, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, TraceData, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_OnCircle, UnknownData_K8T9, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_OnCircle, 0x0240);
		}

		// class UEnvQueryGenerator_SimpleGrid : public UEnvQueryGenerator_ProjectedPoints
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_SimpleGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GridSize, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, SpaceBetween, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_SimpleGrid, GenerateAround, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_SimpleGrid, 0x0110);
		}

		// class UEnvQueryGenerator_PathingGrid : public UEnvQueryGenerator_SimpleGrid
		TEST_METHOD(Class__AIModule__EnvQueryGenerator_PathingGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, PathToItem, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, NavigationFilter, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryGenerator_PathingGrid, ScanRangeMultiplier, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryGenerator_PathingGrid, 0x0198);
		}

		// class UEnvQueryInstanceBlueprintWrapper : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryInstanceBlueprintWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_UVGQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, QueryID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_XQF1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, itemType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OptionIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, UnknownData_3G63, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryInstanceBlueprintWrapper, OnQueryFinishedEvent, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryInstanceBlueprintWrapper, 0x0080);
		}

		// class UEnvQueryItemType : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryItemType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryItemType, UnknownData_2GGM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType, 0x0038);
		}

		// class UEnvQueryItemType_VectorBase : public UEnvQueryItemType
		TEST_METHOD(Class__AIModule__EnvQueryItemType_VectorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_VectorBase, 0x0038);
		}

		// class UEnvQueryItemType_ActorBase : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_ActorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_ActorBase, 0x0038);
		}

		// class UEnvQueryItemType_Actor : public UEnvQueryItemType_ActorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Actor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Actor, 0x0038);
		}

		// class UEnvQueryItemType_Direction : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Direction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Direction, 0x0038);
		}

		// class UEnvQueryItemType_Point : public UEnvQueryItemType_VectorBase
		TEST_METHOD(Class__AIModule__EnvQueryItemType_Point)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryItemType_Point, 0x0038);
		}

		// class UAISubsystem : public UObject
		TEST_METHOD(Class__AIModule__AISubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, UnknownData_YAK6, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISubsystem, AISystem, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISubsystem, 0x0040);
		}

		// class UEnvQueryManager : public UAISubsystem
		TEST_METHOD(Class__AIModule__EnvQueryManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_Y49W, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, InstanceCache, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, LocalContexts, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, GCShieldedWrappers, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_TCFC, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, MaxAllowedTestingTime, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, bTestQueriesUsingBreadth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, UnknownData_SD4D, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningThreshold, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryManager, QueryCountWarningInterval, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryManager, 0x0148);
		}

		// class UEnvQueryOption : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryOption)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, generator, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryOption, Tests, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryOption, 0x0048);
		}

		// class UEnvQueryTest : public UEnvQueryNode
		TEST_METHOD(Class__AIModule__EnvQueryTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestOrder, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestPurpose, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_9ZVP, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, TestComment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextFilterOp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, MultipleContextScoreOp, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FilterType, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_SPZG, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, BoolValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMin, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, FloatValueMax, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_AAD0, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringEquation, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMinType, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ClampMaxType, 0x011B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, NormalizationType, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_4B8T, 0x011D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMin, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoreClampMax, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ScoringFactor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, ReferenceValue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, bDefineReferenceValue, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_2QL0, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest, UnknownData_PER5, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest, 0x0238);
		}

		// class UEnvQueryTest_Distance : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Distance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, UnknownData_SG46, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Distance, DistanceTo, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Distance, 0x0248);
		}

		// class UEnvQueryTest_Dot : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Dot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineA, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, LineB, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, TestMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, bAbsoluteValue, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Dot, UnknownData_X92D, 0x027A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Dot, 0x0280);
		}

		// class UEnvQueryTest_GameplayTags : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_GameplayTags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagQueryToMatch, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, bUpdatedToUseQuery, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, TagsToMatch, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, UnknownData_HJAN, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_GameplayTags, GameplayTags, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_GameplayTags, 0x02A8);
		}

		// class UEnvQueryTest_Overlap : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Overlap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Overlap, OverlapData, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Overlap, 0x0258);
		}

		// class UEnvQueryTest_Pathfinding : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Pathfinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, TestMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, UnknownData_T4SB, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, Context, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, PathFromContext, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, SkipUnreachable, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Pathfinding, filterClass, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Pathfinding, 0x02D0);
		}

		// class UEnvQueryTest_PathfindingBatch : public UEnvQueryTest_Pathfinding
		TEST_METHOD(Class__AIModule__EnvQueryTest_PathfindingBatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_PathfindingBatch, ScanRangeMultiplier, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_PathfindingBatch, 0x0310);
		}

		// class UEnvQueryTest_Project : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Project)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Project, ProjectionData, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Project, 0x0268);
		}

		// class UEnvQueryTest_Random : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Random)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Random, 0x0238);
		}

		// class UEnvQueryTest_Trace : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Trace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceData, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, TraceFromContext, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ItemHeightOffset, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, ContextHeightOffset, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Trace, Context, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Trace, 0x0330);
		}

		// class UEnvQueryTest_Volume : public UEnvQueryTest
		TEST_METHOD(Class__AIModule__EnvQueryTest_Volume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeContext, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, VolumeClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_Volume, UnknownData_BBN6, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_Volume, 0x0250);
		}

		// class UEnvQueryTypes : public UObject
		TEST_METHOD(Class__AIModule__EnvQueryTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTypes, 0x0030);
		}

		// class UEQSQueryResultSourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__EQSQueryResultSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSQueryResultSourceInterface, 0x0030);
		}

		// class UEQSRenderingComponent : public UprimitiveComponent
		TEST_METHOD(Class__AIModule__EQSRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_9S2I, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSRenderingComponent, UnknownData_UI23, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSRenderingComponent, 0x0460);
		}

		// class UEQSTestingPawn : public Ucharacter
		TEST_METHOD(Class__AIModule__EQSTestingPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, UnknownData_0NDJ, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, QueryTemplate, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, QueryParams, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, QueryConfig, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, TimeLimitPerStep, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, StepToDebugDraw, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, HighlightMode, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, UnknownData_YPS2, 0x0509);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, UnknownData_T44Y, 0x050D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, QueryingMode, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, UnknownData_EK2M, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, NavAgentProperties, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEQSTestingPawn, UnknownData_KVGY, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEQSTestingPawn, 0x0570);
		}

		// class UGenericTeamAgentInterface : public UInterface
		TEST_METHOD(Class__AIModule__GenericTeamAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenericTeamAgentInterface, 0x0030);
		}

		// class UGridPathAIController : public UaiController
		TEST_METHOD(Class__AIModule__GridPathAIController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathAIController, 0x0340);
		}

		// class UGridPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__AIModule__GridPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, GridManager, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPathFollowingComponent, UnknownData_7EHE, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPathFollowingComponent, 0x0290);
		}

		// class UNavFilter_AIControllerDefault : public UNavigationQueryFilter
		TEST_METHOD(Class__AIModule__NavFilter_AIControllerDefault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavFilter_AIControllerDefault, 0x0050);
		}

		// class UNavLocalGridManager : public UObject
		TEST_METHOD(Class__AIModule__NavLocalGridManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLocalGridManager, UnknownData_0AH0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLocalGridManager, 0x0060);
		}

		// class UPathFollowingManager : public UObject
		TEST_METHOD(Class__AIModule__PathFollowingManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingManager, 0x0030);
		}

		// class UPawnAction : public UObject
		TEST_METHOD(Class__AIModule__PawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ChildAction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, ParentAction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, OwnerComponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, instigator, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, BrainComp, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_I4XE, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction, UnknownData_HNYO, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction, 0x00A0);
		}

		// class UPawnAction_BlueprintBase : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_BlueprintBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_BlueprintBase, 0x00A0);
		}

		// class UPawnAction_Move : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Move)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, goalActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, GoalLocation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, AcceptableRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, filterClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Move, UnknownData_R3HM, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Move, 0x00F0);
		}

		// class UPawnAction_Repeat : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Repeat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ActionToRepeat, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, RecentActionCopy, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, ChildFailureHandlingMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Repeat, UnknownData_OP0C, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Repeat, 0x00C0);
		}

		// class UPawnAction_Sequence : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Sequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ActionSequence, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, ChildFailureHandlingMode, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_UFSB, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, RecentActionCopy, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Sequence, UnknownData_RS7S, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Sequence, 0x00C8);
		}

		// class UPawnAction_Wait : public UPawnAction
		TEST_METHOD(Class__AIModule__PawnAction_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, TimeToWait, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnAction_Wait, UnknownData_V4RK, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnAction_Wait, 0x00B0);
		}

		// class UPawnActionsComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__PawnActionsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ControlledPawn, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionStacks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, ActionEvents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, CurrentAction, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnActionsComponent, UnknownData_ORFB, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnActionsComponent, 0x00F0);
		}

		// class UVisualLoggerExtension : public UObject
		TEST_METHOD(Class__AIModule__VisualLoggerExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerExtension, 0x0030);
		}

		// class UBTNode : public UObject
		TEST_METHOD(Class__AIModule__BTNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_2XIF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, NodeName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, TreeAsset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, ParentNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTNode, UnknownData_TPJC, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTNode, 0x0060);
		}

		// class UBTAuxiliaryNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTAuxiliaryNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTAuxiliaryNode, UnknownData_UD82, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTAuxiliaryNode, 0x0068);
		}

		// class UBTDecorator : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_4HIT, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, FlowAbortMode, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator, UnknownData_NNYU, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator, 0x0070);
		}

		// class UBTDecorator_CompareBBEntries : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, Operator, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, UnknownData_FCHF, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyA, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CompareBBEntries, BlackboardKeyB, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CompareBBEntries, 0x00D8);
		}

		// class UBTDecorator_BlackboardBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlackboardBase, BlackboardKey, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlackboardBase, 0x00A0);
		}

		// class UBTDecorator_IsBBEntryOfClass : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsBBEntryOfClass, TestClass, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsBBEntryOfClass, 0x00A8);
		}

		// class UBTDecorator_TimeLimit : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, TimeLimit, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TimeLimit, UnknownData_BA8H, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TimeLimit, 0x0078);
		}

		// class UBTService : public UBTAuxiliaryNode
		TEST_METHOD(Class__AIModule__BTService)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, Interval, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, RandomDeviation, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService, UnknownData_O8S0, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService, 0x0078);
		}

		// class UBTService_BlackboardBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlackboardBase, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlackboardBase, 0x00A8);
		}

		// class UBTService_RunEQS : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, EQSRequest, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunEQS, UnknownData_N0OM, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunEQS, 0x0108);
		}

		// class UBTTaskNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTTaskNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, Services, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTaskNode, UnknownData_LFFL, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTaskNode, 0x0078);
		}

		// class UBTTask_BlackboardBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlackboardBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlackboardBase, BlackboardKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlackboardBase, 0x00A8);
		}

		// class UBTTask_MoveTo : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, AcceptableRadius, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_5YBG, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, filterClass, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, ObservedBlackboardValueTolerance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveTo, UnknownData_D351, 0x00BE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveTo, 0x00C0);
		}

		// class UBTTask_MoveDirectlyToward : public UBTTask_MoveTo
		TEST_METHOD(Class__AIModule__BTTask_MoveDirectlyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MoveDirectlyToward, UnknownData_0RC2, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MoveDirectlyToward, 0x00C8);
		}

		// class UBTTask_Wait : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_Wait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, WaitTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Wait, RandomDeviation, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Wait, 0x0080);
		}

		// class UAIPerceptionComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, SensesConfig, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, DominantSense, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_C0QP, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, AIOwner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, UnknownData_UVSV, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnPerceptionUpdated, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionComponent, OnTargetPerceptionUpdated, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionComponent, 0x0188);
		}

		// class UBrainComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__BrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_4XW3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, BlackboardComp, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, AIOwner, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrainComponent, UnknownData_CMI2, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrainComponent, 0x0118);
		}

		// class UBehaviorTreeComponent : public UBrainComponent
		TEST_METHOD(Class__AIModule__BehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_UKH4, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, NodeInstances, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, UnknownData_G8P5, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeComponent, DefaultBehaviorTreeAsset, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeComponent, 0x0278);
		}

		// class UBlackboardComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__BlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BrainComp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, DefaultBlackboardAsset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, BlackboardAsset, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_3VK2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, KeyInstances, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardComponent, UnknownData_380U, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardComponent, 0x01B8);
		}

		// class UNavLinkProxy : public Uactor
		TEST_METHOD(Class__AIModule__NavLinkProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, UnknownData_ERT6, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, PointLinks, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, SegmentLinks, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, SmartLinkComp, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, bSmartLinkIsRelevant, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, UnknownData_U44T, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy, OnSmartLinkReached, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkProxy, 0x0280);
		}

		// class UAISenseConfig : public UObject
		TEST_METHOD(Class__AIModule__AISenseConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, DebugColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, MaxAge, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig, UnknownData_38N7, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig, 0x0050);
		}

		// class UAISense : public UObject
		TEST_METHOD(Class__AIModule__AISense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, DefaultExpirationAge, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, NotifyType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_ET5Y, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_K0FS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, PerceptionSystemInstance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense, UnknownData_N5AO, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense, 0x0090);
		}

		// class UAISenseEvent : public UObject
		TEST_METHOD(Class__AIModule__AISenseEvent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent, 0x0030);
		}

		// class UPawnSensingComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__PawnSensingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingThreshold, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, LOSHearingThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SightRadius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, SensingInterval, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, HearingMaxSoundAge, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, UnknownData_0T0M, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnSeePawn, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, OnHearNoise, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionAngle, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnSensingComponent, PeripheralVisionCosine, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnSensingComponent, 0x0100);
		}

		// class UAIAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AIModule__AIAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, OnFail, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIAsyncTaskBlueprintProxy, UnknownData_MASZ, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIAsyncTaskBlueprintProxy, 0x0070);
		}

		// class UAIBlueprintHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__AIBlueprintHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIBlueprintHelperLibrary, 0x0030);
		}

		// class UAIDataProvider : public UObject
		TEST_METHOD(Class__AIModule__AIDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider, 0x0030);
		}

		// class UAIDataProvider_QueryParams : public UAIDataProvider
		TEST_METHOD(Class__AIModule__AIDataProvider_QueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, ParamName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, FloatValue, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, IntValue, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, BoolValue, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_QueryParams, UnknownData_C29V, 0x0045);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_QueryParams, 0x0048);
		}

		// class UAIDataProvider_Random : public UAIDataProvider_QueryParams
		TEST_METHOD(Class__AIModule__AIDataProvider_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, min, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, max, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIDataProvider_Random, UnknownData_KB6N, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDataProvider_Random, 0x0058);
		}

		// class UAIHotSpotManager : public UObject
		TEST_METHOD(Class__AIModule__AIHotSpotManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIHotSpotManager, 0x0030);
		}

		// class UAIPerceptionListenerInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIPerceptionListenerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionListenerInterface, 0x0030);
		}

		// class UAIPerceptionStimuliSourceComponent : public UactorComponent
		TEST_METHOD(Class__AIModule__AIPerceptionStimuliSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, UnknownData_0ZCE, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionStimuliSourceComponent, RegisterAsSourceForSenses, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionStimuliSourceComponent, 0x00D0);
		}

		// class UAIPerceptionSystem : public UAISubsystem
		TEST_METHOD(Class__AIModule__AIPerceptionSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_BZ7R, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, Senses, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, PerceptionAgingRate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAIPerceptionSystem, UnknownData_D2MK, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPerceptionSystem, 0x0140);
		}

		// class UAIResourceInterface : public UInterface
		TEST_METHOD(Class__AIModule__AIResourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResourceInterface, 0x0030);
		}

		// class UAIResource_Movement : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Movement)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Movement, 0x0040);
		}

		// class UAIResource_Logic : public UGameplayTaskResource
		TEST_METHOD(Class__AIModule__AIResource_Logic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIResource_Logic, 0x0040);
		}

		// class UAISense_Blueprint : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerDataType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, ListenerContainer, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Blueprint, UnprocessedEvents, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Blueprint, 0x00B8);
		}

		// class UAISense_Damage : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Damage, RegisteredEvents, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Damage, 0x00A0);
		}

		// class UAISense_Hearing : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, NoiseEvents, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, SpeedOfSoundSq, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Hearing, UnknownData_28M1, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Hearing, 0x00F8);
		}

		// class UAISense_Prediction : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Prediction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Prediction, RegisteredEvents, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Prediction, 0x00A0);
		}

		// class UAISense_Sight : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_ZQER, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTracesPerTick, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MinQueriesPerTimeSliceCheck, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxTimeSlicePerTick, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, HighImportanceQueryDistanceThreshold, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_G78B, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, MaxQueryImportance, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, SightLimitQueryImportance, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Sight, UnknownData_WK15, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Sight, 0x0180);
		}

		// class UAISense_Team : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Team)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Team, RegisteredEvents, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Team, 0x00A0);
		}

		// class UAISense_Touch : public UAISense
		TEST_METHOD(Class__AIModule__AISense_Touch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISense_Touch, RegisteredEvents, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISense_Touch, 0x00A0);
		}

		// class UAISenseBlueprintListener : public UUserDefinedStruct
		TEST_METHOD(Class__AIModule__AISenseBlueprintListener)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseBlueprintListener, 0x0110);
		}

		// class UAISenseConfig_Blueprint : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Blueprint, Implementation, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Blueprint, 0x0058);
		}

		// class UAISenseConfig_Damage : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Damage, Implementation, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Damage, 0x0058);
		}

		// class UAISenseConfig_Hearing : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, HearingRange, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, LoSHearingRange, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, UnknownData_OP7V, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Hearing, DetectionByAffiliation, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Hearing, 0x0068);
		}

		// class UBP_SurvivorLeftFootGroundDetector_C : public UFromBoneGroundDetectorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_SurvivorLeftFootGroundDetector__BP_SurvivorLeftFootGroundDetector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SurvivorLeftFootGroundDetector_C, 0x01E0);
		}

		// class UAISenseConfig_Prediction : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Prediction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Prediction, 0x0050);
		}

		// class UAISenseConfig_Sight : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Sight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, Implementation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, SightRadius, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, LoseSightRadius, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, PeripheralVisionAngleDegrees, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, DetectionByAffiliation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, AutoSuccessRangeFromLastSeenLocation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseConfig_Sight, UnknownData_FRSM, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Sight, 0x0070);
		}

		// class UAISenseConfig_Team : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Team)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Team, 0x0050);
		}

		// class UAISenseConfig_Touch : public UAISenseConfig
		TEST_METHOD(Class__AIModule__AISenseConfig_Touch)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseConfig_Touch, 0x0050);
		}

		// class UAISenseEvent_Damage : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Damage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Damage, event, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Damage, 0x0060);
		}

		// class UAISenseEvent_Hearing : public UAISenseEvent
		TEST_METHOD(Class__AIModule__AISenseEvent_Hearing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISenseEvent_Hearing, event, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISenseEvent_Hearing, 0x0060);
		}

		// class UAISightTargetInterface : public UInterface
		TEST_METHOD(Class__AIModule__AISightTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISightTargetInterface, 0x0030);
		}

		// class UAISystem : public UAISystemBase
		TEST_METHOD(Class__AIModule__AISystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystemClassName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManagerClassName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, acceptanceRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingRegularPathPointAcceptanceRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PathfollowingNavLinkAcceptanceRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bFinishMoveOnGoalOverlap, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAcceptPartialPaths, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowStrafing, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableBTAITasks, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bAllowControllersAsEQSQuerier, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bEnableDebuggerPlugin, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, bForgetStaleActors, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, DefaultSightCollisionChannel, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_ETXC, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, BehaviorTreeManager, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, EnvironmentQueryManager, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, PerceptionSystem, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, AllProxyObjects, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, HotSpotManager, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, NavLocalGrids, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystem, UnknownData_V2J0, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystem, 0x0158);
		}

		// class UAITask : public UGameplayTask
		TEST_METHOD(Class__AIModule__AITask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask, OwnerController, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask, 0x0078);
		}

		// class UAITask_LockLogic : public UAITask
		TEST_METHOD(Class__AIModule__AITask_LockLogic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_LockLogic, 0x0078);
		}

		// class UAITask_MoveTo : public UAITask
		TEST_METHOD(Class__AIModule__AITask_MoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnRequestFailed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, OnMoveFinished, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, MoveRequest, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_MoveTo, UnknownData_JO9P, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_MoveTo, 0x0118);
		}

		// class UAITask_RunEQS : public UAITask
		TEST_METHOD(Class__AIModule__AITask_RunEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAITask_RunEQS, UnknownData_TH9X, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAITask_RunEQS, 0x00F8);
		}

		// class UBehaviorTree : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_W70P, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootNode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, BlackboardAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecorators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, RootDecoratorOps, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTree, UnknownData_77D2, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTree, 0x0070);
		}

		// class UBehaviorTreeManager : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, MaxDebuggerSteps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, UnknownData_QPPA, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, LoadedTemplates, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBehaviorTreeManager, ActiveComponents, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeManager, 0x0058);
		}

		// class UBehaviorTreeTypes : public UObject
		TEST_METHOD(Class__AIModule__BehaviorTreeTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBehaviorTreeTypes, 0x0030);
		}

		// class UBlackboardAssetProvider : public UInterface
		TEST_METHOD(Class__AIModule__BlackboardAssetProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardAssetProvider, 0x0030);
		}

		// class UBlackboardData : public UDataAsset
		TEST_METHOD(Class__AIModule__BlackboardData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Parent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, Keys, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardData, UnknownData_9KER, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardData, 0x0058);
		}

		// class UBlackboardKeyType : public UObject
		TEST_METHOD(Class__AIModule__BlackboardKeyType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType, UnknownData_QJDV, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType, 0x0038);
		}

		// class UBlackboardKeyType_Bool : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Bool)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Bool, 0x0038);
		}

		// class UBlackboardKeyType_Class : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Class, BaseClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Class, 0x0040);
		}

		// class UBlackboardKeyType_Enum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, EnumName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Enum, UnknownData_QU0V, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Enum, 0x0058);
		}

		// class UBlackboardKeyType_Float : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Float)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Float, 0x0038);
		}

		// class UBlackboardKeyType_Int : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Int)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Int, 0x0038);
		}

		// class UBlackboardKeyType_Name : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Name)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Name, 0x0038);
		}

		// class UBlackboardKeyType_NativeEnum : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_NativeEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_NativeEnum, EnumType, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_NativeEnum, 0x0050);
		}

		// class UBlackboardKeyType_Object : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_Object, BaseClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Object, 0x0040);
		}

		// class UBlackboardKeyType_Rotator : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Rotator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Rotator, 0x0038);
		}

		// class UBlackboardKeyType_String : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_String)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackboardKeyType_String, StringValue, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_String, 0x0048);
		}

		// class UBlackboardKeyType_Vector : public UBlackboardKeyType
		TEST_METHOD(Class__AIModule__BlackboardKeyType_Vector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackboardKeyType_Vector, 0x0038);
		}

		// class UBTCompositeNode : public UBTNode
		TEST_METHOD(Class__AIModule__BTCompositeNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Children, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, Services, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_ERF5, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTCompositeNode, UnknownData_Y4KX, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTCompositeNode, 0x0098);
		}

		// class UBTComposite_Selector : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Selector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Selector, 0x0098);
		}

		// class UBTComposite_Sequence : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_Sequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_Sequence, 0x0098);
		}

		// class UBTComposite_SimpleParallel : public UBTCompositeNode
		TEST_METHOD(Class__AIModule__BTComposite_SimpleParallel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, FinishMode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTComposite_SimpleParallel, UnknownData_19C8, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTComposite_SimpleParallel, 0x00A0);
		}

		// class UBTDecorator_Blackboard : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_Blackboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, IntValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, FloatValue, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, StringValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, CachedDescription, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, OperationType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, NotifyObserver, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Blackboard, UnknownData_CXPV, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Blackboard, 0x00D0);
		}

		// class UBTDecorator_BlueprintBase : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, AIOwner, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ActorOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, ObservedKeyNames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_N4BF, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_BlueprintBase, UnknownData_GF56, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_BlueprintBase, 0x00A8);
		}

		// class UBTDecorator_CheckGameplayTagsOnActor : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_CheckGameplayTagsOnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, ActorToCheck, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, TagsToMatch, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, UnknownData_3X99, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, GameplayTags, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CheckGameplayTagsOnActor, CachedDescription, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CheckGameplayTagsOnActor, 0x00D8);
		}

		// class UBTDecorator_ConditionalLoop : public UBTDecorator_Blackboard
		TEST_METHOD(Class__AIModule__BTDecorator_ConditionalLoop)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConditionalLoop, 0x00D0);
		}

		// class UBTDecorator_ConeCheck : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeHalfAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_HXTB, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeOrigin, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, ConeDirection, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, Observed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ConeCheck, UnknownData_OB0T, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ConeCheck, 0x0110);
		}

		// class UBTDecorator_Cooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Cooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, CoolDownTime, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Cooldown, UnknownData_4B2B, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Cooldown, 0x0078);
		}

		// class UBTDecorator_DoesPathExist : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_DoesPathExist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyA, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, BlackboardKeyB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_MEX0, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, PathQueryType, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, UnknownData_JOSK, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_DoesPathExist, filterClass, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_DoesPathExist, 0x00E0);
		}

		// class UBTDecorator_ForceSuccess : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ForceSuccess)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ForceSuccess, 0x0070);
		}

		// class UBTDecorator_IsAtLocation : public UBTDecorator_BlackboardBase
		TEST_METHOD(Class__AIModule__BTDecorator_IsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, AcceptableRadius, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_6RU3, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, ParametrizedAcceptableRadius, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, GeometricDistanceType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_J88L, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsAtLocation, UnknownData_KG53, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsAtLocation, 0x00F0);
		}

		// class UBTDecorator_KeepInCone : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_KeepInCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeHalfAngle, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_VZ59, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, ConeOrigin, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, Observed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_KeepInCone, UnknownData_USZJ, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_KeepInCone, 0x00E0);
		}

		// class UBTDecorator_Loop : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_Loop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, NumLoops, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, bInfiniteLoop, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_9QSF, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, InfiniteLoopTimeoutTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Loop, UnknownData_NFWE, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Loop, 0x0080);
		}

		// class UBTDecorator_ReachedMoveGoal : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_ReachedMoveGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ReachedMoveGoal, 0x0070);
		}

		// class UBTDecorator_SetTagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, CooldownDuration, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, bAddToExistingDuration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_SetTagCooldown, UnknownData_GLQD, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_SetTagCooldown, 0x0088);
		}

		// class UBTDecorator_TagCooldown : public UBTDecorator
		TEST_METHOD(Class__AIModule__BTDecorator_TagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, CooldownDuration, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bAddToExistingDuration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, bActivatesCooldown, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_TagCooldown, UnknownData_TZYZ, 0x0082);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TagCooldown, 0x0088);
		}

		// class UBTFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AIModule__BTFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTFunctionLibrary, 0x0030);
		}

		// class UBTService_BlueprintBase : public UBTService
		TEST_METHOD(Class__AIModule__BTService_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, AIOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, ActorOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_VGRB, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_BlueprintBase, UnknownData_W5A6, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_BlueprintBase, 0x00A0);
		}

		// class UBTService_DefaultFocus : public UBTService_BlackboardBase
		TEST_METHOD(Class__AIModule__BTService_DefaultFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, FocusPriority, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_DefaultFocus, UnknownData_W5M3, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_DefaultFocus, 0x00B0);
		}

		// class UBTTask_BlueprintBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_BlueprintBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, AIOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, ActorOwner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, TickInterval, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_YZPQ, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_BlueprintBase, UnknownData_D1Z5, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_BlueprintBase, 0x00B0);
		}

		// class UBTTask_FinishWithResult : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_FinishWithResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, result, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FinishWithResult, UnknownData_TYTM, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FinishWithResult, 0x0080);
		}

		// class UBTTask_GameplayTaskBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_GameplayTaskBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_GameplayTaskBase, UnknownData_9RTR, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_GameplayTaskBase, 0x0080);
		}

		// class UBTTask_MakeNoise : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_MakeNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, Loudnes, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_MakeNoise, UnknownData_F0P1, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_MakeNoise, 0x0080);
		}

		// class UBTTask_PawnActionBase : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PawnActionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PawnActionBase, 0x0078);
		}

		// class UBTTask_PlayAnimation : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlayAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, AnimationToPlay, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_9WP3, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, MyOwnerComp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, CachedSkelMesh, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlayAnimation, UnknownData_KIV4, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlayAnimation, 0x00B8);
		}

		// class UBTTask_PlaySound : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PlaySound, SoundToPlay, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PlaySound, 0x0080);
		}

		// class UBTTask_PushPawnAction : public UBTTask_PawnActionBase
		TEST_METHOD(Class__AIModule__BTTask_PushPawnAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_PushPawnAction, Action, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_PushPawnAction, 0x0080);
		}

		// class UBTTask_RotateToFaceBBEntry : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RotateToFaceBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, Precision, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RotateToFaceBBEntry, UnknownData_9N78, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RotateToFaceBBEntry, 0x00B0);
		}

		// class UBTTask_RunBehavior : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehavior)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehavior, BehaviorAsset, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehavior, 0x0080);
		}

		// class UBTTask_RunBehaviorDynamic : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_RunBehaviorDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, InjectionTag, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, UnknownData_JZCV, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, DefaultBehaviorAsset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunBehaviorDynamic, BehaviorAsset, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunBehaviorDynamic, 0x0098);
		}

		// class UBTTask_RunEQSQuery : public UBTTask_BlackboardBase
		TEST_METHOD(Class__AIModule__BTTask_RunEQSQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryTemplate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryParams, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, QueryConfig, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, RunMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_OP2U, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSQueryBlackboardKey, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, bUseBBKey, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_M26Q, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, EQSRequest, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunEQSQuery, UnknownData_2IXM, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunEQSQuery, 0x0170);
		}

		// class UBTTask_SetTagCooldown : public UBTTaskNode
		TEST_METHOD(Class__AIModule__BTTask_SetTagCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownTag, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, bAddToExistingDuration, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_7ITS, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, CooldownDuration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetTagCooldown, UnknownData_YMZ9, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetTagCooldown, 0x0090);
		}

		// class UBTTask_WaitBlackboardTime : public UBTTask_Wait
		TEST_METHOD(Class__AIModule__BTTask_WaitBlackboardTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_WaitBlackboardTime, BlackboardKey, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_WaitBlackboardTime, 0x00B0);
		}

		// class ULevelVariantSets : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, DirectorClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, VariantSets, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSets, UnknownData_0IZ6, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSets, 0x0098);
		}

		// class ULevelVariantSetsActor : public Uactor
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsActor, LevelVariantSets, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsActor, 0x0250);
		}

		// class ULevelVariantSetsFunctionDirector : public UObject
		TEST_METHOD(Class__VariantManagerContent__LevelVariantSetsFunctionDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelVariantSetsFunctionDirector, UnknownData_UNRC, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelVariantSetsFunctionDirector, 0x0048);
		}

		// class UPropertyValue : public UObject
		TEST_METHOD(Class__VariantManagerContent__PropertyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_NMO2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, Properties, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertyIndices, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, CapturedPropSegments, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, FullDisplayString, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_EL9T, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropertySetterParameterDefaults, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, bHasRecordedData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_I0ZG, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, LeafPropertyClass, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_GH6T, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, ValueBytes, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, PropCategory, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyValue, UnknownData_DK2I, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValue, 0x01D8);
		}

		// class UPropertyValueTransform : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueTransform)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueTransform, 0x01D8);
		}

		// class UPropertyValueVisibility : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueVisibility)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueVisibility, 0x01D8);
		}

		// class UPropertyValueColor : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueColor, 0x01D8);
		}

		// class UPropertyValueMaterial : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueMaterial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueMaterial, 0x01D8);
		}

		// class UPropertyValueOption : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueOption)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueOption, 0x01D8);
		}

		// class UPropertyValueSoftObject : public UPropertyValue
		TEST_METHOD(Class__VariantManagerContent__PropertyValueSoftObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyValueSoftObject, 0x01D8);
		}

		// class USwitchActor : public Uactor
		TEST_METHOD(Class__VariantManagerContent__SwitchActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchActor, UnknownData_CL37, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchActor, SceneComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchActor, LastSelectedOption, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchActor, UnknownData_EP1L, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwitchActor, 0x0258);
		}

		// class UVariant : public UObject
		TEST_METHOD(Class__VariantManagerContent__Variant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, DisplayText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, UnknownData_DAK1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, ObjectBindings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariant, Thumbnail, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariant, 0x0078);
		}

		// class UVariantObjectBinding : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantObjectBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CachedActorLabel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, ObjectPtr, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, LazyObjectPtr, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, UnknownData_SLN5, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, CapturedProperties, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantObjectBinding, FunctionCallers, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantObjectBinding, 0x00A0);
		}

		// class UVariantSet : public UObject
		TEST_METHOD(Class__VariantManagerContent__VariantSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, DisplayText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_XPSA, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, bExpanded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, UnknownData_3O0T, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVariantSet, Variants, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVariantSet, 0x0078);
		}

		// class UAB_Menu_Nea_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Nea__AB_Menu_Nea_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Nea_C, 0x194C);
		}

		// class UGFXUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GFXUtilities__GFXUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGFXUtilities, 0x0030);
		}

		// class ULightIntensityTimelineComponent : public UactorComponent
		TEST_METHOD(Class__GFXUtilities__LightIntensityTimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, Lights, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, materialHelpers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, intensityCurve, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, randomizeStart, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, randomizeLength, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, UnknownData_BZY3, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, minLength, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, maxLength, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, normalizeCurve, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, startTicking, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, inputLightUnit, 0x00EE);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, UnknownData_S0S8, 0x00EF);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, OnTimelineFinished, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightIntensityTimelineComponent, UnknownData_ZSIA, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightIntensityTimelineComponent, 0x0110);
		}

		// class UBatchMeshCommands : public USceneComponent
		TEST_METHOD(Class__GFXUtilities__BatchMeshCommands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchMeshCommands, UnknownData_LYIV, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchMeshCommands, Groups, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchMeshCommands, TargetMeshes, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBatchMeshCommands, _materialGroupName, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBatchMeshCommands, 0x0288);
		}

		// class UMaterialHelper : public UBatchMeshCommands
		TEST_METHOD(Class__GFXUtilities__MaterialHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialHelper, UnknownData_4ZCC, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialHelper, 0x0290);
		}

		// class UMaterialHelperUnaffectedStaticMeshComp : public UStaticMeshComponent
		TEST_METHOD(Class__GFXUtilities__MaterialHelperUnaffectedStaticMeshComp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialHelperUnaffectedStaticMeshComp, UnknownData_XHNO, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialHelperUnaffectedStaticMeshComp, 0x04F0);
		}

		// class UMeshCloningFactory : public UBatchMeshCommands
		TEST_METHOD(Class__GFXUtilities__MeshCloningFactory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshCloningFactory, UnknownData_OZ7N, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshCloningFactory, 0x0290);
		}

		// class UOuterlineComponent : public USceneComponent
		TEST_METHOD(Class__GFXUtilities__OuterlineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOuterlineComponent, CloneCustomDepthMaterial, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOuterlineComponent, CloneTranslucentMaterial, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOuterlineComponent, _cloneCustomDepthMaterialDynamic, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOuterlineComponent, _cloneTranslucentMaterialDynamic, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOuterlineComponent, _customDepthSkeletalMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOuterlineComponent, _overlaySkeletalMesh, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOuterlineComponent, 0x0240);
		}

		// class UOutlinesTickManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__GFXUtilities__OutlinesTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOutlinesTickManager, UnknownData_R7DC, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOutlinesTickManager, 0x0078);
		}

		// class UBaseOutlineRenderStrategy : public UObject
		TEST_METHOD(Class__GFXUtilities__BaseOutlineRenderStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseOutlineRenderStrategy, _batchCommands, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseOutlineRenderStrategy, UnknownData_1YPR, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseOutlineRenderStrategy, 0x0070);
		}

		// class UStencilOutlineRenderStrategy : public UBaseOutlineRenderStrategy
		TEST_METHOD(Class__GFXUtilities__StencilOutlineRenderStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStencilOutlineRenderStrategy, _replacementMaterials, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStencilOutlineRenderStrategy, _translucentCopies, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStencilOutlineRenderStrategy, UnknownData_HAFX, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStencilOutlineRenderStrategy, 0x0098);
		}

		// class UTranslucentOutlineRenderStrategy : public UBaseOutlineRenderStrategy
		TEST_METHOD(Class__GFXUtilities__TranslucentOutlineRenderStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTranslucentOutlineRenderStrategy, _replacementMaterials, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTranslucentOutlineRenderStrategy, 0x0080);
		}

		// class UAlternatingColor : public UObject
		TEST_METHOD(Class__GFXUtilities__AlternatingColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlternatingColor, FirstColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlternatingColor, SecondColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlternatingColor, ColorChangePeriod, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAlternatingColor, UnknownData_E472, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAlternatingColor, 0x0078);
		}

		// class UClippableProviderComponent : public UactorComponent
		TEST_METHOD(Class__GFXUtilities__ClippableProviderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClippableProviderComponent, _ignoredPrimitives, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClippableProviderComponent, 0x0108);
		}

		// class UClonedMeshComponent : public UBatchMeshCommands
		TEST_METHOD(Class__GFXUtilities__ClonedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClonedMeshComponent, _originalToClone, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClonedMeshComponent, _cloneToOriginal, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClonedMeshComponent, UnknownData_Z1CL, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClonedMeshComponent, 0x0330);
		}

		// class UClonedMeshComponentTranslucentOutline : public UClonedMeshComponent
		TEST_METHOD(Class__GFXUtilities__ClonedMeshComponentTranslucentOutline)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClonedMeshComponentTranslucentOutline, 0x0330);
		}

		// class UClonedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__GFXUtilities__ClonedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClonedStaticMeshComponent, UnknownData_04ZP, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClonedStaticMeshComponent, 0x04F0);
		}

		// class UClonedSkeletalMeshComponent : public UskeletalMeshComponent
		TEST_METHOD(Class__GFXUtilities__ClonedSkeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClonedSkeletalMeshComponent, UnknownData_U2EB, 0x0B5C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClonedSkeletalMeshComponent, 0x0B60);
		}

		// class UCustomDepthOutlineRenderStrategy : public UBaseOutlineRenderStrategy
		TEST_METHOD(Class__GFXUtilities__CustomDepthOutlineRenderStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomDepthOutlineRenderStrategy, _replacementMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomDepthOutlineRenderStrategy, _translucentCopies, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomDepthOutlineRenderStrategy, 0x0088);
		}

		// class UDBDReflectionCaptureSpawnerComponent : public USceneComponent
		TEST_METHOD(Class__GFXUtilities__DBDReflectionCaptureSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, ReflectionSourceType, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, UnknownData_VQTO, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, Cubemap, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, SourceCubemapAngle, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, brightness, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, contributionFactor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, UnknownData_SODV, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDReflectionCaptureSpawnerComponent, SpawnedReflectionCapture, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDReflectionCaptureSpawnerComponent, 0x0238);
		}

		// class UDBDBoxReflectionCaptureSpawnerComponent : public UDBDReflectionCaptureSpawnerComponent
		TEST_METHOD(Class__GFXUtilities__DBDBoxReflectionCaptureSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBoxReflectionCaptureSpawnerComponent, InfluenceBox, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBoxReflectionCaptureSpawnerComponent, BoxTransitionDistance, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBoxReflectionCaptureSpawnerComponent, PreviewInfluenceBox, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBoxReflectionCaptureSpawnerComponent, PreviewCaptureBox, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBoxReflectionCaptureSpawnerComponent, UnknownData_KXM0, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBoxReflectionCaptureSpawnerComponent, 0x0260);
		}

		// class UDBDCullDistanceVolumeComponent : public USceneComponent
		TEST_METHOD(Class__GFXUtilities__DBDCullDistanceVolumeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, CullDistances, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, InfluenceBox, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, enabled, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, Unbound, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, UnknownData_N9UJ, 0x022E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, _previewInfluenceBox, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCullDistanceVolumeComponent, UnknownData_KWAJ, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCullDistanceVolumeComponent, 0x0240);
		}

		// class UDBDSphereReflectionCaptureSpawnerComponent : public UDBDReflectionCaptureSpawnerComponent
		TEST_METHOD(Class__GFXUtilities__DBDSphereReflectionCaptureSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSphereReflectionCaptureSpawnerComponent, UnknownData_OGD1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSphereReflectionCaptureSpawnerComponent, PreviewInfluenceRadius, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDSphereReflectionCaptureSpawnerComponent, UnknownData_SYFX, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDSphereReflectionCaptureSpawnerComponent, 0x0250);
		}

		// class UFlickeringLightTickManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__GFXUtilities__FlickeringLightTickManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlickeringLightTickManager, UnknownData_9KNT, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlickeringLightTickManager, 0x0040);
		}

		// class UAB_Menu_Ace_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Ace__AB_Menu_Ace_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Ace_C, 0x194C);
		}

		// class UVisual : public UObject
		TEST_METHOD(Class__UMG__Visual)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisual, 0x0030);
		}

		// class UWidget : public UVisual
		TEST_METHOD(Class__UMG__Widget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, slot, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, bIsEnabledDelegate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_V340, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_NFNR, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipText, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipTextDelegate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_G3A8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_QK53, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidget, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, ToolTipWidgetDelegate, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_CDON, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, VisibilityDelegate, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_XFGC, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderTransformPivot, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_GIYR, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, AccessibleWidgetData, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Cursor, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Clipping, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, visibility, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, RenderOpacity, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, Navigation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, FlowDirectionPreference, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, UnknownData_2J6N, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidget, NativeBindings, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidget, 0x0128);
		}

		// class UUserWidget : public UWidget
		TEST_METHOD(Class__UMG__UserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_5YM2, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacity, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ColorAndOpacityDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_6B0K, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_P9DE, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ForegroundColorDelegate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_HRYJ, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, Padding, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_094M, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, ActiveSequencePlayers, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, StoppedSequencePlayers, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, NamedSlotBindings, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, WidgetTree, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, priority, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_ETFH, 0x01E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, TickFrequency, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_OSSU, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, InputComponent, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, AnimationCallbacks, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserWidget, UnknownData_L3RO, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserWidget, 0x0260);
		}

		// class Uimage : public UWidget
		TEST_METHOD(Class__UMG__image)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, brush, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, BrushDelegate, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, UnknownData_ETJK, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, ColorAndOpacity, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, ColorAndOpacityDelegate, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, UnknownData_VXWM, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, bFlipForRightToLeftFlowDirection, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, UnknownData_421S, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, OnMouseButtonDownEvent, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, UnknownData_FOYM, 0x01F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uimage, UnknownData_5T67, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uimage, 0x0248);
		}

		// class UTextLayoutWidget : public UWidget
		TEST_METHOD(Class__UMG__TextLayoutWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, ShapedTextOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Justification, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrappingPolicy, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, UnknownData_RT3N, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, WrapTextAt, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, Margin, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextLayoutWidget, LineHeightPercentage, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextLayoutWidget, 0x0148);
		}

		// class UTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__TextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, text, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, TextDelegate, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_AJRF, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_RI7E, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacity, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ColorAndOpacityDelegate, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_0K3U, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_K5W0, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, Font, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, StrikeBrush, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowOffset, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacity, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, ShadowColorAndOpacityDelegate, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_6F0S, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, MinDesiredWidth, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bWrapWithInvalidationPanel, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bAutoWrapText, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, bSimpleTextMode, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBlock, UnknownData_C9IM, 0x02D3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBlock, 0x02E8);
		}

		// class UPanelWidget : public UWidget
		TEST_METHOD(Class__UMG__PanelWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, Slots, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelWidget, UnknownData_AY0V, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelWidget, 0x0140);
		}

		// class UPanelSlot : public UVisual
		TEST_METHOD(Class__UMG__PanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, Parent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPanelSlot, content, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPanelSlot, 0x0040);
		}

		// class UContentWidget : public UPanelWidget
		TEST_METHOD(Class__UMG__ContentWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContentWidget, 0x0140);
		}

		// class URichTextBlock : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__RichTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, text, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, TextStyleSet, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DecoratorClasses, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, bOverrideDefaultStyle, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_4X15, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, DefaultTextStyleOverride, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, MinDesiredWidth, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_UDCA, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, InstanceDecorators, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlock, UnknownData_7FAL, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlock, 0x06C8);
		}

		// class URichTextBlockDecorator : public UObject
		TEST_METHOD(Class__UMG__RichTextBlockDecorator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockDecorator, 0x0030);
		}

		// class UAsyncTaskDownloadImage : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__UMG__AsyncTaskDownloadImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTaskDownloadImage, OnFail, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTaskDownloadImage, 0x0058);
		}

		// class UBackgroundBlur : public UContentWidget
		TEST_METHOD(Class__UMG__BackgroundBlur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, Padding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, HorizontalAlignment, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, VerticalAlignment, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bApplyAlphaToBlur, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_TCEB, 0x0153);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurStrength, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, bOverrideAutoRadiusCalculation, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_UH4P, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, BlurRadius, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, LowQualityFallbackBrush, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlur, UnknownData_VKVP, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlur, 0x0200);
		}

		// class UBackgroundBlurSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BackgroundBlurSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBackgroundBlurSlot, UnknownData_HN23, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBackgroundBlurSlot, 0x0068);
		}

		// class UPropertyBinding : public UObject
		TEST_METHOD(Class__UMG__PropertyBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourceObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, SourcePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, DestinationProperty, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyBinding, UnknownData_TIKA, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyBinding, 0x0070);
		}

		// class UBoolBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BoolBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolBinding, 0x0070);
		}

		// class UBorder : public UContentWidget
		TEST_METHOD(Class__UMG__Border)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, HorizontalAlignment, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, VerticalAlignment, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_JRC2, 0x0143);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacity, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, ContentColorAndOpacityDelegate, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_TZLN, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Padding, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, Background, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BackgroundDelegate, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_JXOW, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColor, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, BrushColorDelegate, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_TV9Y, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, DesiredSizeScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, bFlipForRightToLeftFlowDirection, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_W63X, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonDownEvent, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_MOK4, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseButtonUpEvent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_EINE, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseMoveEvent, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_OO5M, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, OnMouseDoubleClickEvent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_AVG3, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorder, UnknownData_B55R, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorder, 0x02B0);
		}

		// class UBorderSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__BorderSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBorderSlot, UnknownData_CPUP, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBorderSlot, 0x0068);
		}

		// class UBrushBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__BrushBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBinding, UnknownData_KLLC, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBinding, 0x0078);
		}

		// class Ubutton : public UContentWidget
		TEST_METHOD(Class__UMG__button)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, Style, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, WidgetStyle, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, ColorAndOpacity, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, BackgroundColor, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, ClickMethod, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, TouchMethod, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, PressMethod, 0x0412);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, IsFocusable, 0x0413);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, UnknownData_PE3X, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, OnClicked, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, OnPressed, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, OnReleased, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, OnHovered, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, OnUnhovered, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, OnLongPress, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, LongPressTimerHandle, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubutton, UnknownData_PXX4, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ubutton, 0x0498);
		}

		// class UButtonSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ButtonSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonSlot, UnknownData_HIXK, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonSlot, 0x0068);
		}

		// class UCanvasPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__CanvasPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanel, UnknownData_MG84, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanel, 0x0150);
		}

		// class UCanvasPanelSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__CanvasPanelSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, LayoutData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, bAutoSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_1BW8, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, ZOrder, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasPanelSlot, UnknownData_PGW0, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasPanelSlot, 0x0078);
		}

		// class UCheckbox : public UContentWidget
		TEST_METHOD(Class__UMG__Checkbox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, CheckedState, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UnknownData_ALU7, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, CheckedStateDelegate, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UnknownData_44T3, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, Style, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UncheckedImage, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UncheckedHoveredImage, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UncheckedPressedImage, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, CheckedImage, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, CheckedHoveredImage, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, CheckedPressedImage, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UndeterminedImage, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UndeterminedHoveredImage, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UndeterminedPressedImage, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, HorizontalAlignment, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UnknownData_7LZK, 0x0789);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, Padding, 0x078C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UnknownData_VI7M, 0x079C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, BorderBackgroundColor, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, IsFocusable, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UnknownData_7LW3, 0x07C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, OnCheckStateChanged, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckbox, UnknownData_IVF6, 0x07E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckbox, 0x07F0);
		}

		// class UCheckedStateBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__CheckedStateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckedStateBinding, UnknownData_Q0XI, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckedStateBinding, 0x0078);
		}

		// class UCircularThrobber : public UWidget
		TEST_METHOD(Class__UMG__CircularThrobber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, NumberOfPieces, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, Period, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, radius, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_YNWJ, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, PieceImage, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, image, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, bEnableRadius, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCircularThrobber, UnknownData_RCWD, 0x01D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCircularThrobber, 0x01E8);
		}

		// class UColorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__ColorBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UColorBinding, UnknownData_C0AM, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UColorBinding, 0x0078);
		}

		// class UComboBox : public UWidget
		TEST_METHOD(Class__UMG__ComboBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, Items, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, OnGenerateWidgetEvent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_Y4NA, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, bIsFocusable, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBox, UnknownData_RYIS, 0x014D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBox, 0x0160);
		}

		// class UComboBoxString : public UWidget
		TEST_METHOD(Class__UMG__ComboBoxString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, DefaultOptions, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, SelectedOption, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, WidgetStyle, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ItemStyle, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ContentPadding, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, MaxListHeight, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, HasDownArrow, 0x0DD4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, EnableGamepadNavigationMode, 0x0DD5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_EKAE, 0x0DD6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, Font, 0x0DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, ForegroundColor, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, bIsFocusable, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_U3SP, 0x0E59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnGenerateWidgetEvent, 0x0E5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_GYRD, 0x0E59);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnSelectionChanged, 0x0E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, OnOpening, 0x0E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UComboBoxString, UnknownData_HLET, 0x0E90);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComboBoxString, 0x0EE0);
		}

		// class UDragDropOperation : public UObject
		TEST_METHOD(Class__UMG__DragDropOperation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, tag, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Payload, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, DefaultDragVisual, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Pivot, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_YP2S, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, Offset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, UnknownData_W3JH, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDrop, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragCancelled, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragDropOperation, OnDragged, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragDropOperation, 0x0090);
		}

		// class UTutorialMysteryNoteViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__TutorialMysteryNoteViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialMysteryNoteViewInterface, 0x0030);
		}

		// class UTutorialObjectivesViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__TutorialObjectivesViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialObjectivesViewInterface, 0x0030);
		}

		// class UDynamicEntryBoxBase : public UWidget
		TEST_METHOD(Class__UMG__DynamicEntryBoxBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryBoxType, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_KJEN, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySpacing, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_IFO2, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, SpacingPattern, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntrySizeRule, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryHorizontalAlignment, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryVerticalAlignment, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_REEO, 0x0152);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, MaxElementSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, UnknownData_MSZY, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBoxBase, EntryWidgetPool, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBoxBase, 0x01E8);
		}

		// class UTutorialPopupViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__TutorialPopupViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialPopupViewInterface, 0x0030);
		}

		// class UAddonViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__AddonViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddonViewInterface, 0x0030);
		}

		// class UCoreBaseViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__CoreBaseViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreBaseViewInterface, 0x0030);
		}

		// class UEndGameCollapseBarViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__EndGameCollapseBarViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndGameCollapseBarViewInterface, 0x0030);
		}

		// class UDynamicEntryBox : public UDynamicEntryBoxBase
		TEST_METHOD(Class__UMG__DynamicEntryBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicEntryBox, EntryWidgetClass, 0x01E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicEntryBox, 0x01F0);
		}

		// class UEquippedItemViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__EquippedItemViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEquippedItemViewInterface, 0x0030);
		}

		// class UEditableText : public UWidget
		TEST_METHOD(Class__UMG__EditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_UG7O, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_J6FN, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintText, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, HintTextDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_Z3LB, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_5Z6K, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Style, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageSelected, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, BackgroundImageComposing, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, CaretImage, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Font, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ColorAndOpacity, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsReadOnly, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, isPassword, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_A33K, 0x0462);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, MinimumDesiredWidth, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, IsCaretMovedWhenGainFocus, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextWhenFocused, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, RevertTextOnEscape, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ClearKeyboardFocusOnCommit, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, SelectAllTextOnCommit, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, AllowContextMenu, 0x046D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, KeyboardType, 0x046E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardOptions, 0x046F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardTrigger, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, VirtualKeyboardDismissAction, 0x0471);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, Justification, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, ShapedTextOptions, 0x0473);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_YFHA, 0x0476);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextChanged, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, OnTextCommitted, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableText, UnknownData_JYWC, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableText, 0x04A8);
		}

		// class UEquippedPowerViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__EquippedPowerViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEquippedPowerViewInterface, 0x0030);
		}

		// class UExampleViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__ExampleViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExampleViewInterface, 0x0030);
		}

		// class UExternalEffectsViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__ExternalEffectsViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExternalEffectsViewInterface, 0x0030);
		}

		// class UHookCountViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__HookCountViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookCountViewInterface, 0x0030);
		}

		// class UHudAlertViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__HudAlertViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudAlertViewInterface, 0x0030);
		}

		// class UHudObjectiveViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__HudObjectiveViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHudObjectiveViewInterface, 0x0030);
		}

		// class UInteractionProgressViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__InteractionProgressViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionProgressViewInterface, 0x0030);
		}

		// class UEditableTextBox : public UWidget
		TEST_METHOD(Class__UMG__EditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, text, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, TextDelegate, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_G0HG, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_0E8P, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Style, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintText, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, HintTextDelegate, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_657O, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_E1XO, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Font, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ForegroundColor, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, BackgroundColor, 0x0A58);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ReadOnlyForegroundColor, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsReadOnly, 0x0A78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, isPassword, 0x0A79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_3N61, 0x0A7A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, MinimumDesiredWidth, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Padding, 0x0A80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, IsCaretMovedWhenGainFocus, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextWhenFocused, 0x0A91);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, RevertTextOnEscape, 0x0A92);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ClearKeyboardFocusOnCommit, 0x0A93);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, SelectAllTextOnCommit, 0x0A94);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, AllowContextMenu, 0x0A95);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, KeyboardType, 0x0A96);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardOptions, 0x0A97);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardTrigger, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, VirtualKeyboardDismissAction, 0x0A99);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, Justification, 0x0A9A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, ShapedTextOptions, 0x0A9B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_I3OS, 0x0A9E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextChanged, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, OnTextCommitted, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEditableTextBox, UnknownData_ZO9P, 0x0AC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEditableTextBox, 0x0AD0);
		}

		// class UInteractionPromptsContainerViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__InteractionPromptsContainerViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionPromptsContainerViewInterface, 0x0030);
		}

		// class UItemBundleViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__ItemBundleViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemBundleViewInterface, 0x0030);
		}

		// class UexpandableArea : public UWidget
		TEST_METHOD(Class__UMG__expandableArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, UnknownData_96EU, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, Style, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, BorderBrush, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, BorderColor, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, bIsExpanded, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, UnknownData_KDG9, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, MaxHeight, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, HeaderPadding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, AreaPadding, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, OnExpansionChanged, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, HeaderContent, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, BodyContent, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UexpandableArea, UnknownData_WFL1, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UexpandableArea, 0x0370);
		}

		// class UFloatBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__FloatBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatBinding, 0x0070);
		}

		// class UGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__GridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, ColumnFill, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, RowFill, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridPanel, UnknownData_1ROE, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridPanel, 0x0170);
		}

		// class UGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__GridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_5PG7, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Row, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, RowSpan, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Column, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, ColumnSpan, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Layer, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, Nudge, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGridSlot, UnknownData_R2H6, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGridSlot, 0x0078);
		}

		// class UHorizontalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__HorizontalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBox, UnknownData_244N, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBox, 0x0150);
		}

		// class UHorizontalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__HorizontalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_MYRL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Padding, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, Size, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, HorizontalAlignment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, VerticalAlignment, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHorizontalBoxSlot, UnknownData_ETP9, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHorizontalBoxSlot, 0x0068);
		}

		// class UInputKeySelector : public UWidget
		TEST_METHOD(Class__UMG__InputKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, TextStyle, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, SelectedKey, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Font, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, Margin, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, ColorAndOpacity, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, KeySelectionText, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, NoKeySpecifiedText, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowModifierKeys, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, bAllowGamepadKeys, 0x0729);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_0NDB, 0x072A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, EscapeKeys, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnKeySelected, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, OnIsSelectingKeyChanged, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeySelector, UnknownData_UX2Y, 0x0760);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeySelector, 0x0770);
		}

		// class UItemInteractionViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__ItemInteractionViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemInteractionViewInterface, 0x0030);
		}

		// class UItemViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__ItemViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemViewInterface, 0x0030);
		}

		// class ULeaningArrowsViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__LeaningArrowsViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaningArrowsViewInterface, 0x0030);
		}

		// class UMatchResultViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__MatchResultViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatchResultViewInterface, 0x0030);
		}

		// class UOfferingInteractionViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__OfferingInteractionViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingInteractionViewInterface, 0x0030);
		}

		// class UInt32Binding : public UPropertyBinding
		TEST_METHOD(Class__UMG__Int32Binding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt32Binding, 0x0070);
		}

		// class UOfferingViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__OfferingViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOfferingViewInterface, 0x0030);
		}

		// class UInvalidationBox : public UContentWidget
		TEST_METHOD(Class__UMG__InvalidationBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, bCanCache, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, CacheRelativeTransforms, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInvalidationBox, UnknownData_BFA1, 0x0142);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInvalidationBox, 0x0158);
		}

		// class UPerksContainerViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PerksContainerViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerksContainerViewInterface, 0x0030);
		}

		// class UUserListEntry : public UInterface
		TEST_METHOD(Class__UMG__UserListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntry, 0x0030);
		}

		// class UPerkViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PerkViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPerkViewInterface, 0x0030);
		}

		// class UUserListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserListEntryLibrary, 0x0030);
		}

		// class UPingStatusViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PingStatusViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPingStatusViewInterface, 0x0030);
		}

		// class UUserObjectListEntry : public UUserListEntry
		TEST_METHOD(Class__UMG__UserObjectListEntry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntry, 0x0030);
		}

		// class UPlayerStatusesContainerViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PlayerStatusesContainerViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStatusesContainerViewInterface, 0x0030);
		}

		// class UUserObjectListEntryLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__UserObjectListEntryLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserObjectListEntryLibrary, 0x0030);
		}

		// class UListViewBase : public UWidget
		TEST_METHOD(Class__UMG__ListViewBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, WheelScrollMultiplier, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableScrollAnimation, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, bEnableFixedLineOffset, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_PJXK, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, FixedLineScrollOffset, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_IC7H, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryGenerated, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, BP_OnEntryReleased, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, EntryWidgetPool, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListViewBase, UnknownData_ZI2P, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewBase, 0x0238);
		}

		// class UPlayerStatusViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PlayerStatusViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStatusViewInterface, 0x0030);
		}

		// class UPowerBundleViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PowerBundleViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerBundleViewInterface, 0x0030);
		}

		// class UPowerViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__PowerViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerViewInterface, 0x0030);
		}

		// class UScreenIndicatorViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__ScreenIndicatorViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreenIndicatorViewInterface, 0x0030);
		}

		// class USkillCheckViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__SkillCheckViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCheckViewInterface, 0x0030);
		}

		// class UListView : public UListViewBase
		TEST_METHOD(Class__UMG__ListView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_I3X7, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, Orientation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, SelectionMode, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ConsumeMouseWheel, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bClearSelectionOnClick, 0x02FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bIsFocusable, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_Y9WI, 0x02FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, EntrySpacing, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, bReturnFocusToSelection, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_BOOS, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, ListItems, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, UnknownData_LFM3, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnEntryInitialized, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemClicked, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemDoubleClicked, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemIsHoveredChanged, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemSelectionChanged, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UListView, BP_OnItemScrolledIntoView, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListView, 0x0388);
		}

		// class USpectateBarViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__SpectateBarViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectateBarViewInterface, 0x0030);
		}

		// class UStartSequenceViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__StartSequenceViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartSequenceViewInterface, 0x0030);
		}

		// class UStatusEffectViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__StatusEffectViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectViewInterface, 0x0030);
		}

		// class UTemplateViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__TemplateViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateViewInterface, 0x0030);
		}

		// class UTestBuildFlagViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__TestBuildFlagViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestBuildFlagViewInterface, 0x0030);
		}

		// class UTutorialHighlightViewInterface : public UInterface
		TEST_METHOD(Class__DBDUIViewInterfaces__TutorialHighlightViewInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTutorialHighlightViewInterface, 0x0030);
		}

		// class UListViewDesignerPreviewItem : public UObject
		TEST_METHOD(Class__UMG__ListViewDesignerPreviewItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UListViewDesignerPreviewItem, 0x0030);
		}

		// class UMenuAnchor : public UContentWidget
		TEST_METHOD(Class__UMG__MenuAnchor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, MenuClass, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnGetMenuContentEvent, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_9T4W, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, Placement, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, bFitInWindow, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, ShouldDeferPaintingAfterWindowContent, 0x015E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UseApplicationMenuStack, 0x015F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, OnMenuOpenChanged, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMenuAnchor, UnknownData_4D7D, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMenuAnchor, 0x0180);
		}

		// class UMouseCursorBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__MouseCursorBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMouseCursorBinding, 0x0070);
		}

		// class UMovieScene2DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieScene2DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, TransformMask, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_BHCB, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Translation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, rotation, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, scale, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, Shear, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene2DTransformSection, UnknownData_VIKS, 0x0550);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformSection, 0x0558);
		}

		// class UMovieScene2DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieScene2DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene2DTransformTrack, 0x0098);
		}

		// class UMovieSceneMarginSection : public UMovieSceneSection
		TEST_METHOD(Class__UMG__MovieSceneMarginSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, TopCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, LeftCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, RightCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMarginSection, BottomCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginSection, 0x0368);
		}

		// class UMovieSceneMarginTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__UMG__MovieSceneMarginTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMarginTrack, 0x0098);
		}

		// class UMovieSceneWidgetMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__UMG__MovieSceneWidgetMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, BrushPropertyNamePath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, TrackName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneWidgetMaterialTrack, UnknownData_VY20, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneWidgetMaterialTrack, 0x0090);
		}

		// class UMultiLineEditableText : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, text, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintText, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, HintTextDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_A4AB, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_S1ZB, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, WidgetStyle, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, bIsReadOnly, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_4E8D, 0x0419);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, Font, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, SelectAllTextWhenFocused, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearTextSelectionOnFocusLoss, 0x0479);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, RevertTextOnEscape, 0x047A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, ClearKeyboardFocusOnCommit, 0x047B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, AllowContextMenu, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardOptions, 0x047D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, VirtualKeyboardDismissAction, 0x047E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_0DHG, 0x047F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextChanged, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, OnTextCommitted, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableText, UnknownData_NFUF, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableText, 0x04B0);
		}

		// class UMultiLineEditableTextBox : public UTextLayoutWidget
		TEST_METHOD(Class__UMG__MultiLineEditableTextBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, text, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintText, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, HintTextDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_6U6Q, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_6UW3, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, WidgetStyle, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, TextStyle, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, bIsReadOnly, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, AllowContextMenu, 0x0C79);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardOptions, 0x0C7A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, VirtualKeyboardDismissAction, 0x0C7B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_D67W, 0x0C7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Style, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, Font, 0x0C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ForegroundColor, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, BackgroundColor, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, ReadOnlyForegroundColor, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextChanged, 0x0D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, OnTextCommitted, 0x0D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiLineEditableTextBox, UnknownData_MV3F, 0x0D30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiLineEditableTextBox, 0x0D40);
		}

		// class UNamedSlot : public UContentWidget
		TEST_METHOD(Class__UMG__NamedSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNamedSlot, UnknownData_S2DC, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlot, 0x0150);
		}

		// class UNamedSlotInterface : public UInterface
		TEST_METHOD(Class__UMG__NamedSlotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNamedSlotInterface, 0x0030);
		}

		// class UNativeWidgetHost : public UWidget
		TEST_METHOD(Class__UMG__NativeWidgetHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNativeWidgetHost, UnknownData_N6I6, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNativeWidgetHost, 0x0138);
		}

		// class UOverlay : public UPanelWidget
		TEST_METHOD(Class__UMG__Overlay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlay, UnknownData_I9LR, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlay, 0x0150);
		}

		// class UOverlaySlot : public UPanelSlot
		TEST_METHOD(Class__UMG__OverlaySlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_AEEP, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, Padding, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOverlaySlot, UnknownData_DW4Q, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlaySlot, 0x0060);
		}

		// class UProgressBar : public UWidget
		TEST_METHOD(Class__UMG__ProgressBar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Style, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BackgroundImage, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillImage, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, MarqueeImage, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, Percent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BarFillType, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, bIsMarquee, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_7TF8, 0x0306);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, BorderPadding, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, PercentDelegate, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_F678, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacity, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, FillColorAndOpacityDelegate, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_HM0E, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProgressBar, UnknownData_KCXU, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProgressBar, 0x0358);
		}

		// class URetainerBox : public UContentWidget
		TEST_METHOD(Class__UMG__RetainerBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnInvalidation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, RenderOnPhase, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_CS29, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, Phase, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, PhaseCount, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_M9I7, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, EffectMaterial, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, TextureParameter, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URetainerBox, UnknownData_JE39, 0x0164);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URetainerBox, 0x0178);
		}

		// class URichTextBlockImageDecorator : public URichTextBlockDecorator
		TEST_METHOD(Class__UMG__RichTextBlockImageDecorator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URichTextBlockImageDecorator, ImageSet, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URichTextBlockImageDecorator, 0x0038);
		}

		// class USafeZone : public UContentWidget
		TEST_METHOD(Class__UMG__SafeZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadLeft, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadRight, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadTop, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, PadBottom, 0x0143);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZone, UnknownData_1RT0, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZone, 0x0158);
		}

		// class USafeZoneSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SafeZoneSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, bIsTitleSafe, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_1MH9, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, SafeAreaScale, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, HAlign, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, VAlign, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, UnknownData_XF7R, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::USafeZoneSlot, Padding, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USafeZoneSlot, 0x0068);
		}

		// class UScaleBox : public UContentWidget
		TEST_METHOD(Class__UMG__ScaleBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, Stretch, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, StretchDirection, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_9JZ5, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UserSpecifiedScale, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, IgnoreInheritedScale, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBox, UnknownData_IHH7, 0x0149);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBox, 0x0160);
		}

		// class UScaleBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScaleBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScaleBoxSlot, UnknownData_QUNV, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScaleBoxSlot, 0x0068);
		}

		// class UScrollbar : public UWidget
		TEST_METHOD(Class__UMG__Scrollbar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, WidgetStyle, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, Style, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, bAlwaysShowScrollbar, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, bAlwaysShowScrollbarTrack, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, Orientation, 0x064A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, UnknownData_44E7, 0x064B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, Thickness, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, Padding, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollbar, UnknownData_KHZA, 0x0664);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollbar, 0x0678);
		}

		// class UScrollBox : public UPanelWidget
		TEST_METHOD(Class__UMG__ScrollBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetStyle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WidgetBarStyle, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Style, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, BarStyle, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, Orientation, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollBarVisibility, 0x08B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ConsumeMouseWheel, 0x08B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_D7HZ, 0x08B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarThickness, 0x08B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollbarPadding, 0x08BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbar, 0x08CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AlwaysShowScrollbarTrack, 0x08CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, AllowOverscroll, 0x08CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAnimateWheelScrolling, 0x08CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationDestination, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_3AN8, 0x08D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, NavigationScrollPadding, 0x08D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, ScrollWhenFocusChanges, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, bAllowRightClickDragScrolling, 0x08D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_5X66, 0x08DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, WheelScrollMultiplier, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, OnUserScrolled, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBox, UnknownData_UKAC, 0x08F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBox, 0x0908);
		}

		// class UScrollBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__ScrollBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScrollBoxSlot, UnknownData_KMYB, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScrollBoxSlot, 0x0060);
		}

		// class USizeBox : public UContentWidget
		TEST_METHOD(Class__UMG__SizeBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_75SG, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, WidthOverride, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, HeightOverride, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredWidth, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinDesiredHeight, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredWidth, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxDesiredHeight, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MinAspectRatio, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, MaxAspectRatio, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBox, UnknownData_E756, 0x0171);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBox, 0x0178);
		}

		// class USizeBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__SizeBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_IJZQ, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, HorizontalAlignment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, VerticalAlignment, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USizeBoxSlot, UnknownData_Q6OB, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USizeBoxSlot, 0x0068);
		}

		// class USlateBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__SlateBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBlueprintLibrary, 0x0030);
		}

		// class USlateVectorArtData : public UObject
		TEST_METHOD(Class__UMG__SlateVectorArtData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, MATERIAL, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateVectorArtData, ExtentMax, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateVectorArtData, 0x0068);
		}

		// class USlateAccessibleWidgetData : public UObject
		TEST_METHOD(Class__UMG__SlateAccessibleWidgetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, bCanChildrenBeAccessible, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleBehavior, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryBehavior, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_BACI, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleTextDelegate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_4JB3, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_XQAU, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryText, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, AccessibleSummaryTextDelegate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_4BX7, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateAccessibleWidgetData, UnknownData_TXDH, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateAccessibleWidgetData, 0x0098);
		}

		// class USlider : public UWidget
		TEST_METHOD(Class__UMG__Slider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Value, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, ValueDelegate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_OAU5, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MinValue, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MaxValue, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, WidgetStyle, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Orientation, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_FQZW, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderBarColor, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, SliderHandleColor, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IndentHandle, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, Locked, 0x04DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, MouseUsesStep, 0x04DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, RequiresControllerLock, 0x04DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, StepSize, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, IsFocusable, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_8QQY, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureBegin, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnMouseCaptureEnd, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureBegin, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnControllerCaptureEnd, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, OnValueChanged, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlider, UnknownData_68AK, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlider, 0x0548);
		}

		// class USpacer : public UWidget
		TEST_METHOD(Class__UMG__Spacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, Size, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpacer, UnknownData_KPHY, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpacer, 0x0140);
		}

		// class USpinBox : public UWidget
		TEST_METHOD(Class__UMG__SpinBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Value, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ValueDelegate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_3ZTX, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, WidgetStyle, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Style, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinFractionalDigits, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxFractionalDigits, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, bAlwaysUsesDeltaSnap, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_6LBG, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, delta, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SliderExponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_V163, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Font, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, Justification, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_2GWB, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinDesiredWidth, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ClearKeyboardFocusOnCommit, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, SelectAllTextOnCommit, 0x04D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_PHDN, 0x04D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, ForegroundColor, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueChanged, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnValueCommitted, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnBeginSliderMovement, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, OnEndSliderMovement, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_TP4H, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinValue, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxValue, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MinSliderValue, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, MaxSliderValue, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpinBox, UnknownData_ALY5, 0x0554);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpinBox, 0x0568);
		}

		// class UTextBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__TextBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBinding, UnknownData_AMXD, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBinding, 0x0078);
		}

		// class UThrobber : public UWidget
		TEST_METHOD(Class__UMG__Throbber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, NumberOfPieces, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateHorizontally, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateVertically, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, bAnimateOpacity, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_PPNZ, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, PieceImage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, image, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrobber, UnknownData_R683, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrobber, 0x01D8);
		}

		// class UTileView : public UListView
		TEST_METHOD(Class__UMG__TileView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryHeight, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, EntryWidth, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, TileAlignment, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, bWrapHorizontalNavigation, 0x0391);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileView, UnknownData_OSAG, 0x0392);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileView, 0x03A8);
		}

		// class UTreeView : public UListView
		TEST_METHOD(Class__UMG__TreeView)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_TX6Z, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnGetItemChildren, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_L95C, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_M4EO, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, BP_OnItemExpansionChanged, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTreeView, UnknownData_4LXV, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTreeView, 0x03E8);
		}

		// class UUMGSequencePlayer : public UObject
		TEST_METHOD(Class__UMG__UMGSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_XGGI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, animation, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSequencePlayer, UnknownData_E3NN, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSequencePlayer, 0x07B8);
		}

		// class UUniformGridPanel : public UPanelWidget
		TEST_METHOD(Class__UMG__UniformGridPanel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, SlotPadding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotWidth, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, MinDesiredSlotHeight, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridPanel, UnknownData_27US, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridPanel, 0x0168);
		}

		// class UUniformGridSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__UniformGridSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, HorizontalAlignment, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, VerticalAlignment, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_IJ8A, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Row, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, Column, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformGridSlot, UnknownData_OYXN, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformGridSlot, 0x0058);
		}

		// class UVerticalBox : public UPanelWidget
		TEST_METHOD(Class__UMG__VerticalBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBox, UnknownData_P8TB, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBox, 0x0150);
		}

		// class UVerticalBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__VerticalBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Size, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, Padding, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_RU0U, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, HorizontalAlignment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, VerticalAlignment, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVerticalBoxSlot, UnknownData_K94F, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVerticalBoxSlot, 0x0068);
		}

		// class UViewport : public UContentWidget
		TEST_METHOD(Class__UMG__Viewport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, BackgroundColor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UViewport, UnknownData_JNGI, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewport, 0x0168);
		}

		// class UVisibilityBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__VisibilityBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibilityBinding, 0x0070);
		}

		// class UWidgetAnimation : public UMovieSceneSequence
		TEST_METHOD(Class__UMG__WidgetAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, AnimationBindings, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, bLegacyFinishOnStop, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, UnknownData_M1C0, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimation, DisplayLabel, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimation, 0x0380);
		}

		// class UBP_Audio_KLR_01_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_01__BP_Audio_KLR_01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_01_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_01_C, 0x00F8);
		}

		// class UWidgetAnimationDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__UMG__WidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationDelegateBinding, WidgetAnimationDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationDelegateBinding, 0x0040);
		}

		// class UWidgetAnimationPlayCallbackProxy : public UObject
		TEST_METHOD(Class__UMG__WidgetAnimationPlayCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, Finished, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetAnimationPlayCallbackProxy, UnknownData_JS6O, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetAnimationPlayCallbackProxy, 0x0050);
		}

		// class UWidgetBinding : public UPropertyBinding
		TEST_METHOD(Class__UMG__WidgetBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBinding, 0x0070);
		}

		// class UWidgetBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__UMG__WidgetBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, WidgetTree, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, UnknownData_PM4C, 0x0341);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Bindings, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Animations, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, NamedSlots, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, TemplateAsset, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetBlueprintGeneratedClass, Template, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintGeneratedClass, 0x03B0);
		}

		// class UWidgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetBlueprintLibrary, 0x0030);
		}

		// class UWidgetComponent : public UMeshComponent
		TEST_METHOD(Class__UMG__WidgetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_7CYQ, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WidgetClass, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, DrawSize, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bManuallyRedraw, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bRedrawRequested, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_6E9G, 0x0492);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RedrawTime, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_YJFY, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CurrentDrawSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bDrawAtDesiredSize, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_WE1U, 0x04A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Pivot, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bReceiveHardwareInput, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bWindowFocusable, 0x04B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, WindowVisibility, 0x04B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bApplyGammaCorrection, 0x04B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OwnerPlayer, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BackgroundColor, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TintColorAndOpacity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpacityFromTexture, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BlendMode, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bIsTwoSided, 0x04E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TickWhenOffscreen, 0x04E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_C3C3, 0x04E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, Widget, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_DOI5, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, BodySetup, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, TranslucentMaterial_OneSided, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, OpaqueMaterial_OneSided, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaskedMaterial_OneSided, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, RenderTarget, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, MaterialInstance, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bAddedToScreen, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, bEditTimeUsable, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_DZYW, 0x055A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, SharedLayerName, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, LayerZOrder, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, GeometryMode, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_V7E7, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, CylinderArcAngle, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetComponent, UnknownData_CFWF, 0x0574);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetComponent, 0x05A0);
		}

		// class UWidgetInteractionComponent : public USceneComponent
		TEST_METHOD(Class__UMG__WidgetInteractionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, OnHoveredWidgetChanged, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ZYYG, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, VirtualUserIndex, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, PointerIndex, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, TraceChannel, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_AXR9, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionDistance, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, InteractionSource, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bEnableHitTesting, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bShowDebug, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ISWH, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, DebugColor, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_ASXQ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, CustomHitResult, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LocalHitLocation, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastLocalHitLocation, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, HoveredWidgetComponent, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, LastHitResult, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetInteractable, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetFocusable, 0x0409);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, bIsHoveredWidgetHitTestVisible, 0x040A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetInteractionComponent, UnknownData_PCKA, 0x040B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetInteractionComponent, 0x0410);
		}

		// class UWidgetLayoutLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__UMG__WidgetLayoutLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetLayoutLibrary, 0x0030);
		}

		// class UWidgetNavigation : public UObject
		TEST_METHOD(Class__UMG__WidgetNavigation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Up, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Down, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, left, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Right, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, Next, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetNavigation, previous, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetNavigation, 0x0138);
		}

		// class UWidgetSwitcher : public UPanelWidget
		TEST_METHOD(Class__UMG__WidgetSwitcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, ActiveWidgetIndex, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcher, UnknownData_D99G, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcher, 0x0158);
		}

		// class UWidgetSwitcherSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WidgetSwitcherSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_PMU0, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, Padding, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetSwitcherSlot, UnknownData_FIVQ, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetSwitcherSlot, 0x0060);
		}

		// class UWidgetTree : public UObject
		TEST_METHOD(Class__UMG__WidgetTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWidgetTree, RootWidget, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWidgetTree, 0x0038);
		}

		// class UWindowTitleBarArea : public UContentWidget
		TEST_METHOD(Class__UMG__WindowTitleBarArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bWindowButtonsEnabled, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, bDoubleClickTogglesFullscreen, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarArea, UnknownData_SV4O, 0x0142);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarArea, 0x0160);
		}

		// class UWindowTitleBarAreaSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WindowTitleBarAreaSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, HorizontalAlignment, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, VerticalAlignment, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindowTitleBarAreaSlot, UnknownData_E63P, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindowTitleBarAreaSlot, 0x0068);
		}

		// class UWrapBox : public UPanelWidget
		TEST_METHOD(Class__UMG__WrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, InnerSlotPadding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, WrapWidth, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, bExplicitWrapWidth, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBox, UnknownData_7JXV, 0x014D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBox, 0x0160);
		}

		// class UWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__UMG__WrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, bFillEmptySpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_DQWD, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, FillSpanWhenLessThan, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWrapBoxSlot, UnknownData_JYR9, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWrapBoxSlot, 0x0068);
		}

		// class UNiagaraMergeable : public UObject
		TEST_METHOD(Class__NiagaraCore__NiagaraMergeable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMergeable, 0x0030);
		}

		// class UNiagaraDataInterfaceBase : public UNiagaraMergeable
		TEST_METHOD(Class__NiagaraCore__NiagaraDataInterfaceBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceBase, 0x0030);
		}

		// class UBP_Audio_FunctionLibrary_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_FunctionLibrary__BP_Audio_FunctionLibrary_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_FunctionLibrary_C, 0x0030);
		}

		// class UActivateTormentModeInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheExecutioner__ActivateTormentModeInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateTormentModeInteraction, UnknownData_OUHY, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateTormentModeInteraction, UnknownData_560P, 0x0630);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivateTormentModeInteraction, 0x0640);
		}

		// class UAddon_TormentMode_17 : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheExecutioner__Addon_TormentMode_17)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_17, _blindnessDuration, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_17, UnknownData_O1LH, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TormentMode_17, 0x0228);
		}

		// class UAddon_TormentMode_18 : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheExecutioner__Addon_TormentMode_18)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_18, _obliviousDuration, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_18, UnknownData_6MVU, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TormentMode_18, 0x0228);
		}

		// class UAddon_TormentMode_19 : public UItemAddon
		TEST_METHOD(Class__TheExecutioner__Addon_TormentMode_19)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TormentMode_19, 0x0218);
		}

		// class UAddon_TormentMode_20 : public UItemAddon
		TEST_METHOD(Class__TheExecutioner__Addon_TormentMode_20)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_20, _lingerDuration, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_20, UnknownData_T8FI, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TormentMode_20, 0x0220);
		}

		// class UAddon_TormentMode_21 : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheExecutioner__Addon_TormentMode_21)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_21, _revealSurvivorsInAgony, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_21, _revealSurvivorsNotInAgony, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_21, UnknownData_3RG7, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_21, _range, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_21, _revealDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TormentMode_21, UnknownData_BBS2, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TormentMode_21, 0x0230);
		}

		// class UAgonyComponent : public UactorComponent
		TEST_METHOD(Class__TheExecutioner__AgonyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, UnknownData_JD4C, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _isInAgony, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _isAgonyMoriable, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _agonyNumberOfHookForMiniMori, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, UnknownData_HVIX, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _inAttackTrailDamageCooldown, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, UnknownData_D1TH, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _attackTrailDamageCooldownTime, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, UnknownData_Z75G, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _showAgonyFXEvents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, _hideAgonyFXEvents, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonyComponent, UnknownData_XKI1, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgonyComponent, 0x0228);
		}

		// class UAgonyMoriInteraction : public UKillInteractionDefinition
		TEST_METHOD(Class__TheExecutioner__AgonyMoriInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgonyMoriInteraction, 0x0640);
		}

		// class UAgonySubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheExecutioner__AgonySubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, _isInAgony, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, _isInTormentTrail, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, _isInTormentTrailEffect, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, _isInDeathBed, 0x04F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, _isDeadInDeathBed, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, _isInStruggleInDeathBed, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAgonySubAnimInstance, UnknownData_Z21T, 0x04F6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAgonySubAnimInstance, 0x0500);
		}

		// class UBaseTormentTrailPoint : public Uactor
		TEST_METHOD(Class__TheExecutioner__BaseTormentTrailPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, UnknownData_GV5S, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, _collisionComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, _collisionRadius, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, UnknownData_2UWL, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, _tormentTrailAliveTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, UnknownData_QLFY, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, _splineMeshComponent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, _trailMeshList, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, _indexInTrail, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTormentTrailPoint, UnknownData_KZ4C, 0x02E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseTormentTrailPoint, 0x02E8);
		}

		// class UBloodPact : public Uperk
		TEST_METHOD(Class__TheExecutioner__BloodPact)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, UnknownData_F4NE, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _dyingToInjured, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _fullHealthStateOnly, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, UnknownData_T6F8, 0x0362);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _hasteEffectRange, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _hasteEffectMovementSpeedIncrease, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, UnknownData_4CMP, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _ownerStatusEffect, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _obsessionStatusEffect, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _ownerHasteStatusEffect, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _otherPlayerHasteStatusEffect, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, _otherPlayer, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodPact, UnknownData_3YQR, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodPact, 0x03C0);
		}

		// class UBloodPactEffect : public UstatusEffect
		TEST_METHOD(Class__TheExecutioner__BloodPactEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodPactEffect, 0x02A8);
		}

		// class UdeathBedAnticampComponent : public UactorComponent
		TEST_METHOD(Class__TheExecutioner__deathBedAnticampComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeathBedAnticampComponent, UnknownData_QF9X, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeathBedAnticampComponent, _anticampZoneDistance, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeathBedAnticampComponent, _anticampZoneTimeToTrigger, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UdeathBedAnticampComponent, UnknownData_RUOM, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UdeathBedAnticampComponent, 0x0190);
		}

		// class UDeathBedInteractable : public Uinteractable
		TEST_METHOD(Class__TheExecutioner__DeathBedInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, UnknownData_804V, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _root, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _inDeathBedCamper, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _rescueChargeableComponent, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _deathBedSkeletalMesh, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _interactionZone, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _playerOverlapZone, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _montagePlayer, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, UnknownData_JMG0, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _deathBedCollision, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, UnknownData_WG6U, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _animationMontageSlave, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _montageToPlay, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, UnknownData_D2TT, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _rescuerSnapPosition, 0x037C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _deathBedAnticampComponent, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, UnknownData_1ISY, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _anticampDrainCooldownTime, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, UnknownData_CZ7J, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedInteractable, _perceptionStimuliComponent, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathBedInteractable, 0x0418);
		}

		// class UDeathBedOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
		TEST_METHOD(Class__TheExecutioner__DeathBedOutlineUpdateStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathBedOutlineUpdateStrategy, 0x0130);
		}

		// class UDeathBedRescueInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheExecutioner__DeathBedRescueInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedRescueInteraction, UnknownData_D144, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedRescueInteraction, _loudNoiseRange, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathBedRescueInteraction, UnknownData_DMW3, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathBedRescueInteraction, 0x0660);
		}

		// class UDeathbound : public Uperk
		TEST_METHOD(Class__TheExecutioner__Deathbound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _distanceFromRescuedSurvivorForOblivious, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _activationDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _rescueDistanceFromKillerToActivate, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, UnknownData_FSXD, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _revealLocationDuration, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _unhook, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _fromDyingState, 0x0365);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, UnknownData_9JAK, 0x0366);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _obliviousStatusEffects, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, UnknownData_X3IP, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, _survivorsToReveal, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeathbound, UnknownData_HPEF, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeathbound, 0x03A0);
		}

		// class UExecutionerTormentAttack : public UPounceAttack
		TEST_METHOD(Class__TheExecutioner__ExecutionerTormentAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecutionerTormentAttack, 0x02E0);
		}

		// class UExecutionerTormentAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheExecutioner__ExecutionerTormentAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecutionerTormentAttackSuccessSubstate, 0x00D8);
		}

		// class UExecutionerTormentAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__TheExecutioner__ExecutionerTormentAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecutionerTormentAttackMissSubstate, 0x00E0);
		}

		// class UExecutionerTormentAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__TheExecutioner__ExecutionerTormentAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExecutionerTormentAttackObstructSubstate, 0x00E8);
		}

		// class UForcedPenance : public Uperk
		TEST_METHOD(Class__TheExecutioner__ForcedPenance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForcedPenance, _perkActivationDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForcedPenance, _applyOblivious, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForcedPenance, _applyBroken, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForcedPenance, UnknownData_G0OI, 0x0356);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForcedPenance, 0x0358);
		}

		// class UMobileTormentTrailRenderer : public Uactor
		TEST_METHOD(Class__TheExecutioner__MobileTormentTrailRenderer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _pillarIsmComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _wireIsmComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _trailIsmComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _pillarOutlineIsmComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _wireOutlineIsmComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _instanceMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileTormentTrailRenderer, _trailMaterialInstanceDynamic, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileTormentTrailRenderer, 0x02B0);
		}

		// class URepressedAlliance : public Uperk
		TEST_METHOD(Class__TheExecutioner__RepressedAlliance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, _secondaryActionProperties, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, _repairTimesNeededToActivate, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, _generatorBlockDuration, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, _currentRepairInteractionWithAbility, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, UnknownData_YWVP, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, _blockedGenerator, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepressedAlliance, UnknownData_436W, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URepressedAlliance, 0x03B8);
		}

		// class USendToDeathBedInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheExecutioner__SendToDeathBedInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USendToDeathBedInteraction, UnknownData_OWZT, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendToDeathBedInteraction, _deathBed, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USendToDeathBedInteraction, UnknownData_OUQM, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USendToDeathBedInteraction, 0x0640);
		}

		// class USoulGuard : public Uperk
		TEST_METHOD(Class__TheExecutioner__SoulGuard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoulGuard, _recover, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoulGuard, UnknownData_AMAV, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoulGuard, _enduranceEffectDuration, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoulGuard, UnknownData_GR97, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoulGuard, 0x0360);
		}

		// class UBP_Audio_KLR_09_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_09__BP_Audio_KLR_09_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_09_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_09_C, 0x00F8);
		}

		// class UTormentTrailDetectorComponent : public UactorComponent
		TEST_METHOD(Class__TheExecutioner__TormentTrailDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, UnknownData_U64O, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, _overlappedTrailPoints, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, _isInTormentTrail, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, _isInTormentTrailEffect, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, UnknownData_MRJR, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, _inTormentTrailLastingEffectTime, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailDetectorComponent, UnknownData_B5V0, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentTrailDetectorComponent, 0x01B8);
		}

		// class USurvivorTormentTrailDetector : public UTormentTrailDetectorComponent
		TEST_METHOD(Class__TheExecutioner__SurvivorTormentTrailDetector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorTormentTrailDetector, UnknownData_CRUG, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorTormentTrailDetector, 0x01D0);
		}

		// class UTheExecutionerAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheExecutioner__TheExecutionerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheExecutionerAnimInstance, UnknownData_D7KK, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheExecutionerAnimInstance, _tormentModeVerticalInput, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheExecutionerAnimInstance, _tormentModeHorizontalInput, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheExecutionerAnimInstance, UnknownData_86LK, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheExecutionerAnimInstance, 0x0630);
		}

		// class UTheExecutionerCheatComponent : public UactorComponent
		TEST_METHOD(Class__TheExecutioner__TheExecutionerCheatComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheExecutionerCheatComponent, 0x00B8);
		}

		// class UTrailControllerBase : public Uactor
		TEST_METHOD(Class__TheExecutioner__TrailControllerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, _tormentTrailPointCollection, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, _distanceBetweenTormentTrailPoint, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, _splineComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, UnknownData_FBZ6, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, _poolableComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, _trailType, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailControllerBase, UnknownData_2F03, 0x0299);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrailControllerBase, 0x02A0);
		}

		// class UTormentAttackTrailController : public UTrailControllerBase
		TEST_METHOD(Class__TheExecutioner__TormentAttackTrailController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _tormentTrailAttackPointClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _tormentTrailAttackSign, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _trailSpawnDelay, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _timeIntervalBetweenPointsSpawn, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _attackTrailLenght, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _consideredAsSlopeAngle, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _pointsTransform, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _slopeDetectionOverGroundVector, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _groundDetectionEndVector, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _slopeCompensationVector, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, UnknownData_Z2CD, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _spawnedAttackPointList, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _trailSpawnStarted, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, UnknownData_P2J1, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _soundDistanceOnTrail, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailController, _mobileTormentTrailRenderer, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentAttackTrailController, 0x0420);
		}

		// class UTormentAttackTrailPoint : public UBaseTormentTrailPoint
		TEST_METHOD(Class__TheExecutioner__TormentAttackTrailPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailPoint, UnknownData_2HDN, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentAttackTrailPoint, _attackPointDelayToEnableCollision, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentAttackTrailPoint, 0x0340);
		}

		// class UTormentMode : public Ucollectable
		TEST_METHOD(Class__TheExecutioner__TormentMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, UnknownData_24WK, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _activateTormentModeCharge, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeCharge, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, UnknownData_GY1S, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeChargePresentation, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _powerToggleComponent, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentTrailSpawnerComponent, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentTrailPointCollectionComponent, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _restrictedTormentTrailPointCollectionComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentTrailControllerPool, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentAttackTrailControllerPool, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _restrictedTormentTrailControllerPool, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentTrailPointPool, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _restrictedTormentTrailPointPool, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _activateTormentModeSecondsToCharge, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeMaxCharge, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeChargeRate, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeDischargeRate, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModePauseChargeRate, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeAttackConsumePower, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeMinimumPercentToActivate, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeMouseYawScale, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeYawAdjustTime, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeGamePadYawScale, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeYawInputLimit, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeNotMovingYawScaleMultiplier, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeNotMovingYawAdjustTime, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeWalkSpeed, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _normalWalkSpeed, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeForcedPitch, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _agonyComponentClass, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, UnknownData_H7WH, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _killerTormentTrailDetectorClass, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _survivorTormentTrailDetectorClass, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeCooldownInteraction, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _tormentModeChargeSpeedCurve, 0x08D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentMode, _mobileTormentTrailRendererClass, 0x08D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentMode, 0x08E0);
		}

		// class UTormentModeCooldownInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheExecutioner__TormentModeCooldownInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentModeCooldownInteraction, _tormentModeCooldownTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentModeCooldownInteraction, _tormentModeCancelWalkSpeed, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentModeCooldownInteraction, _normalWalkSpeed, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentModeCooldownInteraction, UnknownData_3RLJ, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentModeCooldownInteraction, 0x0580);
		}

		// class UTormentor : public UInterface
		TEST_METHOD(Class__TheExecutioner__Tormentor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentor, 0x0030);
		}

		// class UTormentTrailController : public UTrailControllerBase
		TEST_METHOD(Class__TheExecutioner__TormentTrailController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailController, _trailPointList, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailController, _mobileTormentTrailRenderer, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentTrailController, 0x03C8);
		}

		// class UTormentTrailPoint : public UBaseTormentTrailPoint
		TEST_METHOD(Class__TheExecutioner__TormentTrailPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPoint, UnknownData_H2N1, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPoint, _poolableComponent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPoint, UnknownData_3800, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPoint, _splineMeshOverlapDistance, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPoint, UnknownData_PG7C, 0x0314);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentTrailPoint, 0x0318);
		}

		// class UTormentTrailPointCollectionComponent : public UactorComponent
		TEST_METHOD(Class__TheExecutioner__TormentTrailPointCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPointCollectionComponent, UnknownData_Y5LH, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPointCollectionComponent, _maxNumberOfTrailPointInGame, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailPointCollectionComponent, UnknownData_NVIP, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentTrailPointCollectionComponent, 0x0100);
		}

		// class UTormentTrailSpawnerComponent : public UactorComponent
		TEST_METHOD(Class__TheExecutioner__TormentTrailSpawnerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _currentTrailController, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _restrictionRangeToHooks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _restrictionRangeToGenerators, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _restrictionRangeToExitSwitch, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _maxSlopeAngleForTrail, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _minSlopeAngleForTrail, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _restrictionRangeToHatch, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _restrictionMaxVerticalDistance, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _tormentTrailPointCollectionComponent, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _restrictedTormentTrailPointCollectionComponent, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _tormentTrailControllerPool, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _tormentRestrictedTrailControllerPool, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, UnknownData_RKD7, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _actorsInRange, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _slopeDetectionOverGroundVector, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _slopeDetectionEndVector, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, _forwardMultiplierSlopeDetection, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTormentTrailSpawnerComponent, UnknownData_7AID, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTormentTrailSpawnerComponent, 0x0248);
		}

		// class UTrailEffectLastingTimeBaseAddon : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheExecutioner__TrailEffectLastingTimeBaseAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailEffectLastingTimeBaseAddon, _trailEffectLastingTimeModifierValue, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailEffectLastingTimeBaseAddon, UnknownData_0DN5, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrailEffectLastingTimeBaseAddon, 0x0228);
		}

		// class UTrailofTorment : public Uperk
		TEST_METHOD(Class__TheExecutioner__TrailofTorment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, UnknownData_4LJA, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, _coolDownDuration, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, _highlightPriority, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, _isPerkActivated, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, UnknownData_FBAJ, 0x0371);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, _highlightedGenerator, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailofTorment, _statusEffect, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrailofTorment, 0x0388);
		}

		// class UTrailPointOutlineUpdateStrategy : public USourceBasedOutlineUpdateStrategy
		TEST_METHOD(Class__TheExecutioner__TrailPointOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrailPointOutlineUpdateStrategy, _tormentTrailRevealDistance, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrailPointOutlineUpdateStrategy, 0x0158);
		}

		// class UBP_Audio_KLR_13_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_14__BP_Audio_KLR_13_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_13_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_13_C, AudioStatusStartMenuEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_13_C, 0x0100);
		}

		// class UAnimationDataSourceRegistry : public UObject
		TEST_METHOD(Class__AnimationCore__AnimationDataSourceRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationDataSourceRegistry, DataSources, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationDataSourceRegistry, 0x0080);
		}

		// class ULiveLinkFrameTranslator : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameTranslator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameTranslator, 0x0030);
		}

		// class ULiveLinkRole : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkRole, 0x0030);
		}

		// class ULiveLinkBasicRole : public ULiveLinkRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkBasicRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkBasicRole, 0x0030);
		}

		// class ULiveLinkTransformRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkTransformRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkTransformRole, 0x0030);
		}

		// class ULiveLinkLightRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkLightRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkLightRole, 0x0030);
		}

		// class ULiveLinkSubjectSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSubjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, PreProcessors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, InterpolationProcessor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, Translators, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSubjectSettings, role, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSubjectSettings, 0x0060);
		}

		// class ULiveLinkVirtualSubject : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkVirtualSubject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_S57D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, role, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, Subjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, FrameTranslators, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkVirtualSubject, UnknownData_NXKD, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkVirtualSubject, 0x00E8);
		}

		// class ULiveLinkSourceFactory : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceFactory, 0x0030);
		}

		// class ULiveLinkAnimationRole : public ULiveLinkBasicRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkAnimationRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkAnimationRole, 0x0030);
		}

		// class ULiveLinkCameraRole : public ULiveLinkTransformRole
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCameraRole)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCameraRole, 0x0030);
		}

		// class ULiveLinkController : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkController)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkController, 0x0030);
		}

		// class ULiveLinkSourceSettings : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, mode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, UnknownData_UP0P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, BufferSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, ConnectionString, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkSourceSettings, Factory, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkSourceSettings, 0x00A0);
		}

		// class ULiveLinkCurveRemapSettings : public ULiveLinkSourceSettings
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkCurveRemapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULiveLinkCurveRemapSettings, CurveConversionSettings, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkCurveRemapSettings, 0x00F0);
		}

		// class ULiveLinkFrameInterpolationProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFrameInterpolationProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFrameInterpolationProcessor, 0x0030);
		}

		// class ULiveLinkFramePreProcessor : public UObject
		TEST_METHOD(Class__LiveLinkInterface__LiveLinkFramePreProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkFramePreProcessor, 0x0030);
		}

		// class UWraithBurnable : public UPlayerLightBurnable
		TEST_METHOD(Class__TheWraith__WraithBurnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithBurnable, _flashlightEvasionScoreCooldown, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithBurnable, UnknownData_5GB5, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWraithBurnable, 0x0190);
		}

		// class UWraithAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheWraith__WraithAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, UnknownData_DX8D, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _cloakingInSelector, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _cloakingSelector, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _cloakingOutSelector, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _uncloakingInSelector, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _uncloakingSelector, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _uncloakingOutSelector, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, _cloakingPlayRate, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWraithAnimInstance, UnknownData_G270, 0x0644);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWraithAnimInstance, 0x0650);
		}

		// class UMoviePlayerSettings : public UObject
		TEST_METHOD(Class__MoviePlayer__MoviePlayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bWaitForMoviesToComplete, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, bMoviesAreSkippable, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, UnknownData_4M7C, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoviePlayerSettings, StartupMovies, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoviePlayerSettings, 0x0048);
		}

		// class UClothingSimulationFactoryNv : public UClothingSimulationFactory
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationFactoryNv)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationFactoryNv, 0x0030);
		}

		// class UClothingSimulationInteractorNv : public UClothingSimulationInteractor
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothingSimulationInteractorNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingSimulationInteractorNv, UnknownData_YX3W, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingSimulationInteractorNv, 0x0048);
		}

		// class UClothPhysicalMeshDataNv_Legacy : public UClothPhysicalMeshDataBase_Legacy
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothPhysicalMeshDataNv_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, MaxDistances, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopDistances, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, BackstopRadiuses, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothPhysicalMeshDataNv_Legacy, AnimDriveMultipliers, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothPhysicalMeshDataNv_Legacy, 0x0128);
		}

		// class UClothConfigNv : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeNv__ClothConfigNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ClothingWindMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_WLMN, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionRadius, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionStiffness, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SelfCollisionCullScale, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Damping, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, Friction, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindDragCoefficient, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindLiftCoefficient, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearDrag, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularDrag, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, LinearInertiaScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AngularInertiaScale, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CentrifugalInertiaScale, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, SolverFrequency, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, StiffnessFrequency, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityScale, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, GravityOverride, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, bUseGravityOverride, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_UPWT, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherStiffness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, TetherLimit, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, CollisionThickness, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveSpringStiffness, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, AnimDriveDamperStiffness, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, WindMethod, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, UnknownData_KHBE, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, VerticalConstraintConfig, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, HorizontalConstraintConfig, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, BendConstraintConfig, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothConfigNv, ShearConstraintConfig, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigNv, 0x0148);
		}

		// class UMagicLeapAudioFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAudio__MagicLeapAudioFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapAudioFunctionLibrary, 0x0030);
		}

		// class UAB_Menu_S23_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_S23__AB_Menu_S23_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_S23_C, 0x194C);
		}

		// class UAndroidPermissionCallbackProxy : public UObject
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, OnPermissionsGrantedDynamicDelegate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAndroidPermissionCallbackProxy, UnknownData_IA1Q, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionCallbackProxy, 0x0050);
		}

		// class UAndroidPermissionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AndroidPermission__AndroidPermissionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndroidPermissionFunctionLibrary, 0x0030);
		}

		// class UGameplayTaskOwnerInterface : public UInterface
		TEST_METHOD(Class__GameplayTasks__GameplayTaskOwnerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskOwnerInterface, 0x0030);
		}

		// class UGameplayTaskResource : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTaskResource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, ManualResourceID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, AutoResourceID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_YR0X, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTaskResource, UnknownData_C049, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTaskResource, 0x0040);
		}

		// class UGameplayTasksComponent : public UactorComponent
		TEST_METHOD(Class__GameplayTasks__GameplayTasksComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_6FYO, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_J4D4, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, SimulatedTasks, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TaskPriorityQueue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, UnknownData_MOC9, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, TickingTasks, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, KnownTasks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTasksComponent, OnClaimedResourcesChange, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTasksComponent, 0x0128);
		}

		// class UGameplayTask : public UObject
		TEST_METHOD(Class__GameplayTasks__GameplayTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_1VV7, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_UDZW, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ResourceOverlapPolicy, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, UnknownData_FFNG, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask, ChildTask, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask, 0x0070);
		}

		// class UGameplayTask_ClaimResource : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_ClaimResource)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_ClaimResource, 0x0070);
		}

		// class UGameplayTask_SpawnActor : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_SpawnActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, Success, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, DidNotSpawn, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, UnknownData_PXY8, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_SpawnActor, ClassToSpawn, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_SpawnActor, 0x00B0);
		}

		// class UGameplayTask_TimeLimitedExecution : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_TimeLimitedExecution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnFinished, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, OnTimeExpired, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_TimeLimitedExecution, UnknownData_1HPA, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_TimeLimitedExecution, 0x00A0);
		}

		// class UGameplayTask_WaitDelay : public UGameplayTask
		TEST_METHOD(Class__GameplayTasks__GameplayTask_WaitDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, OnFinish, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTask_WaitDelay, UnknownData_M70A, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTask_WaitDelay, 0x0088);
		}

		// class UMagicLeapEyeTrackerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapEyeTracker__MagicLeapEyeTrackerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapEyeTrackerFunctionLibrary, 0x0030);
		}

		// class UMagicLeapLightingTrackingComponent : public UactorComponent
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightingTrackingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseGlobalAmbience, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UseColorTemp, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapLightingTrackingComponent, UnknownData_JOX1, 0x00BA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightingTrackingComponent, 0x00C8);
		}

		// class UMagicLeapLightEstimationFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapLightEstimation__MagicLeapLightEstimationFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapLightEstimationFunctionLibrary, 0x0030);
		}

		// class UBaseVFX : public Uactor
		TEST_METHOD(Class__VFXUtilities__BaseVFX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVFX, _shouldLoadOnServer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseVFX, UnknownData_RGOJ, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseVFX, 0x0238);
		}

		// class UDBDDecalComponent : public UDecalComponent
		TEST_METHOD(Class__VFXUtilities__DBDDecalComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDDecalComponent, 0x0250);
		}

		// class UDecalCollection : public UObject
		TEST_METHOD(Class__VFXUtilities__DecalCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalCollection, _decalComponents, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalCollection, UnknownData_O06V, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalCollection, 0x0048);
		}

		// class UDecalSpawner : public UObject
		TEST_METHOD(Class__VFXUtilities__DecalSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalSpawner, _decalCollection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalSpawner, _spawnerStrategy, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalSpawner, UnknownData_JMIL, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalSpawner, 0x0048);
		}

		// class UVFXUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__VFXUtilities__VFXUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVFXUtilities, 0x0030);
		}

		// class UUdpMessagingSettings : public UObject
		TEST_METHOD(Class__UdpMessaging__UdpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTransport, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bAutoRepair, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, bStopServiceWhenAppDeactivates, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_JP1H, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnicastEndpoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastEndpoint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MessageFormat, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, MulticastTimeToLive, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_J5E9, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, StaticEndpoints, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, EnableTunnel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, UnknownData_TTP5, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelUnicastEndpoint, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, TunnelMulticastEndpoint, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUdpMessagingSettings, RemoteTunnelEndpoints, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUdpMessagingSettings, 0x00A8);
		}

		// class UDecalSpawnerCollection : public UObject
		TEST_METHOD(Class__VFXUtilities__DecalSpawnerCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalSpawnerCollection, _decalSpawners, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalSpawnerCollection, 0x0080);
		}

		// class USpawnerStrategy : public UObject
		TEST_METHOD(Class__VFXUtilities__SpawnerStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnerStrategy, 0x0030);
		}

		// class ULimitAccumulationSpawnerStrategy : public USpawnerStrategy
		TEST_METHOD(Class__VFXUtilities__LimitAccumulationSpawnerStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULimitAccumulationSpawnerStrategy, UnknownData_T14U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULimitAccumulationSpawnerStrategy, 0x0040);
		}

		// class UNoAccumulationSpawnerStrategy : public USpawnerStrategy
		TEST_METHOD(Class__VFXUtilities__NoAccumulationSpawnerStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoAccumulationSpawnerStrategy, 0x0030);
		}

		// class UObject
		TEST_METHOD(Class__CoreUObject__Object)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, VfTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, InternalIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Class, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, pad_N6N6O4ZF4I, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObject, Outer, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObject, 0x0030);
		}

		// class UField : public UObject
		TEST_METHOD(Class__CoreUObject__Field)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UField, Next, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UField, 0x0038);
		}

		// class UProperty : public UField
		TEST_METHOD(Class__CoreUObject__Property)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProperty, UnknownData_OAL9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProperty, 0x0080);
		}

		// class UNumericProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NumericProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNumericProperty, 0x0080);
		}

		// class UDoubleProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__DoubleProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoubleProperty, 0x0080);
		}

		// class UFloatProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__FloatProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatProperty, 0x0080);
		}

		// class UIntProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__IntProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntProperty, 0x0080);
		}

		// class UInt8Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int8Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt8Property, 0x0080);
		}

		// class UInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt16Property, 0x0080);
		}

		// class UInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__Int64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInt64Property, 0x0080);
		}

		// class UInterfaceProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__InterfaceProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterfaceProperty, UnknownData_8BDB, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterfaceProperty, 0x0088);
		}

		// class UObjectPropertyBase : public UProperty
		TEST_METHOD(Class__CoreUObject__ObjectPropertyBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectPropertyBase, UnknownData_9UMT, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectPropertyBase, 0x0088);
		}

		// class ULazyObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__LazyObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULazyObjectProperty, 0x0088);
		}

		// class UMapProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MapProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapProperty, UnknownData_O6CB, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapProperty, 0x00A8);
		}

		// class UMulticastDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__MulticastDelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMulticastDelegateProperty, UnknownData_UUJR, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegateProperty, 0x0088);
		}

		// class UMulticastInlineDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegateProperty, 0x0088);
		}

		// class UMulticastSparseDelegateProperty : public UMulticastDelegateProperty
		TEST_METHOD(Class__CoreUObject__MulticastSparseDelegateProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastSparseDelegateProperty, 0x0088);
		}

		// class UNameProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__NameProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNameProperty, 0x0080);
		}

		// class USetProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__SetProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetProperty, UnknownData_NXA9, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetProperty, 0x00A0);
		}

		// class USoftObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__SoftObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftObjectProperty, 0x0088);
		}

		// class USoftClassProperty : public USoftObjectProperty
		TEST_METHOD(Class__CoreUObject__SoftClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoftClassProperty, UnknownData_F7CM, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoftClassProperty, 0x0090);
		}

		// class UStrProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StrProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStrProperty, 0x0080);
		}

		// class UStructProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__StructProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStructProperty, UnknownData_JHZL, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStructProperty, 0x0088);
		}

		// class UUInt16Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt16Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt16Property, 0x0080);
		}

		// class UUInt32Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt32Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt32Property, 0x0080);
		}

		// class UUInt64Property : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__UInt64Property)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUInt64Property, 0x0080);
		}

		// class UWeakObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__WeakObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeakObjectProperty, 0x0088);
		}

		// class UTextProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__TextProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextProperty, 0x0080);
		}

		// class UPropertyWrapper : public UObject
		TEST_METHOD(Class__CoreUObject__PropertyWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPropertyWrapper, UnknownData_BO2R, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPropertyWrapper, 0x0038);
		}

		// class UMulticastDelegatePropertyWrapper : public UPropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastDelegatePropertyWrapper, 0x0038);
		}

		// class UMulticastInlineDelegatePropertyWrapper : public UMulticastDelegatePropertyWrapper
		TEST_METHOD(Class__CoreUObject__MulticastInlineDelegatePropertyWrapper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMulticastInlineDelegatePropertyWrapper, 0x0038);
		}

		// class UInterface : public UObject
		TEST_METHOD(Class__CoreUObject__Interface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface, 0x0030);
		}

		// class UGCObjectReferencer : public UObject
		TEST_METHOD(Class__CoreUObject__GCObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGCObjectReferencer, UnknownData_UMNB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGCObjectReferencer, 0x0078);
		}

		// class UTextBuffer : public UObject
		TEST_METHOD(Class__CoreUObject__TextBuffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextBuffer, UnknownData_3VSR, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextBuffer, 0x0058);
		}

		// class UStruct : public UField, public FStructBaseChain
		TEST_METHOD(Class__CoreUObject__Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, SuperField, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Children, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ChildProperties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertySize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, MinAlignment, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, Script, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PropertyLink, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, RefLink, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, DestructorLink, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, PostConstructLink, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, ScriptAndPropertyObjectReferences, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnresolvedScriptProperties, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStruct, UnversionedSchema, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStruct, 0x00B8);
		}

		// class UScriptStruct : public UStruct
		TEST_METHOD(Class__CoreUObject__ScriptStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptStruct, UnknownData_CIJW, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptStruct, 0x00C8);
		}

		// class UPackage : public UObject
		TEST_METHOD(Class__CoreUObject__Package)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackage, UnknownData_0216, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackage, 0x00A8);
		}

		// class UFunction : public UStruct
		TEST_METHOD(Class__CoreUObject__Function)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FunctionFlags, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, NumParms, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ParmsSize, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_S7JFGX225P, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, ReturnValueOffset, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCId, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, RPCResponseId, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_1D1N42XY7Z, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, FirstPropertyToInit, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphFunction, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, EventGraphCallOffset, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, pad_4VO188RLUO, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFunction, Func, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFunction, 0x00E8);
		}

		// class UDelegateFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__DelegateFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateFunction, 0x00E8);
		}

		// class USparseDelegateFunction : public UDelegateFunction
		TEST_METHOD(Class__CoreUObject__SparseDelegateFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USparseDelegateFunction, UnknownData_1QVP, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USparseDelegateFunction, 0x0100);
		}

		// class UClass : public UStruct
		TEST_METHOD(Class__CoreUObject__Class)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClass, UnknownData_P9C8, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClass, 0x0240);
		}

		// class UDynamicClass : public UClass
		TEST_METHOD(Class__CoreUObject__DynamicClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicClass, UnknownData_6XF0, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicClass, 0x02C0);
		}

		// class UPackageMap : public UObject
		TEST_METHOD(Class__CoreUObject__PackageMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMap, UnknownData_XN22, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMap, 0x00E8);
		}

		// class UEnum : public UField
		TEST_METHOD(Class__CoreUObject__Enum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnum, UnknownData_O7OH, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnum, 0x0068);
		}

		// class ULinkerPlaceholderClass : public UClass
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderClass, UnknownData_R8D0, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderClass, 0x03F8);
		}

		// class ULinkerPlaceholderExportObject : public UObject
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderExportObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderExportObject, UnknownData_8WLS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderExportObject, 0x00F8);
		}

		// class ULinkerPlaceholderFunction : public UFunction
		TEST_METHOD(Class__CoreUObject__LinkerPlaceholderFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkerPlaceholderFunction, UnknownData_VMA0, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkerPlaceholderFunction, 0x02A0);
		}

		// class UMetadata : public UObject
		TEST_METHOD(Class__CoreUObject__Metadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMetadata, UnknownData_CY7J, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMetadata, 0x00D0);
		}

		// class UObjectRedirector : public UObject
		TEST_METHOD(Class__CoreUObject__ObjectRedirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectRedirector, UnknownData_2E6T, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectRedirector, 0x0038);
		}

		// class UEnumProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__EnumProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnumProperty, UnknownData_YWZX, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnumProperty, 0x0090);
		}

		// class UArrayProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__ArrayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrayProperty, UnknownData_BLHI, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayProperty, 0x0088);
		}

		// class UBoolProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__BoolProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoolProperty, UnknownData_IIHL, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolProperty, 0x0088);
		}

		// class UByteProperty : public UNumericProperty
		TEST_METHOD(Class__CoreUObject__ByteProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UByteProperty, UnknownData_TDNF, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UByteProperty, 0x0088);
		}

		// class UObjectProperty : public UObjectPropertyBase
		TEST_METHOD(Class__CoreUObject__ObjectProperty)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectProperty, 0x0088);
		}

		// class UClassProperty : public UObjectProperty
		TEST_METHOD(Class__CoreUObject__ClassProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClassProperty, UnknownData_7GOE, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClassProperty, 0x0090);
		}

		// class UDelegateProperty : public UProperty
		TEST_METHOD(Class__CoreUObject__DelegateProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelegateProperty, UnknownData_FD3T, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelegateProperty, 0x0088);
		}

		// class UWheeledVehicleMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_04LO, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_P0QE, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_6N85, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Mass, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_CDSA, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WheelSetups, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragCoefficient, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisWidth, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ChassisHeight, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DragArea, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, EstimatedMaxEngineSpeed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxEngineRPM, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, DebugDragMagnitude, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, InertiaTensorScale, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoad, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MinNormalizedTireLoadFiltered, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoad, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, MaxNormalizedTireLoadFiltered, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThresholdLongitudinalSpeed, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, LowForwardSpeedSubStepCount, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HighForwardSpeedSubStepCount, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_D523, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, Wheels, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_YCZO, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceRadius, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOAvoidanceHeight, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceConsiderationRadius, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOSteeringStep, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RVOThrottleStep, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceUID, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceGroup, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToAvoid, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, GroupsToIgnore, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, AvoidanceWeight, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, PendingLaunchVelocity, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ReplicatedState, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_YVWQ, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawSteeringInput, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawThrottleInput, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, RawBrakeInput, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInput, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInput, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInput, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, IdleBrakeInput, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, StopThreshold, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, WrongDirectionThreshold, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, ThrottleInputRate, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, BrakeInputRate, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, HandbrakeInputRate, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, SteeringInputRate, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, UnknownData_2VWQ, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent, OverrideController, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent, 0x02A0);
		}

		// class USimpleWheeledVehicleMovementComponent : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__SimpleWheeledVehicleMovementComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleWheeledVehicleMovementComponent, 0x02A0);
		}

		// class UTireConfig : public UDataAsset
		TEST_METHOD(Class__PhysXVehicles__TireConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, FrictionScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_CPY8, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, TireFrictionScales, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireConfig, UnknownData_45PH, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireConfig, 0x0058);
		}

		// class UVehicleAnimInstance : public UanimInstance
		TEST_METHOD(Class__PhysXVehicles__VehicleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_QNOA, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, WheeledVehicleMovementComponent, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleAnimInstance, UnknownData_H7QP, 0x0978);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleAnimInstance, 0x0980);
		}

		// class UVehicleWheel : public UObject
		TEST_METHOD(Class__PhysXVehicles__VehicleWheel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, CollisionMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bDontCreateShape, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAutoAdjustCollisionSize, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_DHZC, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Offset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeRadius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, ShapeWidth, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Mass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DampingRate, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SteerAngle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, bAffectedByHandbrake, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_EN0N, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, TireConfig, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffMaxLoad, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LatStiffValue, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, LongStiffValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionForceOffset, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxRaise, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionMaxDrop, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionNaturalFrequency, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SuspensionDampingRatio, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, SweepType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_DCKT, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxBrakeTorque, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, MaxHandBrakeTorque, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_7YYI, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, VehicleSim, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, WheelIndex, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongSlip, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatSlip, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugNormalizedTireLoad, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_RIDK, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugWheelTorque, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLongForce, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, DebugLatForce, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, location, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, OldLocation, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, Velocity, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVehicleWheel, UnknownData_7LO4, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVehicleWheel, 0x00F8);
		}

		// class UWheeledVehicle : public Upawn
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicle, mesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicle, VehicleMovement, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicle, 0x02A0);
		}

		// class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
		TEST_METHOD(Class__PhysXVehicles__WheeledVehicleMovementComponent4W)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, EngineSetup, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, DifferentialSetup, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, AckermannAccuracy, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, TransmissionSetup, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWheeledVehicleMovementComponent4W, SteeringCurve, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWheeledVehicleMovementComponent4W, 0x0418);
		}

		// class ULocationServices : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServices)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServices, 0x0030);
		}

		// class ULocationServicesImpl : public UObject
		TEST_METHOD(Class__LocationServicesBPLibrary__LocationServicesImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocationServicesImpl, OnLocationChanged, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocationServicesImpl, 0x0040);
		}

		// class USuperModeDeactivation : public UinteractionDefinition
		TEST_METHOD(Class__TheK23__SuperModeDeactivation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USuperModeDeactivation, _deactivationDuration, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USuperModeDeactivation, UnknownData_Q02C, 0x0528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USuperModeDeactivation, 0x0530);
		}

		// class USleepingAnimInstance : public UanimInstance
		TEST_METHOD(Class__AnimationUtilities__SleepingAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USleepingAnimInstance, UnknownData_XOY8, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USleepingAnimInstance, 0x0280);
		}

		// class UANimCollection : public UDataAsset
		TEST_METHOD(Class__AnimationUtilities__ANimCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UANimCollection, _taggedAnimSequences, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UANimCollection, _taggedAnimBlendspaces, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UANimCollection, _taggedAnimSelectors, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UANimCollection, _parent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UANimCollection, _children, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UANimCollection, 0x0140);
		}

		// class UAnimEffectBlackBoard : public UObject
		TEST_METHOD(Class__AnimationUtilities__AnimEffectBlackBoard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimEffectBlackBoard, UnknownData_R6CE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimEffectBlackBoard, 0x0080);
		}

		// class UAnimEffectHandler : public UObject
		TEST_METHOD(Class__AnimationUtilities__AnimEffectHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimEffectHandler, 0x0030);
		}

		// class UAnimInstanceExt : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimationUtilities__AnimInstanceExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstanceExt, 0x0030);
		}

		// class UDetectionFanComponent : public USceneComponent
		TEST_METHOD(Class__AnimationUtilities__DetectionFanComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, _angleRange, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, _originWorldOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, _numberOfSpots, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, _defaultRingRadius, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, _collisionChannel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, UnknownData_KSEI, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, _meshComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDetectionFanComponent, UnknownData_OSN3, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDetectionFanComponent, 0x0270);
		}

		// class UThrowingKnives : public Ucollectable
		TEST_METHOD(Class__TheK23__ThrowingKnives)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, UnknownData_04NW, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _flurryScoreComponent, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _superModeComponent, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _superModeChargePresentationComponent, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _superModeChargeComponent, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _knivesProvider, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _knivesLauncher, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _lacerationComponentClass, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _reloadInteractionClass, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _closetReloadActor, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, _minimumTimeBetweenBroadcast, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnives, UnknownData_OOO9, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowingKnives, 0x04D0);
		}

		// class UArmDetectionFanComponent : public UDetectionFanComponent
		TEST_METHOD(Class__AnimationUtilities__ArmDetectionFanComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmDetectionFanComponent, _shoulderBone, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmDetectionFanComponent, _elbowBone, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmDetectionFanComponent, _handBone, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmDetectionFanComponent, _indexBone, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmDetectionFanComponent, _hipBone, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmDetectionFanComponent, UnknownData_64E7, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArmDetectionFanComponent, 0x0300);
		}

		// class UBoneSocketLocalVelocityEvaluator : public UactorComponent
		TEST_METHOD(Class__AnimationUtilities__BoneSocketLocalVelocityEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneSocketLocalVelocityEvaluator, _meshComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneSocketLocalVelocityEvaluator, _trackedBoneSocketNames, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneSocketLocalVelocityEvaluator, UnknownData_MAGY, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneSocketLocalVelocityEvaluator, 0x00E0);
		}

		// class UThrowingKnivesHitSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheK23__ThrowingKnivesHitSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _hitByKnifeTrigger, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _knifeHitCausedKOTrigger, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _knifeHitCausedDamageTrigger, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _useAlternateHitReactionState, 0x04F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _knifeHitAngle, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _knifeHitStateHitAngle, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, _alternateKnifeHitStateHitAngle, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowingKnivesHitSubAnimInstance, UnknownData_MDLN, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowingKnivesHitSubAnimInstance, 0x0510);
		}

		// class UBaseGroundDetectorComponent : public UactorComponent
		TEST_METHOD(Class__AnimationUtilities__BaseGroundDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, UnknownData_QS9K, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, _startTransformName, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, _walkableCollisionChannel, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, _traceComplex, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, UnknownData_B5S5, 0x0176);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, _extraTraceDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, UnknownData_JPZX, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, _skinnedMeshComponent, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, UnknownData_PCJM, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, _startSlopeTransformName, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseGroundDetectorComponent, UnknownData_FYG9, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseGroundDetectorComponent, 0x01D0);
		}

		// class UTricksterAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheK23__TricksterAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, UnknownData_IVSO, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _isThrowInputPressed, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _isThrowingWithLeftArm, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _isThrowingWithRightArm, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, UnknownData_HL4S, 0x05B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _throwPlayRate, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _baseThrowDuration, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _consecutiveKnivesThrownStacks, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _timeSinceLastKnifeLaunched, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _currentAmmoCount, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _isInSuperMode, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _isInActivation, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, UnknownData_K9HE, 0x05CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _activationDuration, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _isInDeactivation, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, UnknownData_TDNN, 0x05D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _deactivationDuration, 0x05D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, UnknownData_CLFI, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, _throwingKnives, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterAnimInstance, UnknownData_W40H, 0x0618);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTricksterAnimInstance, 0x0620);
		}

		// class UFootGroundDetectorComponent : public UBaseGroundDetectorComponent
		TEST_METHOD(Class__AnimationUtilities__FootGroundDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, _hipTransformName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, _slopeStartOffset, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, _footLength, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, _traceRadius, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, _maxWalkableSlopeAngle, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, UnknownData_L1MV, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFootGroundDetectorComponent, _movementComp, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFootGroundDetectorComponent, 0x0200);
		}

		// class UFromBoneGroundDetectorComponent : public UBaseGroundDetectorComponent
		TEST_METHOD(Class__AnimationUtilities__FromBoneGroundDetectorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFromBoneGroundDetectorComponent, _startOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFromBoneGroundDetectorComponent, UnknownData_Z1OV, 0x01DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFromBoneGroundDetectorComponent, 0x01E0);
		}

		// class UAnimInstanceLeader : public UInterface
		TEST_METHOD(Class__AnimationUtilities__AnimInstanceLeader)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimInstanceLeader, 0x0030);
		}

		// class UTricksterChainedThrowsAddon : public UItemAddon
		TEST_METHOD(Class__TheK23__TricksterChainedThrowsAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, UnknownData_LKVM, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, _resetOnEnteringFlurryInteraction, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, UnknownData_UWKM, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, _lacerationPenaltyRangeThreshold, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, _closeRangeLacerationPenalty, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, _maximumMultiplier, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterChainedThrowsAddon, UnknownData_ZT11, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTricksterChainedThrowsAddon, 0x0230);
		}

		// class UMoveComponentToComponent : public UactorComponent
		TEST_METHOD(Class__AnimationUtilities__MoveComponentToComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMoveComponentToComponent, UnknownData_2FAW, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMoveComponentToComponent, 0x0100);
		}

		// class UTricksterCharacterVFXInterface : public UInterface
		TEST_METHOD(Class__TheK23__TricksterCharacterVFXInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTricksterCharacterVFXInterface, 0x0030);
		}

		// class UResetControlPitchAnimNotify : public UanimNotify
		TEST_METHOD(Class__AnimationUtilities__ResetControlPitchAnimNotify)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResetControlPitchAnimNotify, 0x0040);
		}

		// class USlaveAnimInstance : public UanimInstance
		TEST_METHOD(Class__AnimationUtilities__SlaveAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlaveAnimInstance, _masterMesh, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlaveAnimInstance, UnknownData_XI20, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlaveAnimInstance, 0x0280);
		}

		// class UTricksterSuperModeComponent : public UactorComponent
		TEST_METHOD(Class__TheK23__TricksterSuperModeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _isInSuperMode, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _isSuperModeReady, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _isInCooldown, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, UnknownData_XIDT, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _chargesToAddOnKnifeHit, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _superModeMaxCharge, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _superModeReadyDepletionPerSecond, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _superModeActiveDuration, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _superModeCooldown, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, _shouldDisableFlurryDuringCooldown, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTricksterSuperModeComponent, UnknownData_M1L0, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTricksterSuperModeComponent, 0x01E8);
		}

		// class USleepingSkinnedMeshRegisterer : public UactorComponent
		TEST_METHOD(Class__AnimationUtilities__SleepingSkinnedMeshRegisterer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USleepingSkinnedMeshRegisterer, 0x00B8);
		}

		// class USleepingSkinnedMeshCompoundedTicker : public UWorldSubsystem
		TEST_METHOD(Class__AnimationUtilities__SleepingSkinnedMeshCompoundedTicker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USleepingSkinnedMeshCompoundedTicker, UnknownData_VR5R, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USleepingSkinnedMeshCompoundedTicker, 0x0040);
		}

		// class UTriggerTimerOnLacerationAlmostFullEffect : public UstatusEffect
		TEST_METHOD(Class__TheK23__TriggerTimerOnLacerationAlmostFullEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerTimerOnLacerationAlmostFullEffect, _lacerationComponent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerTimerOnLacerationAlmostFullEffect, _duration, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerTimerOnLacerationAlmostFullEffect, UnknownData_RL8B, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerTimerOnLacerationAlmostFullEffect, 0x02B8);
		}

		// class UActivateSuperMode : public UinteractionDefinition
		TEST_METHOD(Class__TheK23__ActivateSuperMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateSuperMode, UnknownData_1T01, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateSuperMode, _activationMontage, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateSuperMode, _activationDuration, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateSuperMode, _confirmationChargeDuration, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateSuperMode, UnknownData_7RNF, 0x0578);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivateSuperMode, 0x0580);
		}

		// class UFastTrack : public Uperk
		TEST_METHOD(Class__TheK23__FastTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFastTrack, _tokensToAdd, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFastTrack, UnknownData_I8JY, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFastTrack, 0x0360);
		}

		// class UFlurryComboScoreComponent : public UactorComponent
		TEST_METHOD(Class__TheK23__FlurryComboScoreComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, UnknownData_ABUY, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _comboScore, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _timeForCombo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _baseKnifeComboScore, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _maximumKnifeMultiplier, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _fillLacerationComboScore, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _longRangeThreshold, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _closeRangeScoreMultiplier, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _longRangeScoreMultiplier, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _thresholds, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _thresholdsScoreForAudio, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, _comboScoreEvents, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryComboScoreComponent, UnknownData_ZCT8, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlurryComboScoreComponent, 0x0268);
		}

		// class UFlurryOfKnives : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheK23__FlurryOfKnives)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, UnknownData_TIHD, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, UnknownData_60WS, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _replicatedNumOfStacksReduction, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _isSuperModeThrow, 0x0674);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, UnknownData_OOEY, 0x0675);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _selfSlowEffect, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _flurryOfKnivesEnterDuration, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _flurryOfKnivesExitDuration, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _chargeTime, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _baseTimeBetweenThrows, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwRateModifierByKnivesThrown, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _superModeThrowRateModifier, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _knivesLaunchSpeed, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _convergencePointDistance, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _coneOfFireAngleCurve, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _consecutiveKnivesStacksDecayTime, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _maxConsecutiveKnivesStacks, 0x0830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _movementSpeedByKnivesThrown, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _superModeBaseMovementSpeed, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _baseWalkSpeed, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _recoilIntensityByKnivesThrown, 0x08B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _recoilDuration, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _recoilAngle, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _maximumRecoilAngleVariation, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _rotationSpeedAdjustmentTime, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _aimingStanceRotationYawScaleAdjustment, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _aimingStanceRotationPitchScaleAdjustment, 0x0980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwingRotationYawScaleAdjustment, 0x09A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwingRotationPitchScaleAdjustment, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _aimingStanceGamepadRotationYawScaleAdjustment, 0x09F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _aimingStanceGamepadRotationPitchScaleAdjustment, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwingGamepadRotationYawScaleAdjustment, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwingGamepadRotationPitchScaleAdjustment, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _aimingGamepadPitchCurve, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _aimingGamepadYawCurve, 0x0AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwingGamepadPitchCurve, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, _throwingGamepadYawCurve, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlurryOfKnives, UnknownData_RBKS, 0x0AB8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlurryOfKnives, 0x0AC0);
		}

		// class UHexCrowdControl : public UHexPerk
		TEST_METHOD(Class__TheK23__HexCrowdControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexCrowdControl, _windowVaultBlockDuration, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexCrowdControl, UnknownData_5OCZ, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexCrowdControl, 0x03B8);
		}

		// class UK23PowerProgressPresentationComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__TheK23__K23PowerProgressPresentationComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UK23PowerProgressPresentationComponent, 0x00B8);
		}

		// class UKnifeProjectile : public UKillerProjectile
		TEST_METHOD(Class__TheK23__KnifeProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _worldCollider, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _camperDetector, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, UnknownData_47BN, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _playersAffectedSinceLastBounce, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _poolableActorComponent, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _knifeMaxRange, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _addonExplosionRadius, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnifeProjectile, _numberOfAddonBounces, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKnifeProjectile, 0x03E0);
		}

		// class UKnifeRack : public Uactor
		TEST_METHOD(Class__TheK23__KnifeRack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKnifeRack, 0x0230);
		}

		// class UKnivesLauncher : public UKillerProjectileLauncher
		TEST_METHOD(Class__TheK23__KnivesLauncher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, _knifeSpawnOffset, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, _knifeSpawnForwardOffset, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, _launchSpeed, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, _maxAmmoTunable, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, UnknownData_JO7E, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, _isInSuperModeThrow, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesLauncher, UnknownData_NDFW, 0x0241);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKnivesLauncher, 0x0248);
		}

		// class UKnivesProvider : public UAuthoritativeActorPoolComponent
		TEST_METHOD(Class__TheK23__KnivesProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKnivesProvider, UnknownData_4IP5, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKnivesProvider, 0x00F8);
		}

		// class ULacerationComponent : public UactorComponent
		TEST_METHOD(Class__TheK23__LacerationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, UnknownData_CWB9, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _laceration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, UnknownData_QR2E, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _onHitSpeedBoost, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, UnknownData_RB4V, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _maxLaceration, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _lacerationExplosionDamage, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _lacerationRegressionPerSecond, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _lacerationRegressionPerSecondWhileRunning, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _speedBoostIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _speedBoostDuration, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _stopTickingRegressionWhileInjured, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _stopTickingRegressionWhileInChase, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _stopTickingRegressionWithinTerrorRadius, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _timeBeforeLacerationDecayStarts, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _regressionBufferTimerAlwaysTicks, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _lacerationToRemoveOnBasicAttack, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationComponent, _thresholdForGraceTimerScoreEvent, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULacerationComponent, 0x0398);
		}

		// class UBaseLacerationLevelCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__TheK23__BaseLacerationLevelCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseLacerationLevelCondition, 0x00E8);
		}

		// class ULacerationLevelCondition : public UBaseLacerationLevelCondition
		TEST_METHOD(Class__TheK23__LacerationLevelCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationLevelCondition, _lacerationLevelRequired, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULacerationLevelCondition, UnknownData_4R18, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULacerationLevelCondition, 0x00F0);
		}

		// class ULacerationAlmostFullCondition : public UBaseLacerationLevelCondition
		TEST_METHOD(Class__TheK23__LacerationAlmostFullCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULacerationAlmostFullCondition, 0x00E8);
		}

		// class UNoWayOut : public Uperk
		TEST_METHOD(Class__TheK23__NoWayOut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoWayOut, _exitGatePanelBlockBaseDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoWayOut, _exitGatePanelBlockDurationPerToken, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoWayOut, _hookedSurvivors, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoWayOut, UnknownData_ROA7, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoWayOut, 0x0380);
		}

		// class UReloadKnives : public UBaseLockerInteraction
		TEST_METHOD(Class__TheK23__ReloadKnives)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadKnives, UnknownData_UJS0, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReloadKnives, 0x0510);
		}

		// class USelfPreservation : public Uperk
		TEST_METHOD(Class__TheK23__SelfPreservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfPreservation, _hitDistanceToTriggerPerkEffect, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfPreservation, _selfPreservationEffectDuration, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfPreservation, 0x0360);
		}

		// class USmashHit : public Uperk
		TEST_METHOD(Class__TheK23__SmashHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USmashHit, _exhaustedTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USmashHit, _hasteTime, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmashHit, 0x0360);
		}

		// class UStarstruck : public Uperk
		TEST_METHOD(Class__TheK23__Starstruck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStarstruck, _exposedEffectDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStarstruck, _perkCooldownDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStarstruck, _camperExposedEffects, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStarstruck, UnknownData_D0S3, 0x03B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStarstruck, 0x0468);
		}

		// class UArrayExt : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SystemUtilities__ArrayExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrayExt, 0x0030);
		}

		// class UBoolExt : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SystemUtilities__BoolExt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoolExt, 0x0030);
		}

		// class UDateTimeProvider : public UObject
		TEST_METHOD(Class__SystemUtilities__DateTimeProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDateTimeProvider, 0x0030);
		}

		// class UTimeProviderMock : public UDateTimeProvider
		TEST_METHOD(Class__SystemUtilities__TimeProviderMock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeProviderMock, UnknownData_P0CO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeProviderMock, 0x0038);
		}

		// class UDateTimerUpdater : public UObject
		TEST_METHOD(Class__SystemUtilities__DateTimerUpdater)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDateTimerUpdater, UnknownData_F1OM, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDateTimerUpdater, _timers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDateTimerUpdater, _dateTimeProvider, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDateTimerUpdater, 0x00D8);
		}

		// class UDebugUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SystemUtilities__DebugUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugUtilities, 0x0030);
		}

		// class UPlatformUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__SystemUtilities__PlatformUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformUtilities, 0x0030);
		}

		// class ULuminRuntimeSettings : public UObject
		TEST_METHOD(Class__LuminRuntimeSettings__LuminRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, PackageName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ApplicationDisplayName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, FrameTimingHint, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bProtectedContent, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bManualCallToAppReady, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseMobileRendering, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bUseVulkan, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_0EIT, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, Certificate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconModelPath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, IconPortalPath, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedIconInfos, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VersionCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, MinimumAPILevel, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, AppPrivileges, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentSubElements, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ExtraComponentElements, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SpatializationPlugin, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, ReverbPlugin, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, OcclusionPlugin, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, SoundCueCookQualityIndex, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bRemoveDebugInfo, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_BQF3, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, VulkanValidationLayerLibs, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, bFrameVignette, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_5VPN, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, LocalizedAppNames, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminRuntimeSettings, UnknownData_ZPIO, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminRuntimeSettings, 0x0150);
		}

		// class UOnlineHotfixManager : public UObject
		TEST_METHOD(Class__Hotfix__OnlineHotfixManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineHotfixManager, UnknownData_VDQX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineHotfixManager, OSSName, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineHotfixManager, HotfixManagerClassName, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineHotfixManager, DebugPrefix, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineHotfixManager, AssetsHotfixedFromIniFiles, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineHotfixManager, 0x0228);
		}

		// class UUpdateManager : public UObject
		TEST_METHOD(Class__Hotfix__UpdateManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UnknownData_F99L, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, HotfixCheckCompleteDelay, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UpdateCheckCompleteDelay, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, HotfixAvailabilityCheckCompleteDelay, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UpdateCheckAvailabilityCompleteDelay, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, bCheckPlatformOSSForUpdate, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, bCheckOSSForUpdate, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UnknownData_E7VQ, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, AppSuspendedUpdateCheckTimeSeconds, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UnknownData_Z0CH, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, bPlatformEnvironmentDetected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, bInitialUpdateFinished, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, bCheckHotfixAvailabilityOnly, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, CurrentUpdateState, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, WorstNumFilesPendingLoadViewed, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, LastPatchCheckResult, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, LastHotfixResult, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UnknownData_N0H1, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, LastUpdateCheck, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, LastCompletionResult, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UnknownData_FBH5, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UpdateStateEnum, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUpdateManager, UpdateCompletionEnum, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateManager, 0x0120);
		}

		// class Ubeartrap : public UBaseTrap
		TEST_METHOD(Class__TheTrapper__beartrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _interactionVolume, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _pickTrapZone, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _onIsTrapSetChanged, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _ownerPlayer, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _collectInteractor, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _dangerNavModifierComponent, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _isTrapperOutOfSafetyZone, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, UnknownData_JMZI, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _maximumAttemptsForSelfUntrap, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _selfUntrapAttemptsRemaining, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, UnknownData_5D2E, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _safetyZone, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _trapZone, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _trapSurvivor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _trapKiller, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _trappedPlayer, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _animationMontageSlave, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, _mainInteractor, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubeartrap, UnknownData_4YDN, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ubeartrap, 0x04C0);
		}

		// class UBearTrapAnimInstance : public USleepingAnimInstance
		TEST_METHOD(Class__TheTrapper__BearTrapAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapAnimInstance, _isBroken, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapAnimInstance, _isBeingCollected, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapAnimInstance, _containsSurvivor, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapAnimInstance, _isTrapSet, 0x0283);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapAnimInstance, _wasJustDisarmed, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBearTrapAnimInstance, UnknownData_N8Q7, 0x0285);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBearTrapAnimInstance, 0x0290);
		}

		// class UIridescentStone : public UItemAddon
		TEST_METHOD(Class__TheTrapper__IridescentStone)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIridescentStone, 0x0218);
		}

		// class URemoveOnOriginatingSurvivorGoneStatusEffect : public UstatusEffect
		TEST_METHOD(Class__TheTrapper__RemoveOnOriginatingSurvivorGoneStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveOnOriginatingSurvivorGoneStatusEffect, UnknownData_ZNUF, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveOnOriginatingSurvivorGoneStatusEffect, 0x02B0);
		}

		// class USelfUntrap : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTrapper__SelfUntrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _trapImmunityDuration, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _untrapMontage, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _successfulEscapeHealthy, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _successfulEscapeInjured, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _successfulEscapeCrawling, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _failedEscape, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, UnknownData_EVOA, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, _canEscape, 0x06D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USelfUntrap, UnknownData_KL5F, 0x06DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelfUntrap, 0x06E0);
		}

		// class UTrapperAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheTrapper__TrapperAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTrapperAnimInstance, UnknownData_GD28, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTrapperAnimInstance, 0x05B0);
		}

		// class UUntrap : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTrapper__Untrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUntrap, UnknownData_80ZU, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUntrap, 0x0630);
		}

		// class UInputCoreTypes : public UObject
		TEST_METHOD(Class__InputCore__InputCoreTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputCoreTypes, 0x0030);
		}

		// class ULiveLinkMagicLeapHandTrackingSourceFactory : public ULiveLinkSourceFactory
		TEST_METHOD(Class__MagicLeapHandTracking__LiveLinkMagicLeapHandTrackingSourceFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULiveLinkMagicLeapHandTrackingSourceFactory, 0x0030);
		}

		// class UMagicLeapHandTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandTracking__MagicLeapHandTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandTrackingFunctionLibrary, 0x0030);
		}

		// class UBeMaterialEditorHelper : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__BeUtil__BeMaterialEditorHelper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeMaterialEditorHelper, 0x0030);
		}

		// class UPenaltyTracker : public UObject
		TEST_METHOD(Class__Penalty__PenaltyTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPenaltyTracker, UnknownData_SVS5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPenaltyTracker, 0x00B0);
		}

		// class UBaseModifierContainer : public UactorComponent
		TEST_METHOD(Class__Competence__BaseModifierContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierContainer, UnknownData_IV2C, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierContainer, Id, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierContainer, _createConditionsLocally, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierContainer, UnknownData_FPJR, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierContainer, _eventDrivenCondition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierContainer, _eventDrivenConditionLocal, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseModifierContainer, 0x00E0);
		}

		// class UAssetTagsSubsystem : public UEngineSubsystem
		TEST_METHOD(Class__AssetTags__AssetTagsSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetTagsSubsystem, 0x0038);
		}

		// class UBaseModifierCondition : public UactorComponent
		TEST_METHOD(Class__Competence__BaseModifierCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierCondition, _owningModifier, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierCondition, _subjectProvider, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseModifierCondition, _subjectProviderClass, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseModifierCondition, 0x00D0);
		}

		// class UEventDrivenModifierCondition : public UBaseModifierCondition
		TEST_METHOD(Class__Competence__EventDrivenModifierCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEventDrivenModifierCondition, UnknownData_M6GA, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEventDrivenModifierCondition, 0x00E8);
		}

		// class URangeBasedCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__Competence__RangeBasedCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangeBasedCondition, _range, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangeBasedCondition, UnknownData_32FC, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangeBasedCondition, 0x00F0);
		}

		// class UModifierSubjectProvider : public UObject
		TEST_METHOD(Class__Competence__ModifierSubjectProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModifierSubjectProvider, UnknownData_G3H8, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModifierSubjectProvider, 0x0048);
		}

		// class UCompositeModifierCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__Competence__CompositeModifierCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeModifierCondition, UnknownData_TWV2, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeModifierCondition, _conditions, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeModifierCondition, 0x0100);
		}

		// class UAndModifierCondition : public UCompositeModifierCondition
		TEST_METHOD(Class__Competence__AndModifierCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAndModifierCondition, 0x0100);
		}

		// class UCompetenceDebugger : public UObject
		TEST_METHOD(Class__Competence__CompetenceDebugger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompetenceDebugger, UnknownData_VS26, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompetenceDebugger, 0x0050);
		}

		// class UConditionFactory : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Competence__ConditionFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConditionFactory, 0x0030);
		}

		// class UHasObjectState : public UEventDrivenModifierCondition
		TEST_METHOD(Class__Competence__HasObjectState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasObjectState, _state, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasObjectState, UnknownData_NGQZ, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasObjectState, 0x0120);
		}

		// class UHasObjectStateWithMaxDuration : public UHasObjectState
		TEST_METHOD(Class__Competence__HasObjectStateWithMaxDuration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasObjectStateWithMaxDuration, UnknownData_LNO2, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasObjectStateWithMaxDuration, _maxDuration, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasObjectStateWithMaxDuration, UnknownData_GSFQ, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasObjectStateWithMaxDuration, 0x0158);
		}

		// class UCompetenceFlagProvider : public UInterface
		TEST_METHOD(Class__Competence__CompetenceFlagProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompetenceFlagProvider, 0x0030);
		}

		// class UconditionReceiver : public UInterface
		TEST_METHOD(Class__Competence__conditionReceiver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UconditionReceiver, 0x0030);
		}

		// class UmodifierProvider : public UInterface
		TEST_METHOD(Class__Competence__modifierProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmodifierProvider, 0x0030);
		}

		// class UIsTimerDoneCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__Competence__IsTimerDoneCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsTimerDoneCondition, _timer, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsTimerDoneCondition, UnknownData_K8OG, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsTimerDoneCondition, 0x00F8);
		}

		// class UNotModifierCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__Competence__NotModifierCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotModifierCondition, UnknownData_6ZF9, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNotModifierCondition, _condition, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNotModifierCondition, 0x00F8);
		}

		// class UOrModifierCondition : public UCompositeModifierCondition
		TEST_METHOD(Class__Competence__OrModifierCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOrModifierCondition, 0x0100);
		}

		// class UOwnerSubjectProvider : public UModifierSubjectProvider
		TEST_METHOD(Class__Competence__OwnerSubjectProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOwnerSubjectProvider, 0x0048);
		}

		// class UTestEventDrivenModifierCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__Competence__TestEventDrivenModifierCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestEventDrivenModifierCondition, 0x00E8);
		}

		// class UTestObjectStateProviderComponent : public UactorComponent
		TEST_METHOD(Class__Competence__TestObjectStateProviderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestObjectStateProviderComponent, UnknownData_BQKD, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestObjectStateProviderComponent, GameplayTagContainerComponent, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestObjectStateProviderComponent, 0x00C8);
		}

		// class UNetSynchedClock : public UactorComponent
		TEST_METHOD(Class__NetworkUtilities__NetSynchedClock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetSynchedClock, UnknownData_KHRM, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetSynchedClock, _serverTimeUpdateDelay, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetSynchedClock, UnknownData_X57R, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetSynchedClock, 0x00D8);
		}

		// class UNetUtils : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__NetworkUtilities__NetUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetUtils, 0x0030);
		}

		// class UNetworkFenceActor : public Uactor
		TEST_METHOD(Class__NetworkUtilities__NetworkFenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkFenceActor, UnknownData_66ML, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkFenceActor, 0x02A8);
		}

		// class UServerCorrectionDisablerComponent : public UactorComponent
		TEST_METHOD(Class__NetworkUtilities__ServerCorrectionDisablerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerCorrectionDisablerComponent, UnknownData_JHTW, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerCorrectionDisablerComponent, 0x0108);
		}

		// class UServerTimeProviderComponent : public UactorComponent
		TEST_METHOD(Class__NetworkUtilities__ServerTimeProviderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerTimeProviderComponent, UnknownData_LRTA, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerTimeProviderComponent, 0x00C0);
		}

		// class UTimerObject : public UactorComponent
		TEST_METHOD(Class__NetworkUtilities__TimerObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimerObject, UnknownData_TYAO, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimerObject, _replicationData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimerObject, UnknownData_G53C, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimerObject, 0x0138);
		}

		// class UAssetRegistryImpl : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetRegistryImpl, UnknownData_I26C, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryImpl, 0x0780);
		}

		// class UAssetRegistryHelpers : public UObject
		TEST_METHOD(Class__AssetRegistry__AssetRegistryHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistryHelpers, 0x0030);
		}

		// class UAssetRegistry : public UInterface
		TEST_METHOD(Class__AssetRegistry__AssetRegistry)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetRegistry, 0x0030);
		}

		// class UAmbienceBoxComponent : public UBoxComponent
		TEST_METHOD(Class__DBDAudio__AmbienceBoxComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbienceBoxComponent, 0x0450);
		}

		// class UAnimNotify_PostInteractionSoundEvent : public UanimNotify
		TEST_METHOD(Class__DBDAudio__AnimNotify_PostInteractionSoundEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PostInteractionSoundEvent, soundEvent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PostInteractionSoundEvent, InteractionAudioClass, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PostInteractionSoundEvent, 0x0078);
		}

		// class USoundBankLoader : public UGameInstanceSubsystem
		TEST_METHOD(Class__DBDAudio__SoundBankLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBankLoader, UnknownData_Q17Z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBankLoader, _audioBanks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBankLoader, _asyncAudioBanksPendingLoadData, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBankLoader, 0x0080);
		}

		// class UAudioUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDAudio__AudioUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioUtilities, 0x0030);
		}

		// class UInteractionAudioComponent : public UactorComponent
		TEST_METHOD(Class__DBDAudio__InteractionAudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAudioComponent, _audioComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionAudioComponent, _audioRadius, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionAudioComponent, 0x00E0);
		}

		// class ULoadAsyncBankData : public UObject
		TEST_METHOD(Class__DBDAudio__LoadAsyncBankData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadAsyncBankData, bank, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoadAsyncBankData, SoundBankLoader, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadAsyncBankData, 0x0040);
		}

		// class UTimedStatusEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__TimedStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimedStatusEffect, 0x02A8);
		}

		// class UAbilityStealthUndetectableEffect : public UTimedStatusEffect
		TEST_METHOD(Class__DBDCompetence__AbilityStealthUndetectableEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbilityStealthUndetectableEffect, 0x02A8);
		}

		// class UAdjustableCooldownStatusEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__AdjustableCooldownStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableCooldownStatusEffect, CooldownModifierType, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAdjustableCooldownStatusEffect, UnknownData_FF0D, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAdjustableCooldownStatusEffect, 0x02B8);
		}

		// class UExhaustedEffect : public UAdjustableCooldownStatusEffect
		TEST_METHOD(Class__DBDCompetence__ExhaustedEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExhaustedEffect, CooldownModifier, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExhaustedEffect, UnknownData_XXDZ, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExhaustedEffect, 0x02C0);
		}

		// class UActivatableExhaustedEffect : public UExhaustedEffect
		TEST_METHOD(Class__DBDCompetence__ActivatableExhaustedEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivatableExhaustedEffect, 0x02C0);
		}

		// class UActivateOnEventTimedStatusEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__ActivateOnEventTimedStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateOnEventTimedStatusEffect, _eventsToActivateOn, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivateOnEventTimedStatusEffect, 0x02C8);
		}

		// class UAllHexTotemsAreActive : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__AllHexTotemsAreActive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAllHexTotemsAreActive, UnknownData_PS4F, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAllHexTotemsAreActive, 0x0100);
		}

		// class UAnyMeansNecessary : public Uperk
		TEST_METHOD(Class__DBDCompetence__AnyMeansNecessary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, RevealSurvivorOnPalletPullUpStarted, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, RevealSurvivorOnPalletPulledUp, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, UnknownData_O1C0, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, RevealSurvivorDuration, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, _effect, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, _coolDownDuration, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyMeansNecessary, UnknownData_E53Y, 0x0364);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyMeansNecessary, 0x0368);
		}

		// class UAnySurvivorHasObjectState : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__AnySurvivorHasObjectState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnySurvivorHasObjectState, UnknownData_QOU0, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnySurvivorHasObjectState, _stateTag, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnySurvivorHasObjectState, UnknownData_6MN2, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnySurvivorHasObjectState, 0x0158);
		}

		// class UBabysitter : public Uperk
		TEST_METHOD(Class__DBDCompetence__Babysitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBabysitter, _scratchMarkHidingTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBabysitter, _showAuraTime, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBabysitter, _cooldownTime, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBabysitter, UnknownData_KJF9, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBabysitter, 0x0370);
		}

		// class UBabysitterEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__BabysitterEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBabysitterEffect, 0x02A8);
		}

		// class UBetterTogether : public Uperk
		TEST_METHOD(Class__DBDCompetence__BetterTogether)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, ShouldRevealKiller, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, ShouldRevealSurvivors, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, UnknownData_ASQO, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, RevealDistance, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, _affectedCampers, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, UnknownData_MXVD, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, _genToReveal, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, _durationByLevel, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBetterTogether, UnknownData_EC65, 0x037C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBetterTogether, 0x03A0);
		}

		// class UBloodEcho : public Uperk
		TEST_METHOD(Class__DBDCompetence__BloodEcho)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodEcho, _statusEffectDurationTag, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodEcho, _coolDownDuration, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodEcho, 0x0360);
		}

		// class UBreakout : public Uperk
		TEST_METHOD(Class__DBDCompetence__Breakout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, _slasher, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, _playerOwner, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, _hasteEffect, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, _wiggleEffect, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, _survivorDistanceMax, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, _isPerkActive, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakout, UnknownData_HE2Z, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakout, 0x03C0);
		}

		// class UBuckleUp : public Uperk
		TEST_METHOD(Class__DBDCompetence__BuckleUp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuckleUp, _noRecoveryColor, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuckleUp, _fullRecoveryColor, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuckleUp, _revealDuration, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuckleUp, UnknownData_7WQO, 0x0374);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuckleUp, 0x0378);
		}

		// class UCamaraderie : public Uperk
		TEST_METHOD(Class__DBDCompetence__Camaraderie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamaraderie, UnknownData_BJSG, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamaraderie, _percentUseItem, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamaraderie, _pauseTimer, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamaraderie, _needItemToTrigger, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamaraderie, UnknownData_DUOC, 0x036D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamaraderie, 0x0370);
		}

		// class UCollectableOwnerSubjectProvider : public UModifierSubjectProvider
		TEST_METHOD(Class__DBDCompetence__CollectableOwnerSubjectProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectableOwnerSubjectProvider, UnknownData_3IJ3, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectableOwnerSubjectProvider, 0x0060);
		}

		// class UCorruptIntervention : public Uperk
		TEST_METHOD(Class__DBDCompetence__CorruptIntervention)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorruptIntervention, _blockedGeneratorCount, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorruptIntervention, UnknownData_OF8F, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorruptIntervention, _generatorBlockDuration, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorruptIntervention, _generatorAuraColorForKiller, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorruptIntervention, _blockedGenerators, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorruptIntervention, UnknownData_Y3NK, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorruptIntervention, 0x0380);
		}

		// class UDistanceBasedTickDisabler : public UactorComponent
		TEST_METHOD(Class__SignificanceUtilities__DistanceBasedTickDisabler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, _autoRegisterOwner, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, _autoRegisterTimelines, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, UnknownData_E7H1, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, _tickDisableDistance, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, _insignificantWhenBehindTheCamera, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, UnknownData_7NO2, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, _components, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistanceBasedTickDisabler, UnknownData_2ZG4, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistanceBasedTickDisabler, 0x0180);
		}

		// class UCruelConfinement : public Uperk
		TEST_METHOD(Class__DBDCompetence__CruelConfinement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCruelConfinement, _effectiveRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCruelConfinement, _blockDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCruelConfinement, _windowAuraColor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCruelConfinement, _blockableLists, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCruelConfinement, UnknownData_U8RM, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCruelConfinement, 0x03E8);
		}

		// class UDarkDevotion : public Uperk
		TEST_METHOD(Class__DBDCompetence__DarkDevotion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkDevotion, _obsessionTerrorRadiusEmitter, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkDevotion, _obsessionTerrorRadius, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkDevotion, _simulatedFixedDistance, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkDevotion, UnknownData_J8G3, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDarkDevotion, 0x0360);
		}

		// class UDarkSense : public Uperk
		TEST_METHOD(Class__DBDCompetence__DarkSense)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkSense, _effectDurationOnGeneratorComplete, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkSense, _effectDurationOnFinalGeneratorComplete, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDarkSense, UnknownData_WLO2, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDarkSense, 0x0360);
		}

		// class UDBDConditionFactory : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDCompetence__DBDConditionFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDConditionFactory, 0x0030);
		}

		// class UDeadMansSwitchEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__DeadMansSwitchEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeadMansSwitchEffect, 0x02A8);
		}

		// class UDeceptionEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__DeceptionEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeceptionEffect, _hideBloodTrailsWhenCamperFakeEnterLocker, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeceptionEffect, UnknownData_0VBJ, 0x02A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeceptionEffect, 0x02B0);
		}

		// class UDecisiveStrike : public Uperk
		TEST_METHOD(Class__DBDCompetence__DecisiveStrike)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, _timeAfterUnhook, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, _skillCheckDelay, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, _skillCheckBuffer, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, _killerHearsSkillCheckCue, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, UnknownData_YNKL, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, _deactivationEvents, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, _hasBeenAttempted, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecisiveStrike, UnknownData_XE4M, 0x03E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecisiveStrike, 0x03E8);
		}

		// class UDelayedHealEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__DelayedHealEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDelayedHealEffect, UnknownData_G0EA, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDelayedHealEffect, 0x02B0);
		}

		// class UDidGameEventOccurred : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__DidGameEventOccurred)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDidGameEventOccurred, EventTag, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDidGameEventOccurred, UnknownData_RRZZ, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDidGameEventOccurred, 0x0120);
		}

		// class UDistortion : public Uperk
		TEST_METHOD(Class__DBDCompetence__Distortion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistortion, _activationDurations, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistortion, _auraBlockIsActive, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistortion, UnknownData_4CGX, 0x0355);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistortion, 0x0368);
		}

		// class UDiversion : public Uperk
		TEST_METHOD(Class__DBDCompetence__Diversion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDiversion, 0x0348);
		}

		// class UDoesPerkHaveToken : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__DoesPerkHaveToken)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoesPerkHaveToken, _perk, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoesPerkHaveToken, UnknownData_H5V2, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoesPerkHaveToken, 0x00F8);
		}

		// class UDownedByBasicAttack : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__DownedByBasicAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDownedByBasicAttack, _replicatedIsTrue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDownedByBasicAttack, UnknownData_F01L, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDownedByBasicAttack, 0x0140);
		}

		// class UDyingLight : public Uperk
		TEST_METHOD(Class__DBDCompetence__DyingLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyingLight, _actionSpeedPenaltyPerToken, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyingLight, _obsessionActionSpeedBonus, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyingLight, _obsessionStatusEffectID, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyingLight, _nonObsessionStatusEffectID, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyingLight, UnknownData_LSI8, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDyingLight, _survivorDebuffs, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDyingLight, 0x0388);
		}

		// class UEnduranceHighlightEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__EnduranceHighlightEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnduranceHighlightEffect, 0x02A8);
		}

		// class UExposedEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__ExposedEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExposedEffect, 0x02A8);
		}

		// class UFixated : public Uperk
		TEST_METHOD(Class__DBDCompetence__Fixated)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixated, 0x0348);
		}

		// class UFlipFlop : public Uperk
		TEST_METHOD(Class__DBDCompetence__FlipFlop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlipFlop, _recoveryProgressionConversionRatio, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlipFlop, _maxWiggleProgression, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlipFlop, 0x0360);
		}

		// class UFurtiveChase : public Uperk
		TEST_METHOD(Class__DBDCompetence__FurtiveChase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurtiveChase, _maxTokensByLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFurtiveChase, _terrorRadiusSuppressionPerToken, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFurtiveChase, 0x0358);
		}

		// class UHasPlayerReachedWiggleFillPercentCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__HasPlayerReachedWiggleFillPercentCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasPlayerReachedWiggleFillPercentCondition, UnknownData_7P0T, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasPlayerReachedWiggleFillPercentCondition, _isWigglePercentReached, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHasPlayerReachedWiggleFillPercentCondition, UnknownData_QB2O, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHasPlayerReachedWiggleFillPercentCondition, 0x00F0);
		}

		// class UHeadOn : public Uperk
		TEST_METHOD(Class__DBDCompetence__HeadOn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, IsPerformingHeadOn, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, ExhaustOnlyOnSuccessfulStun, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, StunKillersEnteringStunZone, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, UnknownData_4MGW, 0x034B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, _hideDuration, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, _locker, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHeadOn, UnknownData_HXE8, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadOn, 0x03C0);
		}

		// class UHexPerk : public Uperk
		TEST_METHOD(Class__DBDCompetence__HexPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, NumTotemsToBind, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, _doNotBindToTotemOnInit, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, UnknownData_A5J4, 0x034D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, _totemActors, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, _authorityPrevTotemActors, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, _playersWhoKnowCurse, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexPerk, UnknownData_NTIL, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexPerk, 0x03A8);
		}

		// class UHexHauntedGround : public UHexPerk
		TEST_METHOD(Class__DBDCompetence__HexHauntedGround)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexHauntedGround, 0x03A8);
		}

		// class UHexRuin : public UHexPerk
		TEST_METHOD(Class__DBDCompetence__HexRuin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexRuin, UnknownData_O29N, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexRuin, _curseActivationTimers, 0x03C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexRuin, 0x0410);
		}

		// class UHighestLevelAndClosestEffectCondition : public UGameplayModifierCondition
		TEST_METHOD(Class__DBDCompetence__HighestLevelAndClosestEffectCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighestLevelAndClosestEffectCondition, UnknownData_GXXH, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighestLevelAndClosestEffectCondition, _effectsLevel1, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighestLevelAndClosestEffectCondition, _effectsLevel2, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHighestLevelAndClosestEffectCondition, _effectsLevel3, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHighestLevelAndClosestEffectCondition, 0x0108);
		}

		// class UImAllEars : public Uperk
		TEST_METHOD(Class__DBDCompetence__ImAllEars)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImAllEars, _cooldownByLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImAllEars, _durationByLevel, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImAllEars, _useTerrorRadius, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImAllEars, UnknownData_WAO0, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImAllEars, _triggerOutsideRadius, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImAllEars, UnknownData_9TTF, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImAllEars, 0x03A0);
		}

		// class UImmediateUndetectableEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__ImmediateUndetectableEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImmediateUndetectableEffect, 0x02A8);
		}

		// class UInfectiousFright : public Uperk
		TEST_METHOD(Class__DBDCompetence__InfectiousFright)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectiousFright, _revealPlayerInTerrorRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectiousFright, _perkActivationCount, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectiousFright, UnknownData_Q5OZ, 0x034A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectiousFright, _revealedSurvivors, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectiousFright, _targetSurvivor, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInfectiousFright, UnknownData_ZOJ5, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfectiousFright, 0x0390);
		}

		// class UInnerStrength : public Uperk
		TEST_METHOD(Class__DBDCompetence__InnerStrength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInnerStrength, _hideDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInnerStrength, _perkEnabled, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInnerStrength, UnknownData_III4, 0x0355);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInnerStrength, 0x0380);
		}

		// class UInsidious : public Uperk
		TEST_METHOD(Class__DBDCompetence__Insidious)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInsidious, 0x0348);
		}

		// class UInsidiousEffect : public UAbilityStealthUndetectableEffect
		TEST_METHOD(Class__DBDCompetence__InsidiousEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInsidiousEffect, 0x02A8);
		}

		// class UModularSynthPresetBank : public UObject
		TEST_METHOD(Class__Synthesis__ModularSynthPresetBank)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthPresetBank, Presets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthPresetBank, 0x0040);
		}

		// class UIsActivationTimerActive : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsActivationTimerActive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsActivationTimerActive, UnknownData_HFLG, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsActivationTimerActive, 0x0100);
		}

		// class UModularSynthLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Synthesis__ModularSynthLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthLibrary, 0x0030);
		}

		// class UIsActivationTimerActiveAndNotPaused : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsActivationTimerActiveAndNotPaused)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsActivationTimerActiveAndNotPaused, UnknownData_W8YI, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsActivationTimerActiveAndNotPaused, 0x0108);
		}

		// class UIsClosestEffectCondition : public UGameplayModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsClosestEffectCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsClosestEffectCondition, 0x00D0);
		}

		// class UModularSynthComponent : public USynthComponent
		TEST_METHOD(Class__Synthesis__ModularSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, VoiceCount, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModularSynthComponent, UnknownData_YPPD, 0x06F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModularSynthComponent, 0x0D90);
		}

		// class UIsCooldownTimerActive : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsCooldownTimerActive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsCooldownTimerActive, UnknownData_KD0H, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsCooldownTimerActive, 0x0100);
		}

		// class UIsHexCursed : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsHexCursed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsHexCursed, UnknownData_O83E, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsHexCursed, 0x0100);
		}

		// class UIsHighestLevelAndClosestOriginatingEffect : public UGameplayModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsHighestLevelAndClosestOriginatingEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsHighestLevelAndClosestOriginatingEffect, _applicableEffects, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsHighestLevelAndClosestOriginatingEffect, UnknownData_R8J4, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsHighestLevelAndClosestOriginatingEffect, 0x00F8);
		}

		// class UIsInAnyHookedSurvivorOriginatorAuraReadingRange : public URangeBasedCondition
		TEST_METHOD(Class__DBDCompetence__IsInAnyHookedSurvivorOriginatorAuraReadingRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsInAnyHookedSurvivorOriginatorAuraReadingRange, UnknownData_ZDFF, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsInAnyHookedSurvivorOriginatorAuraReadingRange, 0x01A0);
		}

		// class UIsLifetimeActive : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsLifetimeActive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsLifetimeActive, UnknownData_H6SM, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsLifetimeActive, 0x00F8);
		}

		// class UIsOnHitSprintEffectActive : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsOnHitSprintEffectActive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsOnHitSprintEffectActive, 0x00E8);
		}

		// class UBaseIsPerkUsableCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__BaseIsPerkUsableCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIsPerkUsableCondition, UnknownData_IFCN, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseIsPerkUsableCondition, 0x00F0);
		}

		// class UIsOriginatingPerkUsableCondition : public UBaseIsPerkUsableCondition
		TEST_METHOD(Class__DBDCompetence__IsOriginatingPerkUsableCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsOriginatingPerkUsableCondition, 0x00F0);
		}

		// class UIsOutRangeOfOriginatingPlayer : public URangeBasedCondition
		TEST_METHOD(Class__DBDCompetence__IsOutRangeOfOriginatingPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsOutRangeOfOriginatingPlayer, UnknownData_WGHH, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsOutRangeOfOriginatingPlayer, 0x0118);
		}

		// class UAnyActorPairQueryRangeIsTrue : public URangeBasedCondition
		TEST_METHOD(Class__DBDCompetence__AnyActorPairQueryRangeIsTrue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnyActorPairQueryRangeIsTrue, UnknownData_8MAR, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnyActorPairQueryRangeIsTrue, 0x0100);
		}

		// class UIsOwningPlayerInRangeFromHook : public UAnyActorPairQueryRangeIsTrue
		TEST_METHOD(Class__DBDCompetence__IsOwningPlayerInRangeFromHook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsOwningPlayerInRangeFromHook, UnknownData_M692, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsOwningPlayerInRangeFromHook, 0x0108);
		}

		// class UIsOwningPlayerInHookRangeWhenKillerCarry : public UIsOwningPlayerInRangeFromHook
		TEST_METHOD(Class__DBDCompetence__IsOwningPlayerInHookRangeWhenKillerCarry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsOwningPlayerInHookRangeWhenKillerCarry, UnknownData_RC0N, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsOwningPlayerInHookRangeWhenKillerCarry, 0x0120);
		}

		// class UIsOwningPlayerLastSurvivor : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsOwningPlayerLastSurvivor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsOwningPlayerLastSurvivor, UnknownData_WFVS, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsOwningPlayerLastSurvivor, 0x00F0);
		}

		// class UIsPerkUsableCondition : public UBaseIsPerkUsableCondition
		TEST_METHOD(Class__DBDCompetence__IsPerkUsableCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsPerkUsableCondition, 0x00F0);
		}

		// class USourceEffectBitCrusherPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectBitCrusherPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, UnknownData_CUUF, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectBitCrusherPreset, settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectBitCrusherPreset, 0x0080);
		}

		// class UBaseIsPlayerPerformingInteraction : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__BaseIsPlayerPerformingInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIsPlayerPerformingInteraction, _interactionSemantics, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseIsPlayerPerformingInteraction, UnknownData_ENXE, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseIsPlayerPerformingInteraction, 0x0118);
		}

		// class USourceEffectChorusPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectChorusPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, UnknownData_VNDD, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectChorusPreset, settings, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectChorusPreset, 0x00A0);
		}

		// class UIsPlayerPerformingItemInteraction : public UBaseIsPlayerPerformingInteraction
		TEST_METHOD(Class__DBDCompetence__IsPlayerPerformingItemInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsPlayerPerformingItemInteraction, UnknownData_UTJQ, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsPlayerPerformingItemInteraction, 0x0138);
		}

		// class USourceEffectDynamicsProcessorPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectDynamicsProcessorPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, UnknownData_O3O6, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectDynamicsProcessorPreset, settings, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectDynamicsProcessorPreset, 0x00C0);
		}

		// class UIsPlayerPerformingInteraction : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__IsPlayerPerformingInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsPlayerPerformingInteraction, _interactionSemantics, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsPlayerPerformingInteraction, UnknownData_EASS, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsPlayerPerformingInteraction, 0x0128);
		}

		// class UEnvelopeFollowerListener : public UactorComponent
		TEST_METHOD(Class__Synthesis__EnvelopeFollowerListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, OnEnvelopeFollowerUpdate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvelopeFollowerListener, UnknownData_ATFU, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvelopeFollowerListener, 0x00D8);
		}

		// class UKillerIsLowOnAmmo : public UEventDrivenModifierCondition
		TEST_METHOD(Class__DBDCompetence__KillerIsLowOnAmmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerIsLowOnAmmo, _ammoThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerIsLowOnAmmo, UnknownData_27JS, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerIsLowOnAmmo, 0x0100);
		}

		// class USourceEffectEnvelopeFollowerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEnvelopeFollowerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, UnknownData_JSAE, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEnvelopeFollowerPreset, settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEnvelopeFollowerPreset, 0x0088);
		}

		// class UKillerSubjectProvider : public UModifierSubjectProvider
		TEST_METHOD(Class__DBDCompetence__KillerSubjectProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerSubjectProvider, UnknownData_WA8Q, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerSubjectProvider, 0x0050);
		}

		// class UKindredPerk : public Uperk
		TEST_METHOD(Class__DBDCompetence__KindredPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKindredPerk, UnknownData_UMX0, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKindredPerk, _killerAuraRevealRange, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKindredPerk, UnknownData_P0VZ, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKindredPerk, 0x0370);
		}

		// class USourceEffectEQPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectEQPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, UnknownData_719Z, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectEQPreset, settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectEQPreset, 0x0090);
		}

		// class UBaseLingeringStatusEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__BaseLingeringStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLingeringStatusEffect, _lingerDuration, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLingeringStatusEffect, UnknownData_LQ8X, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseLingeringStatusEffect, 0x02B0);
		}

		// class USourceEffectFilterPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, UnknownData_ZQDC, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFilterPreset, settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFilterPreset, 0x0088);
		}

		// class ULingeringStateTagStatusEffect : public UBaseLingeringStatusEffect
		TEST_METHOD(Class__DBDCompetence__LingeringStateTagStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULingeringStateTagStatusEffect, _ownerStateTag, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULingeringStateTagStatusEffect, UnknownData_AQLN, 0x02BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULingeringStateTagStatusEffect, 0x02E8);
		}

		// class USourceEffectFoldbackDistortionPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectFoldbackDistortionPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, UnknownData_7RXH, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectFoldbackDistortionPreset, settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectFoldbackDistortionPreset, 0x0088);
		}

		// class ULuckyBreak : public Uperk
		TEST_METHOD(Class__DBDCompetence__LuckyBreak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuckyBreak, _activationTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuckyBreak, UnknownData_EEVQ, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuckyBreak, 0x0358);
		}

		// class USourceEffectMidSideSpreaderPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectMidSideSpreaderPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, UnknownData_PL9G, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectMidSideSpreaderPreset, settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectMidSideSpreaderPreset, 0x0088);
		}

		// class UMindbreaker : public Uperk
		TEST_METHOD(Class__DBDCompetence__Mindbreaker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMindbreaker, _effectDurationAfterRepair, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMindbreaker, _generatorRepairThreshold, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMindbreaker, UnknownData_JBJW, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMindbreaker, 0x0388);
		}

		// class USourceEffectPannerPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPannerPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, UnknownData_56MX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPannerPreset, settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPannerPreset, 0x0080);
		}

		// class UNemesis : public Uperk
		TEST_METHOD(Class__DBDCompetence__Nemesis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNemesis, UnknownData_I4SB, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNemesis, _revealToKillerTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNemesis, _obliviousTime, 0x035C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNemesis, 0x0368);
		}

		// class USourceEffectPhaserPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectPhaserPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, UnknownData_WWET, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectPhaserPreset, settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectPhaserPreset, 0x0090);
		}

		// class UNoOneLeftBehind : public Uperk
		TEST_METHOD(Class__DBDCompetence__NoOneLeftBehind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoOneLeftBehind, _speedBoostEffect, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoOneLeftBehind, 0x0358);
		}

		// class USourceEffectRingModulationPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectRingModulationPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, UnknownData_3XQQ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectRingModulationPreset, settings, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectRingModulationPreset, 0x0098);
		}

		// class USourceEffectSimpleDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectSimpleDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, UnknownData_6DC4, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectSimpleDelayPreset, settings, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectSimpleDelayPreset, 0x00A0);
		}

		// class USourceEffectStereoDelayPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectStereoDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, UnknownData_6C8Q, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectStereoDelayPreset, settings, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectStereoDelayPreset, 0x0098);
		}

		// class USourceEffectWaveShaperPreset : public USoundEffectSourcePreset
		TEST_METHOD(Class__Synthesis__SourceEffectWaveShaperPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, UnknownData_9LGV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USourceEffectWaveShaperPreset, settings, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USourceEffectWaveShaperPreset, 0x0080);
		}

		// class UAudioImpulseResponse : public UObject
		TEST_METHOD(Class__Synthesis__AudioImpulseResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, ImpulseResponse, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NumChannels, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, SampleRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, NormalizationVolumeDb, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, UnknownData_3V8H, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioImpulseResponse, IRData, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioImpulseResponse, 0x0060);
		}

		// class USubmixEffectConvolutionReverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectConvolutionReverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, settings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, ImpulseResponse, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, BlockSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, bEnableHardwareAcceleration, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectConvolutionReverbPreset, UnknownData_AX5U, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectConvolutionReverbPreset, 0x00C0);
		}

		// class UObliviousEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__ObliviousEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObliviousEffect, 0x02A8);
		}

		// class UObsessionTargetSubjectProvider : public UModifierSubjectProvider
		TEST_METHOD(Class__DBDCompetence__ObsessionTargetSubjectProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObsessionTargetSubjectProvider, UnknownData_LREI, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObsessionTargetSubjectProvider, 0x0058);
		}

		// class UOnEventBaseAddon : public UItemAddon
		TEST_METHOD(Class__DBDCompetence__OnEventBaseAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnEventBaseAddon, _eventToListenTo, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnEventBaseAddon, UnknownData_8R5G, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnEventBaseAddon, 0x0228);
		}

		// class USubmixEffectDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_X716, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, settings, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, DynamicSettings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectDelayPreset, UnknownData_BN1T, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectDelayPreset, 0x0098);
		}

		// class UOwningPlayerInTotemRange : public UAnyActorPairQueryRangeIsTrue
		TEST_METHOD(Class__DBDCompetence__OwningPlayerInTotemRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOwningPlayerInTotemRange, UnknownData_U6P5, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOwningPlayerInTotemRange, 0x0118);
		}

		// class UOwningPlayerInDullTotemRange : public UOwningPlayerInTotemRange
		TEST_METHOD(Class__DBDCompetence__OwningPlayerInDullTotemRange)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOwningPlayerInDullTotemRange, 0x0118);
		}

		// class USubmixEffectFilterPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFilterPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, UnknownData_AUHW, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFilterPreset, settings, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFilterPreset, 0x0088);
		}

		// class UOwningSlasherHasBeenStill : public UGameplayModifierCondition
		TEST_METHOD(Class__DBDCompetence__OwningSlasherHasBeenStill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOwningSlasherHasBeenStill, _secondsOfStillnessRequired, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOwningSlasherHasBeenStill, UnknownData_Z4O6, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOwningSlasherHasBeenStill, 0x00D8);
		}

		// class UPharmacyPerk : public Uperk
		TEST_METHOD(Class__DBDCompetence__PharmacyPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPharmacyPerk, _searchSpeeds, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPharmacyPerk, 0x0358);
		}

		// class UPlayerIsInExitArea : public UGameplayModifierCondition
		TEST_METHOD(Class__DBDCompetence__PlayerIsInExitArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerIsInExitArea, UnknownData_96YW, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerIsInExitArea, 0x00D8);
		}

		// class USubmixEffectFlexiverbPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectFlexiverbPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, UnknownData_MOP7, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectFlexiverbPreset, settings, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectFlexiverbPreset, 0x0090);
		}

		// class UPoised : public Uperk
		TEST_METHOD(Class__DBDCompetence__Poised)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoised, _activationTime, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoised, UnknownData_6SPP, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoised, 0x0370);
		}

		// class USubmixEffectTapDelayPreset : public USoundEffectSubmixPreset
		TEST_METHOD(Class__Synthesis__SubmixEffectTapDelayPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_HQP8, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, settings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubmixEffectTapDelayPreset, UnknownData_QC7G, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubmixEffectTapDelayPreset, 0x00B8);
		}

		// class UPreventKOEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__PreventKOEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreventKOEffect, UnknownData_C2H2, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreventKOEffect, 0x02B0);
		}

		// class UQKPerk3ExhaustedEffect : public UExhaustedEffect
		TEST_METHOD(Class__DBDCompetence__QKPerk3ExhaustedEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQKPerk3ExhaustedEffect, UnknownData_O8XV, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQKPerk3ExhaustedEffect, 0x02E8);
		}

		// class UResiliencePerk : public Uperk
		TEST_METHOD(Class__DBDCompetence__ResiliencePerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UResiliencePerk, _actionSpeed, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UResiliencePerk, UnknownData_PGRG, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UResiliencePerk, 0x0358);
		}

		// class USynth2DSlider : public UWidget
		TEST_METHOD(Class__Synthesis__Synth2DSlider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueX, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueY, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueXDelegate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_TLZQ, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, ValueYDelegate, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_UIYF, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, WidgetStyle, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, SliderHandleColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IndentHandle, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, Locked, 0x0449);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_4W5S, 0x044A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, StepSize, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, IsFocusable, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_ZP76, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureBegin, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnMouseCaptureEnd, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureBegin, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnControllerCaptureEnd, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedX, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, OnValueChangedY, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynth2DSlider, UnknownData_2234, 0x04B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynth2DSlider, 0x04C8);
		}

		// class Usaboteur : public Uperk
		TEST_METHOD(Class__DBDCompetence__saboteur)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Usaboteur, _coolDownDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::Usaboteur, _revealHookDistance, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::Usaboteur, _revealedMeatHooksOultineStrategy, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Usaboteur, 0x0370);
		}

		// class USecondsToRateModifierBaseAddon : public UItemAddon
		TEST_METHOD(Class__DBDCompetence__SecondsToRateModifierBaseAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondsToRateModifierBaseAddon, _chargeRate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondsToRateModifierBaseAddon, _maxCharge, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondsToRateModifierBaseAddon, _secondsToAdd, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondsToRateModifierBaseAddon, _rateModifierTagToCompute, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecondsToRateModifierBaseAddon, 0x02A8);
		}

		// class USecondWind : public Uperk
		TEST_METHOD(Class__DBDCompetence__SecondWind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, UnknownData_YWR1, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, _currentState, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, UnknownData_G3Q3, 0x0351);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, _amountHealed, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, UnknownData_ORZK, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, _numberOfHealStateToHealToActivate, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, _durationOfHeal, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, _applyBrokenEffect, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::USecondWind, UnknownData_BAN8, 0x0375);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USecondWind, 0x0380);
		}

		// class USpawnEffectsOnAllSurvivorsBaseAddon : public UItemAddon
		TEST_METHOD(Class__DBDCompetence__SpawnEffectsOnAllSurvivorsBaseAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpawnEffectsOnAllSurvivorsBaseAddon, UnknownData_VWVS, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpawnEffectsOnAllSurvivorsBaseAddon, 0x0220);
		}

		// class UGranularSynth : public USynthComponent
		TEST_METHOD(Class__Synthesis__GranularSynth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, GranulatedSoundWave, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGranularSynth, UnknownData_DJF6, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGranularSynth, 0x0AB0);
		}

		// class UItemEfficiencyProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__ItemEfficiencyProficiency__ItemEfficiencyProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UItemEfficiencyProficiency_C, 0x0048);
		}

		// class USimpleSpawnEffectsOnAllSurvivorsAddon : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__DBDCompetence__SimpleSpawnEffectsOnAllSurvivorsAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleSpawnEffectsOnAllSurvivorsAddon, _statusEffectsSpawnParams, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleSpawnEffectsOnAllSurvivorsAddon, 0x0230);
		}

		// class USoleSurvivor : public Uperk
		TEST_METHOD(Class__DBDCompetence__SoleSurvivor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoleSurvivor, _auraHideDistancePerDeadOrDisconnectedSurvivor, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoleSurvivor, UnknownData_17PX, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoleSurvivor, _otherSurvivors, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoleSurvivor, UnknownData_VLMS, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoleSurvivor, 0x0378);
		}

		// class USolidarity : public Uperk
		TEST_METHOD(Class__DBDCompetence__Solidarity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USolidarity, _allowMedkit, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USolidarity, UnknownData_XLCM, 0x0349);
			CHEAT_GEAR_CHECK_OFFSET(CG::USolidarity, _healerHPSlot, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USolidarity, _targetHPSlot, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USolidarity, _healOtherInteraction, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USolidarity, UnknownData_QGS6, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USolidarity, 0x0378);
		}

		// class UMonoWaveTableSynthPreset : public UObject
		TEST_METHOD(Class__Synthesis__MonoWaveTableSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, PresetName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_19OH, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, LockKeyframesToGrid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTableResolution, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_N1MY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, WaveTable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMonoWaveTableSynthPreset, UnknownData_K9IA, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMonoWaveTableSynthPreset, 0x0178);
		}

		// class Uspiesfromtheshadows : public Uperk
		TEST_METHOD(Class__DBDCompetence__spiesfromtheshadows)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uspiesfromtheshadows, _cooldownDurationSecs, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uspiesfromtheshadows, UnknownData_399C, 0x034C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uspiesfromtheshadows, 0x0350);
		}

		// class USynthComponentMonoWaveTable : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthComponentMonoWaveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnTableAltered, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, OnNumTablesChanged, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, CurrentPreset, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthComponentMonoWaveTable, UnknownData_SDQV, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthComponentMonoWaveTable, 0x0E30);
		}

		// class USpineChillPerk : public Uperk
		TEST_METHOD(Class__DBDCompetence__SpineChillPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpineChillPerk, _actionSpeed, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpineChillPerk, UnknownData_T0JV, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpineChillPerk, 0x0358);
		}

		// class USprintBurst : public Uperk
		TEST_METHOD(Class__DBDCompetence__SprintBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USprintBurst, _exhaustionDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USprintBurst, _sprintDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USprintBurst, _exhaustedEffect, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USprintBurst, UnknownData_L86H, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USprintBurst, 0x0368);
		}

		// class UStatsSystemUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDCompetence__StatsSystemUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatsSystemUtilities, 0x0030);
		}

		// class UStatusEffectOriginatorSubjectProvider : public UModifierSubjectProvider
		TEST_METHOD(Class__DBDCompetence__StatusEffectOriginatorSubjectProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStatusEffectOriginatorSubjectProvider, 0x0048);
		}

		// class USurge : public Uperk
		TEST_METHOD(Class__DBDCompetence__Surge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurge, _zoneRadius, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurge, _instantRegression, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurge, _coolDownDuration, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurge, _hasCooldown, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurge, _useTerrorRadiusInsteadOfFixedDistance, 0x036D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurge, UnknownData_09U8, 0x036E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurge, 0x0388);
		}

		// class UTestAnyActorPairQueryRangeIsTrue : public UAnyActorPairQueryRangeIsTrue
		TEST_METHOD(Class__DBDCompetence__TestAnyActorPairQueryRangeIsTrue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestAnyActorPairQueryRangeIsTrue, _actorPairQueryEvaluatorComponent, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestAnyActorPairQueryRangeIsTrue, 0x0108);
		}

		// class UTestCollectable : public Ucollectable
		TEST_METHOD(Class__DBDCompetence__TestCollectable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestCollectable, 0x0420);
		}

		// class UTestDBDGameState : public UDBDGameState
		TEST_METHOD(Class__DBDCompetence__TestDBDGameState)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestDBDGameState, 0x0768);
		}

		// class UTestStatusEffect : public UstatusEffect
		TEST_METHOD(Class__DBDCompetence__TestStatusEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestStatusEffect, 0x02A8);
		}

		// class USynthSamplePlayer : public USynthComponent
		TEST_METHOD(Class__Synthesis__SynthSamplePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, SoundWave, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSampleLoaded, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, OnSamplePlaybackProgress, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthSamplePlayer, UnknownData_4C7A, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthSamplePlayer, 0x0820);
		}

		// class UTheMettleOfMan : public Uperk
		TEST_METHOD(Class__DBDCompetence__TheMettleOfMan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, _tokenNeededToActivate, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, _revealOutsideRange, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, _mustBeInjured, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, UnknownData_ZBU1, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, _numTokenSoFar, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, _currentPhase, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, UnknownData_84ZU, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheMettleOfMan, _revealToKillerEffect, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheMettleOfMan, 0x0380);
		}

		// class UThrillingTremors : public Uperk
		TEST_METHOD(Class__DBDCompetence__ThrillingTremors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, _cooldownByLevel, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, _durationByLevel, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, _disableWhenSurvivorPutDownOrUnhooked, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, UnknownData_7NTP, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, _generatorAuraColorForKiller, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, UnknownData_SQ83, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, _blockedGenerators, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, _revealedGenerators, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrillingTremors, UnknownData_0337, 0x0398);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrillingTremors, 0x03A8);
		}

		// class USynthKnob : public UWidget
		TEST_METHOD(Class__Synthesis__SynthKnob)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Value, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, StepSize, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseSpeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, MouseFineTuneSpeed, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_PFTD, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, parameterName, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ParameterUnits, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, ValueDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_BFOL, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_0SXP, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, WidgetStyle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, Locked, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, IsFocusable, 0x03E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_I4N6, 0x03E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureBegin, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnMouseCaptureEnd, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureBegin, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnControllerCaptureEnd, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, OnValueChanged, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::USynthKnob, UnknownData_9ZF5, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USynthKnob, 0x0448);
		}

		// class UTimedObliviousEffect : public UObliviousEffect
		TEST_METHOD(Class__DBDCompetence__TimedObliviousEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimedObliviousEffect, 0x02A8);
		}

		// class UWeddingRing : public UItemAddon
		TEST_METHOD(Class__DBDCompetence__WeddingRing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWeddingRing, UnknownData_YS4J, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWeddingRing, 0x0220);
		}

		// class UYamaokaFamilyCrest : public UItemAddon
		TEST_METHOD(Class__DBDCompetence__YamaokaFamilyCrest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UYamaokaFamilyCrest, _revealDuration, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYamaokaFamilyCrest, _revealRange, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYamaokaFamilyCrest, _survivorsToReveal, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYamaokaFamilyCrest, _addonActivationCount, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UYamaokaFamilyCrest, UnknownData_J36O, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UYamaokaFamilyCrest, 0x0250);
		}

		// class UZanshinTactics : public Uperk
		TEST_METHOD(Class__DBDCompetence__ZanshinTactics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UZanshinTactics, _coolDownDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UZanshinTactics, UnknownData_6QRL, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UZanshinTactics, 0x0358);
		}

		// class UClothConfigCommon : public UClothConfigBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothConfigCommon, 0x0030);
		}

		// class UClothSharedConfigCommon : public UClothConfigCommon
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothSharedConfigCommon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothSharedConfigCommon, 0x0030);
		}

		// class UClothingAssetCustomData : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCustomData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCustomData, 0x0030);
		}

		// class UClothingAssetCommon : public UClothingAssetBase
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothingAssetCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, PhysicsAsset, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfigs, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSharedSimConfig, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothSimConfig, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ChaosClothSimConfig, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothLodData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, LodMap, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneNames, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UsedBoneIndices, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ReferenceBoneIndex, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_2HB6, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, CustomData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, ClothConfig, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothingAssetCommon, UnknownData_I1L5, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothingAssetCommon, 0x01F8);
		}

		// class UAB_K22_backpack_ACC01_REF_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_K22_backpack_ACC01_REF__AB_K22_backpack_ACC01_REF_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_SaveCachedPose, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_TransitionResult_2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_TransitionResult, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, UnknownData_9X2L, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_30, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_29, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_28, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_27, 0x1220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_26, 0x1680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_25, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_24, 0x1F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_23, 0x23A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_22, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_21, 0x2C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_20, 0x30C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_19, 0x3520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_18, 0x3980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_17, 0x3DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_16, 0x4240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace_2, 0x46A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace_2, 0x46C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_UseCachedPose_3, 0x46E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_StateResult_3, 0x4710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, UnknownData_540D, 0x4748);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_15, 0x4750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_14, 0x4BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_13, 0x5010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_12, 0x5470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_11, 0x58D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_10, 0x5D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_9, 0x6190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_8, 0x65F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_7, 0x6A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_6, 0x6EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_5, 0x7310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_4, 0x7770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_3, 0x7BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics_2, 0x8030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_AnimDynamics, 0x8490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace, 0x88F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace, 0x8910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_UseCachedPose_2, 0x8930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_StateResult_2, 0x8960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_UseCachedPose, 0x8998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_StateResult, 0x89C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, AnimGraphNode_StateMachine, 0x8A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, Initialized, 0x8AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, UnknownData_6QLE, 0x8AB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, OwningCharacterSkeletalMesh, 0x8AB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_backpack_ACC01_REF_C, InMenu, 0x8AC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_K22_backpack_ACC01_REF_C, 0x8AC1);
		}

		// class UClothLODDataCommon_Legacy : public UObject
		TEST_METHOD(Class__ClothingSystemRuntimeCommon__ClothLODDataCommon_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, PhysicalMeshData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, ClothPhysicalMeshData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, CollisionData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClothLODDataCommon_Legacy, UnknownData_ZM01, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClothLODDataCommon_Legacy, 0x0190);
		}

		// class UAccessKeys : public UObject
		TEST_METHOD(Class__S3Command__AccessKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAccessKeys, AccessKeys, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAccessKeys, 0x0040);
		}

		// class UBP_S24_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_S24_Hair_ACC01__BP_S24_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S24_Hair_ACC01_C, 0x02B8);
		}

		// class UCannibalAnalyticsComponent : public UChainsawAnalyticsBaseComponent
		TEST_METHOD(Class__TheCannibal__CannibalAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalAnalyticsComponent, UnknownData_V1V2, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalAnalyticsComponent, 0x0120);
		}

		// class UCannibalChainsawAttack : public UHillbillyChainsawAttack
		TEST_METHOD(Class__TheCannibal__CannibalChainsawAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttack, UnknownData_A5RG, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttack, _isInTantrum, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttack, UnknownData_P7V1, 0x0388);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawAttack, 0x03B0);
		}

		// class UCannibalChainsawAttackOpenSubstate : public UHillbillyChainsawAttackOpenSubstate
		TEST_METHOD(Class__TheCannibal__CannibalChainsawAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttackOpenSubstate, UnknownData_T3MQ, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawAttackOpenSubstate, 0x0140);
		}

		// class UCannibalChainsawAttackHittingSubstate : public UHillbillyChainsawAttackHittingSubstate
		TEST_METHOD(Class__TheCannibal__CannibalChainsawAttackHittingSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawAttackHittingSubstate, 0x0120);
		}

		// class UCannibalChainsawAttackSuccessSubstate : public UHillbillyChainsawAttackSuccessSubstate
		TEST_METHOD(Class__TheCannibal__CannibalChainsawAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawAttackSuccessSubstate, 0x00D8);
		}

		// class UCannibalChainsawAttackMissSubstate : public UHillbillyChainsawAttackMissSubstate
		TEST_METHOD(Class__TheCannibal__CannibalChainsawAttackMissSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttackMissSubstate, UnknownData_2ZLW, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawAttackMissSubstate, 0x00F0);
		}

		// class UCannibalChainsawAttackObstructSubstate : public UHillbillyChainsawAttackObstructSubstate
		TEST_METHOD(Class__TheCannibal__CannibalChainsawAttackObstructSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttackObstructSubstate, _isInTantrum, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawAttackObstructSubstate, UnknownData_UTY7, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawAttackObstructSubstate, 0x0140);
		}

		// class UCannibalChainsawHitEventAddon : public UOnEventBaseAddon
		TEST_METHOD(Class__TheCannibal__CannibalChainsawHitEventAddon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawHitEventAddon, 0x0228);
		}

		// class UCannibalChainsawPowerComponent : public UactorComponent
		TEST_METHOD(Class__TheCannibal__CannibalChainsawPowerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, UnknownData_EFBY, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawPowerCharge, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawPowerDischarge, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumPowerCharge, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, UnknownData_XG1W, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _isInTantrum, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _numPowerCharges, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _numPowerChargesConsumed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, UnknownData_HAU8, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawDashDuration, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawPowerMaxCharge, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawChargeRate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawMaxNumberOfCharges, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawCooldownIncreaseRate, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawCooldownDuration, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _chainsawMaxCooldownDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumChargeRate, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumDischargeRate, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumMaxCharge, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumDurationIncreaseRate, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumDuration, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawPowerComponent, _tantrumMaxDuration, 0x0468);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawPowerComponent, 0x0490);
		}

		// class UCannibalChainsawRevInteraction : public UChainsawRevInteraction
		TEST_METHOD(Class__TheCannibal__CannibalChainsawRevInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalChainsawRevInteraction, UnknownData_CA20, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalChainsawRevInteraction, 0x0720);
		}

		// class UCannibalPowerPresentationItemProgressComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__TheCannibal__CannibalPowerPresentationItemProgressComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCannibalPowerPresentationItemProgressComponent, _cannibalPowerChainsawComponent, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCannibalPowerPresentationItemProgressComponent, 0x00C0);
		}

		// class UCarburetorTuningGuideAddon : public UOnEventBaseAddon
		TEST_METHOD(Class__TheCannibal__CarburetorTuningGuideAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCarburetorTuningGuideAddon, UnknownData_Z2CM, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCarburetorTuningGuideAddon, 0x0238);
		}

		// class UIridescentLeatherAddon : public UCannibalChainsawHitEventAddon
		TEST_METHOD(Class__TheCannibal__IridescentLeatherAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIridescentLeatherAddon, UnknownData_IA03, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIridescentLeatherAddon, 0x0238);
		}

		// class UShopLubricantAddon : public UOnEventBaseAddon
		TEST_METHOD(Class__TheCannibal__ShopLubricantAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopLubricantAddon, _auraBlockingDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShopLubricantAddon, _auraVisibleDistance, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShopLubricantAddon, 0x0230);
		}

		// class UGMAdaptiveShadowMapAtlas : public UObject
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapAtlas, UnknownData_WXPB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapAtlas, 0x00E0);
		}

		// class UGMAdaptiveShadowMapController : public UObject
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapController, UnknownData_3BR2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapController, _atlas, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapController, _shadowMapSourceList, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapController, _shadowMapSourceAttachedList, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapController, UnknownData_GLYO, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapController, 0x00C0);
		}

		// class UGMAdaptiveShadowMapControllerComponent : public USceneComponent
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, TileSize, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, TileCountX, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, TileCountY, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, GridSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, GeneratedTilesPerFrame, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, bSupportsDirectionalLights, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, bSupportsSpotLights, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, UnknownData_GIFW, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, CullShadowIfPixelSizeLessThan, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, bPreviewOnly, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, UnknownData_8L1X, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, _atlas, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, _controller, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, _shadowMapSources, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapControllerComponent, UnknownData_78XV, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapControllerComponent, 0x02B0);
		}

		// class UGMAdaptiveShadowMapSource : public UObject
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSource, UnknownData_UQ52, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapSource, 0x01A0);
		}

		// class UGMAdaptiveShadowMapSourceComponent : public USceneComponent
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, bUseAutoRadius, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, UnknownData_74WM, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, radius, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, DepthMin, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, DepthMax, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, Levels, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, PreGeneratedLevels, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, ForcedMeshLOD, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, UnknownData_OTRV, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, LightFunctionMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponent, UnknownData_R4V9, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapSourceComponent, 0x0240);
		}

		// class UGMAdaptiveShadowMapSourceComponentSpawner : public Uactor
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapSourceComponentSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, AdaptiveShadowMapMaterial, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, bCreateASMSourceComponentOnBeginPlay, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, bRemoveCastForCinematicOnlyFlagOnLights, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, bRemoveLightFunctionMaterialOnLights, 0x023A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, UnknownData_94RN, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, NumLevelPerSource, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, NumPreGeneratedLevelPerSource, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, bPreviewOnly, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceComponentSpawner, UnknownData_FZU1, 0x0245);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapSourceComponentSpawner, 0x0248);
		}

		// class UGMAdaptiveShadowMapSourceDirectional : public UGMAdaptiveShadowMapSource
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapSourceDirectional)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceDirectional, UnknownData_OSAW, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapSourceDirectional, 0x0200);
		}

		// class UGMAdaptiveShadowMapSourceSpot : public UGMAdaptiveShadowMapSource
		TEST_METHOD(Class__GraphicsExtensions__GMAdaptiveShadowMapSourceSpot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGMAdaptiveShadowMapSourceSpot, UnknownData_HP6G, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGMAdaptiveShadowMapSourceSpot, 0x0200);
		}

		// class USoundfieldEncodingSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEncodingSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEncodingSettingsBase, 0x0030);
		}

		// class UAudioEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__AudioEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioEndpointSettingsBase, 0x0030);
		}

		// class USpatializationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SpatializationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatializationPluginSourceSettingsBase, 0x0030);
		}

		// class USoundfieldEffectSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectSettingsBase, 0x0030);
		}

		// class USoundfieldEffectBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEffectBase, settings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEffectBase, 0x0038);
		}

		// class UOcclusionPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__OcclusionPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOcclusionPluginSourceSettingsBase, 0x0030);
		}

		// class USoundModulationPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundModulationPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundModulationPluginSourceSettingsBase, 0x0030);
		}

		// class UReverbPluginSourceSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__ReverbPluginSourceSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbPluginSourceSettingsBase, 0x0030);
		}

		// class USoundfieldEndpointSettingsBase : public UObject
		TEST_METHOD(Class__AudioExtensions__SoundfieldEndpointSettingsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSettingsBase, 0x0030);
		}

		// class UChainPlayerMovementStatusEffect : public UstatusEffect
		TEST_METHOD(Class__TheGunslinger__ChainPlayerMovementStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainPlayerMovementStatusEffect, _baseMovementSpeedMultiplier, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainPlayerMovementStatusEffect, _collisionMovementSpeedMultiplier, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainPlayerMovementStatusEffect, _chain, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainPlayerMovementStatusEffect, 0x0300);
		}

		// class UChainKillerMovementStatusEffect : public UChainPlayerMovementStatusEffect
		TEST_METHOD(Class__TheGunslinger__ChainKillerMovementStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainKillerMovementStatusEffect, _backwardMovementSpeedMultiplier, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainKillerMovementStatusEffect, _backwardMovementAngle, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainKillerMovementStatusEffect, UnknownData_EMUK, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainKillerMovementStatusEffect, 0x0368);
		}

		// class UChainLinkableComponent : public UactorComponent
		TEST_METHOD(Class__TheGunslinger__ChainLinkableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, UnknownData_827W, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _cameraTargetingStrategyClass, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _movementStatusEffectName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _linkedStatusEffectName, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _inputAccelerationStrategy, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _chainLink, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, UnknownData_A4I2, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _isLinkedLingering, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _movementStatusEffect, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, UnknownData_R4JK, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, _cameraStrategy, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainLinkableComponent, UnknownData_DCSJ, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainLinkableComponent, 0x0188);
		}

		// class UDeadMansSwitch : public Uperk
		TEST_METHOD(Class__TheGunslinger__DeadMansSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadMansSwitch, UnknownData_433C, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadMansSwitch, _activationDurationByLevels, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadMansSwitch, _anySurvivorLetGo, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadMansSwitch, UnknownData_B46H, 0x035D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadMansSwitch, _blockedGenerators, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeadMansSwitch, UnknownData_989U, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeadMansSwitch, 0x0380);
		}

		// class UFireHarpoonRifleInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheGunslinger__FireHarpoonRifleInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, OnFireHarpoon, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, OnHitPlayer, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, UnknownData_CKIA, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _harpoon, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _collector, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightDuration, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightZoom, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightMousePitchScaleMultiplier, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightMouseYawScaleMultiplier, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightGamepadPitchScaleMultiplier, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightGamepadYawScaleMultiplier, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightGamepadPitchCurve, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightGamepadYawCurve, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightRotationScaleAdjustmentTime, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _aimDownSightMovementSpeedMultiplier, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _fireDuration, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _fireRotationScaleMultiplier, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _fireRotationScaleAdjustmentTime, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _fireMovementSpeedMultiplier, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _longRangeShotMinDistance, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, UnknownData_C3HE, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _successMovementSpeedMultiplier, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _missMovementSpeedMultiplier, 0x0798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _missShotCooldownDuration, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _nearMissShotMaxDistance, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, _successShotDuration, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFireHarpoonRifleInteraction, UnknownData_60WB, 0x0850);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFireHarpoonRifleInteraction, 0x0940);
		}

		// class UForThePeople : public Uperk
		TEST_METHOD(Class__TheGunslinger__ForThePeople)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForThePeople, UnknownData_KXPH, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForThePeople, _brokenEffectDurations, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForThePeople, _secondaryActionProperties, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForThePeople, UnknownData_QGOJ, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForThePeople, 0x0398);
		}

		// class UGearhead : public Uperk
		TEST_METHOD(Class__TheGunslinger__Gearhead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _perkActivationDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _greatSkillCheck, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _basicAttack, 0x0355);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, UnknownData_SR1G, 0x0356);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _minimumAuraRevealDuration, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _attacksNeededToActivate, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _numAttacksBeforeActivation, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, UnknownData_EQTH, 0x0364);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _timersBeforeUnreveal, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _markedGenerators, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _revealedGenerators, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, _local_revealedGenerators, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGearhead, UnknownData_F4CN, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGearhead, 0x03F0);
		}

		// class UGunslingerAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheGunslinger__GunslingerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, UnknownData_R1O5, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _fireAnimPlayRate, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _missShotCooldownAnimPlayRate, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _successShotAnimPlayRate, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, UnknownData_Q35B, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _fireAnim, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _missShotCooldownAnim, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _successShotAnim, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _fireAnimDuration, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _missShotCooldownAnimDuration, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, _successShotAnimDuration, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerAnimInstance, UnknownData_1IY8, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunslingerAnimInstance, 0x06E0);
		}

		// class UGunslingerCameraTargetingStrategy : public UBaseCameraTargetingStrategy
		TEST_METHOD(Class__TheGunslinger__GunslingerCameraTargetingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerCameraTargetingStrategy, _cameraSocketName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerCameraTargetingStrategy, _survivorHarpoonSocketName, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunslingerCameraTargetingStrategy, 0x0068);
		}

		// class UGunslingerEffectsComponent : public UactorComponent
		TEST_METHOD(Class__TheGunslinger__GunslingerEffectsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerEffectsComponent, OnIsAimingChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerEffectsComponent, PlayOutOfAmmoSound, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerEffectsComponent, _minimumTimeBetweenBroadcast, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerEffectsComponent, UnknownData_HBTA, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerEffectsComponent, _rifle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGunslingerEffectsComponent, UnknownData_S4UX, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunslingerEffectsComponent, 0x0150);
		}

		// class UGunslingerUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TheGunslinger__GunslingerUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunslingerUtilities, 0x0030);
		}

		// class UHarpoonChainPositioner : public UactorComponent
		TEST_METHOD(Class__TheGunslinger__HarpoonChainPositioner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _harpoonPropClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _survivorAttachSocket, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _animationSocket, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _reelBackToRifleSpeed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _harpoonMinimumSnapBackDistance, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, UnknownData_B09O, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _harpoonProp, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _harpoonProjectile, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _collector, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, UnknownData_2SYB, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, _chain, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonChainPositioner, UnknownData_N5CQ, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonChainPositioner, 0x0140);
		}

		// class UHarpoonedSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheGunslinger__HarpoonedSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _linkedMaxSpeed, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _timeBeforeHarpoonHitReset, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _hitHarpoonedEnterEvent, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _chainBreakEnterEvent, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _isChainLinked, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _isBeingReeled, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _hasLinkInput, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, UnknownData_OQCG, 0x0513);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _linkInputX, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _linkInputY, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _chainBreakTrigger, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _triggerHarpoonHit, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, UnknownData_ZKRI, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _harpoonHitTurnAnimNormalizedStartTime, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _harpoonHitAnimTurnRight, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, _isCrawling, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonedSurvivorSubAnimInstance, UnknownData_59MT, 0x0526);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonedSurvivorSubAnimInstance, 0x0580);
		}

		// class UHarpoonLauncher : public UKillerProjectileLauncher
		TEST_METHOD(Class__TheGunslinger__HarpoonLauncher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonLauncher, _launchSpeed, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonLauncher, _launchDistanceFromCamera, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonLauncher, _launchZOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonLauncher, UnknownData_H1QC, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonLauncher, 0x01D8);
		}

		// class UHarpoonProjectile : public UKillerProjectile
		TEST_METHOD(Class__TheGunslinger__HarpoonProjectile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, UnknownData_7NNX, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, _launchDistanceFromCamera, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, _movement, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, _environmentCollider, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, _targetCollider, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, _skeletalMesh, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, _poolableActorComponent, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectile, UnknownData_N9F2, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonProjectile, 0x03C0);
		}

		// class UHarpoonProjectileMovementComponent : public UPhysicsBasedProjectileMovementComponent
		TEST_METHOD(Class__TheGunslinger__HarpoonProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectileMovementComponent, UnknownData_DAED, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectileMovementComponent, _maxTravelDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProjectileMovementComponent, UnknownData_519F, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonProjectileMovementComponent, 0x02A0);
		}

		// class UHarpoonProp : public Uactor
		TEST_METHOD(Class__TheGunslinger__HarpoonProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProp, UnknownData_AFJY, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonProp, _skeletalMesh, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonProp, 0x0240);
		}

		// class UHarpoonProviderComponent : public USingleProjectileProviderComponent
		TEST_METHOD(Class__TheGunslinger__HarpoonProviderComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonProviderComponent, 0x00E8);
		}

		// class UHarpoonRifle : public Ucollectable
		TEST_METHOD(Class__TheGunslinger__HarpoonRifle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, UnknownData_NBZG, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _survivorLinkableClass, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _killerLinkableClass, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _chainClass, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _rifleMuzzleSocket, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _rifleHarpoonLoadingSocket, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _crowActiveRange, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _launcher, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _harpoonProvider, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _chain, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _chainTensionComponent, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _chainTensionChargeable, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _playerLinker, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _harpoonChainPositioner, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _fireInteraction, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, _crowsActivatorComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifle, UnknownData_HUW7, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonRifle, 0x04E0);
		}

		// class UHarpoonRifleAnimInstance : public UanimInstance
		TEST_METHOD(Class__TheGunslinger__HarpoonRifleAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifleAnimInstance, _chain, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifleAnimInstance, _chainUnwindingSpeed, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHarpoonRifleAnimInstance, UnknownData_APY4, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHarpoonRifleAnimInstance, 0x0280);
		}

		// class UHellshireIronAddon : public UItemAddon
		TEST_METHOD(Class__TheGunslinger__HellshireIronAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHellshireIronAddon, _useTimedDuration, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHellshireIronAddon, UnknownData_KUUG, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHellshireIronAddon, _revealDuration, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHellshireIronAddon, UnknownData_VW8K, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHellshireIronAddon, 0x0228);
		}

		// class UHexRetribution : public UHexPerk
		TEST_METHOD(Class__TheGunslinger__HexRetribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexRetribution, _obliviousDurationByLevels, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexRetribution, _auraRevealDuration, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexRetribution, _obliviousEffects, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexRetribution, 0x03C8);
		}

		// class UHoneyLocustThornsAddon : public UItemAddon
		TEST_METHOD(Class__TheGunslinger__HoneyLocustThornsAddon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoneyLocustThornsAddon, 0x0218);
		}

		// class UGunslingerHarpoon : public UInterface
		TEST_METHOD(Class__TheGunslinger__GunslingerHarpoon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGunslingerHarpoon, 0x0030);
		}

		// class UIridescentCoinAddon : public UItemAddon
		TEST_METHOD(Class__TheGunslinger__IridescentCoinAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIridescentCoinAddon, _exposedStatusEffect, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIridescentCoinAddon, UnknownData_RUX4, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIridescentCoinAddon, 0x0248);
		}

		// class UKillerChainLinkableComponent : public UChainLinkableComponent
		TEST_METHOD(Class__TheGunslinger__KillerChainLinkableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerChainLinkableComponent, UnknownData_LOSZ, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerChainLinkableComponent, 0x0198);
		}

		// class UPlayerReelInputAccelerationConstraintStrategy : public UBaseInputAccelerationConstraintStrategy
		TEST_METHOD(Class__TheGunslinger__PlayerReelInputAccelerationConstraintStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerReelInputAccelerationConstraintStrategy, UnknownData_2Y3O, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerReelInputAccelerationConstraintStrategy, 0x00E8);
		}

		// class UPrisonChainAddon : public UItemAddon
		TEST_METHOD(Class__TheGunslinger__PrisonChainAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonChainAddon, _maxTensionCharge, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonChainAddon, _tensionChargeModifier, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrisonChainAddon, UnknownData_V6K1, 0x0244);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrisonChainAddon, 0x0248);
		}

		// class URedHerring : public Uperk
		TEST_METHOD(Class__TheGunslinger__RedHerring)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URedHerring, UnknownData_CYDF, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::URedHerring, _markedGenerator, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URedHerring, _secondsToActivatePerk, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URedHerring, _loudNoiseTriggeredNotifyTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URedHerring, _cooldownLevels, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URedHerring, UnknownData_DEOH, 0x03C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URedHerring, 0x03E8);
		}

		// class UReelChainInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheGunslinger__ReelChainInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReelChainInteraction, _frontMovementAngle, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReelChainInteraction, UnknownData_ON7R, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReelChainInteraction, _minimumFrontVelocity, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReelChainInteraction, UnknownData_4KWX, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReelChainInteraction, _linkedPlayer, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReelChainInteraction, UnknownData_CKHI, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReelChainInteraction, 0x0540);
		}

		// class UReloadHarpoonRifleInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheGunslinger__ReloadHarpoonRifleInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadHarpoonRifleInteraction, _reloadTime, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadHarpoonRifleInteraction, _movementSpeedMultiplier, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadHarpoonRifleInteraction, _rotationScaleMultiplier, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadHarpoonRifleInteraction, _rotationScaleAdjustmentTime, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadHarpoonRifleInteraction, UnknownData_62AM, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReloadHarpoonRifleInteraction, 0x06E0);
		}

		// class URifleChain : public Uactor
		TEST_METHOD(Class__TheGunslinger__RifleChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, OnProjectileSet, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, OnIsCollidingChanged, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _chainCenterAkComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _collisionLoopStartEvent, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _collisionLoopEndEvent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _collisionSoundLoops, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _sphereTraceRadius, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _timeBetweenTrace, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, _harpoon, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChain, UnknownData_YSTN, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URifleChain, 0x0418);
		}

		// class URifleChainTensionComponent : public UactorComponent
		TEST_METHOD(Class__TheGunslinger__RifleChainTensionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_5YBX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, OnIsBuildingTensionChanged, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_5IPL, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _isBuildingTension, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_YVHT, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _targetlinkable, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_V3AQ, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _maxTensionCharge, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _baseTensionRate, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _collisionTensionRate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _survivorPullingTensionRate, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _currentTensionRate, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _progressModifierForSurvivors, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_PNUQ, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _chargeProgressDescriptionText, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_KR8B, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, _chain, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URifleChainTensionComponent, UnknownData_VJ9M, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URifleChainTensionComponent, 0x0220);
		}

		// class URiflePlayerLinker : public UactorComponent
		TEST_METHOD(Class__TheGunslinger__RiflePlayerLinker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, OnLinkedPlayerSet, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _linkedPlayer, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _linkedPlayerDuringAttack, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _linkOwner, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _desiredLinkLength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, UnknownData_S95F, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _elasticLength, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _minimumLinkLength, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _breakFreeCloseRangeMaxDistance, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, UnknownData_UI7N, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _movementLinkReductionThreshold, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, _movementAccelerationTreshold, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URiflePlayerLinker, UnknownData_CA5I, 0x01A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URiflePlayerLinker, 0x0210);
		}

		// class URustedSpikeAddon : public UItemAddon
		TEST_METHOD(Class__TheGunslinger__RustedSpikeAddon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URustedSpikeAddon, 0x0218);
		}

		// class USurvivorChainLinkableComponent : public UChainLinkableComponent
		TEST_METHOD(Class__TheGunslinger__SurvivorChainLinkableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _pullbackAngle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, UnknownData_FNWD, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _immobilizationDuration, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _linkableInteractionTags, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _cancelableInteractionTags, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _velocityAdditiveStrategyClass, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _immobilizationEffectName, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, UnknownData_666A, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _linkedMoveInput, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, UnknownData_D7P6, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _immobilizationEffect, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, _velocityAdditiveStrategy, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorChainLinkableComponent, UnknownData_UA0Z, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorChainLinkableComponent, 0x0268);
		}

		// class UUITween : public UObject
		TEST_METHOD(Class__UITween__UITween)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUITween, 0x0030);
		}

		// class USurvivorReelVelocityAdditiveStrategy : public UBaseCharacterVelocityAdditiveStrategy
		TEST_METHOD(Class__TheGunslinger__SurvivorReelVelocityAdditiveStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorReelVelocityAdditiveStrategy, _reelSpeed, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorReelVelocityAdditiveStrategy, _minimumLinkLengthDelta, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorReelVelocityAdditiveStrategy, _maximumVelocityAdditive, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorReelVelocityAdditiveStrategy, _isBeingReeled, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorReelVelocityAdditiveStrategy, _isBeingPulled, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorReelVelocityAdditiveStrategy, UnknownData_TRPD, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorReelVelocityAdditiveStrategy, 0x0190);
		}

		// class UTestDBDGameInstance : public UDBDGameInstance
		TEST_METHOD(Class__TheGunslinger__TestDBDGameInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestDBDGameInstance, 0x0988);
		}

		// class UOffTheRecord : public Uperk
		TEST_METHOD(Class__TheGunslinger__OffTheRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffTheRecord, _activationDurationLevels, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOffTheRecord, UnknownData_7ZTW, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOffTheRecord, 0x0358);
		}

		// class UTestOffTheRecord : public UOffTheRecord
		TEST_METHOD(Class__TheGunslinger__TestOffTheRecord)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestOffTheRecord, 0x0358);
		}

		// class UTestRedHerring : public URedHerring
		TEST_METHOD(Class__TheGunslinger__TestRedHerring)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestRedHerring, 0x03E8);
		}

		// class UFontBulkData : public UObject
		TEST_METHOD(Class__SlateCore__FontBulkData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontBulkData, UnknownData_865H, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontBulkData, 0x0080);
		}

		// class UFontFaceInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontFaceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFaceInterface, 0x0030);
		}

		// class UFontProviderInterface : public UInterface
		TEST_METHOD(Class__SlateCore__FontProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontProviderInterface, 0x0030);
		}

		// class USlateTypes : public UObject
		TEST_METHOD(Class__SlateCore__SlateTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTypes, 0x0030);
		}

		// class USlateWidgetStyleAsset : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleAsset, CustomStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleAsset, 0x0038);
		}

		// class USlateWidgetStyleContainerBase : public UObject
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateWidgetStyleContainerBase, UnknownData_D597, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerBase, 0x0038);
		}

		// class USlateWidgetStyleContainerInterface : public UInterface
		TEST_METHOD(Class__SlateCore__SlateWidgetStyleContainerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateWidgetStyleContainerInterface, 0x0030);
		}

		// class UNiagaraDataInterfaceChaosDestruction : public UNiagaraDataInterface
		TEST_METHOD(Class__ChaosNiagara__NiagaraDataInterfaceChaosDestruction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosSolverActorSet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSourceType, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_KD5D, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataProcessFrequency, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxNumberOfDataEntriesToSpawn, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpawn, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_QRKV, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnMultiplierMinMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpawnChance, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ImpulseToSpawnMinMax, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpeedToSpawnMinMax, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MassToSpawnMinMax, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMinToSpawnMinMax, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ExtentMaxToSpawnMinMax, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VolumeToSpawnMinMax, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTimeToSpawnMinMax, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SurfaceTypeToSpawn, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationFilteringMode, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawn, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_BPX5, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationXToSpawnMinMax, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawn, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_02GR, 0x00ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationYToSpawnMinMax, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawn, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_M1LY, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LocationZToSpawnMinMax, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DataSortingType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalCollisionData, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DoSpatialHash, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_7M71, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMin, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeMax, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpatialHashVolumeCellSize, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxDataPerCell, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bApplyMaterialsFilter, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_LRO9, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, ChaosBreakingMaterialSet, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalBreakingData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, bGetExternalTrailingData, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_8VWF, 0x018A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomPositionMagnitudeMinMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, InheritedVelocityMultiplier, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityGenerationType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_TW3H, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, RandomVelocityMagnitudeMinMax, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SpreadAngleMax, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMin, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, VelocityOffsetMax, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, FinalVelocityMagnitudeMinMax, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, MaxLatency, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, DebugType, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_6J0R, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnedPointID, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, LastSpawnTime, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_G7EL, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, SolverTime, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, TimeStampOfLastProcessedData, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceChaosDestruction, UnknownData_I6OR, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceChaosDestruction, 0x0238);
		}

		// class UControlPointMeshActor : public Uactor
		TEST_METHOD(Class__Landscape__ControlPointMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshActor, ControlPointMeshComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshActor, 0x0238);
		}

		// class UControlPointMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__ControlPointMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlPointMeshComponent, UnknownData_D3SB, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlPointMeshComponent, 0x04F0);
		}

		// class ULandscapeProxy : public Uactor
		TEST_METHOD(Class__Landscape__LandscapeProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, splineComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LandscapeGuid, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LandscapeSectionOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, MaxLODLevel, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LODDistanceFactor, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LODFalloff, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_8LG5, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, ComponentScreenSizeToUseSubSections, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LOD0ScreenSize, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LOD0DistributionSetting, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LODDistributionSetting, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, TessellationComponentScreenSize, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UseTessellationComponentScreenSizeFalloff, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_WZ64, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, TessellationComponentScreenSizeFalloff, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, OccluderGeometryLOD, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, StaticLightingLOD, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, DefaultPhysMaterial, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, StreamingDistanceMultiplier, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_Q5CP, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LandscapeMaterial, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_M0B2, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LandscapeHoleMaterial, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LandscapeMaterialsOverride, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, bMeshHoles, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, MeshHolesMaxLod, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_S8KM, 0x02D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, RuntimeVirtualTextures, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, VirtualTextureNumLods, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, VirtualTextureLodBias, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, VirtualTextureRenderPassType, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_A0BK, 0x02F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, NegativeZBoundsExtension, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, PositiveZBoundsExtension, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_ZGXK, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LandscapeComponents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, CollisionComponents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, FoliageComponents, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_3Q9Q, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, bHasLandscapeGrass, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_XGFK, 0x0395);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, StaticLightingResolution, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_X0HG, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, lightingChannels, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_2SCB, 0x03A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_59QO, 0x03A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, CustomDepthStencilValue, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LDMaxDrawDistance, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, LightmassSettings, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, CollisionMipLevel, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, SimpleCollisionMipLevel, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, CollisionThickness, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_V3UV, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, BodyInstance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_WW46, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, ComponentSizeQuads, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, SubsectionSizeQuads, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, NumSubsections, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, UnknownData_7GKJ, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, bUseDynamicMaterialInstance, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, NavigationGeometryGatheringMode, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, bUseLandscapeForCullingInvisibleHLODVertices, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, bHasLayersContent, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeProxy, WeightmapUsageMap, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeProxy, 0x0558);
		}

		// class ULandscape : public ULandscapeProxy
		TEST_METHOD(Class__Landscape__Landscape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscape, 0x0558);
		}

		// class ULandscapeBlueprintBrushBase : public Uactor
		TEST_METHOD(Class__Landscape__LandscapeBlueprintBrushBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeBlueprintBrushBase, 0x0230);
		}

		// class ULandscapeComponent : public UprimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_GT00, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SectionBaseY, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ComponentSizeQuads, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SubsectionSizeQuads, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NumSubsections, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_QOA6, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideHoleMaterial, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, OverrideMaterials, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstances, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialInstancesDynamic, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODIndexToMaterialIndex, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MaterialIndexToDisabledTessellationMaterial, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, XYOffsetmapTexture, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_YSR6, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapScaleBias, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapSubsectionOffset, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_P78J, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapScaleBias, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CachedLocalBox, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionComponent, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, HeightmapTexture, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapLayerAllocations, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, WeightmapTextures, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MapBuildDataId, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, IrrelevantLights, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, CollisionMipLevel, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, SimpleCollisionMipLevel, 0x0564);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, NegativeZBoundsExtension, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, PositiveZBoundsExtension, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StaticLightingResolution, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, ForcedLOD, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, LODBias, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, StateId, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, BakedTextureMaterialGuid, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_LVD2, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, GIBakedBaseColorTexture, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileBlendableLayerMask, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_JID8, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterface, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileMaterialInterfaces, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, MobileWeightmapTextures, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeComponent, UnknownData_9F42, 0x05D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeComponent, 0x0620);
		}

		// class ULandscapeGizmoActor : public Uactor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoActor, 0x0230);
		}

		// class ULandscapeGizmoActiveActor : public ULandscapeGizmoActor
		TEST_METHOD(Class__Landscape__LandscapeGizmoActiveActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGizmoActiveActor, UnknownData_E98T, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoActiveActor, 0x0280);
		}

		// class ULandscapeGizmoRenderComponent : public UprimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeGizmoRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGizmoRenderComponent, UnknownData_7JH9, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGizmoRenderComponent, 0x0430);
		}

		// class ULandscapeGrassType : public UObject
		TEST_METHOD(Class__Landscape__LandscapeGrassType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassVarieties, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_U1UQ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassMesh, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, GrassDensity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, PlacementJitter, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, StartCullDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, EndCullDistance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, RandomRotation, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, AlignToSurface, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeGrassType, UnknownData_R7KA, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeGrassType, 0x0068);
		}

		// class ULandscapeHeightfieldCollisionComponent : public UprimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeHeightfieldCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, ComponentLayerInfos, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseX, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SectionBaseY, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionSizeQuads, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, SimpleCollisionSizeQuads, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_W0YL, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CollisionQuadFlags, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, HeightfieldGuid, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CachedLocalBox, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, RenderComponent, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_CZ1W, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, CookedPhysicalMaterials, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeHeightfieldCollisionComponent, UnknownData_GHF9, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeHeightfieldCollisionComponent, 0x0508);
		}

		// class ULandscapeInfo : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeActor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, LandscapeGuid, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentSizeQuads, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, SubsectionSizeQuads, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, ComponentNumSubsections, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, DrawScale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_S8CP, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, Proxies, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfo, UnknownData_BJ6K, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfo, 0x0218);
		}

		// class ULandscapeInfoMap : public UObject
		TEST_METHOD(Class__Landscape__LandscapeInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeInfoMap, UnknownData_331X, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeInfoMap, 0x0088);
		}

		// class ULandscapeLayerInfoObject : public UObject
		TEST_METHOD(Class__Landscape__LandscapeLayerInfoObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_I5T1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, PhysMaterial, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, Hardness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, LayerUsageDebugColor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeLayerInfoObject, UnknownData_0BSE, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeLayerInfoObject, 0x0060);
		}

		// class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
		TEST_METHOD(Class__Landscape__LandscapeMaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, TextureStreamingInfo, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMaterialInstanceConstant, UnknownData_MKBA, 0x0429);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMaterialInstanceConstant, 0x0430);
		}

		// class ULandscapeMeshCollisionComponent : public ULandscapeHeightfieldCollisionComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshCollisionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, MeshGuid, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshCollisionComponent, UnknownData_08AO, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshCollisionComponent, 0x0520);
		}

		// class ULandscapeMeshProxyActor : public Uactor
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyActor, LandscapeMeshProxyComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyActor, 0x0238);
		}

		// class ULandscapeMeshProxyComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Landscape__LandscapeMeshProxyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, LandscapeGuid, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyComponentBases, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, ProxyLOD, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeMeshProxyComponent, UnknownData_W797, 0x0509);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeMeshProxyComponent, 0x0510);
		}

		// class ULandscapeSettings : public UDeveloperSettings
		TEST_METHOD(Class__Landscape__LandscapeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, MaxNumberOfLayers, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSettings, UnknownData_LXI2, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSettings, 0x0050);
		}

		// class ULandscapeSplinesComponent : public UprimitiveComponent
		TEST_METHOD(Class__Landscape__LandscapeSplinesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, ControlPoints, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, Segments, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, CookedForeignMeshComponents, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplinesComponent, UnknownData_USZN, 0x0458);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplinesComponent, 0x0460);
		}

		// class ULandscapeSplineControlPoint : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Width, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LayerWidthRatio, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, SideFalloff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideFalloffFactor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideFalloffFactor, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LeftSideLayerFalloffFactor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, RightSideLayerFalloffFactor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, EndFalloff, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, ConnectedSegments, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, points, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, Bounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, UnknownData_7Y5B, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineControlPoint, LocalMeshComponent, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineControlPoint, 0x00B0);
		}

		// class ULandscapeSplineSegment : public UObject
		TEST_METHOD(Class__Landscape__LandscapeSplineSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Connections, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, SplineInfo, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, points, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, Bounds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, UnknownData_9W93, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSplineSegment, LocalMeshComponents, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSplineSegment, 0x00B8);
		}

		// class ULandscapeStreamingProxy : public ULandscapeProxy
		TEST_METHOD(Class__Landscape__LandscapeStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeStreamingProxy, LandscapeActor, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeStreamingProxy, UnknownData_CK10, 0x0574);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeStreamingProxy, 0x0578);
		}

		// class ULandscapeSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Landscape__LandscapeSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeSubsystem, UnknownData_O7YD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeSubsystem, 0x00A0);
		}

		// class ULandscapeWeightmapUsage : public UObject
		TEST_METHOD(Class__Landscape__LandscapeWeightmapUsage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, ChannelUsage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULandscapeWeightmapUsage, LayerGuid, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULandscapeWeightmapUsage, 0x0060);
		}

		// class UMaterialExpressionLandscapeGrassOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeGrassOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeGrassOutput, GrassTypes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeGrassOutput, 0x0058);
		}

		// class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, Layers, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerBlend, ExpressionGUID, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerBlend, 0x0068);
		}

		// class UMaterialExpressionLandscapeLayerCoords : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerCoords)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, CustomUVType, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_XCW1, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingRotation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, MappingPanV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerCoords, UnknownData_2CRD, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerCoords, 0x0060);
		}

		// class UMaterialExpressionLandscapeLayerSample : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, parameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, PreviewWeight, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSample, ExpressionGUID, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSample, 0x0068);
		}

		// class UMaterialExpressionLandscapeLayerSwitch : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerUsed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_HBX9, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, LayerNotUsed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_NKOM, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, parameterName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, UnknownData_KUX9, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerSwitch, ExpressionGUID, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerSwitch, 0x00A0);
		}

		// class UMaterialExpressionLandscapeLayerWeight : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeLayerWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_U8GA, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, Layer, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_YMVS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, parameterName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, PreviewWeight, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ConstBase, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, ExpressionGUID, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeLayerWeight, UnknownData_XIO2, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeLayerWeight, 0x00B0);
		}

		// class UMaterialExpressionLandscapeVisibilityMask : public UMaterialExpression
		TEST_METHOD(Class__Landscape__MaterialExpressionLandscapeVisibilityMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLandscapeVisibilityMask, ExpressionGUID, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLandscapeVisibilityMask, 0x0058);
		}

		// class UDmgTypeBP_Environmental_C : public UDamageType
		TEST_METHOD(BlueprintGeneratedClass__DmgTypeBP_Environmental__DmgTypeBP_Environmental_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDmgTypeBP_Environmental_C, 0x0048);
		}

		// class UMediaSource : public UObject
		TEST_METHOD(Class__MediaAssets__MediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSource, UnknownData_7MB0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSource, 0x0088);
		}

		// class UBaseMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__BaseMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, playerName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseMediaSource, UnknownData_AYO8, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMediaSource, 0x0098);
		}

		// class UFileMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__FileMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, FilePath, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, PrecacheFile, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaSource, UnknownData_88NB, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaSource, 0x00C0);
		}

		// class UMediaBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MediaAssets__MediaBlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaBlueprintFunctionLibrary, 0x0030);
		}

		// class UARSessionConfig : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateMeshDataFromTrackedGeometry, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateCollisionForMeshData, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bGenerateNavMeshForMeshData, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUseMeshDataForOcclusion, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bRenderMeshDataInWireframe, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bTrackSceneObjects, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bUsePersonSegmentationForOcclusion, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldAlignment, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SessionType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, PlaneDetectionMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bHorizontalPlaneDetection, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bVerticalPlaneDetection, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutoFocus, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, LightEstimationMode, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FrameSyncMode, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraOverlay, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bEnableAutomaticCameraTracking, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetCameraTracking, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, bResetTrackedObjects, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_CESN, 0x004B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateImages, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, MaxNumSimultaneousImagesTracked, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnvironmentCaptureProbeType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_CIFR, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, WorldMapData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, CandidateObjects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, DesiredVideoFormat, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingDirection, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, FaceTrackingUpdate, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_SP83, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, SerializedARCandidateImageDatabase, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, EnabledSessionTrackingFeature, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSessionConfig, UnknownData_6UBB, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSessionConfig, 0x00B0);
		}

		// class UMediaComponent : public UactorComponent
		TEST_METHOD(Class__MediaAssets__MediaComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaTexture, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaComponent, MediaPlayer, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaComponent, 0x00C8);
		}

		// class UMediaPlayer : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnEndReached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaClosed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpened, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnMediaOpenFailed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackResumed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnPlaybackSuspended, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnSeekCompleted, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, OnTracksChanged, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheAhead, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehind, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, CacheBehindGame, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, NativeAudioOut, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayOnOpen, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_2DC5, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_FH2Y, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, Playlist, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlaylistIndex, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_TA3S, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, TimeDelay, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, HorizontalFieldOfView, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, VerticalFieldOfView, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, viewRotation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_KVMX, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, PlayerGuid, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlayer, UnknownData_4J8P, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlayer, 0x0140);
		}

		// class UARLightEstimate : public UObject
		TEST_METHOD(Class__AugmentedReality__ARLightEstimate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARLightEstimate, 0x0030);
		}

		// class UARBasicLightEstimate : public UARLightEstimate
		TEST_METHOD(Class__AugmentedReality__ARBasicLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientIntensityLumens, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColorTemperatureKelvin, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBasicLightEstimate, AmbientColor, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBasicLightEstimate, 0x0048);
		}

		// class UARCandidateImage : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, CandidateTexture, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, FriendlyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Width, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Height, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, Orientation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateImage, UnknownData_P5WA, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateImage, 0x0060);
		}

		// class UARBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBlueprintLibrary, 0x0030);
		}

		// class UMediaPlaylist : public UObject
		TEST_METHOD(Class__MediaAssets__MediaPlaylist)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaPlaylist, Items, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaPlaylist, 0x0040);
		}

		// class UMediaSoundComponent : public USynthComponent
		TEST_METHOD(Class__MediaAssets__MediaSoundComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, Channels, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_MR3H, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, DynamicRateAdjustment, 0x06F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_MS80, 0x06F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentFactor, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, RateAdjustmentRange, 0x06FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_IHQL, 0x070C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, MediaPlayer, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaSoundComponent, UnknownData_B9CO, 0x0718);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaSoundComponent, 0x08F0);
		}

		// class UARTraceResultLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AugmentedReality__ARTraceResultLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultLibrary, 0x0030);
		}

		// class UARBaseAsyncTaskBlueprintProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__AugmentedReality__ARBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARBaseAsyncTaskBlueprintProxy, UnknownData_2C02, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARBaseAsyncTaskBlueprintProxy, 0x0058);
		}

		// class UARSaveWorldAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARSaveWorldAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnSuccess, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, OnFailed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSaveWorldAsyncTaskBlueprintProxy, UnknownData_6XSL, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSaveWorldAsyncTaskBlueprintProxy, 0x0088);
		}

		// class UMediaTexture : public Utexture
		TEST_METHOD(Class__MediaAssets__MediaTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressX, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AddressY, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, AutoClear, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_01V7, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, ClearColor, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, EnableGenMips, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, NumMips, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_X4KH, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, MediaPlayer, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaTexture, UnknownData_6IFB, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaTexture, 0x0190);
		}

		// class UARGetCandidateObjectAsyncTaskBlueprintProxy : public UARBaseAsyncTaskBlueprintProxy
		TEST_METHOD(Class__AugmentedReality__ARGetCandidateObjectAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnSuccess, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, OnFailed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, UnknownData_K56I, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARGetCandidateObjectAsyncTaskBlueprintProxy, 0x00A0);
		}

		// class UAROriginActor : public Uactor
		TEST_METHOD(Class__AugmentedReality__AROriginActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAROriginActor, 0x0230);
		}

		// class UPlatformMediaSource : public UMediaSource
		TEST_METHOD(Class__MediaAssets__PlatformMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformMediaSource, MediaSource, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformMediaSource, 0x0090);
		}

		// class UARPin : public UObject
		TEST_METHOD(Class__AugmentedReality__ARPin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackedGeometry, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, PinnedComponent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_KNZP, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTrackingStateChanged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, OnARTransformUpdated, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPin, UnknownData_W55O, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPin, 0x00F0);
		}

		// class UStreamMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__StreamMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamMediaSource, StreamUrl, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamMediaSource, 0x00A8);
		}

		// class UTimeSynchronizableMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__MediaAssets__TimeSynchronizableMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, bUseTimeSynchronization, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, UnknownData_TDVM, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, FrameDelay, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizableMediaSource, TimeDelay, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizableMediaSource, 0x00A8);
		}

		// class UARSharedWorldGameMode : public UGameMode
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameMode, BufferSizePerChunk, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameMode, UnknownData_YW8I, 0x032C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSharedWorldGameMode, 0x0390);
		}

		// class UARSharedWorldGameState : public UgameState
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, PreviewImageData, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, ARWorldData, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, PreviewImageBytesTotal, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, ARWorldBytesTotal, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, PreviewImageBytesDelivered, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, ARWorldBytesDelivered, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldGameState, UnknownData_WZI4, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSharedWorldGameState, 0x02E0);
		}

		// class UARSharedWorldPlayerController : public UplayerController
		TEST_METHOD(Class__AugmentedReality__ARSharedWorldPlayerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSharedWorldPlayerController, UnknownData_MIOB, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSharedWorldPlayerController, 0x0590);
		}

		// class UARSkyLight : public USkyLight
		TEST_METHOD(Class__AugmentedReality__ARSkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSkyLight, CaptureProbe, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARSkyLight, UnknownData_TXK7, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARSkyLight, 0x0250);
		}

		// class UARTexture : public Utexture
		TEST_METHOD(Class__AugmentedReality__ARTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, TextureType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, UnknownData_VR5G, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, timestamp, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, ExternalTextureGuid, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTexture, Size, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTexture, 0x00E0);
		}

		// class UARTextureCameraImage : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraImage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraImage, 0x00E0);
		}

		// class UARTextureCameraDepth : public UARTexture
		TEST_METHOD(Class__AugmentedReality__ARTextureCameraDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthQuality, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, DepthAccuracy, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, bIsTemporallySmoothed, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTextureCameraDepth, UnknownData_GPB6, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTextureCameraDepth, 0x00E8);
		}

		// class UAREnvironmentCaptureProbeTexture : public UTextureCube
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, TextureType, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, UnknownData_LBW3, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, timestamp, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, ExternalTextureGuid, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbeTexture, Size, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbeTexture, 0x0138);
		}

		// class UARTraceResultDummy : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTraceResultDummy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTraceResultDummy, 0x0030);
		}

		// class UARTrackedGeometry : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTrackedGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UniqueID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToTrackingTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LocalToAlignedTrackingTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, TrackingState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_WN1S, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnderlyingMesh, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, ObjectClassification, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_ZLBX, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, LastUpdateFrameNumber, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_POZK, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, DebugName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedGeometry, UnknownData_VS50, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedGeometry, 0x00F0);
		}

		// class UARPlaneGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARPlaneGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Orientation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_X7NT, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, center, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, Extent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_53UD, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, SubsumedBy, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARPlaneGeometry, UnknownData_2OM4, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARPlaneGeometry, 0x0130);
		}

		// class UARTrackedPoint : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPoint, 0x00F0);
		}

		// class UARTrackedImage : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, DetectedImage, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedImage, EstimatedSize, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedImage, 0x0100);
		}

		// class UARTrackedQRCode : public UARTrackedImage
		TEST_METHOD(Class__AugmentedReality__ARTrackedQRCode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, QRCode, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, version, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedQRCode, UnknownData_UATK, 0x0114);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedQRCode, 0x0120);
		}

		// class UARFaceGeometry : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARFaceGeometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, LookAtTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, bIsTracked, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_FSIE, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, BlendShapes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARFaceGeometry, UnknownData_SZTH, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARFaceGeometry, 0x01E0);
		}

		// class UAREnvironmentCaptureProbe : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__AREnvironmentCaptureProbe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_HYAN, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, EnvironmentCaptureTexture, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAREnvironmentCaptureProbe, UnknownData_7RIJ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAREnvironmentCaptureProbe, 0x0110);
		}

		// class UARTrackedObject : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, DetectedObject, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedObject, UnknownData_RPUA, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedObject, 0x0100);
		}

		// class UARTrackedPose : public UARTrackedGeometry
		TEST_METHOD(Class__AugmentedReality__ARTrackedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackedPose, UnknownData_JKUL, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackedPose, 0x0140);
		}

		// class UARTrackableNotifyComponent : public UactorComponent
		TEST_METHOD(Class__AugmentedReality__ARTrackableNotifyComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedGeometry, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedGeometry, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedGeometry, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPlane, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPlane, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPlane, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedPoint, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedPoint, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedPoint, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedImage, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedImage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedImage, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedFace, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedFace, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedFace, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedEnvProbe, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedEnvProbe, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedEnvProbe, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnAddTrackedObject, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnUpdateTrackedObject, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARTrackableNotifyComponent, OnRemoveTrackedObject, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTrackableNotifyComponent, 0x0208);
		}

		// class UARTypesDummyClass : public UObject
		TEST_METHOD(Class__AugmentedReality__ARTypesDummyClass)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARTypesDummyClass, 0x0030);
		}

		// class UARCandidateObject : public UDataAsset
		TEST_METHOD(Class__AugmentedReality__ARCandidateObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, CandidateObjectData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, FriendlyName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, BoundingBox, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UARCandidateObject, UnknownData_OHWF, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UARCandidateObject, 0x0078);
		}

		// class UStaticMeshDescription : public UMeshDescriptionBase
		TEST_METHOD(Class__StaticMeshDescription__StaticMeshDescription)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshDescription, 0x0398);
		}

		// class UMaterialShaderQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__MaterialShaderQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialShaderQualitySettings, ForwardSettingMap, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialShaderQualitySettings, 0x0080);
		}

		// class UShaderPlatformQualitySettings : public UObject
		TEST_METHOD(Class__MaterialShaderQualitySettings__ShaderPlatformQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, QualityOverrides, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShaderPlatformQualitySettings, UnknownData_BMZZ, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShaderPlatformQualitySettings, 0x0060);
		}

		// class UMeshReconstructorBase : public UObject
		TEST_METHOD(Class__MRMesh__MeshReconstructorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReconstructorBase, 0x0030);
		}

		// class UMockDataMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MRMesh__MockDataMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, OnMeshTrackerUpdated, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, ScanWorld, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestNormals, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, RequestVertexConfidence, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorMode, 0x0223);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_E23C, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, BlockVertexColors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UpdateInterval, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_IQKV, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, MRMesh, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMockDataMeshTrackerComponent, UnknownData_73A9, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMockDataMeshTrackerComponent, 0x0280);
		}

		// class UMovieScenePropertyTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, SectionToKey, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, propertyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, UnknownData_7VBV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, PropertyPath, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePropertyTrack, Sections, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePropertyTrack, 0x0098);
		}

		// class UMovieSceneTransformOrigin : public UInterface
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformOrigin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformOrigin, 0x0030);
		}

		// class UMovieScene3DConstraintSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintSection, ConstraintBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintSection, 0x0110);
		}

		// class UMovieScene3DAttachSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachSocketName, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachComponentName, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentLocationRule, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentRotationRule, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, AttachmentScaleRule, 0x012A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentLocationRule, 0x012B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentRotationRule, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, DetachmentScaleRule, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DAttachSection, UnknownData_YRCZ, 0x012E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachSection, 0x0130);
		}

		// class UTemplateSequenceSection : public UMovieSceneSubSection
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceSection, 0x0160);
		}

		// class UTemplateSequenceTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceTrack, 0x0070);
		}

		// class UMovieScene3DConstraintTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DConstraintTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DConstraintTrack, ConstraintSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DConstraintTrack, 0x0070);
		}

		// class UTemplateSequence : public UMovieSceneSequence
		TEST_METHOD(Class__TemplateSequence__TemplateSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundPreviewActor, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequence, BoundActorComponents, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequence, 0x0408);
		}

		// class UMovieScene3DAttachTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DAttachTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DAttachTrack, 0x0070);
		}

		// class UMovieScene3DPathSection : public UMovieScene3DConstraintSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, TimingCurve, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, FrontAxisEnum, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UpAxisEnum, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_XQU1, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DPathSection, UnknownData_38QC, 0x01B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathSection, 0x01B8);
		}

		// class UCameraAnimationSequence : public UTemplateSequence
		TEST_METHOD(Class__TemplateSequence__CameraAnimationSequence)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimationSequence, 0x0408);
		}

		// class UTemplateSequenceActor : public Uactor
		TEST_METHOD(Class__TemplateSequence__TemplateSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, UnknownData_YROM, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, PlaybackSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, UnknownData_V6OS, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, SequencePlayer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, TemplateSequence, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, BindingOverride, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequenceActor, UnknownData_7JS6, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequenceActor, 0x0288);
		}

		// class UMovieScene3DPathTrack : public UMovieScene3DConstraintTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DPathTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DPathTrack, 0x0070);
		}

		// class UMovieScene3DTransformSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, TransformMask, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_6UVC, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, Translation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, rotation, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, scale, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, ManualWeight, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_54UK, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, bUseQuaternionInterpolation, 0x0734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScene3DTransformSection, UnknownData_GV91, 0x0735);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformSection, 0x0738);
		}

		// class UTemplateSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__TemplateSequence__TemplateSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplateSequencePlayer, UnknownData_ITHG, 0x0890);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplateSequencePlayer, 0x0898);
		}

		// class UMovieScene3DTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScene3DTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScene3DTransformTrack, 0x0098);
		}

		// class UMovieSceneActorReferenceSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorReferenceData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidIndexCurve, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneActorReferenceSection, ActorGuidStrings, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceSection, 0x0230);
		}

		// class UMovieSceneActorReferenceTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneActorReferenceTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneActorReferenceTrack, 0x0098);
		}

		// class UMovieSceneAudioSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, Sound, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartFrameOffset, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, StartOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioStartTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioDilationFactor, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AudioVolume, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_9S7H, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, SoundVolume, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, PitchMultiplier, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttachActorData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bSuppressSubtitles, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, bOverrideAttenuation, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_DWTW, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, AttenuationSettings, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnQueueSubtitles, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_2K6Z, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, UnknownData_MCDA, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioFinished, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioSection, OnAudioPlaybackPercent, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioSection, 0x0348);
		}

		// class UMovieSceneAudioTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneAudioTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneAudioTrack, AudioSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioTrack, 0x0070);
		}

		// class UMovieSceneBoolSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, DefaultValue, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, UnknownData_05VE, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneBoolSection, BoolCurve, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolSection, 0x0180);
		}

		// class UMovieSceneBoolTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneBoolTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneBoolTrack, 0x0098);
		}

		// class UMovieSceneByteSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteSection, ByteCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteSection, 0x0180);
		}

		// class UMovieSceneByteTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneByteTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneByteTrack, Enum, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneByteTrack, 0x00A0);
		}

		// class UMovieSceneCameraAnimSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, AnimData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, CameraAnim, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, playRate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, PlayScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, BlendInTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, blendOutTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, bLooping, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimSection, UnknownData_UBNY, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimSection, 0x0128);
		}

		// class UMovieSceneCameraAnimTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraAnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraAnimTrack, CameraAnimSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraAnimTrack, 0x0070);
		}

		// class UMovieSceneCameraCutSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraGuid, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutSection, CameraBindingID, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutSection, 0x0110);
		}

		// class UMovieSceneCameraCutTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraCutTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, bCanBlend, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, UnknownData_XOG2, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraCutTrack, Sections, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraCutTrack, 0x0078);
		}

		// class UMovieSceneCameraShakeSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeData, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, ShakeClass, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlayScale, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, PlaySpace, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_ASPA, 0x0115);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UserDefinedPlaySpace, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeSection, UnknownData_W12S, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeSection, 0x0128);
		}

		// class UMovieSceneCameraShakeTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCameraShakeTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCameraShakeTrack, CameraShakeSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCameraShakeTrack, 0x0070);
		}

		// class UMovieSceneCinematicShotSection : public UMovieSceneSubSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, ShotDisplayName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCinematicShotSection, DisplayName, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotSection, 0x0188);
		}

		// class UMovieSceneCinematicShotTrack : public UMovieSceneSubTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneCinematicShotTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCinematicShotTrack, 0x0070);
		}

		// class UMovieSceneColorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, RedCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, GreenCurve, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, BlueCurve, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorSection, AlphaCurve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorSection, 0x0368);
		}

		// class UMovieSceneColorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, bIsSlateColor, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneColorTrack, UnknownData_9XYH, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneColorTrack, 0x00A0);
		}

		// class UMovieSceneEnumSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumSection, EnumCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumSection, 0x0180);
		}

		// class UMovieSceneEnumTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEnumTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEnumTrack, Enum, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEnumTrack, 0x00A0);
		}

		// class UMovieSceneEulerTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEulerTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEulerTransformTrack, 0x0098);
		}

		// class UMovieSceneEventSectionBase : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSectionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSectionBase, 0x00E8);
		}

		// class UMovieSceneEventRepeaterSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventRepeaterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventRepeaterSection, event, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventRepeaterSection, 0x0110);
		}

		// class UMovieSceneEventSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, Events, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventSection, EventData, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventSection, 0x01E8);
		}

		// class UMovieSceneEventTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_428V, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventPosition, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, UnknownData_0SP4, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, EventReceivers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTrack, Sections, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTrack, 0x0088);
		}

		// class UMovieSceneEventTriggerSection : public UMovieSceneEventSectionBase
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneEventTriggerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneEventTriggerSection, EventChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneEventTriggerSection, 0x0170);
		}

		// class UMovieSceneFloatSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFloatSection, FloatCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatSection, 0x0188);
		}

		// class UMovieSceneFadeSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, FadeColor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneFadeSection, UnknownData_KK4Q, 0x0199);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeSection, 0x01A0);
		}

		// class UMovieSceneFloatTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFloatTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFloatTrack, 0x0098);
		}

		// class UMovieSceneFadeTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneFadeTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneFadeTrack, 0x0098);
		}

		// class UMovieSceneIntegerSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneIntegerSection, IntegerCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerSection, 0x0178);
		}

		// class UMovieSceneIntegerTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneIntegerTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneIntegerTrack, 0x0098);
		}

		// class UMovieSceneLevelVisibilitySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilitySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, visibility, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, UnknownData_FEGS, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilitySection, LevelNames, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilitySection, 0x0100);
		}

		// class UMovieSceneLevelVisibilityTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneLevelVisibilityTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneLevelVisibilityTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneLevelVisibilityTrack, 0x0070);
		}

		// class UMovieSceneMaterialTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialTrack, 0x0070);
		}

		// class UMovieSceneMaterialParameterCollectionTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneMaterialParameterCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMaterialParameterCollectionTrack, MPC, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMaterialParameterCollectionTrack, 0x0078);
		}

		// class UMovieSceneComponentMaterialTrack : public UMovieSceneMaterialTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneComponentMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, MaterialIndex, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneComponentMaterialTrack, UnknownData_UHLW, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneComponentMaterialTrack, 0x0078);
		}

		// class UMovieSceneObjectPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertySection, ObjectChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertySection, 0x01B0);
		}

		// class UMovieSceneObjectPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneObjectPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneObjectPropertyTrack, PropertyClass, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneObjectPropertyTrack, 0x00A0);
		}

		// class UMovieSceneParameterSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParameterSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, BoolParameterNamesAndCurves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ScalarParameterNamesAndCurves, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, Vector2DParameterNamesAndCurves, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, VectorParameterNamesAndCurves, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, ColorParameterNamesAndCurves, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParameterSection, TransformParameterNamesAndCurves, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParameterSection, 0x0148);
		}

		// class UMovieSceneParticleParameterTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleParameterTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleParameterTrack, 0x0070);
		}

		// class UMovieSceneParticleSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleSection, ParticleKeys, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleSection, 0x0180);
		}

		// class UMovieSceneParticleTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneParticleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneParticleTrack, ParticleSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneParticleTrack, 0x0070);
		}

		// class UMovieScenePrimitiveMaterialSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialSection, MaterialChannel, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialSection, 0x01B0);
		}

		// class UMovieScenePrimitiveMaterialTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieScenePrimitiveMaterialTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, MaterialIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieScenePrimitiveMaterialTrack, UnknownData_3IRD, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieScenePrimitiveMaterialTrack, 0x00A0);
		}

		// class UMovieSceneSkeletalAnimationSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, Params, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, AnimSequence, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, animation, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, StartOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, EndOffset, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, playRate, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_K8PT, 0x01DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, SlotName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationSection, UnknownData_QPCT, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationSection, 0x01F0);
		}

		// class UMovieSceneSkeletalAnimationTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSkeletalAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, AnimationSections, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, bUseLegacySectionIndexBlend, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSkeletalAnimationTrack, UnknownData_V4V8, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSkeletalAnimationTrack, 0x0078);
		}

		// class UMovieSceneSlomoSection : public UMovieSceneFloatSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoSection, 0x0188);
		}

		// class UMovieSceneSlomoTrack : public UMovieSceneFloatTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSlomoTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSlomoTrack, 0x0098);
		}

		// class UMovieSceneSpawnSection : public UMovieSceneBoolSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnSection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnSection, 0x0180);
		}

		// class UMovieSceneSpawnTrack : public UMovieSceneTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneSpawnTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, Sections, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneSpawnTrack, ObjectGuid, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneSpawnTrack, 0x0080);
		}

		// class UMovieSceneStringSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneStringSection, StringCurve, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringSection, 0x0188);
		}

		// class UMovieSceneStringTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneStringTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneStringTrack, 0x0098);
		}

		// class UMovieSceneTransformTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneTransformTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneTransformTrack, 0x0098);
		}

		// class UMovieSceneVectorSection : public UMovieSceneSection
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, Curves, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, ChannelsUsed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorSection, UnknownData_D7EJ, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorSection, 0x0370);
		}

		// class UMovieSceneVectorTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, NumChannelsUsed, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneVectorTrack, UnknownData_6IPN, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVectorTrack, 0x00A0);
		}

		// class UMovieSceneVisibilityTrack : public UMovieSceneBoolTrack
		TEST_METHOD(Class__MovieSceneTracks__MovieSceneVisibilityTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneVisibilityTrack, 0x0098);
		}

		// class UAnniversary2020EventComponent : public UactorComponent
		TEST_METHOD(Class__Anniversary2020__Anniversary2020EventComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnniversary2020EventComponent, _enableDebugCrownPillarPositionSwitchTimer, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnniversary2020EventComponent, UnknownData_SMF8, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnniversary2020EventComponent, _debugCrownPillarPositionSwitchTimeRemaining, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnniversary2020EventComponent, UnknownData_OG6P, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnniversary2020EventComponent, 0x0128);
		}

		// class UCrownCollectable : public Ucollectable
		TEST_METHOD(Class__Anniversary2020__CrownCollectable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownCollectable, UnknownData_93Y8, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrownCollectable, 0x0448);
		}

		// class UCrownPickupInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__Anniversary2020__CrownPickupInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, UnknownData_0UEF, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, UnknownData_I12P, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, _attachToSocketName, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, UnknownData_MWHK, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, _collectableClass, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, _crownPillarPositioner, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, _isInteractionChargeComplete, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPickupInteraction, UnknownData_CWBG, 0x0679);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrownPickupInteraction, 0x0680);
		}

		// class UCrownPillarInteractable : public Uinteractable
		TEST_METHOD(Class__Anniversary2020__CrownPillarInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _survivorChargeDuration, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _slasherChargeDuration, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _isHidden, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, UnknownData_CG83, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _survivorCrownPickup, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _slasherCrownPickup, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, UnknownData_UEDY, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _debugForcePillarStayEnabled, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, UnknownData_NKPU, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _debugIndicatorBlueprintClass, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarInteractable, _spawnedCrownPillarDebugIndicator, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrownPillarInteractable, 0x0330);
		}

		// class UCrownPillarPositioner : public UactorComponent
		TEST_METHOD(Class__Anniversary2020__CrownPillarPositioner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarPositioner, _crownPillars, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrownPillarPositioner, UnknownData_VO3I, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrownPillarPositioner, 0x0108);
		}

		// class UCrownPillarUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Anniversary2020__CrownPillarUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrownPillarUtilities, 0x0030);
		}

		// class UMRMeshComponent : public UprimitiveComponent
		TEST_METHOD(Class__MRMesh__MRMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_L2RN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, MATERIAL, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bCreateMeshProxySections, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bUpdateNavMeshOnMeshUpdate, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, bNeverCreateCollisionMesh, 0x043A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_WVQ6, 0x043B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, CachedBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, BodySetups, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, WireframeMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMRMeshComponent, UnknownData_OWJJ, 0x0460);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMRMeshComponent, 0x04A0);
		}

		// class UAB_S25_Hair_ACC01_REF_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_S25_Hair_ACC01_REF__AB_S25_Hair_ACC01_REF_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_18, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_17, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_16, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_15, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_14, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_13, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_12, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_11, 0x21B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_10, 0x2610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_UseCachedPose_3, 0x2A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace_2, 0x2AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace_2, 0x2AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_StateResult_3, 0x2AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, UnknownData_0MME, 0x2B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_9, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_8, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_7, 0x33E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_6, 0x3840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_5, 0x3CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_4, 0x4100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_3, 0x4560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_2, 0x49C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics, 0x4E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace, 0x5280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_UseCachedPose_2, 0x52A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace, 0x52D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_StateResult_2, 0x52F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_UseCachedPose, 0x5328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_StateResult, 0x5358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_StateMachine, 0x5390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_CopyPoseFromMesh, 0x5440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Hair_ACC01_REF_C, AnimGraphNode_SaveCachedPose, 0x5580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_S25_Hair_ACC01_REF_C, 0x5638);
		}

		// class UActivatableMock : public UactorComponent
		TEST_METHOD(Class__Activation__ActivatableMock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivatableMock, UnknownData_YS93, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivatableMock, 0x0108);
		}

		// class UActivatorComponent : public UactorComponent
		TEST_METHOD(Class__Activation__ActivatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivatorComponent, _searchForActivatableSubAnimInstances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivatorComponent, UnknownData_7M9D, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivatorComponent, 0x00D8);
		}

		// class UActivatable : public UInterface
		TEST_METHOD(Class__Activation__Activatable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivatable, 0x0030);
		}

		// class UPHISM_SM_LF_SmallTree03_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_SmallTree03__PHISM_SM_LF_SmallTree03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_SmallTree03_C, 0x06C0);
		}

		// class UBP_Effect_DO_Head01_C : public UBP_BaseItemVfx_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_DO_Head01__BP_Effect_DO_Head01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, UnknownData_O511, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, TotalTime, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, UnknownData_5RCE, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, Sparks1, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, Sparks_2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, Sparks_3, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_DO_Head01_C, Sparks4, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_DO_Head01_C, 0x0290);
		}

		// class UDefaultLevelSequenceInstanceData : public UObject
		TEST_METHOD(Class__LevelSequence__DefaultLevelSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, UnknownData_NXN4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOriginActor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultLevelSequenceInstanceData, TransformOrigin, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultLevelSequenceInstanceData, 0x0070);
		}

		// class ULevelSequenceMetaData : public UInterface
		TEST_METHOD(Class__LevelSequence__LevelSequenceMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMetaData, 0x0030);
		}

		// class ULevelSequence : public UMovieSceneSequence
		TEST_METHOD(Class__LevelSequence__LevelSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, ObjectReferences, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, BindingReferences, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, PossessedObjects, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequence, DirectorClass, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequence, 0x04A0);
		}

		// class ULevelSequenceBurnInInitSettings : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInInitSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInInitSettings, 0x0030);
		}

		// class ULevelSequenceBurnInOptions : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnInOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, bUseBurnIn, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, UnknownData_222R, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, BurnInClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnInOptions, settings, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnInOptions, 0x0060);
		}

		// class ULevelSequenceActor : public Uactor
		TEST_METHOD(Class__LevelSequence__LevelSequenceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, UnknownData_VAOW, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, PlaybackSettings, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, UnknownData_TSRN, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, SequencePlayer, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, LevelSequence, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, AdditionalEventReceivers, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, CameraSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, UnknownData_2AIK, 0x0292);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, BurnInOptions, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, BindingOverrides, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, UnknownData_JR2K, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, DefaultInstanceData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, BurnInInstance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, bShowBurnin, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceActor, UnknownData_YI53, 0x02C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceActor, 0x02C8);
		}

		// class ULevelSequenceBurnIn : public UUserWidget
		TEST_METHOD(Class__LevelSequence__LevelSequenceBurnIn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, FrameInformation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceBurnIn, LevelSequenceActor, 0x0320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceBurnIn, 0x0328);
		}

		// class ULevelSequenceDirector : public UObject
		TEST_METHOD(Class__LevelSequence__LevelSequenceDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceDirector, player, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceDirector, 0x0038);
		}

		// class ULegacyLevelSequenceDirectorBlueprint : public UBlueprint
		TEST_METHOD(Class__LevelSequence__LegacyLevelSequenceDirectorBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegacyLevelSequenceDirectorBlueprint, 0x00A8);
		}

		// class ULevelSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__LevelSequence__LevelSequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, OnCameraCut, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequencePlayer, UnknownData_Y5SO, 0x08A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequencePlayer, 0x09B8);
		}

		// class ULevelSequenceMediaController : public Uactor
		TEST_METHOD(Class__LevelSequence__LevelSequenceMediaController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceMediaController, UnknownData_5WHD, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceMediaController, sequence, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceMediaController, MediaComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceMediaController, ServerStartTimeSeconds, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelSequenceMediaController, UnknownData_2JA4, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelSequenceMediaController, 0x0258);
		}

		// class UBP_QS_Neckless01_Acc_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_QS_Neckless01_Acc__BP_QS_Neckless01_Acc_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_QS_Neckless01_Acc_C, 0x02B8);
		}

		// class UPHISM_SM_LF_Grass01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_Grass01__PHISM_SM_LF_Grass01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_Grass01_C, 0x06C0);
		}

		// class UPHISM_SM_LF_Grass05_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_Grass05__PHISM_SM_LF_Grass05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_Grass05_C, 0x06C0);
		}

		// class UActorPairQueryEvaluatorComponent : public UactorComponent
		TEST_METHOD(Class__QueryService__ActorPairQueryEvaluatorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorPairQueryEvaluatorComponent, UnknownData_YSW6, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorPairQueryEvaluatorComponent, 0x0110);
		}

		// class UActorPairQueryEvaluatorSubscriberTest : public Uactor
		TEST_METHOD(Class__QueryService__ActorPairQueryEvaluatorSubscriberTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorPairQueryEvaluatorSubscriberTest, UnknownData_RDTN, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorPairQueryEvaluatorSubscriberTest, 0x0258);
		}

		// class UMagicLeapIdentity : public UObject
		TEST_METHOD(Class__MagicLeapIdentity__MagicLeapIdentity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapIdentity, UnknownData_H1LM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapIdentity, 0x0040);
		}

		// class UGameFlowHandler : public UAbstractGameFlowHandler
		TEST_METHOD(Class__GameFlow__GameFlowHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameFlowHandler, UnknownData_OSIE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameFlowHandler, 0x0090);
		}

		// class UAB_KK_W01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_KK_W01__AB_KK_W01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_MeshRefPose_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_ModifyBone, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_BlendListByBool, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_MeshRefPose, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, AnimGraphNode_ComponentToLocalSpace, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_W01_C, IsAttack, 0x04C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_KK_W01_C, 0x04C1);
		}

		// class UPartyFacade : public UObject
		TEST_METHOD(Class__SocialParty__PartyFacade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyFacade, UnknownData_5Q12, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyFacade, 0x0450);
		}

		// class UPHISM_SM_Haiti_Bamboo01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Haiti_Bamboo01__PHISM_SM_Haiti_Bamboo01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Haiti_Bamboo01_C, 0x06C0);
		}

		// class UBP_SS_Laces_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_SS_Laces_ACC01__BP_SS_Laces_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SS_Laces_ACC01_C, 0x02B8);
		}

		// class UPlayerflowEventsNotifier : public UInterface
		TEST_METHOD(Class__GameflowNotifications__PlayerflowEventsNotifier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerflowEventsNotifier, 0x0030);
		}

		// class UGameflowEventsNotifier : public UInterface
		TEST_METHOD(Class__GameflowNotifications__GameflowEventsNotifier)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameflowEventsNotifier, 0x0030);
		}

		// class UPHISM_SM_Haiti_Bamboo_Short03_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Haiti_Bamboo_Short03__PHISM_SM_Haiti_Bamboo_Short03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Haiti_Bamboo_Short03_C, 0x06C0);
		}

		// class UTcpMessagingSettings : public UObject
		TEST_METHOD(Class__TcpMessaging__TcpMessagingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, EnableTransport, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_7L1D, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ListenEndpoint, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectToEndpoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, ConnectionRetryDelay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, bStopServiceWhenAppDeactivates, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTcpMessagingSettings, UnknownData_BW57, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTcpMessagingSettings, 0x0060);
		}

		// class UActivateBlightPower : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheBlight__ActivateBlightPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivateBlightPower, UnknownData_AMMF, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivateBlightPower, 0x0630);
		}

		// class UAddon_TheBlight_14 : public UItemAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_14)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_14, _speedIncreasePerDash, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_14, UnknownData_YOXR, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_14, 0x0228);
		}

		// class UAddon_TheBlight_15 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_15)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_15, _palletPulldownBlockRange, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_15, _palletPulldownBlockSeconds, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_15, 0x0230);
		}

		// class UAddon_TheBlight_18 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_18)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_18, _survivorInRangeDistance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_18, _hinderedSeconds, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_18, 0x0230);
		}

		// class UAddon_TheBlight_19 : public UItemAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_19)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_19, 0x0218);
		}

		// class UAddon_TheBlight_20 : public UItemAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_20)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_20, _survivorInRangeDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_20, _survivorRevealTime, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_20, 0x0220);
		}

		// class UAddon_TheBlight_21 : public UItemAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_21)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_21, _forceKoStatusEffect, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_21, 0x0220);
		}

		// class UAddon_TheBlight_ConsecutiveDashSpeedBonus : public UItemAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_ConsecutiveDashSpeedBonus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_ConsecutiveDashSpeedBonus, _speedIncreasePerDash, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_ConsecutiveDashSpeedBonus, UnknownData_YFZD, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_ConsecutiveDashSpeedBonus, 0x0228);
		}

		// class UAddon_TheBlight_SoulChemical : public UItemAddon
		TEST_METHOD(Class__TheBlight__Addon_TheBlight_SoulChemical)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_SoulChemical, _triggerDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_SoulChemical, _skillCheckType, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_SoulChemical, UnknownData_NIHL, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_SoulChemical, _interactionSemantics, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_SoulChemical, _blightPowerStateTag, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_TheBlight_SoulChemical, UnknownData_5HF5, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_TheBlight_SoulChemical, 0x0280);
		}

		// class UBlightAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheBlight__BlightAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightAnimInstance, _blightPowerStateComponent, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightAnimInstance, _powerState, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightAnimInstance, UnknownData_DKGL, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightAnimInstance, _stateTimeRemaining, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightAnimInstance, _lookAngle, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightAnimInstance, UnknownData_S4P7, 0x05BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightAnimInstance, 0x05C0);
		}

		// class UBlightAttackPicker : public USlasherAttackPickerComponent
		TEST_METHOD(Class__TheBlight__BlightAttackPicker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightAttackPicker, 0x00B8);
		}

		// class UBlightDashAttack : public UPounceAttack
		TEST_METHOD(Class__TheBlight__BlightDashAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightDashAttack, 0x02E0);
		}

		// class UBlightDashAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__TheBlight__BlightDashAttackOpenSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightDashAttackOpenSubstate, 0x00F0);
		}

		// class UBlightDashAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheBlight__BlightDashAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightDashAttackSuccessSubstate, 0x00D8);
		}

		// class UBlightDashAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__TheBlight__BlightDashAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightDashAttackMissSubstate, 0x00E0);
		}

		// class UBlightDashAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__TheBlight__BlightDashAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightDashAttackObstructSubstate, 0x00E8);
		}

		// class UBlightPower : public Ucollectable
		TEST_METHOD(Class__TheBlight__BlightPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerCharge, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerToggle, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerActivateChargeable, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerStateComponent, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerActivateMaxCharge, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerMaxCharge, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerDechargeRate, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, _blightPowerRechargeRate, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPower, UnknownData_7CAS, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPower, 0x0538);
		}

		// class UBlightPowerEstimatedCollisionIndicator : public Uactor
		TEST_METHOD(Class__TheBlight__BlightPowerEstimatedCollisionIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerEstimatedCollisionIndicator, UnknownData_T4WW, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerEstimatedCollisionIndicator, 0x0238);
		}

		// class UBlightPowerState : public UObject
		TEST_METHOD(Class__TheBlight__BlightPowerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, UnknownData_AEGB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _stateSpeedCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _stateDuration, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _cameraPitchRecenterTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _wallDashCollisionRadius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _wallDashCollisionHeight, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _wallDashCollisionRange, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _playerCanCancelEarly, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, UnknownData_8KLM, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, _displayCollisionIndicator, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerState, UnknownData_36QA, 0x0139);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerState, 0x0140);
		}

		// class UBlightPowerStateAdjusting : public UBlightPowerState
		TEST_METHOD(Class__TheBlight__BlightPowerStateAdjusting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, _adjustRotationOnCollision, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, _bounceAwayFromCollision, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, _allowNavigation, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, _smashBreakables, 0x0143);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, UnknownData_S4HB, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, _maxDistanceForSurvivorFacing, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAdjusting, UnknownData_GRLL, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateAdjusting, 0x0180);
		}

		// class UBlightPowerStateDash : public UBlightPowerState
		TEST_METHOD(Class__TheBlight__BlightPowerStateDash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateDash, _vectorInterpToSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateDash, _noDashTimeLimitSpeedCurve, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateDash, _lookAngleToTurnRateCurveController, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateDash, _lookAngleToTurnRateCurveMouse, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateDash, UnknownData_8KSD, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateDash, 0x01B8);
		}

		// class UBlightPowerStateAttack : public UBlightPowerStateDash
		TEST_METHOD(Class__TheBlight__BlightPowerStateAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateAttack, UnknownData_4L7X, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateAttack, 0x01E0);
		}

		// class UBlightPowerStateComponent : public UactorComponent
		TEST_METHOD(Class__TheBlight__BlightPowerStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, UnknownData_F2V5, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, OnPowerCollided, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _blightPowerStateClasses, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _canDashCheckCollisionRadius, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _canDashCheckCollisionHeight, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _canDashCheckCollisionRange, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _blightLethalDashDodgeRadius, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _powerInteractionDefinition, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, UnknownData_Q9GE, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _stateTimer, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _blightPowerStates, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _currentBlightPowerState, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _dashTokens, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, UnknownData_AUU0, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _maximumDashTokens, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, _tokenChargeRate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateComponent, UnknownData_A3UY, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateComponent, 0x0290);
		}

		// class UBlightPowerStateCooldown : public UBlightPowerState
		TEST_METHOD(Class__TheBlight__BlightPowerStateCooldown)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateCooldown, 0x0140);
		}

		// class UBlightPowerStateHolding : public UBlightPowerState
		TEST_METHOD(Class__TheBlight__BlightPowerStateHolding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateHolding, _secondaryInteractionProperties, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateHolding, _allowNavigation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateHolding, UnknownData_ZXIZ, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateHolding, _dashSpeedForProjection, 0x0174);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateHolding, 0x0178);
		}

		// class UBlightPowerStateInterface : public UInterface
		TEST_METHOD(Class__TheBlight__BlightPowerStateInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateInterface, 0x0030);
		}

		// class UBlightPowerStateLethalDash : public UBlightPowerStateDash
		TEST_METHOD(Class__TheBlight__BlightPowerStateLethalDash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateLethalDash, _secondaryInteractionProperties, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateLethalDash, _smashBreakables, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateLethalDash, UnknownData_PL3L, 0x01E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateLethalDash, 0x01F0);
		}

		// class UBlightPowerStateNonLethalDash : public UBlightPowerStateDash
		TEST_METHOD(Class__TheBlight__BlightPowerStateNonLethalDash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateNonLethalDash, _smashBreakables, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightPowerStateNonLethalDash, UnknownData_MCG5, 0x01B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateNonLethalDash, 0x01C0);
		}

		// class UBlightPowerStateReady : public UBlightPowerState
		TEST_METHOD(Class__TheBlight__BlightPowerStateReady)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightPowerStateReady, 0x0140);
		}

		// class UBuiltToLast : public Uperk
		TEST_METHOD(Class__TheBlight__BuiltToLast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuiltToLast, _refillPercentage, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuiltToLast, _depletionToRefillWaitDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuiltToLast, _isPerkTriggeredThisTrial, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuiltToLast, UnknownData_PFDK, 0x0361);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuiltToLast, _heldItem, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuiltToLast, UnknownData_1D93, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuiltToLast, 0x0388);
		}

		// class UDesperateMeasures : public Uperk
		TEST_METHOD(Class__TheBlight__DesperateMeasures)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDesperateMeasures, _healAndUnhookMultiplier, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDesperateMeasures, _nbInjuredHookedOrDyingSurvivors, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDesperateMeasures, 0x0358);
		}

		// class UDragonsGrip : public Uperk
		TEST_METHOD(Class__TheBlight__DragonsGrip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, _kickedGenerator, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, _activationDuration, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, _coolDownDuration, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, _exposedEffectDuration, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, _onlyExposeFirstSurvivor, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, UnknownData_ZH7J, 0x0375);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDragonsGrip, _loudNoiseRange, 0x0380);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDragonsGrip, 0x03A8);
		}

		// class UHexBloodFavor : public UHexPerk
		TEST_METHOD(Class__TheBlight__HexBloodFavor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexBloodFavor, _palletInRange, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexBloodFavor, _palletPulldownBlockTime, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexBloodFavor, _coolDownDuration, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexBloodFavor, _basicAttack, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexBloodFavor, UnknownData_BSF6, 0x03CD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexBloodFavor, 0x03D8);
		}

		// class UHexUndying : public UHexPerk
		TEST_METHOD(Class__TheBlight__HexUndying)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexUndying, UnknownData_4LVE, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexUndying, _amountOfTokenRemove, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHexUndying, _revealAuraDistanceFromTotem, 0x0404);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHexUndying, 0x0410);
		}

		// class UVisionary : public Uperk
		TEST_METHOD(Class__TheBlight__Visionary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionary, _auraVisibilityRange, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisionary, _coolDownDuration, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisionary, 0x0360);
		}

		// class UWallGrabInteractionDefinition : public UinteractionDefinition
		TEST_METHOD(Class__TheBlight__WallGrabInteractionDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWallGrabInteractionDefinition, _blightPowerStateComponent, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWallGrabInteractionDefinition, _wallDashAccelerationMultiplier, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWallGrabInteractionDefinition, _blightPowerCollisionIndicator, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWallGrabInteractionDefinition, _collisionIndicatorActorClass, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWallGrabInteractionDefinition, 0x0540);
		}

		// class UBP_UK_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_UK_Hair_ACC01__BP_UK_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_UK_Hair_ACC01_C, 0x02B8);
		}

		// class UJsonUtilitiesDummyObject : public UObject
		TEST_METHOD(Class__JsonUtilities__JsonUtilitiesDummyObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJsonUtilitiesDummyObject, 0x0030);
		}

		// class UBP_KillerRightFootGroundDetector_C : public UFromBoneGroundDetectorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_KillerRightFootGroundDetector__BP_KillerRightFootGroundDetector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KillerRightFootGroundDetector_C, 0x01E0);
		}

		// class UAP_S22_Hair_ACC006_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AP_S22_Hair_ACC006__AP_S22_Hair_ACC006_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_10, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_9, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_8, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_7, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_6, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_24, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_23, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_22, 0x1B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_21, 0x1C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_20, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_19, 0x1EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_18, 0x2010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_17, 0x2140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_16, 0x2270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_15, 0x23A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_TwoBoneIK_2, 0x24D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_14, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_13, 0x2810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_UseCachedPose_3, 0x2940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_LocalToComponentSpace_2, 0x2970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_ComponentToLocalSpace_2, 0x2990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_StateResult_3, 0x29B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_12, 0x29E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_11, 0x2B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_10, 0x2C48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_9, 0x2D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_8, 0x2EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_7, 0x2FD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_6, 0x3108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_5, 0x3238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_4, 0x3368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_3, 0x3498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController_2, 0x35C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_BoneDrivenController, 0x36F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, UnknownData_AKGI, 0x3828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_TwoBoneIK, 0x3830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_5, 0x3A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_4, 0x3EA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_3, 0x4300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics_2, 0x4760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_AnimDynamics, 0x4BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_ComponentToLocalSpace, 0x5020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_UseCachedPose_2, 0x5040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_LocalToComponentSpace, 0x5070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_StateResult_2, 0x5090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_UseCachedPose, 0x50C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_StateResult, 0x50F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_StateMachine, 0x5130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_CopyPoseFromMesh, 0x51E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC006_C, AnimGraphNode_SaveCachedPose, 0x5320);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAP_S22_Hair_ACC006_C, 0x53D8);
		}

		// class UChaosClothSharedSimConfig : public UClothSharedConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothSharedSimConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, IterationCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SubdivisionCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, SelfCollisionThickness, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, CollisionThickness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseDampingOverride, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_JW57, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Damping, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseGravityOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_CF77, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, GravityScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, Gravity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseLocalSpaceSimulation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, bUseXPBDConstraints, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothSharedSimConfig, UnknownData_1DLT, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothSharedSimConfig, 0x0060);
		}

		// class UChaosClothingSimulationFactory : public UClothingSimulationFactory
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationFactory, 0x0030);
		}

		// class UChaosClothingSimulationInteractor : public UClothingSimulationInteractor
		TEST_METHOD(Class__ChaosCloth__ChaosClothingSimulationInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothingSimulationInteractor, UnknownData_M8SU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothingSimulationInteractor, 0x0048);
		}

		// class UChaosClothConfig : public UClothConfigCommon
		TEST_METHOD(Class__ChaosCloth__ChaosClothConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MassMode, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_1ETX, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UniformMass, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, TotalMass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, Density, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, MinPerParticleMass, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, EdgeStiffness, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, BendingStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AreaStiffness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, VolumeStiffness, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, StrainLimitingStiffness, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LimitScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseGeodesicDistance, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_93HI, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, ShapeTargetStiffness, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, CollisionThickness, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, FrictionCoefficient, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DampingCoefficient, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, DragCoefficient, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AnimDriveSpringStiffness, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseBendingElements, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseTetrahedralConstraints, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseThinShellVolumeConstraints, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseSelfCollisions, 0x007B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, bUseContinuousCollisionDetection, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, UnknownData_OOGG, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, LinearVelocityScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosClothConfig, AngularVelocityScale, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosClothConfig, 0x0090);
		}

		// class UPHISM_SM_COM_SmallTree03_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_SmallTree03__PHISM_SM_COM_SmallTree03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_SmallTree03_C, 0x06C0);
		}

		// class UCrowdPlayManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__PlatformUtilities__CrowdPlayManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdPlayManager, UnknownData_23YO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdPlayManager, 0x0040);
		}

		// class UPlatformSupportSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__PlatformUtilities__PlatformSupportSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformSupportSubsystem, UnknownData_L4CU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformSupportSubsystem, 0x0068);
		}

		// class UCrowdChoiceManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__PlatformUtilities__CrowdChoiceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowdChoiceManager, UnknownData_OFSG, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdChoiceManager, 0x0088);
		}

		// class UImageWriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ImageWriteQueue__ImageWriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageWriteBlueprintLibrary, 0x0030);
		}

		// class UAB_LS_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_LS_Hair_ACC01__AB_LS_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_LS_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_LS_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_LS_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_LS_Hair_ACC01_C, 0x0400);
		}

		// class UBP_S23_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_S23_Hair_ACC01__BP_S23_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S23_Hair_ACC01_C, 0x02B8);
		}

		// class USkillCheckDifficultyProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__SkillCheckDifficultyProficiency__SkillCheckDifficultyProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCheckDifficultyProficiency_C, 0x0048);
		}

		// class UBP_HK_W01_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_HK_W01_Acc01__BP_HK_W01_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HK_W01_Acc01_C, 0x02B8);
		}

		// class UBP_ShopManager_C : public UShopManager
		TEST_METHOD(BlueprintGeneratedClass__BP_ShopManager__BP_ShopManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_ShopManager_C, 0x05F8);
		}

		// class UPHISM_SM_COM_SmallTree02_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_SmallTree02__PHISM_SM_COM_SmallTree02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_SmallTree02_C, 0x06C0);
		}

		// class UAB_Menu_Slasher01_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher01__AB_Menu_Slasher01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_ComponentToLocalSpace, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_LocalToComponentSpace, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_AnimDynamics_5, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_AnimDynamics_4, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_AnimDynamics_3, 0x0BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_AnimDynamics_2, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_AnimDynamics, 0x1470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_BlendListByBool_2, 0x18D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_RandomPlayer, 0x1970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_BlendListByBool, 0x19E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_SequencePlayer_2, 0x1A88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_SequencePlayer, 0x1B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_StateResult, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, AnimGraphNode_StateMachine, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, Role_Selected, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher01_C, Is_Online, 0x1C61);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher01_C, 0x1C62);
		}

		// class UBP_Effect_K21_Head01_CV01_C : public UBP_BaseItemVfx_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_K21_Head01_CV01__BP_Effect_K21_Head01_CV01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_K21_Head01_CV01_C, UnknownData_M26H, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_K21_Head01_CV01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_K21_Head01_CV01_C, TotalTime, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_K21_Head01_CV01_C, 0x026C);
		}

		// class UAB_S24_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_S24_Hair_ACC01__AB_S24_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, UnknownData_CCQC, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_26, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_25, 0x0970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_24, 0x0DD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_23, 0x1230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_22, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_21, 0x1AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_20, 0x1F50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_19, 0x23B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x2810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x2C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x30D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x3530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x3990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x3DF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x3E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x3E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x3E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x3E98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x3EB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, UnknownData_BR89, 0x3ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x3EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x4340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x47A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x4C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x5060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x54C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x5920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x5D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x61E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x6640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x6AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x6F00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x7360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x77C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x77F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x7828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_StateResult, 0x7858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x7890);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_S24_Hair_ACC01_C, 0x7940);
		}

		// class UInteractiveFoliageComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Foliage__InteractiveFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageComponent, UnknownData_04PX, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageComponent, 0x04F0);
		}

		// class UProceduralFoliageBlockingVolume : public Uvolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageBlockingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageBlockingVolume, ProceduralFoliageVolume, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageBlockingVolume, 0x0270);
		}

		// class UProceduralFoliageComponent : public UactorComponent
		TEST_METHOD(Class__Foliage__ProceduralFoliageComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, FoliageSpawner, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, TileOverlap, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, UnknownData_TS12, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, SpawningVolume, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageComponent, ProceduralGuid, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageComponent, 0x00E0);
		}

		// class UProceduralFoliageSpawner : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageSpawner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, RandomSeed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, TileSize, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, NumUniqueTiles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, MinimumQuadTreeSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_PF2Z, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, FoliageTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageSpawner, UnknownData_B9F5, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageSpawner, 0x0070);
		}

		// class UAB_S23_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_S23_Hair_ACC01__AB_S23_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_StateResult, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S23_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_S23_Hair_ACC01_C, 0x06F0);
		}

		// class UProceduralFoliageTile : public UObject
		TEST_METHOD(Class__Foliage__ProceduralFoliageTile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, FoliageSpawner, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_SBOW, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, InstancesArray, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageTile, UnknownData_ZYCY, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageTile, 0x0160);
		}

		// class UProceduralFoliageVolume : public Uvolume
		TEST_METHOD(Class__Foliage__ProceduralFoliageVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralFoliageVolume, ProceduralComponent, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralFoliageVolume, 0x0270);
		}

		// class UFoliageInstancedStaticMeshComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Foliage__FoliageInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakePointDamage, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, OnInstanceTakeRadialDamage, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, GenerationGuid, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageInstancedStaticMeshComponent, UnknownData_8MEO, 0x06B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageInstancedStaticMeshComponent, 0x06C0);
		}

		// class UFoliageStatistics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Foliage__FoliageStatistics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageStatistics, 0x0030);
		}

		// class UFoliageType : public UObject
		TEST_METHOD(Class__Foliage__FoliageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UpdateGuid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DensityAdjustmentFactor, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSingleInstanceModeOverrideRadius, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_25RX, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SingleInstanceModeRadius, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Scaling, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_128P, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleX, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleZ, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskByChannel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMask, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_HKKF, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VertexColorMaskThreshold, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_J5DK, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ZOffset, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_JS0R, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AlignMaxAngle, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_O9NT, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RandomPitchAngle, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, GroundSlopeAngle, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Height, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_PETV, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumLayerWeight, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_VL8C, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ExclusionLandscapeLayers, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MinimumExclusionLayerWeight, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LandscapeLayer, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_LMLB, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MeshBounds, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LowBoundOriginRadius, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, Mobility, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_NSVG, 0x0149);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CullDistance, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_EQLV, 0x0156);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverriddenLightMapRes, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, LightmapType, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0YNP, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_F18R, 0x0161);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, BodyInstance, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomNavigableGeometry, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, lightingChannels, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_0S35, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_8TVU, 0x0285);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CustomDepthStencilValue, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, TranslucencySortPriority, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, CollisionRadius, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ShadeRadius, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, NumSteps, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, InitialSeedDensity, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, AverageSpreadDistance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SpreadVariance, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, SeedsPerStep, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, DistributionSeed, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialSeedOffset, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bCanGrowInShade, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, bSpawnsInShade, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_XBHD, 0x02B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxInitialAge, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, MaxAge, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, OverlapPriority, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ProceduralScale, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_OMSR, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ScaleCurve, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, ChangeCount, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_UBD6, 0x035E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, RuntimeVirtualTextures, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureCullMips, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, VirtualTextureRenderPassType, 0x0374);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType, UnknownData_41MG, 0x0375);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType, 0x0378);
		}

		// class UFoliageType_Actor : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_Actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, ActorClass, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, bShouldAttachToBaseComponent, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_Actor, UnknownData_PNZO, 0x0381);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_Actor, 0x0388);
		}

		// class UFoliageType_InstancedStaticMesh : public UFoliageType
		TEST_METHOD(Class__Foliage__FoliageType_InstancedStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, mesh, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, OverrideMaterials, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFoliageType_InstancedStaticMesh, ComponentClass, 0x0390);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFoliageType_InstancedStaticMesh, 0x0398);
		}

		// class UBP_Menu_Slasher04_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher04__BP_Menu_Slasher04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher04_C, UnknownData_3TNR, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher04_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher04_C, BP_Audio_KLR_04, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher04_C, 0x0680);
		}

		// class UBP_S24_necklace_ACC01_REF_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_S24_necklace_ACC01_REF__BP_S24_necklace_ACC01_REF_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S24_necklace_ACC01_REF_C, 0x02B8);
		}

		// class UAB_Menu_Camper_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Camper__AB_Menu_Camper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_TransitionResult_5, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_TransitionResult_4, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_TransitionResult_3, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_UseCachedPose_6, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult_7, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_9, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_BlendListByBool_4, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_8, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult_6, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_7, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_6, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_BlendListByBool_3, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult_5, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateMachine_3, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_LayeredBoneBlend_4, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_LayeredBoneBlend_3, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_5, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult_4, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateMachine_2, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_BlendListByBool_2, 0x0AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_4, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_3, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_LayeredBoneBlend_2, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer_2, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_LayeredBoneBlend, 0x0D78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SequencePlayer, 0x0E38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SaveCachedPose_2, 0x0EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_TransitionResult_2, 0x0F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_TransitionResult, 0x0F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_UseCachedPose_5, 0x0FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult_3, 0x0FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_LocalToComponentSpace, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_UseCachedPose_4, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_ComponentToLocalSpace, 0x1070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_AnimDynamics, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SpringBone, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult_2, 0x1628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_UseCachedPose_3, 0x1660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateResult, 0x1690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_StateMachine, 0x16C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_BlendListByBool, 0x1778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_UseCachedPose_2, 0x1818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_SaveCachedPose, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, AnimGraphNode_UseCachedPose, 0x1900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, Hand_Position, 0x1930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, UnknownData_8GN9, 0x1931);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, SelectedIdleIndex, 0x1934);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, Menu_Idles, 0x1938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, Role_Selected, 0x1948);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, Dynamic_Override, 0x1949);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, Override_Nea, 0x194A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Camper_C, Override_Jane, 0x194B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Camper_C, 0x194C);
		}

		// class UBP_Menu_Slasher05_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher05__BP_Menu_Slasher05_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher05_C, UnknownData_FDWE, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher05_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher05_C, BP_Audio_KLR_05, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher05_C, 0x0680);
		}

		// class UBP_JP_Hair_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_JP_Hair_Acc01__BP_JP_Hair_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_JP_Hair_Acc01_C, 0x02B8);
		}

		// class UAB_Menu_Slasher22_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher22__AB_Menu_Slasher22_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_SequencePlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_SequencePlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_RandomPlayer, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_BlendListByBool, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, Is_Online, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, UnknownData_KBSM, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_C, _anim_switch, 0x0644);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher22_C, 0x0648);
		}

		// class UAB_Menu_Quen_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Quen__AB_Menu_Quen_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Quen_C, 0x194C);
		}

		// class UAB_Menu_Jeff01_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Jeff01__AB_Menu_Jeff01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Jeff01_C, 0x194C);
		}

		// class UBPI_Effect_General_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Effect_General__BPI_Effect_General_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Effect_General_C, 0x0030);
		}

		// class UAB_SK_Ring_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SK_Ring_ACC01__AB_SK_Ring_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, AnimGraphNode_AnimDynamics, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, Initialized, 0x0CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, UnknownData_379L, 0x0CF1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Ring_ACC01_C, OwningCharacterSkeletalMesh, 0x0CF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SK_Ring_ACC01_C, 0x0D00);
		}

		// class UBP_Menu_Slasher18_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher18__BP_Menu_Slasher18_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, UnknownData_0CGJ, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, BP_Audio_KLR_19, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, rings, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, DemonModeMenu, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, SKWS01_REF, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_DemonModeCusto_Color_4A028AF64D8C75B37ACB968AFFF999A6, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_DemonModeCusto_Demon_Custo_Dissolve_4A028AF64D8C75B37ACB968AFFF999A6, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_DemonModeCusto_Normal_Custo_Dissolve_4A028AF64D8C75B37ACB968AFFF999A6, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_DemonModeCusto__Direction_4A028AF64D8C75B37ACB968AFFF999A6, 0x06B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, UnknownData_IM6J, 0x06B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_DemonModeCusto, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_KatanaDissolve_Dissolve_E350E1F74AF3386DE5C9E7A92E1CFCA4, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_KatanaDissolve__Direction_E350E1F74AF3386DE5C9E7A92E1CFCA4, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, UnknownData_VNZA, 0x06C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, TML_KatanaDissolve, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, IsKatanaVisible, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, UnknownData_5WAJ, 0x06D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, NormalModeCustoParts, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, DemonModeVFX, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, DemonModeCustoParts, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, SKOniEmissiveDefault, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, isInDemonMode, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, UnknownData_I9L4, 0x0719);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, SM_OniEmissiveDefault, 0x0720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, MaxSwordDissolveValue, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher18_C, MinDissolvevalue, 0x0734);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher18_C, 0x0738);
		}

		// class UAB_Menu_S22_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_S22__AB_Menu_S22_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_S22_C, 0x194C);
		}

		// class UAB_Menu_Slasher18_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher18__AB_Menu_Slasher18_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, AnimGraphNode_BlendListByBool_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, AnimGraphNode_RandomPlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, AnimGraphNode_BlendListByBool, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, AnimGraphNode_SequencePlayer_2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, Role_Selected, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher18_C, Is_Online, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher18_C, 0x055A);
		}

		// class USkeletalMeshComponentBudgeted : public UskeletalMeshComponent
		TEST_METHOD(Class__AnimationBudgetAllocator__SkeletalMeshComponentBudgeted)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponentBudgeted, UnknownData_AOV7, 0x0B5C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponentBudgeted, UnknownData_F7JK, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshComponentBudgeted, UnknownData_L7MS, 0x0B79);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshComponentBudgeted, 0x0B80);
		}

		// class UAnimationBudgetBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AnimationBudgetAllocator__AnimationBudgetBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationBudgetBlueprintLibrary, 0x0030);
		}

		// class UAmbisonicsEncodingSettings : public USoundfieldEncodingSettingsBase
		TEST_METHOD(Class__SoundFields__AmbisonicsEncodingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, AmbisonicsOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbisonicsEncodingSettings, UnknownData_RBPP, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbisonicsEncodingSettings, 0x0038);
		}

		// class UMaterialExpressionSpriteTextureSampler : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Paper2D__MaterialExpressionSpriteTextureSampler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, bSampleAdditionalTextures, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, UnknownData_GT2S, 0x0131);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, AdditionalSlotIndex, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpriteTextureSampler, SlotDisplayName, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpriteTextureSampler, 0x0150);
		}

		// class UPaperCharacter : public Ucharacter
		TEST_METHOD(Class__Paper2D__PaperCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperCharacter, Sprite, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperCharacter, UnknownData_CSPL, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperCharacter, 0x04E0);
		}

		// class UPaperFlipbook : public UObject
		TEST_METHOD(Class__Paper2D__PaperFlipbook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, FramesPerSecond, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_5XY2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, KeyFrames, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, DefaultMaterial, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, CollisionSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbook, UnknownData_94S0, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbook, 0x0058);
		}

		// class UPaperFlipbookActor : public Uactor
		TEST_METHOD(Class__Paper2D__PaperFlipbookActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookActor, 0x0238);
		}

		// class UPaperFlipbookComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperFlipbookComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SourceFlipbook, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, MATERIAL, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, playRate, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, UnknownData_DOOC, 0x048D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, AccumulatedTime, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedFrameIndex, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, SpriteColor, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, CachedBodySetup, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperFlipbookComponent, OnFinishedPlaying, 0x04B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperFlipbookComponent, 0x04C0);
		}

		// class UPaperGroupedSpriteActor : public Uactor
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteActor, 0x0238);
		}

		// class UPaperGroupedSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperGroupedSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, InstanceMaterials, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, PerInstanceSpriteData, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperGroupedSpriteComponent, UnknownData_OZ8K, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperGroupedSpriteComponent, 0x04B0);
		}

		// class UPaperRuntimeSettings : public UObject
		TEST_METHOD(Class__Paper2D__PaperRuntimeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableSpriteAtlasGroups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bEnableTerrainSplineEditing, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, bResizeSpriteDataToMatchTextures, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperRuntimeSettings, UnknownData_GU4K, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperRuntimeSettings, 0x0038);
		}

		// class UPaperSprite : public UObject
		TEST_METHOD(Class__Paper2D__PaperSprite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_6F60, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AdditionalSourceTextures, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceUV, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceDimension, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedSourceTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, DefaultMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterial, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, Sockets, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, SpriteCollisionDomain, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_A94U, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, PixelsPerUnrealUnit, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BodySetup, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, AlternateMaterialSplitIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, UnknownData_PWC3, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSprite, BakedRenderData, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSprite, 0x00B0);
		}

		// class UPaperSpriteActor : public Uactor
		TEST_METHOD(Class__Paper2D__PaperSpriteActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteActor, 0x0238);
		}

		// class UPaperSpriteAtlas : public UObject
		TEST_METHOD(Class__Paper2D__PaperSpriteAtlas)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteAtlas, 0x0030);
		}

		// class UPaperSpriteBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__PaperSpriteBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteBlueprintLibrary, 0x0030);
		}

		// class UPaperSpriteComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperSpriteComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SourceSprite, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, MaterialOverride, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, SpriteColor, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperSpriteComponent, UnknownData_FF8D, 0x0498);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperSpriteComponent, 0x04A0);
		}

		// class UPaperTerrainActor : public Uactor
		TEST_METHOD(Class__Paper2D__PaperTerrainActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainActor, DummyRoot, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainActor, splineComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainActor, RenderComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainActor, 0x0248);
		}

		// class UPaperTerrainComponent : public UprimitiveComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainMaterial, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bClosedSpline, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, bFilledSpline, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_M7FD, 0x0432);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, AssociatedSpline, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, RandomSeed, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SegmentOverlapAmount, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, TerrainColor, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, ReparamStepsPerSegment, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, SpriteCollisionDomain, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_ODL7, 0x045D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CollisionThickness, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_DW1R, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, CachedBodySetup, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainComponent, UnknownData_IMAQ, 0x0470);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainComponent, 0x0480);
		}

		// class UPaperTerrainMaterial : public UDataAsset
		TEST_METHOD(Class__Paper2D__PaperTerrainMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, Rules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainMaterial, InteriorFill, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainMaterial, 0x0050);
		}

		// class UPaperTerrainSplineComponent : public UsplineComponent
		TEST_METHOD(Class__Paper2D__PaperTerrainSplineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTerrainSplineComponent, UnknownData_E3KV, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTerrainSplineComponent, 0x0530);
		}

		// class UPaperTileLayer : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerWidth, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerHeight, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_9ECS, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionThicknessOverride, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, CollisionOffsetOverride, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, LayerColor, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedWidth, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedHeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, UnknownData_GK2J, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedCells, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, TileSet, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileLayer, AllocatedGrid, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileLayer, 0x00A0);
		}

		// class UPaperTileMap : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Draft, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, Licensed, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_Z8JV, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapWidth, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MapHeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileWidth, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileHeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, PixelsPerUnrealUnit, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerTileY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SeparationPerLayer, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_3UGK, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SelectedTileSet, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, MATERIAL, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, TileLayers, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, CollisionThickness, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, SpriteCollisionDomain, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, ProjectionMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_ANO3, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, HexSideLength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_KA0R, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, BodySetup, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, LayerNameIndex, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMap, UnknownData_CTNR, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMap, 0x00C0);
		}

		// class UPaperTileMapActor : public Uactor
		TEST_METHOD(Class__Paper2D__PaperTileMapActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapActor, RenderComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapActor, 0x0238);
		}

		// class UPaperTileMapComponent : public UMeshComponent
		TEST_METHOD(Class__Paper2D__PaperTileMapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_56CX, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MapHeight, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileWidth, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileHeight, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, DefaultLayerTileSet, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, MATERIAL, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileLayers, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, TileMapColor, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UseSingleLayerIndex, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, bUseSingleLayer, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_PVEO, 0x04BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, tileMap, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileMapComponent, UnknownData_0899, 0x04C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileMapComponent, 0x04D0);
		}

		// class UPaperTileSet : public UObject
		TEST_METHOD(Class__Paper2D__PaperTileSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileSheet, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AdditionalSourceTextures, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, BorderMargin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileSpacing, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, DrawingOffset, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, WidthInTiles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, HeightInTiles, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, AllocatedHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, PerTileData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Terrains, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileWidth, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, TileHeight, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Margin, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPaperTileSet, Spacing, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPaperTileSet, 0x00B0);
		}

		// class UTileMapBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Paper2D__TileMapBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileMapBlueprintLibrary, 0x0030);
		}

		// class UAB_KS_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_KS_Hair_ACC01__AB_KS_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x21B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x2610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x2A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x2AA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x2AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x2AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, UnknownData_JSGC, 0x2B18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x33E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x3840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x3CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x4100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x4560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x49C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x4E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x5280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x52B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x52D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x52F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x5328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_StateResult, 0x5358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x5390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x5440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x5580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_KS_Hair_ACC01_C, 0x5638);
		}

		// class UDemogorgonPounceAttack : public UPounceAttack
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPounceAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPounceAttack, UnknownData_U9W2, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPounceAttack, 0x0360);
		}

		// class UDemogorgonPounceAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPounceAttackOpenSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPounceAttackOpenSubstate, 0x00F0);
		}

		// class UDemogorgonPounceAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPounceAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPounceAttackSuccessSubstate, 0x00D8);
		}

		// class UDemogorgonPounceAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPounceAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPounceAttackMissSubstate, 0x00E0);
		}

		// class UDemogorgonPounceAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPounceAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPounceAttackObstructSubstate, 0x00E8);
		}

		// class UDemogorgonPounceInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPounceInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPounceInteraction, UnknownData_62VJ, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPounceInteraction, UnknownData_WHN4, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPounceInteraction, _chargedAttackState, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPounceInteraction, _owningSlasher, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPounceInteraction, UnknownData_4RJE, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPounceInteraction, 0x06E0);
		}

		// class UDemogorgonPowerItemProgressComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__TheDemogorgon__DemogorgonPowerItemProgressComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemogorgonPowerItemProgressComponent, _portalPlacerState, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemogorgonPowerItemProgressComponent, 0x00C0);
		}

		// class UPortalSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheDemogorgon__PortalSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalSurvivorSubAnimInstance, UnknownData_RFJC, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalSurvivorSubAnimInstance, _isDestroyingPortal, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalSurvivorSubAnimInstance, _isSpooked, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalSurvivorSubAnimInstance, _hasSkillCheckFailed, 0x0532);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPortalSurvivorSubAnimInstance, UnknownData_1LXN, 0x0533);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPortalSurvivorSubAnimInstance, 0x0540);
		}

		// class UInstancedFoliageActor : public Uactor
		TEST_METHOD(Class__Foliage__InstancedFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedFoliageActor, UnknownData_KH18, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedFoliageActor, 0x0280);
		}

		// class UInteractiveFoliageActor : public UStaticMeshActor
		TEST_METHOD(Class__Foliage__InteractiveFoliageActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, CapsuleComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, TouchingActorEntryPosition, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageVelocity, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageForce, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliagePosition, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageDamageImpulseScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageTouchImpulseScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageStiffness, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageStiffnessQuadratic, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, FoliageDamping, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, MaxDamageImpulse, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, MaxTouchImpulse, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, MaxForce, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, Mass, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractiveFoliageActor, UnknownData_XZGS, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveFoliageActor, 0x02A0);
		}

		// class UAB_SK_Mask_T_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SK_Mask_T_ACC01__AB_SK_Mask_T_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Mask_T_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Mask_T_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Mask_T_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Mask_T_ACC01_C, OwningCharacterSkeletalMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Mask_T_ACC01_C, Initialized, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SK_Mask_T_ACC01_C, 0x03F9);
		}

		// class UDBDGameplayTagUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GameplayTagUtilities__DBDGameplayTagUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDGameplayTagUtilities, 0x0030);
		}

		// class UGameplayTagContainerComponent : public UactorComponent
		TEST_METHOD(Class__GameplayTagUtilities__GameplayTagContainerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameplayTagContainerComponent, UnknownData_QK41, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayTagContainerComponent, 0x0128);
		}

		// class UObjectStateProvider : public UInterface
		TEST_METHOD(Class__GameplayTagUtilities__ObjectStateProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectStateProvider, 0x0030);
		}

		// class UBP_K23_Coat_ACC01_REF_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_K23_Coat_ACC01_REF__BP_K23_Coat_ACC01_REF_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_K23_Coat_ACC01_REF_C, 0x02B8);
		}

		// class UBP_Sky_Sphere_C : public Uactor
		TEST_METHOD(BlueprintGeneratedClass__BP_Sky_Sphere__BP_Sky_Sphere_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, SkySphereMesh, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Base, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Sky_material, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Refresh_material, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, UnknownData_I4OU, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Directional_light_actor, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Colors_determined_by_sun_position, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, UnknownData_6D6N, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Sun_height, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Sun_brightness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Horizon_Falloff, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Zenith_Color, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Horizon_color, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Cloud_color, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Overall_Color, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Cloud_speed, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Cloud_opacity, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Stars_brightness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, UnknownData_FOMS, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Horizon_color_curve, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Zenith_color_curve, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Sky_Sphere_C, Cloud_color_curve, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Sky_Sphere_C, 0x02D0);
		}

		// class UVFX_Function_Lib_Character_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__VFX_Function_Lib_Character__VFX_Function_Lib_Character_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVFX_Function_Lib_Character_C, 0x0030);
		}

		// class UBP_Menu_Slasher19_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher19__BP_Menu_Slasher19_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher19_C, UnknownData_YKGI, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher19_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher19_C, BP_Audio_KLR_20, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher19_C, HarpoonMesh, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher19_C, 0x0688);
		}

		// class UBP_K23_Hair_ACC01_REF_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_K23_Hair_ACC01_REF__BP_K23_Hair_ACC01_REF_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_K23_Hair_ACC01_REF_C, 0x02B8);
		}

		// class UBP_Menu_CamperMale01_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale01__BP_Menu_CamperMale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale01_C, 0x0649);
		}

		// class UAB_Menu_Slasher19_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher19__AB_Menu_Slasher19_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, AnimGraphNode_BlendListByBool_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, AnimGraphNode_RandomPlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, AnimGraphNode_BlendListByBool, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, AnimGraphNode_SequencePlayer_2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, Role_Selected, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher19_C, Is_Online, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher19_C, 0x055A);
		}

		// class UAutomationUtilsBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AutomationUtils__AutomationUtilsBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationUtilsBlueprintLibrary, 0x0030);
		}

		// class UQosBeaconClient : public UOnlineBeaconClient
		TEST_METHOD(Class__Qos__QosBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosBeaconClient, UnknownData_XFLQ, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQosBeaconClient, 0x0300);
		}

		// class UQosBeaconHost : public UOnlineBeaconHostObject
		TEST_METHOD(Class__Qos__QosBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosBeaconHost, UnknownData_BWGM, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQosBeaconHost, 0x0268);
		}

		// class UQosEvaluator : public UObject
		TEST_METHOD(Class__Qos__QosEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosEvaluator, UnknownData_0C5K, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosEvaluator, bInProgress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosEvaluator, bCancelOperation, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosEvaluator, UnknownData_K33C, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosEvaluator, Datacenters, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosEvaluator, UnknownData_D71L, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQosEvaluator, 0x0088);
		}

		// class UQosRegionManager : public UObject
		TEST_METHOD(Class__Qos__QosRegionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, NumTestsPerRegion, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, PingTimeout, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, RegionDefinitions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, DatacenterDefinitions, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, LastCheckTimestamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, Evaluator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, QosEvalResult, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, UnknownData_I8FB, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, RegionOptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, ForceRegionId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, bRegionForcedViaCommandline, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, UnknownData_CXMP, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, SelectedRegionId, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQosRegionManager, UnknownData_M2N7, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQosRegionManager, 0x00C8);
		}

		// class UAB_Menu_LS_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_LS__AB_Menu_LS_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_LS_C, 0x194C);
		}

		// class URejoinCheck : public UObject
		TEST_METHOD(Class__Rejoin__RejoinCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URejoinCheck, LastKnownStatus, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URejoinCheck, bRejoinAfterCheck, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::URejoinCheck, bAttemptingRejoin, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::URejoinCheck, UnknownData_QQRL, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URejoinCheck, 0x0128);
		}

		// class UFieldNodeBase : public UactorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeBase, 0x00B8);
		}

		// class UDatasmithObjectTemplate : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithObjectTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithObjectTemplate, UnknownData_3MBX, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithObjectTemplate, 0x0038);
		}

		// class UFieldNodeFloat : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeFloat)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeFloat, 0x00B8);
		}

		// class UDatasmithActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, Layers, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithActorTemplate, tags, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithActorTemplate, 0x00D8);
		}

		// class UUniformScalar : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__UniformScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformScalar, UnknownData_V069, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformScalar, 0x00C0);
		}

		// class UDatasmithAdditionalData : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithAdditionalData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAdditionalData, 0x0030);
		}

		// class UDatasmithAreaLightActor : public Uactor
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, LightType, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, LightShape, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, UnknownData_VK5F, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, Dimensions, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, intensity, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, IntensityUnits, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, UnknownData_QGO9, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, color, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, Temperature, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, IESTexture, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, bUseIESBrightness, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, UnknownData_VVCW, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, IESBrightnessScale, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, rotation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, SourceRadius, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, SourceLength, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, AttenuationRadius, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, SpotlightInnerAngle, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActor, SpotlightOuterAngle, 0x0284);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActor, 0x0288);
		}

		// class UDatasmithAreaLightActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithAreaLightActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, LightShape, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_J6BC, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Dimensions, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, color, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, intensity, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IntensityUnits, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_DG6L, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, Temperature, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, bUseIESBrightness, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, UnknownData_ABYK, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, IESBrightnessScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceRadius, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, SourceLength, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAreaLightActorTemplate, AttenuationRadius, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAreaLightActorTemplate, 0x00B0);
		}

		// class URadialFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__RadialFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MinRange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, MaxRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Default, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, radius, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, position, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, Falloff, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialFalloff, UnknownData_ZGTN, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialFalloff, 0x00E0);
		}

		// class UPlaneFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__PlaneFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MinRange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, MaxRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Default, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, distance, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, position, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, normal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, Falloff, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneFalloff, UnknownData_CPNQ, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneFalloff, 0x00E8);
		}

		// class UBoxFalloff : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__BoxFalloff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MinRange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, MaxRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Default, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_N5WU, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Transform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, Falloff, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxFalloff, UnknownData_002Q, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxFalloff, 0x0110);
		}

		// class UNoiseField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__NoiseField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MinRange, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, MaxRange, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNoiseField, Transform, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNoiseField, 0x00F0);
		}

		// class UDatasmithAssetImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetImportData, 0x0030);
		}

		// class UFieldNodeVector : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeVector, 0x00B8);
		}

		// class UDatasmithStaticMeshImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshImportData, 0x0030);
		}

		// class UUniformVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__UniformVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformVector, direction, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformVector, 0x00C8);
		}

		// class UDatasmithStaticMeshCADImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshCADImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshCADImportData, 0x0030);
		}

		// class UDatasmithSceneImportData : public UAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneImportData, 0x0030);
		}

		// class URadialVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RadialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialVector, position, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialVector, 0x00C8);
		}

		// class UDatasmithTranslatedSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithTranslatedSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithTranslatedSceneImportData, 0x0030);
		}

		// class UDatasmithCADImportSceneData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithCADImportSceneData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCADImportSceneData, 0x0030);
		}

		// class URandomVector : public UFieldNodeVector
		TEST_METHOD(Class__FieldSystemEngine__RandomVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URandomVector, UnknownData_H4UC, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URandomVector, 0x00C0);
		}

		// class UDatasmithMDLSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithMDLSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMDLSceneImportData, 0x0030);
		}

		// class UDatasmithGLTFSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithGLTFSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, generator, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, version, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, UnknownData_IYHN, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, Author, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, License, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithGLTFSceneImportData, source, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithGLTFSceneImportData, 0x0078);
		}

		// class UOperatorField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__OperatorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_XJYS, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, RightField, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, LeftField, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, Operation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOperatorField, UnknownData_7D5O, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOperatorField, 0x00D8);
		}

		// class UDatasmithStaticMeshGLTFImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshGLTFImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshGLTFImportData, SourceMeshName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshGLTFImportData, 0x0040);
		}

		// class UFieldNodeInt : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__FieldNodeInt)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldNodeInt, 0x00B8);
		}

		// class UDatasmithFBXSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithFBXSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bGenerateLightmapUVs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_26KZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, TexturesDir, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, IntermediateSerialization, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, bColorizeMaterials, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithFBXSceneImportData, UnknownData_BJJG, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithFBXSceneImportData, 0x0050);
		}

		// class UToIntegerField : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__ToIntegerField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToIntegerField, FloatField, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToIntegerField, 0x00C0);
		}

		// class UDatasmithDeltaGenAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenAssetImportData, 0x0030);
		}

		// class UToFloatField : public UFieldNodeFloat
		TEST_METHOD(Class__FieldSystemEngine__ToFloatField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToFloatField, IntField, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToFloatField, 0x00C0);
		}

		// class UDatasmithDeltaGenSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithDeltaGenSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bMergeNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bOptimizeDuplicatedNodes, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bRemoveInvisibleNodes, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bSimplifyNodeHierarchy, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportVar, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_WBSW, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, VarPath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportPos, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_ZPGE, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, PosPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, bImportTml, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, UnknownData_MRAW, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithDeltaGenSceneImportData, TmlPath, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithDeltaGenSceneImportData, 0x0098);
		}

		// class UCullingField : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__CullingField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Culling, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Field, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, Operation, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullingField, UnknownData_R3HW, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullingField, 0x00D0);
		}

		// class UReturnResultsTerminal : public UFieldNodeBase
		TEST_METHOD(Class__FieldSystemEngine__ReturnResultsTerminal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReturnResultsTerminal, 0x00B8);
		}

		// class UDatasmithVREDAssetImportData : public UDatasmithAssetImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDAssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDAssetImportData, 0x0030);
		}

		// class UFieldSystemActor : public Uactor
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemActor, FieldSystemComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemActor, 0x0238);
		}

		// class UDatasmithVREDSceneImportData : public UDatasmithFBXSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithVREDSceneImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bMergeNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bOptimizeDuplicatedNodes, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportMats, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_CBXT, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, MatsPath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportVar, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bCleanVar, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_56CL, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, VarPath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportLightInfo, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_X9IH, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, LightInfoPath, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, bImportClipInfo, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, UnknownData_M9YW, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithVREDSceneImportData, ClipInfoPath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithVREDSceneImportData, 0x00B0);
		}

		// class UFieldSystem : public UObject
		TEST_METHOD(Class__FieldSystemEngine__FieldSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystem, UnknownData_OC3U, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystem, 0x0040);
		}

		// class UFieldSystemComponent : public UprimitiveComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, FieldSystem, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_FXF1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, SupportedSolvers, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemComponent, UnknownData_O4J8, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemComponent, 0x0470);
		}

		// class UDatasmithIFCSceneImportData : public UDatasmithSceneImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithIFCSceneImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithIFCSceneImportData, 0x0030);
		}

		// class UDatasmithStaticMeshIFCImportData : public UDatasmithStaticMeshImportData
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshIFCImportData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshIFCImportData, SourceGlobalId, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshIFCImportData, 0x0040);
		}

		// class UDatasmithAssetUserData : public UAssetUserData
		TEST_METHOD(Class__DatasmithContent__DatasmithAssetUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithAssetUserData, Metadata, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithAssetUserData, 0x0080);
		}

		// class UDatasmithCineCameraActorTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraActorTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraActorTemplate, LookatTrackingSettings, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraActorTemplate, 0x0070);
		}

		// class UDatasmithCineCameraComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithCineCameraComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FilmbackSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, LensSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, FocusSettings, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentFocalLength, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, CurrentAperture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, UnknownData_L3OA, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCineCameraComponentTemplate, PostProcessSettings, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCineCameraComponentTemplate, 0x00A0);
		}

		// class UFieldSystemMetaData : public UactorComponent
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaData, 0x00B8);
		}

		// class UFieldSystemMetaDataIteration : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataIteration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, Iterations, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataIteration, UnknownData_VUWQ, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataIteration, 0x00C0);
		}

		// class UDatasmithContentBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DatasmithContent__DatasmithContentBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithContentBlueprintLibrary, 0x0030);
		}

		// class UFieldSystemMetaDataProcessingResolution : public UFieldSystemMetaData
		TEST_METHOD(Class__FieldSystemEngine__FieldSystemMetaDataProcessingResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, ResolutionType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFieldSystemMetaDataProcessingResolution, UnknownData_R5E0, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFieldSystemMetaDataProcessingResolution, 0x00C0);
		}

		// class UUniformInteger : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__UniformInteger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, Magnitude, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUniformInteger, UnknownData_YDQ7, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUniformInteger, 0x00C0);
		}

		// class UDatasmithCustomActionBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithCustomActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCustomActionBase, UnknownData_XDJH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCustomActionBase, 0x0038);
		}

		// class URadialIntMask : public UFieldNodeInt
		TEST_METHOD(Class__FieldSystemEngine__RadialIntMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, radius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, position, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, InteriorValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, ExteriorValue, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, SetMaskCondition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialIntMask, UnknownData_09D0, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialIntMask, 0x00D8);
		}

		// class UDatasmithImportedSequencesActor : public Uactor
		TEST_METHOD(Class__DatasmithContent__DatasmithImportedSequencesActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportedSequencesActor, ImportedSequences, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportedSequencesActor, 0x0240);
		}

		// class UDatasmithOptionsBase : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithOptionsBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithOptionsBase, 0x0030);
		}

		// class UDatasmithCommonTessellationOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithCommonTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithCommonTessellationOptions, Options, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithCommonTessellationOptions, 0x0040);
		}

		// class UDatasmithImportOptions : public UDatasmithOptionsBase
		TEST_METHOD(Class__DatasmithContent__DatasmithImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, SearchPackagePolicy, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialConflictPolicy, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, TextureConflictPolicy, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, StaticMeshActorImportPolicy, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, LightImportPolicy, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, CameraImportPolicy, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, OtherActorImportPolicy, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, MaterialQuality, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_F0X4, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, BaseOptions, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, ReimportOptions, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_17OX, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FileName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, FilePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithImportOptions, UnknownData_TOLB, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithImportOptions, 0x0080);
		}

		// class UDatasmithLandscapeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLandscapeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, LandscapeMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, StaticLightingLOD, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLandscapeTemplate, UnknownData_69RE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLandscapeTemplate, 0x0048);
		}

		// class UDatasmithLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_WM3S, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_40RZ, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, intensity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, Temperature, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESBrightnessScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightColor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, UnknownData_T2LS, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, LightFunctionMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithLightComponentTemplate, IESTexture, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithLightComponentTemplate, 0x0070);
		}

		// class UDatasmithMaterialInstanceTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithMaterialInstanceTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ParentMaterial, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, ScalarParameterValues, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, VectorParameterValues, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, TextureParameterValues, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithMaterialInstanceTemplate, StaticParameters, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithMaterialInstanceTemplate, 0x01A8);
		}

		// class UDatasmithPointLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPointLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, IntensityUnits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, UnknownData_WAYI, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceRadius, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, SourceLength, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPointLightComponentTemplate, AttenuationRadius, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPointLightComponentTemplate, 0x0048);
		}

		// class UDatasmithPostProcessVolumeTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithPostProcessVolumeTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_2UIP, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, settings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithPostProcessVolumeTemplate, UnknownData_C2Y1, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithPostProcessVolumeTemplate, 0x0090);
		}

		// class UDatasmithScene : public UObject
		TEST_METHOD(Class__DatasmithContent__DatasmithScene)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithScene, UnknownData_D2KB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithScene, 0x0038);
		}

		// class UDatasmithSceneActor : public Uactor
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneActor, Scene, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneActor, RelatedActors, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneActor, 0x0288);
		}

		// class UBP_GK_FlowerKeyBow_ACC01_C : public UBP_GK_Flower_ACC01_C
		TEST_METHOD(BlueprintGeneratedClass__BP_GK_FlowerKeyBow_ACC01__BP_GK_FlowerKeyBow_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GK_FlowerKeyBow_ACC01_C, 0x02B8);
		}

		// class UPHISM_SM_LF_SmallTree02_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_SmallTree02__PHISM_SM_LF_SmallTree02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_SmallTree02_C, 0x06C0);
		}

		// class UBP_GS_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_GS_Hair_ACC01__BP_GS_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GS_Hair_ACC01_C, 0x02B8);
		}

		// class UAB_Menu_Slasher06_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher06__AB_Menu_Slasher06_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_SequencePlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_RandomPlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher06_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher06_C, 0x0642);
		}

		// class UAB_K23_Coat_ACCs01_REF_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_K23_Coat_ACCs01_REF__AB_K23_Coat_ACCs01_REF_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_20, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_19, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_18, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_17, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_16, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_15, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_14, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_UseCachedPose_3, 0x21B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_LocalToComponentSpace_2, 0x21E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_ComponentToLocalSpace_2, 0x2200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_StateResult_3, 0x2220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, UnknownData_8NDA, 0x2258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_13, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_12, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_11, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_10, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_9, 0x33E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_8, 0x3840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_7, 0x3CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_6, 0x4100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_5, 0x4560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_4, 0x49C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_3, 0x4E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics_2, 0x5280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_AnimDynamics, 0x56E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_ComponentToLocalSpace, 0x5B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_UseCachedPose_2, 0x5B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_LocalToComponentSpace, 0x5B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_StateResult_2, 0x5BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_UseCachedPose, 0x5BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_StateResult, 0x5C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_StateMachine, 0x5C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_CopyPoseFromMesh, 0x5D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Coat_ACCs01_REF_C, AnimGraphNode_SaveCachedPose, 0x5E40);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_K23_Coat_ACCs01_REF_C, 0x5EF8);
		}

		// class UAB_Menu_Haiti_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Haiti__AB_Menu_Haiti_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Haiti_C, 0x194C);
		}

		// class UBP_BaseItemVfx_C : public UItemVfx
		TEST_METHOD(BlueprintGeneratedClass__BP_BaseItemVfx__BP_BaseItemVfx_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseItemVfx_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseItemVfx_C, DefaultSceneRoot, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseItemVfx_C, ParticleSystems, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BaseItemVfx_C, AbsoluteRotation, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BaseItemVfx_C, 0x0259);
		}

		// class UAB_GS_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_GS_Hair_ACC01__AB_GS_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_20, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_19, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_18, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_17, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_16, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_15, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_14, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_13, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_12, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_11, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_TwoBoneIK_2, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_22, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_21, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_20, 0x1A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_19, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x22D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x2B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x3450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x38B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x3D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x4170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x4190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, UnknownData_WUSS, 0x41C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_TwoBoneIK, 0x41D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_10, 0x43E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_9, 0x4510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_8, 0x4640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_7, 0x4770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_6, 0x48A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_5, 0x49D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_4, 0x4B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_3, 0x4C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_2, 0x4D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController, 0x4E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x4FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x4FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x5010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x5470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x58D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x5D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x6190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x65F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x6A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x6EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x7310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x7770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x7BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x8030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x8050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x8088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_StateResult, 0x80B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x80F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x81A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x82E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_GS_Hair_ACC01_C, 0x8398);
		}

		// class UAB_QM_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_QM_Hair_ACC01__AB_QM_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, UnknownData_P4N5, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_StateResult, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x2880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QM_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x29C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_QM_Hair_ACC01_C, 0x2A78);
		}

		// class UPHISM_SM_LF_SmallTree01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_SmallTree01__PHISM_SM_LF_SmallTree01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_SmallTree01_C, 0x06C0);
		}

		// class UBP_Effect_Killer07Body01_C : public UBP_BaseItemVfx_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_Killer07Body01__BP_Effect_Killer07Body01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Killer07Body01_C, UnknownData_XM6G, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Killer07Body01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Killer07Body01_C, TotalTime, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_Killer07Body01_C, 0x026C);
		}

		// class UPPAB_Legion_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__PPAB_Legion__PPAB_Legion_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_SubInput, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_AnimDynamics_2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_AnimDynamics, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_ComponentToLocalSpace, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_LocalToComponentSpace, 0x0C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPPAB_Legion_C, AnimGraphNode_ModifyBone, 0x0C30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPPAB_Legion_C, 0x0D40);
		}

		// class UBP_K21_Jaw01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_K21_Jaw01__BP_K21_Jaw01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_K21_Jaw01_C, 0x02B8);
		}

		// class UBP_KK_W01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_KK_W01__BP_KK_W01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KK_W01_C, 0x02B8);
		}

		// class UDatasmithSceneComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSceneComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_JK0G, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, RelativeTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, Mobility, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_W5LT, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, AttachParent, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, tags, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSceneComponentTemplate, UnknownData_7XB4, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSceneComponentTemplate, 0x0100);
		}

		// class UDatasmithSkyLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSkyLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, UnknownData_NAB0, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, CubemapResolution, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSkyLightComponentTemplate, Cubemap, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSkyLightComponentTemplate, 0x0048);
		}

		// class UDatasmithSpotLightComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithSpotLightComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, InnerConeAngle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithSpotLightComponentTemplate, OuterConeAngle, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithSpotLightComponentTemplate, 0x0040);
		}

		// class UDatasmithStaticMeshComponentTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshComponentTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, StaticMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshComponentTemplate, OverrideMaterials, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshComponentTemplate, 0x0050);
		}

		// class UDatasmithStaticMeshTemplate : public UDatasmithObjectTemplate
		TEST_METHOD(Class__DatasmithContent__DatasmithStaticMeshTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, SectionInfoMap, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapCoordinateIndex, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, LightMapResolution, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, BuildSettings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDatasmithStaticMeshTemplate, StaticMaterials, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDatasmithStaticMeshTemplate, 0x00B0);
		}

		// class UVRNotificationsComponent : public UactorComponent
		TEST_METHOD(Class__HeadMountedDisplay__VRNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializingAndNeedsHMDToBeTrackedDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDTrackingInitializedDelegate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRecenteredDelegate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDLostDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDReconnectedDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDConnectCanceledDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDPutOnHeadDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, HMDRemovedFromHeadDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVRNotificationsComponent, VRControllerRecenteredDelegate, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVRNotificationsComponent, 0x0148);
		}

		// class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__HeadMountedDisplayFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHeadMountedDisplayFunctionLibrary, 0x0030);
		}

		// class UMotionControllerComponent : public UprimitiveComponent
		TEST_METHOD(Class__HeadMountedDisplay__MotionControllerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_80L9, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, MotionSource, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_XBP6, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CurrentTrackingStatus, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, bDisplayDeviceModel, 0x0441);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_L342, 0x0442);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayModelSource, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, CustomDisplayMesh, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayMeshMaterialOverrides, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_8N7W, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, DisplayComponent, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMotionControllerComponent, UnknownData_1RV8, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionControllerComponent, 0x04F0);
		}

		// class UMotionTrackedDeviceFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__MotionTrackedDeviceFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMotionTrackedDeviceFunctionLibrary, 0x0030);
		}

		// class UXRAssetFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRAssetFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRAssetFunctionLibrary, 0x0030);
		}

		// class UAsyncTask_LoadXRDeviceVisComponent : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__HeadMountedDisplay__AsyncTask_LoadXRDeviceVisComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnModelLoaded, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, OnLoadFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, UnknownData_WYH1, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncTask_LoadXRDeviceVisComponent, SpawnedComponent, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncTask_LoadXRDeviceVisComponent, 0x0068);
		}

		// class UXRLoadingScreenFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__HeadMountedDisplay__XRLoadingScreenFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UXRLoadingScreenFunctionLibrary, 0x0030);
		}

		// class UMeshReplacementCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshReplacementCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshReplacementCommandChangeTarget, 0x0030);
		}

		// class UMeshVertexCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshVertexCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexCommandChangeTarget, 0x0030);
		}

		// class UMultiTransformer : public UObject
		TEST_METHOD(Class__ModelingComponents__MultiTransformer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_ZKO1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformGizmo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, TransformProxy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultiTransformer, UnknownData_1CWR, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultiTransformer, 0x0140);
		}

		// class UBaseDynamicMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__BaseDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_2GDJ, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseDynamicMeshComponent, UnknownData_XUWD, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseDynamicMeshComponent, 0x04C0);
		}

		// class UOctreeDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__OctreeDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_HFTY, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, bExplicitShowWireframe, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOctreeDynamicMeshComponent, UnknownData_RMLE, 0x04D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOctreeDynamicMeshComponent, 0x05D0);
		}

		// class UPlaneDistanceFromHitMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PlaneDistanceFromHitMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneDistanceFromHitMechanic, UnknownData_O25Z, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneDistanceFromHitMechanic, 0x0480);
		}

		// class UPointSetComponent : public UMeshComponent
		TEST_METHOD(Class__ModelingComponents__PointSetComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, PointMaterial, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, Bounds, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, bBoundsDirty, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointSetComponent, UnknownData_EDR6, 0x049D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointSetComponent, 0x04E0);
		}

		// class UCollectSurfacePathMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__CollectSurfacePathMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectSurfacePathMechanic, UnknownData_2UVR, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectSurfacePathMechanic, 0x05B0);
		}

		// class UConstructionPlaneMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__ConstructionPlaneMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_48TI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformGizmo, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, PlaneTransformProxy, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, UnknownData_0BDO, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConstructionPlaneMechanic, ClickToSetPlaneBehavior, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConstructionPlaneMechanic, 0x0100);
		}

		// class UDynamicMeshReplacementChangeTarget : public UObject
		TEST_METHOD(Class__ModelingComponents__DynamicMeshReplacementChangeTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicMeshReplacementChangeTarget, UnknownData_J7Y1, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicMeshReplacementChangeTarget, 0x0060);
		}

		// class UMeshCommandChangeTarget : public UInterface
		TEST_METHOD(Class__ModelingComponents__MeshCommandChangeTarget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshCommandChangeTarget, 0x0030);
		}

		// class UMeshOpPreviewWithBackgroundCompute : public UObject
		TEST_METHOD(Class__ModelingComponents__MeshOpPreviewWithBackgroundCompute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_GPIE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, PreviewMesh, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, StandardMaterials, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, OverrideMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, WorkingMaterial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshOpPreviewWithBackgroundCompute, UnknownData_J2BT, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshOpPreviewWithBackgroundCompute, 0x0080);
		}

		// class UPreviewMesh : public UObject
		TEST_METHOD(Class__ModelingComponents__PreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_2CSB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bBuildSpatialDataStructure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, bDrawOnTop, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_DHAK, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, DynamicMeshComponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMesh, UnknownData_K9PI, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMesh, 0x0130);
		}

		// class UPolyEditPreviewMesh : public UPreviewMesh
		TEST_METHOD(Class__ModelingComponents__PolyEditPreviewMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolyEditPreviewMesh, UnknownData_M5OY, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolyEditPreviewMesh, 0x0510);
		}

		// class UPolygonSelectionMechanicProperties : public UInteractiveToolPropertySet
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanicProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectFaces, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectEdges, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, bSelectVertices, 0x005A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanicProperties, UnknownData_5M1E, 0x005B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanicProperties, 0x0060);
		}

		// class UPolygonSelectionMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__PolygonSelectionMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_TOJJ, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, Properties, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolygonSelectionMechanic, UnknownData_8281, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolygonSelectionMechanic, 0x05C0);
		}

		// class UPreviewMeshActor : public UInternalToolFrameworkActor
		TEST_METHOD(Class__ModelingComponents__PreviewMeshActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshActor, 0x0230);
		}

		// class USimpleDynamicMeshComponent : public UBaseDynamicMeshComponent
		TEST_METHOD(Class__ModelingComponents__SimpleDynamicMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, TangentsType, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_QTEN, 0x04C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bExplicitShowWireframe, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_2IDK, 0x04E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, bDrawOnTop, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleDynamicMeshComponent, UnknownData_IIHD, 0x0531);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleDynamicMeshComponent, 0x05E0);
		}

		// class USpatialCurveDistanceMechanic : public UInteractionMechanic
		TEST_METHOD(Class__ModelingComponents__SpatialCurveDistanceMechanic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpatialCurveDistanceMechanic, UnknownData_JND9, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpatialCurveDistanceMechanic, 0x0450);
		}

		// class UCameraRig_Crane : public Uactor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Crane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, CranePitch, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, CraneYaw, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, CraneArmLength, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, bLockMountPitch, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, bLockMountYaw, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, UnknownData_XVRI, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, TransformComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, CraneYawControl, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, CranePitchControl, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Crane, CraneCameraMount, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraRig_Crane, 0x0260);
		}

		// class UCameraRig_Rail : public Uactor
		TEST_METHOD(Class__CinematicCamera__CameraRig_Rail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Rail, CurrentPositionOnRail, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Rail, bLockOrientationToRail, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Rail, UnknownData_SINI, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Rail, TransformComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Rail, RailSplineComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraRig_Rail, RailCameraMount, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraRig_Rail, 0x0250);
		}

		// class UCineCameraActor : public UCameraActor
		TEST_METHOD(Class__CinematicCamera__CineCameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraActor, LookatTrackingSettings, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraActor, UnknownData_9UIZ, 0x07F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraActor, 0x0810);
		}

		// class UCineCameraComponent : public UCameraComponent
		TEST_METHOD(Class__CinematicCamera__CineCameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackSettings, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, Filmback, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensSettings, 0x07E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FocusSettings, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocalLength, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentAperture, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, CurrentFocusDistance, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, UnknownData_EZ79, 0x086C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, FilmbackPresets, 0x0878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, LensPresets, 0x0888);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPresetName, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultFilmbackPreset, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensPresetName, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFocalLength, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCineCameraComponent, DefaultLensFStop, 0x08CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCineCameraComponent, 0x08D0);
		}

		// class UNavRelevantComponent : public UactorComponent
		TEST_METHOD(Class__NavigationSystem__NavRelevantComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_CHG5, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, UnknownData_0B1Z, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavRelevantComponent, CachedNavParent, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantComponent, 0x00E8);
		}

		// class UNavLinkCustomComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_OZKC, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, NavLinkUserId, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_KUMV, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, EnabledAreaClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, DisabledAreaClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, SupportedAgents, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeStart, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkRelativeEnd, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, LinkDirection, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_3ZK5, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_4SX3, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleOffset, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleExtent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_2ACP, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, ObstacleAreaClass, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastRadius, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastInterval, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, BroadcastChannel, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkCustomComponent, UnknownData_M0BW, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomComponent, 0x0198);
		}

		// class UNavArea : public UNavAreaBase
		TEST_METHOD(Class__NavigationSystem__NavArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DefaultCost, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, FixedAreaEnteringCost, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, DrawColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, SupportedAgents, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavArea, UnknownData_WVUC, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea, 0x0050);
		}

		// class UNavigationQueryFilter : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationQueryFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, Areas, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, IncludeFlags, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, ExcludeFlags, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter, UnknownData_RYTQ, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter, 0x0050);
		}

		// class UPHISM_SM_Haiti_Bamboo_Short02_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Haiti_Bamboo_Short02__PHISM_SM_Haiti_Bamboo_Short02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Haiti_Bamboo_Short02_C, 0x06C0);
		}

		// class UMovieSceneMediaPlayerPropertySection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertySection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, bLoop, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaPlayerPropertySection, UnknownData_402R, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertySection, 0x00F8);
		}

		// class UMovieSceneMediaPlayerPropertyTrack : public UMovieScenePropertyTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaPlayerPropertyTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaPlayerPropertyTrack, 0x0098);
		}

		// class UMovieSceneMediaSection : public UMovieSceneSection
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSource, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bLooping, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_KA4C, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, StartFrameOffset, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaTexture, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, MediaSoundComponent, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, bUseExternalMediaPlayer, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, UnknownData_YLNY, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaSection, ExternalMediaPlayer, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaSection, 0x0118);
		}

		// class UMovieSceneMediaTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__MediaCompositing__MovieSceneMediaTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneMediaTrack, MediaSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneMediaTrack, 0x0070);
		}

		// class UActorSequencePlayer : public UMovieSceneSequencePlayer
		TEST_METHOD(Class__ActorSequence__ActorSequencePlayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequencePlayer, 0x0890);
		}

		// class UActorSequence : public UMovieSceneSequence
		TEST_METHOD(Class__ActorSequence__ActorSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, MovieScene, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequence, ObjectReferences, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequence, 0x0378);
		}

		// class UActorSequenceComponent : public UactorComponent
		TEST_METHOD(Class__ActorSequence__ActorSequenceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, PlaybackSettings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, UnknownData_SKXT, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, sequence, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorSequenceComponent, SequencePlayer, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorSequenceComponent, 0x00E0);
		}

		// class UDBDEmblem_SurvivorUnbroken : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_SurvivorUnbroken)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorUnbroken, UnknownData_SLTK, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorUnbroken, _pointsForTimeAlive, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorUnbroken, UnknownData_TG6K, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorUnbroken, _rankTunablesClass, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_SurvivorUnbroken, 0x0138);
		}

		// class UDBDEmblem_KillerGatekeeper : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_KillerGatekeeper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerGatekeeper, UnknownData_UXBY, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_KillerGatekeeper, 0x0138);
		}

		// class UDBDEmblem_KillerGatekeeperTest : public UDBDEmblem_KillerGatekeeper
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_KillerGatekeeperTest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerGatekeeperTest, _gameState, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_KillerGatekeeperTest, 0x0140);
		}

		// class UDBDEmblem_KillerChaser : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_KillerChaser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerChaser, UnknownData_VYH0, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerChaser, _chasePointsByDurationCurve, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerChaser, UnknownData_AGKZ, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerChaser, _hookedPlayersPenaltyDelay, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerChaser, _rankTunablesClass, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_KillerChaser, 0x01C0);
		}

		// class UDBDEmblem_KillerDevout : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_KillerDevout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerDevout, UnknownData_OSBW, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerDevout, _playersToHook, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerDevout, UnknownData_HBLK, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_KillerDevout, 0x0140);
		}

		// class UDBDEmblem_KillerMalicious : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_KillerMalicious)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerMalicious, UnknownData_18RG, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerMalicious, _remainingSurvivorHookStates, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_KillerMalicious, UnknownData_R654, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_KillerMalicious, 0x0170);
		}

		// class UDBDEmblem_SurvivorBenevolent : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_SurvivorBenevolent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorBenevolent, UnknownData_UXXD, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_SurvivorBenevolent, 0x0168);
		}

		// class UDBDEmblem_SurvivorEvader : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_SurvivorEvader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorEvader, UnknownData_WUS9, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorEvader, _killerDistanceStealthPointCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorEvader, _killerDistanceStealthPointCurveChasing, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorEvader, _chaseDurationPointCurve, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorEvader, _ZAxisDistanceScalingCurve, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorEvader, _rankTunablesClass, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_SurvivorEvader, 0x0180);
		}

		// class UDBDEmblem_SurvivorLightbringer : public UDBDEmblem
		TEST_METHOD(Class__DBDMetaGameplay__DBDEmblem_SurvivorLightbringer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDEmblem_SurvivorLightbringer, UnknownData_1ER4, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDEmblem_SurvivorLightbringer, 0x0190);
		}

		// class UMagicLeapHandMeshingComponent : public UactorComponent
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingComponent, 0x00B8);
		}

		// class UMagicLeapHandMeshingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapHandMeshing__MagicLeapHandMeshingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHandMeshingFunctionLibrary, 0x0030);
		}

		// class UAB_Menu_S24_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_S24__AB_Menu_S24_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_S24_C, 0x194C);
		}

		// class UDreamSnare : public Uactor
		TEST_METHOD(Class__TheNightmare__DreamSnare)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDreamSnare, 0x0230);
		}

		// class UGeneratorTeleportInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheNightmare__GeneratorTeleportInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, UnknownData_7J47, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _teleportCooldownTimer, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, UnknownData_PANN, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _selectedGenerator, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _locallySelectedGenerator, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, UnknownData_1IC1, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _selectedTeleportLocation, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _isInteractionOngoing, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _teleportFailed, 0x06C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, UnknownData_9SI5, 0x06C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _bloodSpurtInterval, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _collisionCheckCapsuleHalfHeight, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _collisionCheckCapsuleRadius, 0x06CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _collisionCheckLocationOffset, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _capsuleTraceAngleIncrement, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _generatorTeleportMaxAngle, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, _downRaycastLength, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorTeleportInteraction, UnknownData_HNT1, 0x06E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorTeleportInteraction, 0x06F0);
		}

		// class UInDreamSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheNightmare__InDreamSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInDreamSurvivorSubAnimInstance, _shouldLookSleepy, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInDreamSurvivorSubAnimInstance, UnknownData_NQ2A, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInDreamSurvivorSubAnimInstance, 0x0510);
		}

		// class UNightmareAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheNightmare__NightmareAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNightmareAnimInstance, UnknownData_CLXP, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNightmareAnimInstance, 0x05B0);
		}

		// class UPlaceDreamPalletInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheNightmare__PlaceDreamPalletInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceDreamPalletInteraction, _palletTrackers, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceDreamPalletInteraction, UnknownData_93SQ, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaceDreamPalletInteraction, _closestTracker, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaceDreamPalletInteraction, 0x0520);
		}

		// class UPresentationGeneratorTeleportProgressComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__TheNightmare__PresentationGeneratorTeleportProgressComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPresentationGeneratorTeleportProgressComponent, UnknownData_IOIZ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPresentationGeneratorTeleportProgressComponent, 0x00C8);
		}

		// class USetDreamSnareInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheNightmare__SetDreamSnareInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDreamSnareInteraction, UnknownData_GRHE, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDreamSnareInteraction, MinPlacementDistance, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDreamSnareInteraction, MaxPlacementDistance, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetDreamSnareInteraction, UnknownData_NDGV, 0x0634);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetDreamSnareInteraction, 0x0640);
		}

		// class UPHISM_SM_Haiti_Bamboo_Short01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Haiti_Bamboo_Short01__PHISM_SM_Haiti_Bamboo_Short01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Haiti_Bamboo_Short01_C, 0x06C0);
		}

		// class UPlagueSurvivorAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__ThePlague__PlagueSurvivorAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlagueSurvivorAnalyticsComponent, _replicatedRegularVomitHits, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlagueSurvivorAnalyticsComponent, UnknownData_A51Q, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlagueSurvivorAnalyticsComponent, 0x0160);
		}

		// class USicknessSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__ThePlague__SicknessSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, _vomitingEnteredStatEvent, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, _hitByVomitTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, _isSick, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, _isVomiting, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, _hasRecentlyBeenHitByVomit, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, _isOpeningExitGate, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::USicknessSurvivorSubAnimInstance, UnknownData_AGJX, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USicknessSurvivorSubAnimInstance, 0x0560);
		}

		// class UThrowRockInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__ThrowRockInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowRockInteraction, 0x0500);
		}

		// class UHookSurvivorDefinition : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__HookSurvivorDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookSurvivorDefinition, _survivorBeingHooked, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookSurvivorDefinition, 0x0630);
		}

		// class ULinkedVomitInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__LinkedVomitInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkedVomitInteraction, UnknownData_DC6P, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkedVomitInteraction, UnknownData_U3MU, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkedVomitInteraction, _chargeComplete, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULinkedVomitInteraction, UnknownData_WHQX, 0x0645);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULinkedVomitInteraction, 0x0650);
		}

		// class ULockerFakeEnterInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__LockerFakeEnterInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockerFakeEnterInteraction, _lockerInteractionBlockTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockerFakeEnterInteraction, UnknownData_4M7D, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockerFakeEnterInteraction, _owningLocker, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockerFakeEnterInteraction, _fakeEnterLoudNoiseRange, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULockerFakeEnterInteraction, UnknownData_A7PR, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULockerFakeEnterInteraction, 0x0540);
		}

		// class USearchChestInteractionBase : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__SearchChestInteractionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchChestInteractionBase, _searchableCompleteContributionPercentTag, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchChestInteractionBase, _scoreEventFired, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchChestInteractionBase, UnknownData_5P9R, 0x0635);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchChestInteractionBase, _owningChest, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchChestInteractionBase, _onLastInteractionWasComplete, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchChestInteractionBase, UnknownData_Z3D7, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchChestInteractionBase, 0x0648);
		}

		// class UOpenChestInteraction : public USearchChestInteractionBase
		TEST_METHOD(Class__DBDInteraction__OpenChestInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestInteraction, _camperSearchablePercentTag, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestInteraction, UnknownData_FJXX, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestInteraction, _successExitTimeAnimSequenceReference, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestInteraction, _startTime, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestInteraction, UnknownData_KUZV, 0x0664);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOpenChestInteraction, 0x0670);
		}

		// class UPalletPullUpInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__PalletPullUpInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPullUpInteraction, UnknownData_FYP8, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPullUpInteraction, _owningPallet, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPalletPullUpInteraction, UnknownData_SBMQ, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPalletPullUpInteraction, 0x0640);
		}

		// class USearchOpenedChestInteraction : public USearchChestInteractionBase
		TEST_METHOD(Class__DBDInteraction__SearchOpenedChestInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USearchOpenedChestInteraction, UnknownData_CRZD, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USearchOpenedChestInteraction, 0x0650);
		}

		// class USetGroundPortalInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__SetGroundPortalInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetGroundPortalInteraction, _portalPlacerState, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetGroundPortalInteraction, _trapPlacerComponent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetGroundPortalInteraction, _portalClassToSpawn, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetGroundPortalInteraction, 0x0640);
		}

		// class USetTrapInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__SetTrapInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USetTrapInteraction, _dropSocket, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USetTrapInteraction, UnknownData_RV4W, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USetTrapInteraction, 0x0690);
		}

		// class USleepingChestAnimInstance : public USleepingAnimInstance
		TEST_METHOD(Class__DBDInteraction__SleepingChestAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USleepingChestAnimInstance, _isObjectSpawned, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USleepingChestAnimInstance, UnknownData_2MDG, 0x0281);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USleepingChestAnimInstance, 0x0290);
		}

		// class UTeleportToDemogorgonPortalInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__TeleportToDemogorgonPortalInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, UnknownData_SA0Q, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _cancelTeleportingPhaseDuration, 0x062C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _portalTargetingComponent, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _portalPlacerState, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _startingPortal, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _targetedPortal, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _interactingPlayer, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, UnknownData_90AH, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, _huskRef, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, ClassToSpawnForHusk, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTeleportToDemogorgonPortalInteraction, UnknownData_YAUC, 0x06C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTeleportToDemogorgonPortalInteraction, 0x06D0);
		}

		// class UThrowInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__ThrowInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowInteraction, _throwCancelledSpeedCurve, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowInteraction, _throwCancellationExitTime, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UThrowInteraction, UnknownData_Y8OK, 0x0634);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThrowInteraction, 0x0638);
		}

		// class UActivePhaseWalkInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__ActivePhaseWalkInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivePhaseWalkInteraction, UnknownData_BFR3, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivePhaseWalkInteraction, _chargingSpeedCurve, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActivePhaseWalkInteraction, UnknownData_SYAM, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActivePhaseWalkInteraction, 0x0650);
		}

		// class UBaseLockerInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__BaseLockerInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseLockerInteraction, _owningLocker, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseLockerInteraction, 0x0508);
		}

		// class UBaseStalkModeInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__BaseStalkModeInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseStalkModeInteraction, UnknownData_B58E, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseStalkModeInteraction, 0x0510);
		}

		// class UCollectItemInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__CollectItemInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectItemInteraction, OnCollectUpdateStart, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectItemInteraction, OnCollectUpdateEnd, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectItemInteraction, UnknownData_35YC, 0x0520);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectItemInteraction, 0x0530);
		}

		// class UCollectItemFromSearchableInteraction : public UCollectItemInteraction
		TEST_METHOD(Class__DBDInteraction__CollectItemFromSearchableInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollectItemFromSearchableInteraction, UnknownData_L9Y9, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectItemFromSearchableInteraction, 0x0540);
		}

		// class UDeadHardDashInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__DeadHardDashInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeadHardDashInteraction, 0x0500);
		}

		// class UDestroyDemogorgonPortalInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__DestroyDemogorgonPortalInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyDemogorgonPortalInteraction, _owningPortal, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyDemogorgonPortalInteraction, 0x0630);
		}

		// class UDropItemInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__DropItemInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDropItemInteraction, 0x0500);
		}

		// class UEscapeMapInteraction : public UinteractionDefinition
		TEST_METHOD(Class__DBDInteraction__EscapeMapInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEscapeMapInteraction, 0x0500);
		}

		// class UGeneratorDamageInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__DBDInteraction__GeneratorDamageInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorDamageInteraction, UnknownData_UN4F, 0x0628);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorDamageInteraction, 0x0630);
		}

		// class UGhostChargeStalkModeInteraction : public UBaseStalkModeInteraction
		TEST_METHOD(Class__DBDInteraction__GhostChargeStalkModeInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostChargeStalkModeInteraction, UnknownData_4NRA, 0x0510);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostChargeStalkModeInteraction, 0x0520);
		}

		// class UPHISM_SM_Haiti_Bamboo02_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Haiti_Bamboo02__PHISM_SM_Haiti_Bamboo02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Haiti_Bamboo02_C, 0x06C0);
		}

		// class USpiritHuskOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__TheSpirit__SpiritHuskOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpiritHuskOutlineUpdateStrategy, UnknownData_3NI1, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpiritHuskOutlineUpdateStrategy, 0x00E8);
		}

		// class UPHISM_SM_Corn03_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Corn03__PHISM_SM_Corn03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Corn03_C, 0x06C0);
		}

		// class UMagicLeapPrivilegesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPrivileges__MagicLeapPrivilegesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPrivilegesFunctionLibrary, 0x0030);
		}

		// class UWwiseUtilities : public UGameInstanceSubsystem
		TEST_METHOD(Class__WwiseUtilities__WwiseUtilities)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWwiseUtilities, UnknownData_MJMK, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWwiseUtilities, 0x0040);
		}

		// class UNavModifierComponent : public UNavRelevantComponent
		TEST_METHOD(Class__NavigationSystem__NavModifierComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, AreaClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, FailsafeExtent, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierComponent, UnknownData_47VM, 0x00FD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierComponent, 0x0150);
		}

		// class UNavigationData : public Uactor
		TEST_METHOD(Class__NavigationSystem__NavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, UnknownData_M24I, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, RenderingComp, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, NavDataConfig, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, UnknownData_6EYC, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, RuntimeGeneration, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, UnknownData_G2YG, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, ObservedPathsTickInterval, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, DataVersion, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, UnknownData_D2Q8, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, SupportedAreas, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationData, UnknownData_00H3, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationData, 0x0428);
		}

		// class UAbstractNavData : public UNavigationData
		TEST_METHOD(Class__NavigationSystem__AbstractNavData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbstractNavData, 0x0428);
		}

		// class UCrowdManagerBase : public UObject
		TEST_METHOD(Class__NavigationSystem__CrowdManagerBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowdManagerBase, 0x0030);
		}

		// class UNavArea_Default : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Default)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Default, 0x0050);
		}

		// class UNavArea_LowHeight : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_LowHeight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_LowHeight, 0x0050);
		}

		// class UNavArea_Null : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Null)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Null, 0x0050);
		}

		// class UNavArea_Obstacle : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavArea_Obstacle)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Obstacle, 0x0050);
		}

		// class UNavAreaMeta : public UNavArea
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta, 0x0050);
		}

		// class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
		TEST_METHOD(Class__NavigationSystem__NavAreaMeta_SwitchByAgent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent0Area, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent1Area, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent2Area, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent3Area, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent4Area, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent5Area, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent6Area, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent7Area, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent8Area, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent9Area, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent10Area, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent11Area, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent12Area, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent13Area, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent14Area, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaMeta_SwitchByAgent, Agent15Area, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaMeta_SwitchByAgent, 0x00D0);
		}

		// class UNavCollision : public UNavCollisionBase
		TEST_METHOD(Class__NavigationSystem__NavCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_XKN3, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, CylinderCollision, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, BoxCollision, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, AreaClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollision, UnknownData_30R3, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollision, 0x00E0);
		}

		// class UNavigationGraph : public UNavigationData
		TEST_METHOD(Class__NavigationSystem__NavigationGraph)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraph, 0x0428);
		}

		// class UNavigationGraphNode : public Uactor
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNode, 0x0230);
		}

		// class UNavigationGraphNodeComponent : public USceneComponent
		TEST_METHOD(Class__NavigationSystem__NavigationGraphNodeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, Node, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, NextNodeComponent, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, PrevNodeComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationGraphNodeComponent, UnknownData_OPCR, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationGraphNodeComponent, 0x0240);
		}

		// class UNavigationInvokerComponent : public UactorComponent
		TEST_METHOD(Class__NavigationSystem__NavigationInvokerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileGenerationRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationInvokerComponent, TileRemovalRadius, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationInvokerComponent, 0x00C0);
		}

		// class UNavigationPath : public UObject
		TEST_METHOD(Class__NavigationSystem__NavigationPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathUpdatedNotifier, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, PathPoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, RecalculateOnInvalidation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationPath, UnknownData_4WX7, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPath, 0x0090);
		}

		// class UNavigationPathGenerator : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavigationPathGenerator)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationPathGenerator, 0x0030);
		}

		// class UNavigationSystemV1 : public UNavigationSystemBase
		TEST_METHOD(Class__NavigationSystem__NavigationSystemV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, MainNavData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, AbstractNavData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DefaultAgentName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_P76C, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, CrowdManagerClass, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_QY1T, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DataGatheringMode, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_YVHE, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_X9YA, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, ActiveTilesUpdateInterval, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgents, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, SupportedAgentsMask, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_14DL, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataSet, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, NavDataRegistrationQueue, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_IRRV, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavDataRegisteredEvent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OnNavigationGenerationFinishedDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_0XOW, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, OperationMode, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_XRSS, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, DirtyAreasUpdateFreq, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemV1, UnknownData_T3RN, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemV1, 0x0560);
		}

		// class UNavigationSystemModuleConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__NavigationSystem__NavigationSystemModuleConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemModuleConfig, UnknownData_INU4, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemModuleConfig, 0x0070);
		}

		// class UNavigationTestingActor : public Uactor
		TEST_METHOD(Class__NavigationSystem__NavigationTestingActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_G9MO, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, CapsuleComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, InvokerComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_PVMU, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, NavAgentProps, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, QueryingExtent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_6Q0O, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, MyNavData, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, ProjectedLocation, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_V7N0, 0x02B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, CostLimitFactor, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, MinimumCostLimit, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_VLLM, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, CostDisplayMode, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_QSDY, 0x02C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, TextCanvasOffset, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_A1S0, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, PathfindingTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, PathCost, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, PathfindingSteps, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, otherActor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, filterClass, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, ShowStepIndex, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, OffsetFromCornersDistance, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationTestingActor, UnknownData_0U28, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationTestingActor, 0x0328);
		}

		// class UNavLinkComponent : public UprimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, UnknownData_CWY2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkComponent, Links, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkComponent, 0x0440);
		}

		// class UNavLinkCustomInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkCustomInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkCustomInterface, 0x0030);
		}

		// class UNavLinkHostInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavLinkHostInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkHostInterface, 0x0030);
		}

		// class UNavLinkRenderingComponent : public UprimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavLinkRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkRenderingComponent, UnknownData_M4UK, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkRenderingComponent, 0x0430);
		}

		// class UNavLinkTrivial : public UNavLinkDefinition
		TEST_METHOD(Class__NavigationSystem__NavLinkTrivial)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkTrivial, 0x0058);
		}

		// class UNavMeshBoundsVolume : public Uvolume
		TEST_METHOD(Class__NavigationSystem__NavMeshBoundsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshBoundsVolume, SupportedAgents, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshBoundsVolume, UnknownData_1BHI, 0x026C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshBoundsVolume, 0x0270);
		}

		// class UNavMeshRenderingComponent : public UprimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavMeshRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_I4CJ, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMeshRenderingComponent, UnknownData_YGP8, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMeshRenderingComponent, 0x0440);
		}

		// class UNavModifierVolume : public Uvolume
		TEST_METHOD(Class__NavigationSystem__NavModifierVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierVolume, UnknownData_OWAD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavModifierVolume, AreaClass, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavModifierVolume, 0x0278);
		}

		// class UNavNodeInterface : public UInterface
		TEST_METHOD(Class__NavigationSystem__NavNodeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavNodeInterface, 0x0030);
		}

		// class UNavSystemConfigOverride : public Uactor
		TEST_METHOD(Class__NavigationSystem__NavSystemConfigOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavSystemConfigOverride, NavigationSystemConfig, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavSystemConfigOverride, OverridePolicy, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavSystemConfigOverride, UnknownData_Q8KY, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavSystemConfigOverride, 0x0240);
		}

		// class UNavTestRenderingComponent : public UprimitiveComponent
		TEST_METHOD(Class__NavigationSystem__NavTestRenderingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavTestRenderingComponent, UnknownData_SN0L, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavTestRenderingComponent, 0x0430);
		}

		// class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
		TEST_METHOD(Class__NavigationSystem__RecastFilter_UseDefaultArea)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastFilter_UseDefaultArea, 0x0050);
		}

		// class URecastNavMesh : public UNavigationData
		TEST_METHOD(Class__NavigationSystem__RecastNavMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, UnknownData_H83A, 0x042B);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, DrawOffset, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, UnknownData_NTVU, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, TilePoolSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, TileSizeUU, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, CellSize, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, CellHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, agentRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, AgentHeight, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, AgentMaxHeight, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, AgentMaxSlope, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, AgentMaxStepHeight, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, MinRegionArea, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, MergeRegionSize, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, MaxSimplificationError, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, MaxSimultaneousTileGenerationJobsCount, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, TileNumberHardLimit, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, PolyRefTileBits, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, PolyRefNavPolyBits, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, PolyRefSaltBits, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, NavMeshOriginOffset, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, DefaultDrawDistance, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, DefaultMaxSearchNodes, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, DefaultMaxHierarchicalSearchNodes, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, RegionPartitioning, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, LayerPartitioning, 0x0491);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, UnknownData_JIO1, 0x0492);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, RegionChunkSplits, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, LayerChunkSplits, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, UnknownData_CJJQ, 0x049E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, TileSetUpdateInterval, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, HeuristicScale, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, VerticalDeviationFromGroundCompensation, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMesh, UnknownData_XLBO, 0x04AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMesh, 0x04E0);
		}

		// class URecastNavMeshDataChunk : public UNavigationDataChunk
		TEST_METHOD(Class__NavigationSystem__RecastNavMeshDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecastNavMeshDataChunk, UnknownData_M76V, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecastNavMeshDataChunk, 0x0050);
		}

		// class UKismetProceduralMeshLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ProceduralMeshComponent__KismetProceduralMeshLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetProceduralMeshLibrary, 0x0030);
		}

		// class UProceduralMeshComponent : public UMeshComponent
		TEST_METHOD(Class__ProceduralMeshComponent__ProceduralMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_7TP7, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseComplexAsSimpleCollision, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, bUseAsyncCooking, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_WBRL, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshBodySetup, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, ProcMeshSections, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, CollisionConvexElems, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, LocalBounds, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, UnknownData_6RRW, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProceduralMeshComponent, AsyncBodySetupQueue, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProceduralMeshComponent, 0x04E0);
		}

		// class UPHISM_SM_COM_SmallTree01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_SmallTree01__PHISM_SM_COM_SmallTree01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_SmallTree01_C, 0x06C0);
		}

		// class UImgMediaSource : public UBaseMediaSource
		TEST_METHOD(Class__ImgMedia__ImgMediaSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, FrameRateOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, ProxyOverride, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSource, SequencePath, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSource, 0x00C0);
		}

		// class UAB_Menu_Slasher12_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher12__AB_Menu_Slasher12_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_ComponentToLocalSpace, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_LocalToComponentSpace, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_SpringBone, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_SequencePlayer_2, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_BlendListByBool_2, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_RandomPlayer, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_BlendListByBool, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_SequencePlayer, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_StateResult, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, AnimGraphNode_StateMachine, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, Role_Selected, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher12_C, Is_Online, 0x07B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher12_C, 0x07BA);
		}

		// class UBP_TextDesignTunables_C : public UDBDTextDesignTunables
		TEST_METHOD(BlueprintGeneratedClass__BP_TextDesignTunables__BP_TextDesignTunables_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_TextDesignTunables_C, UberGraphFrame, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_TextDesignTunables_C, 0x0120);
		}

		// class UPlayerNameFacade : public UGameInstanceSubsystem
		TEST_METHOD(Class__PlayerNames__PlayerNameFacade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerNameFacade, UnknownData_X4GS, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerNameFacade, 0x0050);
		}

		// class UBP_Menu_Slasher12_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher12__BP_Menu_Slasher12_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher12_C, UnknownData_VS20, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher12_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher12_C, BP_Audio_KLR_13, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher12_C, Arrow1, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher12_C, 0x0688);
		}

		// class UPHISM_SM_COM_Grass05_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_Grass05__PHISM_SM_COM_Grass05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_Grass05_C, 0x06C0);
		}

		// class UAB_DK_Neckless01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_DK_Neckless01__AB_DK_Neckless01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_AnimDynamics_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_ComponentToLocalSpace, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_StateResult, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_StateMachine, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_LocalToComponentSpace, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, UnknownData_UG4F, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_AnimDynamics_2, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_DK_Neckless01_C, AnimGraphNode_AnimDynamics, 0x0CA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_DK_Neckless01_C, 0x1100);
		}

		// class UBP_GS_Necklace_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_GS_Necklace_ACC01__BP_GS_Necklace_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GS_Necklace_ACC01_C, 0x02B8);
		}

		// class UToastManager : public UObject
		TEST_METHOD(Class__Toasts__ToastManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToastManager, UnknownData_GAQQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToastManager, 0x0098);
		}

		// class UPHISM_SM_COM_Grass01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_Grass01__PHISM_SM_COM_Grass01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_Grass01_C, 0x06C0);
		}

		// class UBP_MS_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_MS_Hair_ACC01__BP_MS_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MS_Hair_ACC01_C, 0x02B8);
		}

		// class UNetAnalyticsAggregatorConfig : public UObject
		TEST_METHOD(Class__NetCore__NetAnalyticsAggregatorConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetAnalyticsAggregatorConfig, NetAnalyticsData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetAnalyticsAggregatorConfig, 0x0040);
		}

		// class UOverlays : public UObject
		TEST_METHOD(Class__Overlay__Overlays)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOverlays, 0x0030);
		}

		// class UBasicOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__BasicOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasicOverlays, Overlays, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasicOverlays, 0x0040);
		}

		// class ULocalizedOverlays : public UOverlays
		TEST_METHOD(Class__Overlay__LocalizedOverlays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, DefaultOverlays, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalizedOverlays, LocaleToOverlaysMap, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalizedOverlays, 0x0088);
		}

		// class UTestInterface : public UInterface
		TEST_METHOD(Class__UnitTestUtilities__TestInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestInterface, 0x0030);
		}

		// class UTestActor : public Uactor
		TEST_METHOD(Class__UnitTestUtilities__TestActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestActor, 0x0230);
		}

		// class UTestMovableActor : public Uactor
		TEST_METHOD(Class__UnitTestUtilities__TestMovableActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestMovableActor, BoxComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestMovableActor, 0x0238);
		}

		// class UTestActorComponent : public UactorComponent
		TEST_METHOD(Class__UnitTestUtilities__TestActorComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestActorComponent, 0x00B8);
		}

		// class UTestActorComponentImplementingTestInterface : public UactorComponent
		TEST_METHOD(Class__UnitTestUtilities__TestActorComponentImplementingTestInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestActorComponentImplementingTestInterface, UnknownData_SOHQ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestActorComponentImplementingTestInterface, 0x00C0);
		}

		// class UTestActorImplementingTestInterface : public Uactor
		TEST_METHOD(Class__UnitTestUtilities__TestActorImplementingTestInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestActorImplementingTestInterface, UnknownData_RWLC, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestActorImplementingTestInterface, 0x0238);
		}

		// class UMagicLeapPlanesComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryFlags, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SearchVolume, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MaxResults, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinHolePerimeter, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, MinPlaneArea, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, QueryType, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_8DS9, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, SimilarityThreshold, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_NJ0Z, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPlanesQueryResult, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, OnPersistentPlanesQueryResult, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapPlanesComponent, UnknownData_WEOF, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesComponent, 0x0280);
		}

		// class UMagicLeapPlanesFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapPlanes__MagicLeapPlanesFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapPlanesFunctionLibrary, 0x0030);
		}

		// class UAB_GS_Necklace_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_GS_Necklace_ACC01__AB_GS_Necklace_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_StateResult, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_StateMachine, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, UnknownData_235P, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GS_Necklace_ACC01_C, AnimGraphNode_AnimDynamics, 0x0CA0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_GS_Necklace_ACC01_C, 0x1100);
		}

		// class UActionSpeedProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__ActionSpeedProficiency__ActionSpeedProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActionSpeedProficiency_C, 0x0048);
		}

		// class UAB_SS_Jewelry_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SS_Jewelry_ACC01__AB_SS_Jewelry_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x1910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_StateResult_3, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, UnknownData_H6F7, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_AnimDynamics, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x2FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x2FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_StateResult_2, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_UseCachedPose, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_StateResult, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_StateMachine, 0x3090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x3140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Jewelry_ACC01_C, AnimGraphNode_SaveCachedPose, 0x3280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SS_Jewelry_ACC01_C, 0x3338);
		}

		// class ULuckProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__LuckProficiency__LuckProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuckProficiency_C, 0x0048);
		}

		// class UAB_UK_Hair_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_UK_Hair_ACC01__AB_UK_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_18, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_17, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_16, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_15, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x1DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x2200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x2230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x2250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x26B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, UnknownData_IFG4, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_TwoBoneIK, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_14, 0x2920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_13, 0x2A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_12, 0x2B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_11, 0x2CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_10, 0x2DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_9, 0x2F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_8, 0x3040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_7, 0x3170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_6, 0x32A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_5, 0x33D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_4, 0x3500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_3, 0x3630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_2, 0x3760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_BoneDrivenController, 0x3890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x39C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x3E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x4280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x46E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x4B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x4FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x5400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x5860);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x5880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x58B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x58D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x5908);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_StateResult, 0x5938);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x5970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x5A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x5B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, InMenu, 0x5C18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, Initialized, 0x5C19);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, UnknownData_SMAF, 0x5C1A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_UK_Hair_ACC01_C, OwningCharacterSkeletalMesh, 0x5C20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_UK_Hair_ACC01_C, 0x5C28);
		}

		// class UAB_KK_Laces01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_KK_Laces01__AB_KK_Laces01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_Laces01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_Laces01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_Laces01_C, AnimGraphNode_AnimDynamics_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_Laces01_C, AnimGraphNode_ComponentToLocalSpace, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KK_Laces01_C, AnimGraphNode_AnimDynamics, 0x0730);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_KK_Laces01_C, 0x0B90);
		}

		// class UBP_K22_backpack_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_K22_backpack_ACC01__BP_K22_backpack_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_K22_backpack_ACC01_C, 0x02B8);
		}

		// class UBP_Menu_Slasher13_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher13__BP_Menu_Slasher13_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, UnknownData_TR9J, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, BP_Audio_KLR_14, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, RedStainComponent, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Show_Sword_WPO_964716F24F8255A0C9F98FA0967E8ECF, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Show_Sword_Shard_Disappear_964716F24F8255A0C9F98FA0967E8ECF, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Show_Sword_Sword_Appear_964716F24F8255A0C9F98FA0967E8ECF, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Show_Sword__Direction_964716F24F8255A0C9F98FA0967E8ECF, 0x0694);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, UnknownData_BWX6, 0x0695);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Show_Sword, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Timeline_2_Size_548F5340441650D05914669F2F45DC7E, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Timeline_2_Particle_Location_548F5340441650D05914669F2F45DC7E, 0x06AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Timeline_2__Direction_548F5340441650D05914669F2F45DC7E, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, UnknownData_W7KJ, 0x06B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Timeline_3, 0x06C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear_Shard_Size_E08D4B9E409A9213BEBDBD84EE0E3709, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear_Particle_Position_E08D4B9E409A9213BEBDBD84EE0E3709, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear_WPO_E08D4B9E409A9213BEBDBD84EE0E3709, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear_Shard_Appear_E08D4B9E409A9213BEBDBD84EE0E3709, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear_Weapon_Disappear_E08D4B9E409A9213BEBDBD84EE0E3709, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear__Direction_E08D4B9E409A9213BEBDBD84EE0E3709, 0x06EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, UnknownData_QSNL, 0x06ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, Make_Sword_Disappear, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher13_C, SwordShouldBeVisible, 0x06F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher13_C, 0x06F9);
		}

		// class UAB_Menu_Meg_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Meg__AB_Menu_Meg_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Meg_C, 0x194C);
		}

		// class UAB_MS_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_MS_Hair_ACC01__AB_MS_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, UnknownData_N4JT, 0x0CA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x1110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x1130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_StateResult, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MS_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x1840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_MS_Hair_ACC01_C, 0x18F8);
		}

		// class UBonusSkillCheckZoneSizeProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__BonusSkillCheckZoneSizeProficiency__BonusSkillCheckZoneSizeProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBonusSkillCheckZoneSizeProficiency_C, 0x0048);
		}

		// class UAB_Menu_Steve_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Steve__AB_Menu_Steve_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Steve_C, 0x194C);
		}

		// class UAnimNotifyState_TimedNiagaraEffect : public UAnimNotifyState
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotifyState_TimedNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, Template, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, SocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, LocationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, RotationOffset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, bDestroyAtEnd, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedNiagaraEffect, UnknownData_55EZ, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedNiagaraEffect, 0x0068);
		}

		// class UAnimNotify_PlayNiagaraEffect : public UanimNotify
		TEST_METHOD(Class__NiagaraAnimNotifies__AnimNotify_PlayNiagaraEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, Template, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, LocationOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, RotationOffset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, scale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_08DS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, UnknownData_U9R6, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayNiagaraEffect, SocketName, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayNiagaraEffect, 0x00A0);
		}

		// class UBP_LS_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_LS_Hair_ACC01__BP_LS_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_LS_Hair_ACC01_C, 0x02B8);
		}

		// class UBP_Effect_K21_Body01_CV01_C : public UBP_BaseItemVfx_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_K21_Body01_CV01__BP_Effect_K21_Body01_CV01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_K21_Body01_CV01_C, UnknownData_BTLB, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_K21_Body01_CV01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_K21_Body01_CV01_C, TotalTime, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_K21_Body01_CV01_C, 0x026C);
		}

		// class UMovieSceneGeometryCacheTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheTrack, AnimationSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheTrack, 0x0070);
		}

		// class UMovieSceneGeometryCacheSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCacheTracks__MovieSceneGeometryCacheSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCacheSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCacheSection, 0x0130);
		}

		// class ULuminARSessionConfig : public UARSessionConfig
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlanesQuery, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MaxPlaneQueryResults, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, MinPlaneArea, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bArbitraryOrientationPlaneDetection, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_GJO5, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneSearchExtents, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, PlaneQueryFlags, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDiscardZeroExtentPlanes, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, bDefaultUseUnreliablePose, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARSessionConfig, UnknownData_9P1R, 0x013A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionConfig, 0x0140);
		}

		// class ULuminARLightEstimate : public UARBasicLightEstimate
		TEST_METHOD(Class__MagicLeapAR__LuminARLightEstimate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARLightEstimate, AmbientIntensityNits, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARLightEstimate, 0x0058);
		}

		// class ULuminARCandidateImage : public UARCandidateImage
		TEST_METHOD(Class__MagicLeapAR__LuminARCandidateImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bUseUnreliablePose, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, bImageIsStationary, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminARCandidateImage, UnknownData_AXIR, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARCandidateImage, 0x0068);
		}

		// class ULuminARSessionFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARSessionFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARSessionFunctionLibrary, 0x0030);
		}

		// class ULuminARFrameFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARFrameFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARFrameFunctionLibrary, 0x0030);
		}

		// class ULuminARImageTrackingFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapAR__LuminARImageTrackingFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminARImageTrackingFunctionLibrary, 0x0030);
		}

		// class UMagicLeapSecureStorage : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapSecureStorage__MagicLeapSecureStorage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSecureStorage, 0x0030);
		}

		// class UBP_Menu_CamperFemale02_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale02__BP_Menu_CamperFemale02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale02_C, 0x0649);
		}

		// class UAB_FS_Badge_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_FS_Badge__AB_FS_Badge_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_AnimDynamics_6, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_AnimDynamics_5, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_AnimDynamics_4, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_UseCachedPose_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_LocalToComponentSpace_2, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_StateResult_3, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, UnknownData_OHDQ, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_AnimDynamics_3, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_AnimDynamics_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_AnimDynamics, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_UseCachedPose_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_LocalToComponentSpace, 0x1E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_ComponentToLocalSpace, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_StateResult_2, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_UseCachedPose, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_StateResult, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_StateMachine, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_CopyPoseFromMesh, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_FS_Badge_C, AnimGraphNode_SaveCachedPose, 0x2100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_FS_Badge_C, 0x21B8);
		}

		// class UAB_Menu_Claudette_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Claudette__AB_Menu_Claudette_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Claudette_C, 0x194C);
		}

		// class UBP_Effect_HK_Body01_C : public UBP_BaseItemVfx_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_HK_Body01__BP_Effect_HK_Body01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_HK_Body01_C, UnknownData_S4MK, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_HK_Body01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_HK_Body01_C, TotalTime, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_HK_Body01_C, 0x026C);
		}

		// class UBP_SS_Jewelry_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_SS_Jewelry_ACC01__BP_SS_Jewelry_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SS_Jewelry_ACC01_C, 0x02B8);
		}

		// class UGhostfaceCrouchAttack : public UPounceAttack
		TEST_METHOD(Class__TheGhostFace__GhostfaceCrouchAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostfaceCrouchAttack, 0x02E0);
		}

		// class UGhostKillerAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__TheGhostFace__GhostKillerAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostKillerAnalyticsComponent, UnknownData_PGG1, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostKillerAnalyticsComponent, _ghostKillerAnalytics, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGhostKillerAnalyticsComponent, UnknownData_MGM3, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGhostKillerAnalyticsComponent, 0x01C8);
		}

		// class UAB_K21_Jaw01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_K21_Jaw01__AB_K21_Jaw01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_SaveCachedPose, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_TransitionResult_2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_TransitionResult, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, UnknownData_5LLN, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_AnimDynamics_4, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_AnimDynamics_3, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_BoneDrivenController_4, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_BoneDrivenController_3, 0x0F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_LocalToComponentSpace_2, 0x1040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_UseCachedPose_3, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_StateResult_3, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, UnknownData_NQ6B, 0x10C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_AnimDynamics_2, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_AnimDynamics, 0x1530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_BoneDrivenController_2, 0x1990);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_ComponentToLocalSpace, 0x1AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_BoneDrivenController, 0x1AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_LocalToComponentSpace, 0x1C10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_UseCachedPose_2, 0x1C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_StateResult_2, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_UseCachedPose, 0x1C98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_StateResult, 0x1CC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, AnimGraphNode_StateMachine, 0x1D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, Initialized, 0x1DB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, UnknownData_2469, 0x1DB1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, OwningCharacterSkeletalMesh, 0x1DB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Jaw01_C, InMenu, 0x1DC0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_K21_Jaw01_C, 0x1DC1);
		}

		// class UBP_Audio_KLR_05_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_05__BP_Audio_KLR_05_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_05_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_05_C, 0x00F8);
		}

		// class UBP_Audio_KLR_22_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_23__BP_Audio_KLR_22_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_22_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_22_C, AudioStatusStartMenuEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_22_C, 0x0100);
		}

		// class UAB_SS_Laces_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SS_Laces_ACC01__AB_SS_Laces_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Laces_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Laces_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Laces_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SS_Laces_ACC01_C, 0x0400);
		}

		// class UBP_Menu_Slasher03_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher03__BP_Menu_Slasher03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher03_C, UnknownData_6HHT, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher03_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher03_C, BP_Audio_KLR_03, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher03_C, ChainSaw01_REF, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher03_C, 0x0688);
		}

		// class UBP_Menu_Slasher17_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher17__BP_Menu_Slasher17_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher17_C, UnknownData_GAIC, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher17_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher17_C, BP_Audio_KLR_18, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher17_C, DBDPlayerPositionOffset, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher17_C, 0x0688);
		}

		// class UAB_Menu_Ash_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Ash__AB_Menu_Ash_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Ash_C, 0x194C);
		}

		// class UBP_Audio_KLR_11_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_12__BP_Audio_KLR_11_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_11_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_11_C, 0x00F8);
		}

		// class UAP_S22_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AP_S22_Hair_ACC01__AP_S22_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, UnknownData_O5FD, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x26E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_StateResult, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x2880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAP_S22_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x29C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAP_S22_Hair_ACC01_C, 0x2A78);
		}

		// class UBP_Audio_KLR_12_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_13__BP_Audio_KLR_12_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_12_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_12_C, 0x00F8);
		}

		// class UAB_Menu_Slasher15_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher15__AB_Menu_Slasher15_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_SequencePlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_SequencePlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_ComponentToLocalSpace, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_LocalToComponentSpace, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_AnimDynamics_5, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_AnimDynamics_4, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_AnimDynamics_3, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_AnimDynamics_2, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_AnimDynamics, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_BlendListByBool_2, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_RandomPlayer, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_BlendListByBool, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_StateResult, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, AnimGraphNode_StateMachine, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, Role_Selected, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher15_C, Is_Online, 0x1C61);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher15_C, 0x1C62);
		}

		// class UImgMediaSettings : public UObject
		TEST_METHOD(Class__ImgMediaFactory__ImgMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultFrameRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheBehindPercentage, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheSizeGB, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreads, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, CacheThreadStackSizeKB, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, GlobalCacheSizeGB, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseGlobalCache, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_M3BY, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, ExrDecoderThreads, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_XVT2, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, DefaultProxy, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UseDefaultProxy, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImgMediaSettings, UnknownData_5XOV, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImgMediaSettings, 0x0070);
		}

		// class UAIInteractableTargetInterface : public UInterface
		TEST_METHOD(Class__Interaction__AIInteractableTargetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIInteractableTargetInterface, 0x0030);
		}

		// class UInteractionPerformer : public UInterface
		TEST_METHOD(Class__Interaction__InteractionPerformer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionPerformer, 0x0030);
		}

		// class Uinteraction : public UInterface
		TEST_METHOD(Class__Interaction__interaction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uinteraction, 0x0030);
		}

		// class USentryIoSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__SentryIo__SentryIoSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USentryIoSubsystem, UnknownData_HWF0, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USentryIoSubsystem, 0x0048);
		}

		// class UBP_CoreUMGDesignTunables_C : public UDBDCoreUMGDesignTunables
		TEST_METHOD(BlueprintGeneratedClass__BP_CoreUMGDesignTunables__BP_CoreUMGDesignTunables_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CoreUMGDesignTunables_C, 0x0090);
		}

		// class USkillCheckProbabilityProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__SkillCheckProbabilityProficiency__SkillCheckProbabilityProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCheckProbabilityProficiency_C, 0x0048);
		}

		// class UPrimitiveCollection : public UObject
		TEST_METHOD(Class__PhysicsUtilities__PrimitiveCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitiveCollection, _primitives, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitiveCollection, 0x0080);
		}

		// class UPrimitivesRegistererComponent : public UactorComponent
		TEST_METHOD(Class__PhysicsUtilities__PrimitivesRegistererComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitivesRegistererComponent, _primitives, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimitivesRegistererComponent, _primitiveCollection, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimitivesRegistererComponent, 0x00D0);
		}

		// class UDynamicCapsuleResizerComponent : public UactorComponent
		TEST_METHOD(Class__PhysicsUtilities__DynamicCapsuleResizerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, _capsule, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, UnknownData_H3U1, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, _shrinkPercent, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, _shrinkDuration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, _expandDuration, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, _stayShrunkenDuration, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, _isShrinkingEnabled, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicCapsuleResizerComponent, UnknownData_STTZ, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicCapsuleResizerComponent, 0x00E8);
		}

		// class UBP_Menu_CamperFemale07_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale07__BP_Menu_CamperFemale07_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale07_C, 0x0649);
		}

		// class UBP_S25_Hair_ACC01_REF_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_S25_Hair_ACC01_REF__BP_S25_Hair_ACC01_REF_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S25_Hair_ACC01_REF_C, 0x02B8);
		}

		// class UPHISM_SM_UKR_HideBush_01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_UKR_HideBush_01__PHISM_SM_UKR_HideBush_01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_UKR_HideBush_01_C, 0x06C0);
		}

		// class UBP_KK_Laces01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_KK_Laces01__BP_KK_Laces01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KK_Laces01_C, 0x02B8);
		}

		// class UBP_S22_Hair_ACC01_C : public UBP_S22_Hair_ACC006_C
		TEST_METHOD(BlueprintGeneratedClass__BP_S22_Hair_ACC01__BP_S22_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S22_Hair_ACC01_C, 0x02B8);
		}

		// class UBP_Audio_KLR_16_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_17__BP_Audio_KLR_16_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_16_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_16_C, AudioStatusStartMenuEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_16_C, 0x0100);
		}

		// class UVFX_FunctionLib_Weapons_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__VFX_FunctionLib_Weapons__VFX_FunctionLib_Weapons_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVFX_FunctionLib_Weapons_C, 0x0030);
		}

		// class UBlightedSerumAddon : public UItemAddon
		TEST_METHOD(Class__Halloween2020__BlightedSerumAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumAddon, _blightedSerumCollectable, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumAddon, _dashInteraction, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumAddon, _theBlightExtraTokens, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumAddon, _numberOfDashesPerEvent, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumAddon, UnknownData_ER76, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightedSerumAddon, 0x0270);
		}

		// class UBlightedSerumCollisionInteraction : public UinteractionDefinition
		TEST_METHOD(Class__Halloween2020__BlightedSerumCollisionInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumCollisionInteraction, _cooldownInteraction, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumCollisionInteraction, _bounceTime, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumCollisionInteraction, UnknownData_VT21, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightedSerumCollisionInteraction, 0x0520);
		}

		// class UBlightedSerumCooldownInteraction : public UinteractionDefinition
		TEST_METHOD(Class__Halloween2020__BlightedSerumCooldownInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumCooldownInteraction, _cooldownTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumCooldownInteraction, _cameraPitchRecenterTime, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumCooldownInteraction, UnknownData_CBX8, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightedSerumCooldownInteraction, 0x0510);
		}

		// class UBlightedSerumDashInteraction : public UinteractionDefinition
		TEST_METHOD(Class__Halloween2020__BlightedSerumDashInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _cooldownInteraction, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _collisionInteraction, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _dashSpeedCurve, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _lookAngleToTurnRateCurveController, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _lookAngleToTurnRateCurveMouse, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _dashDuration, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _vectorInterpToSpeed, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _wallDashAccelerationMultiplier, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _cameraPitchRecenterTime, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _lookAngleTurnRateModifier, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _wallDashCollisionRadius, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _wallDashCollisionHeight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, _wallDashCollisionRange, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlightedSerumDashInteraction, UnknownData_FZS1, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlightedSerumDashInteraction, 0x05A0);
		}

		// class UToxinPlantInteractable : public USpecialBehaviourInteractable
		TEST_METHOD(Class__Halloween2020__ToxinPlantInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UToxinPlantInteractable, UnknownData_X7TW, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UToxinPlantInteractable, 0x02E8);
		}

		// class UMovieSceneCaptureInterface : public UInterface
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureInterface, 0x0030);
		}

		// class UMovieSceneCapture : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_23HS, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocolType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocolType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, ImageCaptureProtocol, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AudioCaptureProtocol, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, settings, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bUseSeparateProcess, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, bCloseEditorWhenCaptureStarts, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_NR0X, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, AdditionalCommandLineArguments, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, InheritedCommandLineArguments, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCapture, UnknownData_MKIA, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCapture, 0x0238);
		}

		// class ULevelCapture : public UMovieSceneCapture
		TEST_METHOD(Class__MovieSceneCapture__LevelCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, bAutoStartCapture, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_7NJT, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, PrerequisiteActorId, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelCapture, UnknownData_QWEX, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelCapture, 0x0258);
		}

		// class UMovieSceneCaptureEnvironment : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureEnvironment)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureEnvironment, 0x0030);
		}

		// class UMovieSceneCaptureProtocolBase : public UObject
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneCaptureProtocolBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_FWFT, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, state, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneCaptureProtocolBase, UnknownData_NVQ2, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneCaptureProtocolBase, 0x0060);
		}

		// class UMovieSceneImageCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneImageCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneImageCaptureProtocolBase, 0x0060);
		}

		// class UUserDefinedCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, world, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedCaptureProtocol, UnknownData_AW1M, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedCaptureProtocol, 0x00E0);
		}

		// class UUserDefinedImageCaptureProtocol : public UUserDefinedCaptureProtocol
		TEST_METHOD(Class__MovieSceneCapture__UserDefinedImageCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, Format, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, bEnableCompression, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, UnknownData_IGXV, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedImageCaptureProtocol, CompressionQuality, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedImageCaptureProtocol, 0x00E8);
		}

		// class UFrameGrabberProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__FrameGrabberProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrameGrabberProtocol, UnknownData_55OB, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrameGrabberProtocol, 0x0070);
		}

		// class UVideoCaptureProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__VideoCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, bUseCompression, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_E9DJ, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, CompressionQuality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVideoCaptureProtocol, UnknownData_5U1L, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVideoCaptureProtocol, 0x0088);
		}

		// class UMovieSceneAudioCaptureProtocolBase : public UMovieSceneCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MovieSceneAudioCaptureProtocolBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneAudioCaptureProtocolBase, 0x0060);
		}

		// class UNullAudioCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__NullAudioCaptureProtocol)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullAudioCaptureProtocol, 0x0060);
		}

		// class UMasterAudioSubmixCaptureProtocol : public UMovieSceneAudioCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__MasterAudioSubmixCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, FileName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMasterAudioSubmixCaptureProtocol, UnknownData_W3OW, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMasterAudioSubmixCaptureProtocol, 0x0098);
		}

		// class UCompositionGraphCaptureProtocol : public UMovieSceneImageCaptureProtocolBase
		TEST_METHOD(Class__MovieSceneCapture__CompositionGraphCaptureProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, IncludeRenderPasses, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bCaptureFramesInHDR, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HX4V, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, HDRCompressionQuality, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, CaptureGamut, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_HTCP, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterial, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, bDisableScreenPercentage, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_6FZE, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, PostProcessingMaterialPtr, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositionGraphCaptureProtocol, UnknownData_SLEC, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositionGraphCaptureProtocol, 0x00D0);
		}

		// class UImageSequenceProtocol : public UFrameGrabberProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol, UnknownData_PO1I, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol, 0x00E0);
		}

		// class UCompressedImageSequenceProtocol : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__CompressedImageSequenceProtocol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, CompressionQuality, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompressedImageSequenceProtocol, UnknownData_DKW4, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompressedImageSequenceProtocol, 0x00E8);
		}

		// class UImageSequenceProtocol_BMP : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_BMP)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_BMP, 0x00E0);
		}

		// class UImageSequenceProtocol_PNG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_PNG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_PNG, 0x00E8);
		}

		// class UImageSequenceProtocol_JPG : public UCompressedImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_JPG)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_JPG, 0x00E8);
		}

		// class UImageSequenceProtocol_EXR : public UImageSequenceProtocol
		TEST_METHOD(Class__MovieSceneCapture__ImageSequenceProtocol_EXR)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, bCompressed, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, CaptureGamut, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UImageSequenceProtocol_EXR, UnknownData_LJGE, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImageSequenceProtocol_EXR, 0x00F0);
		}

		// class UStartupInitializer : public UObject
		TEST_METHOD(Class__StartupInitializer__StartupInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartupInitializer, UnknownData_J2Q7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartupInitializer, 0x0068);
		}

		// class UClientStartupInitializer : public UStartupInitializer
		TEST_METHOD(Class__StartupInitializer__ClientStartupInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientStartupInitializer, UnknownData_3GVG, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientStartupInitializer, _sharedAuthenticationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UClientStartupInitializer, UnknownData_FEO2, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UClientStartupInitializer, 0x0160);
		}

		// class UDedicatedServerStartupInitializer : public UStartupInitializer
		TEST_METHOD(Class__StartupInitializer__DedicatedServerStartupInitializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerStartupInitializer, UnknownData_0G91, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerStartupInitializer, _dbdTimeUtilities, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDedicatedServerStartupInitializer, UnknownData_XQBL, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDedicatedServerStartupInitializer, 0x00A0);
		}

		// class UBP_K21_Belt_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_K21_Belt_ACC01__BP_K21_Belt_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_K21_Belt_ACC01_C, 0x02B8);
		}

		// class UBP_Menu_Slasher22_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher22__BP_Menu_Slasher22_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher22_C, UnknownData_A151, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher22_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher22_C, _littlebrother, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher22_C, BP_Audio_KLR_23, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher22_C, _bp_anim_switch, 0x0688);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher22_C, 0x068C);
		}

		// class UAB_Menu_Nancy_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Nancy__AB_Menu_Nancy_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Nancy_C, 0x194C);
		}

		// class UCoreUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__CoreUtilities__CoreUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreUtilities, 0x0030);
		}

		// class UAnimSharingStateInstance : public UanimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingStateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, AnimationToPlay, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, PermutationTimeOffset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, playRate, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, bStateBool, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, UnknownData_RTF3, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingStateInstance, Instance, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingStateInstance, 0x0290);
		}

		// class UAnimSharingTransitionInstance : public UanimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingTransitionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, FromComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, ToComponent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, BlendTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, bBlendBool, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingTransitionInstance, UnknownData_8H47, 0x0285);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingTransitionInstance, 0x0290);
		}

		// class UAnimSharingAdditiveInstance : public UanimInstance
		TEST_METHOD(Class__AnimationSharing__AnimSharingAdditiveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, BaseComponent, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, AdditiveAnimation, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, Alpha, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, bStateBool, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingAdditiveInstance, UnknownData_IFPS, 0x0285);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingAdditiveInstance, 0x0290);
		}

		// class UAnimSharingInstance : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimSharingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, RegisteredActors, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_KA1J, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, StateProcessor, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_5SG8, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UsedAnimationSequences, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_IXSD, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, stateEnum, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, SharingActor, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSharingInstance, UnknownData_Z6W3, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSharingInstance, 0x0140);
		}

		// class UAnimationSharingManager : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, Skeletons, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, PerSkeletonData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingManager, UnknownData_75NB, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingManager, 0x0090);
		}

		// class UAnimationSharingSetup : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, SkeletonSetups, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingSetup, ScalabilitySettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingSetup, 0x0050);
		}

		// class UAnimationSharingStateProcessor : public UObject
		TEST_METHOD(Class__AnimationSharing__AnimationSharingStateProcessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSharingStateProcessor, AnimationStateEnum, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSharingStateProcessor, 0x0060);
		}

		// class UBP_HandCursor_C : public UCoreCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_HandCursor__BP_HandCursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_HandCursor_C, image_11, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HandCursor_C, 0x0270);
		}

		// class UBP_Menu_CamperMale05_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale05__BP_Menu_CamperMale05_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale05_C, UnknownData_GPWD, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale05_C, UberGraphFrame, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale05_C, 0x0658);
		}

		// class UBP_Menu_Slasher10_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher10__BP_Menu_Slasher10_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher10_C, UnknownData_H9RM, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher10_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher10_C, BP_Audio_KLR_11, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher10_C, 0x0680);
		}

		// class UBP_Effect_Mist_C : public UBaseVFX
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_Mist__BP_Effect_Mist_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Mist_C, UberGraphFrame, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Mist_C, DBDAggregateParticleLocator, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Mist_C, DefaultSceneRoot, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_Mist_C, 0x0250);
		}

		// class UPHISM_SM_Hti_BambooShrub01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Hti_BambooShrub01__PHISM_SM_Hti_BambooShrub01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Hti_BambooShrub01_C, 0x06C0);
		}

		// class UAB_GK_Flower_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_GK_Flower_ACC01__AB_GK_Flower_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_TransitionResult, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_StateResult_3, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x0828);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, UnknownData_KJW6, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_AnimDynamics, 0x0850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_StateResult_2, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_UseCachedPose, 0x0D18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_StateResult, 0x0D48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_StateMachine, 0x0D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x0E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, AnimGraphNode_SaveCachedPose, 0x0F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, Initialized, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, UnknownData_2O8K, 0x1029);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, OwningCharacterSkeletalMesh, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Flower_ACC01_C, InMenu, 0x1038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_GK_Flower_ACC01_C, 0x1039);
		}

		// class UAB_K21_Belt_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_K21_Belt_ACC01__AB_K21_Belt_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_SaveCachedPose, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_TransitionResult_2, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_TransitionResult, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, UnknownData_A1JR, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_BoneDrivenController_4, 0x0960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_BoneDrivenController_3, 0x0A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0BE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_StateResult_3, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, UnknownData_C5DY, 0x0C68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_AnimDynamics, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_BoneDrivenController_2, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_BoneDrivenController, 0x1200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x1330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x1350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x1370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_StateResult_2, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_UseCachedPose, 0x13D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_StateResult, 0x1408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, AnimGraphNode_StateMachine, 0x1440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, Initialized, 0x14F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, UnknownData_ZD3T, 0x14F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, OwningCharacterSkeletalMesh, 0x14F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K21_Belt_ACC01_C, InMenu, 0x1500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_K21_Belt_ACC01_C, 0x1501);
		}

		// class UTileBase01_C : public UTile
		TEST_METHOD(BlueprintGeneratedClass__TileBase01__TileBase01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, UberGraphFrame, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, DBDCullDistanceVolume, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Breakables, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, GeneratorDrivenObjects, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Audio, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, PullObjects, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, BottomLeftSpawner, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, TopLeftSpawner, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, TopRightSpawner, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, BottomRightSpawner, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, QuadrantSpawners, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, EdgeObjectBlocker, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, VaultObjects, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Crows, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, EdgeObjects, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Lockers, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, HideGrass, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Blockers, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Gameplay, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Lights, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, BP_Effect_Mist04, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, BP_Effect_Mist03, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, BP_Effect_Mist02, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, BP_Effect_Mist01, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Mist__BP_Effect_Mist_, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, FX, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Deco, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SearchableSpawner, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SmallMeatLockerSpawner, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, HatchSpawner, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow6, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, InteractableSpawn01, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow7, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, HexSpawner01, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SurvivorItemSpawn01, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow5, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, KillerItemSpawn01, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow4, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, KillerSpawn01, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow2, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SurvivorSpawn04, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow1, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SurvivorSpawn03, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SurvivorSpawn02, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Arrow3, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SurvivorSpawn01, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SpawnPoints, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, root, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, Initialized, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, UnknownData_D3X3, 0x04C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, TotalWeight, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SelectedWeight, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, UnknownData_2E2V, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTileBase01_C, SelectedSpawnPoint, 0x04D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileBase01_C, 0x04E0);
		}

		// class UCustomMeshComponent : public UMeshComponent
		TEST_METHOD(Class__CustomMeshComponent__CustomMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_IMBJ, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCustomMeshComponent, UnknownData_WBVI, 0x0480);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomMeshComponent, 0x0490);
		}

		// class UPHISM_SM_COM_Fern01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_Fern01__PHISM_SM_COM_Fern01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_Fern01_C, 0x06C0);
		}

		// class UAB_Menu_Slasher10_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher10__AB_Menu_Slasher10_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher10_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher10_C, 0x0642);
		}

		// class UBP_MKW01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_MKW01__BP_MKW01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MKW01_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MKW01_C, Ak_Audio_MKW01, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MKW01_C, BoneSocketLocalVelocityEvaluator, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MKW01_C, P_MKW01_Smoke, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MKW01_C, P_MKW01_Smoke_FPV, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MKW01_C, RTPCConversionFactor, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MKW01_C, 0x02E4);
		}

		// class UCamperAnimSlave_C : public USlaveAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__CamperAnimSlave__CamperAnimSlave_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimSlave_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimSlave_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCamperAnimSlave_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCamperAnimSlave_C, 0x0400);
		}

		// class UOniDemonPowerAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__TheOni__OniDemonPowerAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDemonPowerAttackOpenSubstate, UnknownData_KKQJ, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonPowerAttackOpenSubstate, 0x0100);
		}

		// class UOniDemonDashAttackOpenSubstate : public UOniDemonPowerAttackOpenSubstate
		TEST_METHOD(Class__TheOni__OniDemonDashAttackOpenSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonDashAttackOpenSubstate, 0x0100);
		}

		// class UOniDemonPowerAttackHittingSubstate : public UPounceAttackHittingSubstate
		TEST_METHOD(Class__TheOni__OniDemonPowerAttackHittingSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonPowerAttackHittingSubstate, 0x0120);
		}

		// class UOniDemonPowerAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheOni__OniDemonPowerAttackSuccessSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDemonPowerAttackSuccessSubstate, UnknownData_CN9Y, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonPowerAttackSuccessSubstate, 0x0108);
		}

		// class UOniDemonPowerAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__TheOni__OniDemonPowerAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonPowerAttackMissSubstate, 0x00E0);
		}

		// class UOniDemonPowerAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__TheOni__OniDemonPowerAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonPowerAttackObstructSubstate, 0x00E8);
		}

		// class UOniPounceInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheOni__OniPounceInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniPounceInteraction, UnknownData_BO3K, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniPounceInteraction, UnknownData_3P9S, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniPounceInteraction, _chargedAttackState, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniPounceInteraction, _demonModeComponent, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniPounceInteraction, _owningSlasher, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniPounceInteraction, 0x0650);
		}

		// class URenjirosBloodyGlove : public UItemAddon
		TEST_METHOD(Class__TheOni__RenjirosBloodyGlove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URenjirosBloodyGlove, UnknownData_JVUS, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenjirosBloodyGlove, _revealTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenjirosBloodyGlove, UnknownData_1V4E, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenjirosBloodyGlove, _revealEffectPerCamper, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URenjirosBloodyGlove, UnknownData_SA00, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URenjirosBloodyGlove, 0x02C8);
		}

		// class UStartDemonModeInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheOni__StartDemonModeInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartDemonModeInteraction, UnknownData_MMIL, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartDemonModeInteraction, DemonModeActivationMontage, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartDemonModeInteraction, UnknownData_6ABW, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartDemonModeInteraction, 0x0670);
		}

		// class UAbsorbBloodOrbsInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheOni__AbsorbBloodOrbsInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAbsorbBloodOrbsInteraction, UnknownData_8EX0, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAbsorbBloodOrbsInteraction, 0x0540);
		}

		// class UbloodOrb : public Uactor
		TEST_METHOD(Class__TheOni__bloodOrb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _randomMoveDelayInterval, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _absorbReference, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _outlineComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _despawnDelay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, UnknownData_Z04I, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _droppingPlayer, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _state, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, UnknownData_B710, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, _fadeComponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrb, UnknownData_752U, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbloodOrb, 0x0290);
		}

		// class UbloodOrbAbsorberComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__bloodOrbAbsorberComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrbAbsorberComponent, Authority_OnBloodOrbAbsorbed, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrbAbsorberComponent, OnIsAbsorbingChanged, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrbAbsorberComponent, AbsorbLocationOffset, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrbAbsorberComponent, UnknownData_FERY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrbAbsorberComponent, _camperBloodOrbDropperComponents, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbloodOrbAbsorberComponent, 0x0110);
		}

		// class UBloodOrbCollection : public UactorComponent
		TEST_METHOD(Class__TheOni__BloodOrbCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbCollection, _bloodOrbs, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbCollection, UnknownData_T5FP, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbCollection, 0x0100);
		}

		// class UBloodOrbConfiguratorComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__BloodOrbConfiguratorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _bloodOrbClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _bloodOrbDropGameEvents, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _fadeDuration, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _initialFadeOutDelay, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _bloodOrbAuraColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _bloodOrbAttractedAuraColor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _bloodOrbVisibilityRangeInterpolationSpeed, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, UnknownData_TM60, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, _mobileBloodOrbRendererClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbConfiguratorComponent, UnknownData_JMYF, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbConfiguratorComponent, 0x0128);
		}

		// class UBloodOrbDropperComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__BloodOrbDropperComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbDropperComponent, UnknownData_2LU9, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbDropperComponent, 0x0138);
		}

		// class UBloodOrbFadeComponent : public UFadeComponent
		TEST_METHOD(Class__TheOni__BloodOrbFadeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbFadeComponent, UnknownData_RZ8O, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbFadeComponent, 0x00E0);
		}

		// class UBloodOrbOverlapComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__BloodOrbOverlapComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbOverlapComponent, UnknownData_MXFR, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbOverlapComponent, _currentOverlappingOrbs, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbOverlapComponent, UnknownData_OG3I, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbOverlapComponent, 0x00F8);
		}

		// class UBloodOrbOverlapRevealToKiller : public UstatusEffect
		TEST_METHOD(Class__TheOni__BloodOrbOverlapRevealToKiller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbOverlapRevealToKiller, UnknownData_CLTR, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbOverlapRevealToKiller, _revealTimer, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbOverlapRevealToKiller, 0x02D8);
		}

		// class UBloodOrbStateMonitorComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__BloodOrbStateMonitorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbStateMonitorComponent, OnBloodOrbAbsorbedCosmetic, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBloodOrbStateMonitorComponent, UnknownData_KVQZ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbStateMonitorComponent, 0x0128);
		}

		// class UBloodOrbUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TheOni__BloodOrbUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBloodOrbUtilities, 0x0030);
		}

		// class UbloodOrbVisibilityComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__bloodOrbVisibilityComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UbloodOrbVisibilityComponent, UnknownData_JHFN, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UbloodOrbVisibilityComponent, 0x00F0);
		}

		// class UDemonModeComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__DemonModeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnDemonModeReady, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnDemonModeStarted, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnDemonModeEnded, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnDemonModeInterruptedDuringStartup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnDemonModeInterruptedDuringEnding, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnChargeGainedAfterAttackCosmetic, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, OnChargeGainedAfterLockerGrabCosmetic, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, _powerChargeComponent, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, _powerToggleComponent, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, _authority_demonModeCooldownStarterComponent, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, _demonModeCooldownInteraction, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, UnknownData_QCNZ, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, _demonModeState, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeComponent, UnknownData_XP50, 0x017D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemonModeComponent, 0x01D0);
		}

		// class UDemonModeCooldownInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheOni__DemonModeCooldownInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeCooldownInteraction, UnknownData_EVW2, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemonModeCooldownInteraction, 0x0520);
		}

		// class UDemonModeMenuComponent : public UactorComponent
		TEST_METHOD(Class__TheOni__DemonModeMenuComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemonModeMenuComponent, UnknownData_7I3K, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemonModeMenuComponent, 0x00D8);
		}

		// class UIsPlayerAbsorbingBloodOrbsCondition : public UIsPlayerPerformingInteraction
		TEST_METHOD(Class__TheOni__IsPlayerAbsorbingBloodOrbsCondition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsPlayerAbsorbingBloodOrbsCondition, 0x0128);
		}

		// class UMobileBloodOrbRenderer : public Uactor
		TEST_METHOD(Class__TheOni__MobileBloodOrbRenderer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, OrbMaterialInstance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, OutlineMaterialInstance, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, CullInterval, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, UnknownData_6ZLL, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, _ismComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, _outlineIsmComponent, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, _instanceMap, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, _outlineMaterialInstanceDynamic, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, _orbMaterialInstanceDynamic, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBloodOrbRenderer, _bloodOrbVisibilityComponent, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileBloodOrbRenderer, 0x02C0);
		}

		// class UBP_Menu_CamperFemale01_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale01__BP_Menu_CamperFemale01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale01_C, 0x0649);
		}

		// class UOniAttackPicker : public USlasherAttackPickerComponent
		TEST_METHOD(Class__TheOni__OniAttackPicker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniAttackPicker, UnknownData_WNU1, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniAttackPicker, 0x00C8);
		}

		// class UOniBasicAttack : public UPounceAttack
		TEST_METHOD(Class__TheOni__OniBasicAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniBasicAttack, UnknownData_R2BL, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniBasicAttack, 0x02F0);
		}

		// class UOniBasicAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheOni__OniBasicAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniBasicAttackSuccessSubstate, 0x00D8);
		}

		// class UOniCustomizationItemAnimInstance : public UanimInstance
		TEST_METHOD(Class__TheOni__OniCustomizationItemAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniCustomizationItemAnimInstance, _isInDemonMode, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniCustomizationItemAnimInstance, UnknownData_Q2NY, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniCustomizationItemAnimInstance, 0x0290);
		}

		// class UOniDashInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheOni__OniDashInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDashInteraction, _chargingSpeedCurve, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDashInteraction, _dashingSpeedCurve, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDashInteraction, _yawAdjustTime, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDashInteraction, UnknownData_SVVX, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDashInteraction, _cooldownSpeedCurve, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDashInteraction, UnknownData_Y7KR, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDashInteraction, 0x0670);
		}

		// class UOniDemonBasicAttack : public UPounceAttack
		TEST_METHOD(Class__TheOni__OniDemonBasicAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonBasicAttack, 0x02E0);
		}

		// class UOniDemonPowerAttack : public UPounceAttack
		TEST_METHOD(Class__TheOni__OniDemonPowerAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOniDemonPowerAttack, UnknownData_HSR1, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonPowerAttack, 0x0300);
		}

		// class UOniDemonDashAttack : public UOniDemonPowerAttack
		TEST_METHOD(Class__TheOni__OniDemonDashAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOniDemonDashAttack, 0x0300);
		}

		// class UAB_Menu_Slasher05_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher05__AB_Menu_Slasher05_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_SequencePlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_BlendListByBool_2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_BlendListByBool, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher05_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher05_C, 0x0642);
		}

		// class UBP_Menu_CamperMale06_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale06__BP_Menu_CamperMale06_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale06_C, UnknownData_BFQR, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale06_C, UberGraphFrame, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale06_C, 0x0658);
		}

		// class UBP_SK_Armor_ACC00_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_SK_Armor_ACC00__BP_SK_Armor_ACC00_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC00_C, UberGraphFrame, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SK_Armor_ACC00_C, 0x02C0);
		}

		// class UBP_Menu_CamperMale10_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale10__BP_Menu_CamperMale10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale10_C, 0x0649);
		}

		// class UBP_Audio_KLR_17_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_18__BP_Audio_KLR_17_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_17_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_17_C, 0x00F8);
		}

		// class UAB_US_Recorder_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_US_Recorder_ACC01__AB_US_Recorder_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x14B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_StateResult_3, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, UnknownData_Y403, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_AnimDynamics, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_StateResult_2, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_UseCachedPose, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_StateResult, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_StateMachine, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x2880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Recorder_ACC01_C, AnimGraphNode_SaveCachedPose, 0x29C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_US_Recorder_ACC01_C, 0x2A78);
		}

		// class UBP_SurvivorRightFootGroundDetector_C : public UFromBoneGroundDetectorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_SurvivorRightFootGroundDetector__BP_SurvivorRightFootGroundDetector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SurvivorRightFootGroundDetector_C, 0x01E0);
		}

		// class UConsecutiveWakeUpPenaltyProficiency_C : public UInteractionProficiency
		TEST_METHOD(BlueprintGeneratedClass__ConsecutiveWakeUpPenaltyProficiency__ConsecutiveWakeUpPenaltyProficiency_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsecutiveWakeUpPenaltyProficiency_C, 0x0048);
		}

		// class UAB_Menu_Slasher22_Twin_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher22_Twin__AB_Menu_Slasher22_Twin_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_SequencePlayer_3, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_BlendListByInt, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_SequencePlayer, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_StateResult, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, AnimGraphNode_StateMachine, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, Role_Selected, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, Is_Online, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, UnknownData_MC4F, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher22_Twin_C, Swap, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher22_Twin_C, 0x05A8);
		}

		// class UBP_BloodwebManager_C : public UBloodwebManager
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodwebManager__BP_BloodwebManager_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BloodwebManager_C, 0x00D8);
		}

		// class UBP_Audio_KLR_10_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_11__BP_Audio_KLR_10_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_10_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_10_C, 0x00F8);
		}

		// class UAB_Menu_Dwight_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Dwight__AB_Menu_Dwight_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Dwight_C, 0x194C);
		}

		// class UBP_GK_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_GK_Hair_ACC01__BP_GK_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GK_Hair_ACC01_C, 0x02B8);
		}

		// class UStartScreen_C : public UStartScreenBase
		TEST_METHOD(BlueprintGeneratedClass__StartScreen__StartScreen_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartScreen_C, UberGraphFrame, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStartScreen_C, MatineeActor_1_ExecuteUbergraph_StartScreen_RefProperty, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStartScreen_C, 0x0260);
		}

		// class UBP_DF_Hair01_Acc_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_DF_Hair01_Acc__BP_DF_Hair01_Acc_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DF_Hair01_Acc_C, 0x02B8);
		}

		// class UBP_US_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_US_Hair_ACC01__BP_US_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_US_Hair_ACC01_C, 0x02B8);
		}

		// class UBP_Menu_Slasher09_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher09__BP_Menu_Slasher09_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher09_C, UnknownData_KMD2, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher09_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher09_C, BP_Audio_KLR_09, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher09_C, CA_WS01_REF, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher09_C, 0x0688);
		}

		// class UAB_Menu_Slasher13_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher13__AB_Menu_Slasher13_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_SequencePlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_SequencePlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_12, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_11, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_10, 0x0C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_9, 0x10C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_8, 0x1520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_7, 0x1980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_SpringBone_2, 0x1DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_SpringBone, 0x1F18);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_6, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_5, 0x24B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_4, 0x2910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_3, 0x2D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics_2, 0x31D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_AnimDynamics, 0x3630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_ComponentToLocalSpace, 0x3A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_LocalToComponentSpace, 0x3AB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_BlendListByBool_2, 0x3AD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_RandomPlayer, 0x3B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_BlendListByBool, 0x3BE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_StateResult, 0x3C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, AnimGraphNode_StateMachine, 0x3CC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, Role_Selected, 0x3D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher13_C, Is_Online, 0x3D71);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher13_C, 0x3D72);
		}

		// class UFriendsMenuUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDUIViewsMobile__FriendsMenuUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFriendsMenuUtilities, 0x0030);
		}

		// class UMobileBaseUserWidget : public UUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__MobileBaseUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBaseUserWidget, UnknownData_N42C, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBaseUserWidget, HighlightWidget, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBaseUserWidget, _tutorialAnimationName, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBaseUserWidget, _tutorialNumberOfLoops, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMobileBaseUserWidget, UnknownData_JY5H, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMobileBaseUserWidget, 0x0300);
		}

		// class UUMGBaseButtonWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGBaseButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnBaseButtonClickedEvent, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnBaseButtonPressedEvent, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnBaseButtonReleasedEvent, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnBaseButtonLongPressEvent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, button, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, IconPicture, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, ButtonLabel, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, ButtonPictureBrush, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, buttonText, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnPressSound, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnClickSound, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnLongPressSound, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnReleaseSound, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, OnHoveredSound, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseButtonWidget, UnknownData_EE96, 0x0428);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseButtonWidget, 0x0430);
		}

		// class UUMGBaseTabButtonWidget : public UUMGBaseButtonWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGBaseTabButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, UnknownData_1SV2, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, TabText, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, NotificationCountText, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, NotificationPanel, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, TabButtonSelected, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, TabIndex, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, UnknownData_UXQ6, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, TitleOfTab, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, UnknownData_8PWW, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseTabButtonWidget, _tabTextParameter, 0x0490);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseTabButtonWidget, 0x04A0);
		}

		// class UAB_S24_necklace_ACC01_REF_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_S24_necklace_ACC01_REF__AB_S24_necklace_ACC01_REF_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_AnimDynamics_6, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_AnimDynamics_5, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_AnimDynamics_4, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_UseCachedPose_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace_2, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_StateResult_3, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, UnknownData_JTKD, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_AnimDynamics_3, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_AnimDynamics_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_AnimDynamics, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_UseCachedPose_2, 0x1E40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_StateResult_2, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_UseCachedPose, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_StateResult, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_StateMachine, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_CopyPoseFromMesh, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S24_necklace_ACC01_REF_C, AnimGraphNode_SaveCachedPose, 0x2100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_S24_necklace_ACC01_REF_C, 0x21B8);
		}

		// class UAB_US_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_US_Hair_ACC01__AB_US_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, UnknownData_C21X, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x2FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x2FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_StateResult, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x3090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x3140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x3280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_US_Hair_ACC01_C, 0x3338);
		}

		// class UWmfMediaSettings : public UObject
		TEST_METHOD(Class__WmfMediaFactory__WmfMediaSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, AllowNonStandardCodecs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, LowLatency, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, NativeAudioOut, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, HardwareAcceleratedVideoDecoding, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWmfMediaSettings, UnknownData_EY44, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWmfMediaSettings, 0x0038);
		}

		// class UFL_ProceduralAnimations_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__FL_ProceduralAnimations__FL_ProceduralAnimations_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFL_ProceduralAnimations_C, 0x0030);
		}

		// class UBP_Menu_CamperFemale08_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale08__BP_Menu_CamperFemale08_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale08_C, 0x0649);
		}

		// class UBP_Audio_KLR_04_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_04__BP_Audio_KLR_04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_04_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_04_C, 0x00F8);
		}

		// class UAB_Menu_Slasher02_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher02__AB_Menu_Slasher02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_SequencePlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_RandomPlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher02_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher02_C, 0x0642);
		}

		// class UTheHuntressPower : public Ucollectable
		TEST_METHOD(Class__TheHuntress__TheHuntressPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTheHuntressPower, UnknownData_HPOE, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheHuntressPower, 0x0428);
		}

		// class UHatchetCooldown : public UinteractionDefinition
		TEST_METHOD(Class__TheHuntress__HatchetCooldown)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatchetCooldown, 0x0500);
		}

		// class UHatchetLauncher : public UKillerProjectileLauncher
		TEST_METHOD(Class__TheHuntress__HatchetLauncher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _angleOffset, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, UnknownData_MXDA, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _angleOffsetCurve, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _speedCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetSpeedWhenThrowFullyCharged, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, UnknownData_3EPJ, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetPitchCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetMinAngleOffset, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetMaxAngleOffset, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetMinSpeed, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetMaxSpeed, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetLaunchPitchMin, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetLauncher, _hatchetLaunchPitchMax, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatchetLauncher, 0x02A0);
		}

		// class UHatchetProjectile : public UKillerProjectile
		TEST_METHOD(Class__TheHuntress__HatchetProjectile)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatchetProjectile, 0x02F0);
		}

		// class UHatchetRack : public Uactor
		TEST_METHOD(Class__TheHuntress__HatchetRack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatchetRack, 0x0230);
		}

		// class UHatchetThrow : public UThrowInteraction
		TEST_METHOD(Class__TheHuntress__HatchetThrow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHatchetThrow, _hatchetThrowCancellationCooldown, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHatchetThrow, 0x0660);
		}

		// class UReloadHatchet : public UBaseLockerInteraction
		TEST_METHOD(Class__TheHuntress__ReloadHatchet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReloadHatchet, UnknownData_CP7O, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReloadHatchet, 0x0510);
		}

		// class UBP_SK_Armor_ACC01_C : public UBP_SK_Armor_ACC00_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SK_Armor_ACC01__BP_SK_Armor_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, UberGraphFrame, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIR_Horn_001_LT_02, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIR_Horn_001_LT_01, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIR_Horn_001_RT_02, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIR_Horn_001_RT_01, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIL_Horn_001_RT_02, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIL_Horn_001_RT_01, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIL_Horn_001_LT_02, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIL_Horn_001_LT_01, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_TI_Eye_001_RT02, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_TI_Eye_001_RT01, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_TI_Eye_001_LT02, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_TI_Eye_001_LT01, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIR_Eye_001_LT, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIR_Eye_001_RT, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIL_Eye_001_RT, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, P_SK_SIL_Eye_001_LT, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, Normal_Horns, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Armor_ACC01_C, Demon_Horns, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SK_Armor_ACC01_C, 0x0358);
		}

		// class UBP_Audio_KLR_21_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_22__BP_Audio_KLR_21_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_21_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_21_C, 0x00F8);
		}

		// class UAB_Menu_S25_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_S25__AB_Menu_S25_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_S25_C, 0x194C);
		}

		// class UControlModeManager : public UObject
		TEST_METHOD(Class__DBDInput__ControlModeManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlModeManager, UnknownData_GYCJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlModeManager, _gameInstance, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlModeManager, 0x0088);
		}

		// class UDBDInputManager : public UGameInstanceSubsystem
		TEST_METHOD(Class__DBDInput__DBDInputManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInputManager, UnknownData_2CXF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInputManager, _controlModeManager, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInputManager, _switchDockStateManager, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInputManager, _virtualKeyboardManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDInputManager, UnknownData_4GON, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDInputManager, 0x00A0);
		}

		// class UInteractiveWidgetInterface : public UInterface
		TEST_METHOD(Class__DBDInput__InteractiveWidgetInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractiveWidgetInterface, 0x0030);
		}

		// class UMultipleGamepadsControlModeInfo : public UGameInstanceSubsystem
		TEST_METHOD(Class__DBDInput__MultipleGamepadsControlModeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMultipleGamepadsControlModeInfo, UnknownData_CIDU, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMultipleGamepadsControlModeInfo, 0x0058);
		}

		// class USwitchDockStateManager : public UObject
		TEST_METHOD(Class__DBDInput__SwitchDockStateManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USwitchDockStateManager, UnknownData_LOLE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USwitchDockStateManager, 0x0050);
		}

		// class UUIInputUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDInput__UIInputUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIInputUtilities, 0x0030);
		}

		// class UVirtualKeyboardManager : public UObject
		TEST_METHOD(Class__DBDInput__VirtualKeyboardManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualKeyboardManager, _virtualKeyboard, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualKeyboardManager, UnknownData_PCMY, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualKeyboardManager, 0x0070);
		}

		// class UBP_Menu_Base_Camper_C : public UDBDMenuPlayer
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Base_Camper__BP_Menu_Base_Camper_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, UberGraphFrame, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, RightFootGroundDetector, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, LeftFootGroundDetector, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, CharmSpawner, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, CustomizedAudio, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, Ak_Audio_Menu_Base_Camper, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, CustomizedSkeletalMesh, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, Dissolve_Dissolve_596272B14FBF23BFE861F687F86F9EB1, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, Dissolve__Direction_596272B14FBF23BFE861F687F86F9EB1, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, UnknownData_VGUI, 0x063D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, dissolve, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Base_Camper_C, Destroying, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Base_Camper_C, 0x0649);
		}

		// class UCatalogValidationCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__CatalogValidationCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCatalogValidationCommandlet, 0x0088);
		}

		// class UCustomizationValidationCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__CustomizationValidationCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCustomizationValidationCommandlet, 0x0088);
		}

		// class UDataTableToCsvCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__DataTableToCsvCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableToCsvCommandlet, 0x0088);
		}

		// class ULoadoutExportCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__LoadoutExportCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoadoutExportCommandlet, 0x0088);
		}

		// class UStoryDescriptionValidationCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__StoryDescriptionValidationCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStoryDescriptionValidationCommandlet, 0x0088);
		}

		// class UUpdateJournalVignetteCinematicsCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__UpdateJournalVignetteCinematicsCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUpdateJournalVignetteCinematicsCommandlet, 0x0088);
		}

		// class UFixCustomizationAccessorySocketCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__FixCustomizationAccessorySocketCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixCustomizationAccessorySocketCommandlet, 0x0088);
		}

		// class UGenerateCurveFloatNetIdTableCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__GenerateCurveFloatNetIdTableCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenerateCurveFloatNetIdTableCommandlet, 0x0088);
		}

		// class UGenerateStoreCustomizationExclusionFileCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__GenerateStoreCustomizationExclusionFileCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGenerateStoreCustomizationExclusionFileCommandlet, UnknownData_DMSX, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGenerateStoreCustomizationExclusionFileCommandlet, 0x0090);
		}

		// class UJournalsValidationCommandlet : public UCommandlet
		TEST_METHOD(Class__CommandletPlugin__JournalsValidationCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJournalsValidationCommandlet, 0x0088);
		}

		// class UBP_MainCursor_C : public UCoreCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_MainCursor__BP_MainCursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_MainCursor_C, image_80, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MainCursor_C, 0x0270);
		}

		// class UGameSessionDS : public UObject
		TEST_METHOD(Class__GameSessionDS__GameSessionDS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSessionDS, UnknownData_WAV4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSessionDS, 0x0040);
		}

		// class UAB_Menu_Slasher09_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher09__AB_Menu_Slasher09_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher09_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher09_C, 0x0642);
		}

		// class UBP_QM_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_QM_Hair_ACC01__BP_QM_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_QM_Hair_ACC01_C, 0x02B8);
		}

		// class UDoctorAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheDoctor__DoctorAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDoctorAnimInstance, UnknownData_B3R9, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDoctorAnimInstance, 0x05B0);
		}

		// class UMadnessSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheDoctor__MadnessSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMadnessSurvivorSubAnimInstance, _isTotallyInsane, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMadnessSurvivorSubAnimInstance, UnknownData_NWOU, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMadnessSurvivorSubAnimInstance, 0x0500);
		}

		// class USurvivorMadnessEffect : public UstatusEffect
		TEST_METHOD(Class__TheDoctor__SurvivorMadnessEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorMadnessEffect, UnknownData_PH12, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorMadnessEffect, _madness, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorMadnessEffect, UnknownData_VUOU, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorMadnessEffect, 0x0388);
		}

		// class UTheDoctorUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TheDoctor__TheDoctorUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheDoctorUtilities, 0x0030);
		}

		// class UBP_Audio_KLR_06_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_06__BP_Audio_KLR_06_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_06_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_06_C, 0x00F8);
		}

		// class UAB_Menu_Kate_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Kate__AB_Menu_Kate_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Kate_C, 0x194C);
		}

		// class UPHISM_SM_LF_PlantFern01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_PlantFern01__PHISM_SM_LF_PlantFern01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_PlantFern01_C, 0x06C0);
		}

		// class UBP_Menu_Slasher07_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher07__BP_Menu_Slasher07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher07_C, UnknownData_7QJE, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher07_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher07_C, BP_Audio_KLR_07, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher07_C, DBDPlayerPositionOffset, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher07_C, 0x0688);
		}

		// class USharedAuthenticationComponent : public UactorComponent
		TEST_METHOD(Class__SharedAuthenticationUtilities__SharedAuthenticationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USharedAuthenticationComponent, PopupZOrder, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharedAuthenticationComponent, UnknownData_Z5RD, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharedAuthenticationComponent, AuthenticationProviderSelectionWidget, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USharedAuthenticationComponent, UnknownData_TOLU, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USharedAuthenticationComponent, 0x0160);
		}

		// class UUMGAutheticationProviderSelection : public UUserWidget
		TEST_METHOD(Class__SharedAuthenticationUtilities__UMGAutheticationProviderSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGAutheticationProviderSelection, UnknownData_X3MW, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGAutheticationProviderSelection, 0x0278);
		}

		// class UBP_Menu_CamperFemale12_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale12__BP_Menu_CamperFemale12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale12_C, 0x0649);
		}

		// class UAnimNotify_AkEvent_C : public UanimNotify
		TEST_METHOD(BlueprintGeneratedClass__AnimNotify_AkEvent__AnimNotify_AkEvent_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Attach_Name, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, event, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, Follow, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, UnknownData_2WL2, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_AkEvent_C, EventName, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_AkEvent_C, 0x0070);
		}

		// class UUMGBaseTabListWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGBaseTabListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseTabListWidget, 0x0300);
		}

		// class UUMGExpandableListWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGExpandableListWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, ShouldHideExpandableListIfEmpty, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, IsExtendedAtStart, 0x0301);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, UnknownData_QTZB, 0x0302);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, ItemContainer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, CategorieName, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, ItemCount, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, expandableArea, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, HeaderTitle, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, UnknownData_7EM5, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, _childWidgets, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGExpandableListWidget, UnknownData_BKJJ, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGExpandableListWidget, 0x03A0);
		}

		// class UUMGFriendBaseTabListWidget : public UUMGBaseTabListWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendBaseTabListWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendBaseTabListWidget, 0x0300);
		}

		// class UUMGFriendButtonWidget : public UUMGBaseButtonWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendButtonWidget, InteractableButtonStatePanel, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendButtonWidget, NonInteractableButtonStatePanel, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendButtonWidget, NonInteractableExplanationText, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendButtonWidget, _isInteractable, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendButtonWidget, UnknownData_SA4P, 0x0449);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendButtonWidget, 0x0450);
		}

		// class UUMGBaseFriendListContextualMenuWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGBaseFriendListContextualMenuWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListContextualMenuWidget, UnknownData_Z0IL, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListContextualMenuWidget, InviteToPartyButton, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListContextualMenuWidget, MuteButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListContextualMenuWidget, UnmuteButton, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListContextualMenuWidget, RemoveFriendButton, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListContextualMenuWidget, UnknownData_SWO1, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseFriendListContextualMenuWidget, 0x0348);
		}

		// class UUMGFriendContextualMenuWidget : public UUMGBaseFriendListContextualMenuWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendContextualMenuWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendContextualMenuWidget, 0x0348);
		}

		// class UUMGBaseFriendListElement : public UMobileBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGBaseFriendListElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, StatusPicture, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, FriendName, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, FriendStatus, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, SelectionHighlight, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, ItemSelectionButton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, ContextualMenuPosition, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, _cachedFriendData, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, FriendUIStatusDataTable, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGBaseFriendListElement, UnknownData_FR2I, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGBaseFriendListElement, 0x03C0);
		}

		// class UUMGFriendElementWidget : public UUMGBaseFriendListElement
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendElementWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, FavoriteSlot, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, FavoriteButton, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, SelectionImage, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, SelectedPicture, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, FriendIcon, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, UnFavoriteBrush, 0x03E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, FavoriteBrush, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendElementWidget, MutedBrush, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendElementWidget, 0x0598);
		}

		// class UUMGFriendListTabWidget : public UUMGFriendBaseTabListWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendListTabWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendListTabWidget, SentInviteToParty, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendListTabWidget, ConnectedFriendsExpandableList, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendListTabWidget, DisconnectedFriendsExpandableList, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendListTabWidget, 0x0318);
		}

		// class UUMGFriendPartyListElementWidget : public UUMGFriendElementWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendPartyListElementWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendPartyListElementWidget, ButtonOrStatusSwitcher, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendPartyListElementWidget, CancelInviteButton, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendPartyListElementWidget, PartyStatusImage, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendPartyListElementWidget, IconNotReady, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendPartyListElementWidget, IconReady, 0x0640);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendPartyListElementWidget, 0x06D0);
		}

		// class UUMGFriendSearchBarWidget : public UMobileBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendSearchBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendSearchBarWidget, UnknownData_P79X, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendSearchBarWidget, InputTextField, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendSearchBarWidget, SearchButton, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendSearchBarWidget, 0x0340);
		}

		// class UUMGFriendTabButtonWidget : public UUMGBaseTabButtonWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGFriendTabButtonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGFriendTabButtonWidget, UnknownData_GZ0J, 0x04A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGFriendTabButtonWidget, 0x04F0);
		}

		// class UUMGRequestsListTabWidget : public UUMGFriendBaseTabListWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGRequestsListTabWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGRequestsListTabWidget, FriendRequestExpandableList, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGRequestsListTabWidget, PendingExpandableList, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGRequestsListTabWidget, 0x0310);
		}

		// class UUMGSuggestionsListTabWidget : public UUMGFriendBaseTabListWidget
		TEST_METHOD(Class__DBDUIViewsMobile__UMGSuggestionsListTabWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSuggestionsListTabWidget, PlayedWithFriendsExpandableList, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUMGSuggestionsListTabWidget, SocialFriendsExpandableList, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUMGSuggestionsListTabWidget, 0x0310);
		}

		// class UBP_Audio_KLR_07_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_07__BP_Audio_KLR_07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_07_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_07_C, 0x00F8);
		}

		// class UBP_Audio_KLR_18_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_19__BP_Audio_KLR_18_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_18_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_18_C, 0x00F8);
		}

		// class UUIBackendDataAccessor : public UGameInstanceSubsystem
		TEST_METHOD(Class__UIBackendData__UIBackendDataAccessor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIBackendDataAccessor, UnknownData_NHO8, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUIBackendDataAccessor, _splinteredStateSubsystem, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIBackendDataAccessor, 0x00B0);
		}

		// class UBP_S22_Hair_ACC006_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_S22_Hair_ACC006__BP_S22_Hair_ACC006_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S22_Hair_ACC006_C, 0x02B8);
		}

		// class UPHISM_SM_LF_Grass06_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_LF_Grass06__PHISM_SM_LF_Grass06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_LF_Grass06_C, 0x06C0);
		}

		// class UBP_QF_Necklace_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_QF_Necklace_ACC01__BP_QF_Necklace_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_QF_Necklace_ACC01_C, 0x02B8);
		}

		// class UBP_CM_Hair_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_CM_Hair_Acc01__BP_CM_Hair_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_CM_Hair_Acc01_C, 0x02B8);
		}

		// class UGooglePADFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__GooglePAD__GooglePADFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGooglePADFunctionLibrary, 0x0030);
		}

		// class UBP_KS_Beeropener_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_KS_Beeropener_ACC01__BP_KS_Beeropener_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KS_Beeropener_ACC01_C, 0x02B8);
		}

		// class UPHISM_SM_Plant_Suburb01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Plant_Suburb01__PHISM_SM_Plant_Suburb01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Plant_Suburb01_C, 0x06C0);
		}

		// class UAB_K22_Hat_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_K22_Hat_ACC01__AB_K22_Hat_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_TransitionResult, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_20, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_19, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x0BC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x1480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x18E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x1D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x21A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x2600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x2A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x2EC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x2EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x2F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_StateResult_3, 0x2F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, UnknownData_Q9DW, 0x2F68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x2F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x33D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x3830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x3C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x40F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x4550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x49B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x4E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x5270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_AnimDynamics, 0x56D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x5B30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x5B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x5B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_StateResult_2, 0x5BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_UseCachedPose, 0x5BD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_StateResult, 0x5C08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_StateMachine, 0x5C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x5CF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, AnimGraphNode_SaveCachedPose, 0x5E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, Initialized, 0x5EE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, UnknownData_B9ON, 0x5EE9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, OwningCharacterSkeletalMesh, 0x5EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K22_Hat_ACC01_C, InMenu, 0x5EF8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_K22_Hat_ACC01_C, 0x5EF9);
		}

		// class UAB_QF_Necklace_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_QF_Necklace_ACC01__AB_QF_Necklace_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_StateResult_3, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, UnknownData_XWZJ, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_AnimDynamics, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x1570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_StateResult_2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_UseCachedPose, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_StateResult, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_StateMachine, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Necklace_ACC01_C, AnimGraphNode_SaveCachedPose, 0x1840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_QF_Necklace_ACC01_C, 0x18F8);
		}

		// class UBP_SK_Mask_T_ACC01_C : public UBP_SK_Mask_T_ACC000_C
		TEST_METHOD(BlueprintGeneratedClass__BP_SK_Mask_T_ACC01__BP_SK_Mask_T_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Mask_T_ACC01_C, P_SK_Mask_Acc_Horn_001_LT, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Mask_T_ACC01_C, P_SK_Mask_Acc_Eyes_001, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Mask_T_ACC01_C, P_SK_Mask_Acc_Horn_001_RT, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SK_Mask_T_ACC01_C, 0x02E0);
		}

		// class UPHISM_SM_IntSmallTree01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_IntSmallTree01__PHISM_SM_IntSmallTree01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_IntSmallTree01_C, 0x06C0);
		}

		// class UBP_HKW01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_HKW01__BP_HKW01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_HKW01_C, 0x02B8);
		}

		// class UAB_US_Scarf_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_US_Scarf_ACC01__AB_US_Scarf_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_StateResult_3, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, UnknownData_81HR, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_AnimDynamics, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_StateResult_2, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_UseCachedPose, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_StateResult, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_StateMachine, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Scarf_ACC01_C, AnimGraphNode_SaveCachedPose, 0x2100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_US_Scarf_ACC01_C, 0x21B8);
		}

		// class UAB_SK_Armor_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SK_Armor_ACC01__AB_SK_Armor_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_SaveCachedPose, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_11, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_10, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_9, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_8, 0x0838);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_7, 0x0968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_6, 0x0A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_8, 0x0BC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_5, 0x0CE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_4, 0x0E10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x0F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_3, 0x13A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController_2, 0x14D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_7, 0x1600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_BoneDrivenController, 0x1718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, UnknownData_ZCGQ, 0x1848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x1CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x2110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_UseCachedPose, 0x2130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x2160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_AnimDynamics, 0x25C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_6, 0x2A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_5, 0x2B38);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_4, 0x2C50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_3, 0x2D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint_2, 0x2E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_Constraint, 0x2F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x30B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_StateResult, 0x30D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, AnimGraphNode_StateMachine, 0x3108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, OwningCharacterSkeletalMesh, 0x31B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Armor_ACC01_C, Initialized, 0x31C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SK_Armor_ACC01_C, 0x31C1);
		}

		// class UAB_Menu_David_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_David__AB_Menu_David_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_David_C, 0x194C);
		}

		// class UPHISM_SM_Haiti_Bamboo03_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Haiti_Bamboo03__PHISM_SM_Haiti_Bamboo03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Haiti_Bamboo03_C, 0x06C0);
		}

		// class UAB_SS_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SS_Hair_ACC01__AB_SS_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_20, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_19, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_20, 0x1D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_19, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_18, 0x1FB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_17, 0x20E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_16, 0x2210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_15, 0x2340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_14, 0x2470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_13, 0x25A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_12, 0x26D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_11, 0x2800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x2930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x2960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_TwoBoneIK_2, 0x2980);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x2B90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x3450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x38B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x3D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x3D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, UnknownData_16U7, 0x3D68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x3D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x41D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x4630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x4A90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x4EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x5350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_10, 0x57B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_9, 0x58E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_8, 0x5A10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_7, 0x5B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_6, 0x5C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_5, 0x5DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_4, 0x5ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_3, 0x6000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_2, 0x6130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_BoneDrivenController, 0x6260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_TwoBoneIK, 0x6390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x65A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x6A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x6E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x72C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x7720);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x7740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x7770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x7790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x77C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_StateResult, 0x77F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x7830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x78E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SS_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x7A20);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SS_Hair_ACC01_C, 0x7AD8);
		}

		// class UBP_QF_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_QF_Hair_ACC01__BP_QF_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_QF_Hair_ACC01_C, 0x02B8);
		}

		// class UPHISM_SM_IntFern01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_IntFern01__PHISM_SM_IntFern01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_IntFern01_C, 0x06C0);
		}

		// class UBP_Audio_KLR_02_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_02__BP_Audio_KLR_02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_02_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_02_C, 0x00F8);
		}

		// class UBP_Menu_CamperFemale05_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale05__BP_Menu_CamperFemale05_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale05_C, 0x0649);
		}

		// class UPigAmbushAttack : public UPounceAttack
		TEST_METHOD(Class__ThePig__PigAmbushAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigAmbushAttack, UnknownData_6JA4, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAmbushAttack, 0x02F0);
		}

		// class UPigAmbushAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__ThePig__PigAmbushAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPigAmbushAttackOpenSubstate, UnknownData_66AQ, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAmbushAttackOpenSubstate, 0x00F8);
		}

		// class UPigAmbushAttackHittingSubstate : public UPounceAttackHittingSubstate
		TEST_METHOD(Class__ThePig__PigAmbushAttackHittingSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAmbushAttackHittingSubstate, 0x0120);
		}

		// class UPigAmbushAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__ThePig__PigAmbushAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAmbushAttackSuccessSubstate, 0x00D8);
		}

		// class UPigAmbushAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__ThePig__PigAmbushAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAmbushAttackMissSubstate, 0x00E0);
		}

		// class UPigAmbushAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__ThePig__PigAmbushAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPigAmbushAttackObstructSubstate, 0x00E8);
		}

		// class UAB_Menu_Slasher17_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher17__AB_Menu_Slasher17_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, AnimGraphNode_BlendListByBool_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, AnimGraphNode_RandomPlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, AnimGraphNode_BlendListByBool, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, AnimGraphNode_SequencePlayer_2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, Role_Selected, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher17_C, Is_Online, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher17_C, 0x055A);
		}

		// class UAB_Menu_Jake_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Jake__AB_Menu_Jake_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Jake_C, 0x194C);
		}

		// class UKillStandingInteractionDefinition : public UinteractionDefinition
		TEST_METHOD(Class__TheShape__KillStandingInteractionDefinition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillStandingInteractionDefinition, 0x0500);
		}

		// class UShapePounceAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__TheShape__ShapePounceAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapePounceAttackOpenSubstate, _tierDurations, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapePounceAttackOpenSubstate, 0x0100);
		}

		// class UShapeAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheShape__ShapeAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeAnimInstance, UnknownData_KYS1, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeAnimInstance, _evilWithinComponent, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeAnimInstance, UnknownData_ZRR8, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeAnimInstance, 0x05C0);
		}

		// class UPHISM_SM_Corn02_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Corn02__PHISM_SM_Corn02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Corn02_C, 0x06C0);
		}

		// class UAB_Menu_Slasher07_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher07__AB_Menu_Slasher07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher07_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher07_C, 0x0642);
		}

		// class UBP_Menu_BaseSlasher_C : public UDBDMenuPlayer
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_BaseSlasher__BP_Menu_BaseSlasher_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, UberGraphFrame, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, RightFootGroundDetector, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, LeftFootGroundDetector, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, CustomizedAudio, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, CustomizedSkeletalMesh, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, Ak_Audio_Menu_Base_Slasher, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, TML_DissolveSlasher_Dissolve_6A8353EF46DC9749463CE0935534B1A4, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, TML_DissolveSlasher__Direction_6A8353EF46DC9749463CE0935534B1A4, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, UnknownData_LLX8, 0x0635);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, TML_DissolveSlasher, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, IsInMenu, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, UnknownData_14XN, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, RequiredSoundBanks, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, AssignedSoundBanks, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_BaseSlasher_C, SlasherHeight, 0x0668);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_BaseSlasher_C, 0x066C);
		}

		// class UBP_Menu_CamperMale08_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale08__BP_Menu_CamperMale08_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale08_C, UnknownData_J9QW, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale08_C, UberGraphFrame, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale08_C, 0x0658);
		}

		// class UBP_Audio_KLR_Base_C : public UactorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_Base__BP_Audio_KLR_Base_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, UberGraphFrame, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, _killerAudioBank, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, _defaultAudioStatusStartEvent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, _audioComponent, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, _isInMenu, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, UnknownData_P4M7, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, _audioCharacterName, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_Base_C, _audioStartEvent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_Base_C, 0x00F0);
		}

		// class UAB_Menu_Slasher14_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher14__AB_Menu_Slasher14_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, AnimGraphNode_BlendListByBool_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, AnimGraphNode_RandomPlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, AnimGraphNode_BlendListByBool, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, AnimGraphNode_SequencePlayer_2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, Role_Selected, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher14_C, Is_Online, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher14_C, 0x055A);
		}

		// class UBP_NK_Hair_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_NK_Hair_Acc01__BP_NK_Hair_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_NK_Hair_Acc01_C, 0x02B8);
		}

		// class UPHISM_SM_Corn01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_Corn01__PHISM_SM_Corn01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_Corn01_C, 0x06C0);
		}

		// class UBP_Audio_KLR_08_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_08__BP_Audio_KLR_08_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_08_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_08_C, AudioStatusStartMenuEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_08_C, 0x0100);
		}

		// class UAB_QF_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_QF_Hair_ACC01__AB_QF_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_28, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_27, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_26, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_25, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_24, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_23, 0x0900);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_22, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_21, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_20, 0x0C90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_19, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_18, 0x0EF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_17, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_16, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_15, 0x1280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x13B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x13E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_TwoBoneIK_2, 0x1400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x1610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x1ED0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x2330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x2790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x2BF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x3050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x34B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x3910);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x3930);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, UnknownData_7FG8, 0x3968);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_TwoBoneIK, 0x3970);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_14, 0x3B80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_13, 0x3CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_12, 0x3DE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_11, 0x3F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_10, 0x4040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_9, 0x4170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_8, 0x42A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_7, 0x43D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_6, 0x4500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_5, 0x4630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_4, 0x4760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_3, 0x4890);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController_2, 0x49C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_BoneDrivenController, 0x4AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x4C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x5080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x54E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x5940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x5DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x6200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x6660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x6AC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x6F20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x6F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x6F70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x6F90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x6FC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_StateResult, 0x6FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x7030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x70E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_QF_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x7220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_QF_Hair_ACC01_C, 0x72D8);
		}

		// class UBP_DK_Watch_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_DK_Watch_Acc01__BP_DK_Watch_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DK_Watch_Acc01_C, 0x02B8);
		}

		// class UBP_US_Necklace_ACC02_C : public UBP_US_Bag_ACC006_C
		TEST_METHOD(BlueprintGeneratedClass__BP_US_Necklace_ACC02__BP_US_Necklace_ACC02_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_US_Necklace_ACC02_C, 0x02B8);
		}

		// class UAB_Menu_Slasher08_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher08__AB_Menu_Slasher08_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, Is_Online, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, UnknownData_LYR7, 0x0642);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher08_C, Hatchet, 0x0648);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher08_C, 0x0650);
		}

		// class UBP_DK_Hair_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_DK_Hair_Acc01__BP_DK_Hair_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DK_Hair_Acc01_C, 0x02B8);
		}

		// class UBP_Menu_CamperFemale09_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale09__BP_Menu_CamperFemale09_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale09_C, 0x0649);
		}

		// class UPHISM_SM_COM_Flower01_C : public UPlayerOverlapHISMComponent
		TEST_METHOD(BlueprintGeneratedClass__PHISM_SM_COM_Flower01__PHISM_SM_COM_Flower01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPHISM_SM_COM_Flower01_C, 0x06C0);
		}

		// class UAB_GK_Hairs_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_GK_Hairs_ACC01__AB_GK_Hairs_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_StateResult_3, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, UnknownData_YBCL, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_AnimDynamics, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x1E30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_StateResult_2, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_UseCachedPose, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_StateResult, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_StateMachine, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_Hairs_ACC01_C, AnimGraphNode_SaveCachedPose, 0x2100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_GK_Hairs_ACC01_C, 0x21B8);
		}

		// class UBP_KillerLeftFootGroundDetector_C : public UFromBoneGroundDetectorComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_KillerLeftFootGroundDetector__BP_KillerLeftFootGroundDetector_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KillerLeftFootGroundDetector_C, 0x01E0);
		}

		// class UBP_FS_Badge01_ACC_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_FS_Badge01_ACC__BP_FS_Badge01_ACC_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FS_Badge01_ACC_C, 0x02B8);
		}

		// class UAB_Menu_Slasher03_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher03__AB_Menu_Slasher03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher03_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher03_C, 0x0642);
		}

		// class UMediaOutput : public UObject
		TEST_METHOD(Class__MediaIOCore__MediaOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaOutput, NumberOfTextureBuffers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaOutput, UnknownData_RWWY, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaOutput, 0x0038);
		}

		// class UMediaCapture : public UObject
		TEST_METHOD(Class__MediaIOCore__MediaCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaCapture, OnStateChanged, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaCapture, UnknownData_MH1Q, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaCapture, MediaOutput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaCapture, UnknownData_ZW46, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaCapture, CapturingRenderTarget, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMediaCapture, UnknownData_D11U, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMediaCapture, 0x0110);
		}

		// class UFileMediaCapture : public UMediaCapture
		TEST_METHOD(Class__MediaIOCore__FileMediaCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaCapture, UnknownData_UZDQ, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaCapture, 0x0180);
		}

		// class UFileMediaOutput : public UMediaOutput
		TEST_METHOD(Class__MediaIOCore__FileMediaOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, UnknownData_W5AC, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, WriteOptions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, FilePath, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, BaseFileName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, bOverrideDesiredSize, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, UnknownData_RYG9, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, DesiredSize, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, bOverridePixelFormat, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, UnknownData_6X2M, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, DesiredPixelFormat, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, UnknownData_UTDJ, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFileMediaOutput, UnknownData_7O05, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFileMediaOutput, 0x00E0);
		}

		// class UMovieSceneGeometryCollectionTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionTrack, AnimationSections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionTrack, 0x0070);
		}

		// class UMovieSceneGeometryCollectionSection : public UMovieSceneSection
		TEST_METHOD(Class__GeometryCollectionTracks__MovieSceneGeometryCollectionSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneGeometryCollectionSection, Params, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneGeometryCollectionSection, 0x0120);
		}

		// class UBP_Audio_KLR_03_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_03__BP_Audio_KLR_03_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_03_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_03_C, 0x00F8);
		}

		// class UBP_Menu_Slasher11_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher11__BP_Menu_Slasher11_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher11_C, UnknownData_XJ0F, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher11_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher11_C, BP_Audio_KLR_12, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher11_C, RBT_Mesh, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher11_C, 0x0688);
		}

		// class UCoreBaseLoadoutPartWidget : public UUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreBaseLoadoutPartWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseLoadoutPartWidget, UnknownData_GD1U, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseLoadoutPartWidget, ImageRarity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseLoadoutPartWidget, ImageIcon, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseLoadoutPartWidget, TextStackCount, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreBaseLoadoutPartWidget, 0x0280);
		}

		// class UCorePerkWidget : public UCoreBaseLoadoutPartWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePerkWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePerkWidget, UnknownData_1YRJ, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePerkWidget, 0x0288);
		}

		// class UCoreBaseUserWidget : public UUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreBaseUserWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseUserWidget, UnknownData_4YCD, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseUserWidget, IsInteractive, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseUserWidget, _controlMode, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseUserWidget, UnknownData_K9OH, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseUserWidget, _inputManager, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseUserWidget, UnknownData_ILL7, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreBaseUserWidget, 0x02D0);
		}

		// class UCoreBaseHudWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreBaseHudWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, FocusAnimationDuration, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, FocusAnimationDelay, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, FocusAnimationEasing, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, UnknownData_JA7B, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, FocusAnimationMaxOpacity, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, FocusAnimationMinOpacity, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreBaseHudWidget, UnknownData_EO96, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreBaseHudWidget, 0x02E8);
		}

		// class UCorePingStatusWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePingStatusWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePingStatusWidget, UnknownData_W6D2, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePingStatusWidget, 0x02F0);
		}

		// class UCorePlayerStatusesContainerWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePlayerStatusesContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusesContainerWidget, UnknownData_C7FL, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusesContainerWidget, PlayerStatusWidgets, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusesContainerWidget, _playerStatusViewInterfaces, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePlayerStatusesContainerWidget, 0x0318);
		}

		// class UCorePlayerStatusWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePlayerStatusWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusWidget, UnknownData_QNUQ, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusWidget, ObsessionSfx, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusWidget, _cachedViewData, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePlayerStatusWidget, UnknownData_GLBD, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePlayerStatusWidget, 0x03A8);
		}

		// class UCorePowerBundleWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePowerBundleWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePowerBundleWidget, UnknownData_YRM9, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePowerBundleWidget, 0x02D8);
		}

		// class UCorePowerWidget : public UCoreBaseLoadoutPartWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePowerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePowerWidget, UnknownData_L96Z, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePowerWidget, 0x0288);
		}

		// class UCoreScreenIndicatorWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreScreenIndicatorWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreScreenIndicatorWidget, UnknownData_ENCN, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreScreenIndicatorWidget, InactiveThreshold, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreScreenIndicatorWidget, UnknownData_65P5, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreScreenIndicatorWidget, container, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreScreenIndicatorWidget, OffScreenIndicatorItemClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreScreenIndicatorWidget, _offScreenIndicatorsMap, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreScreenIndicatorWidget, 0x0358);
		}

		// class UCoreSkillCheckWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreSkillCheckWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSkillCheckWidget, UnknownData_UTY7, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSkillCheckWidget, 0x02F0);
		}

		// class UCoreSpectateBarWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreSpectateBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSpectateBarWidget, UnknownData_XU1K, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSpectateBarWidget, _leaveButtonClickDelegate, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSpectateBarWidget, _leftArrowClickDelegate, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreSpectateBarWidget, _rightArrowClickDelegate, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreSpectateBarWidget, 0x0320);
		}

		// class UCoreStartSequenceWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreStartSequenceWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, UnknownData_9TVX, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, FadeInDuration, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, FadeOutDuration, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, FadeInEasing, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, FadeOutEasing, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, UnknownData_2719, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, BorderColors, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, DefaultColor, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, ThemeNameTextfield, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, SeparatorImage, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, MapNameTextfield, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStartSequenceWidget, StartSequenceFadeOutDelegate, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStartSequenceWidget, 0x0388);
		}

		// class UCoreStatusEffectIcon : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreStatusEffectIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectIcon, UnknownData_M6FW, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStatusEffectIcon, 0x0300);
		}

		// class UCoreStatusEffectWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreStatusEffectWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, UnknownData_H1V5, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, InactiveThreshold, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, PrepooledItemAmount, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, ItemsByColumn, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, EvenColumnOffset, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, CoreStatusEffectIconClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, StatusEffectContainer, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, _statusEffectPool, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, _statusEffectOrder, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreStatusEffectWidget, _statusEffectMap, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreStatusEffectWidget, 0x0380);
		}

		// class UCoreTemplateWidget : public UUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreTemplateWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTemplateWidget, UnknownData_1VFM, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreTemplateWidget, 0x0268);
		}

		// class UCoreTestBuildFlagWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreTestBuildFlagWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTestBuildFlagWidget, UnknownData_29ZL, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTestBuildFlagWidget, TopLineTextfield, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTestBuildFlagWidget, BottomLineTextfield, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreTestBuildFlagWidget, 0x0300);
		}

		// class UCoreTutorialMysteryNoteWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreTutorialMysteryNoteWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialMysteryNoteWidget, UnknownData_FS2R, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreTutorialMysteryNoteWidget, 0x02F0);
		}

		// class UCoreTutorialObjectiveItem : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreTutorialObjectiveItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectiveItem, TutorialObjectiveCompletedDelegate, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreTutorialObjectiveItem, 0x02E0);
		}

		// class UCoreTutorialObjectivesContainer : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreTutorialObjectivesContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, UnknownData_X9P0, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, CoreTutorialObjectiveItemClass, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, BasePooledInstanceAmount, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, UnknownData_ZIYA, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, ObjectiveContainer, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, _objectivePool, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialObjectivesContainer, _objectiveItems, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreTutorialObjectivesContainer, 0x0368);
		}

		// class UCoreTutorialPopupWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreTutorialPopupWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialPopupWidget, UnknownData_V69A, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialPopupWidget, ClosePopupSfx, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialPopupWidget, _tallyTutoNextButtonClickDelegate, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialPopupWidget, _tallyTutoLeaveButtonClickDelegate, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreTutorialPopupWidget, _notifTutoConfirmButtonClickDelegate, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreTutorialPopupWidget, 0x0328);
		}

		// class UDBDImage : public Uimage
		TEST_METHOD(Class__DBDUIViewsCore__DBDImage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDImage, DefaultImage, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDImage, 0x0250);
		}

		// class UDBDTextBlock : public UTextBlock
		TEST_METHOD(Class__DBDUIViewsCore__DBDTextBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, _debugPreviewUndockedState, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, UnknownData_1EBT, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, _switchDockStateManager, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, _isUpperCase, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, _hasUndocking, 0x02F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, UnknownData_NY0I, 0x02FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, _undockedProperties, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTextBlock, UnknownData_T1TQ, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTextBlock, 0x0388);
		}

		// class UDBDWrapBox : public UPanelWidget
		TEST_METHOD(Class__DBDUIViewsCore__DBDWrapBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBox, InnerSlotPadding, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBox, WrapWidth, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBox, bExplicitWrapWidth, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBox, HorizontalAlignment, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBox, UnknownData_G7SZ, 0x014E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDWrapBox, 0x0160);
		}

		// class UDBDWrapBoxSlot : public UPanelSlot
		TEST_METHOD(Class__DBDUIViewsCore__DBDWrapBoxSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, Padding, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, bFillEmptySpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, UnknownData_Y5Y2, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, FillSpanWhenLessThan, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, HorizontalAlignment, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, VerticalAlignment, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDWrapBoxSlot, UnknownData_SP18, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDWrapBoxSlot, 0x0068);
		}

		// class UTestWidget : public UUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__TestWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestWidget, Workbench, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestWidget, ShowWorkbench, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestWidget, UnknownData_RINK, 0x0269);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestWidget, 0x0270);
		}

		// class UCoreAddonWidget : public UCoreBaseLoadoutPartWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreAddonWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreAddonWidget, UnknownData_1OWL, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreAddonWidget, 0x0288);
		}

		// class UCoreButtonPromptWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreButtonPromptWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreButtonPromptWidget, CursorOverSfx, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreButtonPromptWidget, CursorPressSfx, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreButtonPromptWidget, CursorReleaseSfx, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreButtonPromptWidget, _inputPromptText, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreButtonPromptWidget, _buttonTextField, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreButtonPromptWidget, _buttonPromptTriggeredDelegate, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreButtonPromptWidget, 0x0308);
		}

		// class UCoreEndGameCollapseBarWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreEndGameCollapseBarWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseBarWidget, UnknownData_6IWD, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseBarWidget, _progressBarInterpSpeed, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseBarWidget, UnknownData_C7ZK, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreEndGameCollapseBarWidget, 0x0360);
		}

		// class UCoreEndGameCollapseProgressWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreEndGameCollapseProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseProgressWidget, ProgressBar, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseProgressWidget, MarkerLeftCanvas, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseProgressWidget, MarkerRightCanvas, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseProgressWidget, _markerLeftBox, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseProgressWidget, _markerRightBox, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEndGameCollapseProgressWidget, UnknownData_6MC5, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreEndGameCollapseProgressWidget, 0x0318);
		}

		// class UCoreEquippedItemWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreEquippedItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEquippedItemWidget, UnknownData_6BV3, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEquippedItemWidget, ItemDisappearSfx, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreEquippedItemWidget, 0x02F8);
		}

		// class UCoreEquippedPowerWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreEquippedPowerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreEquippedPowerWidget, UnknownData_U9HG, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreEquippedPowerWidget, 0x02F0);
		}

		// class UCoreExampleWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreExampleWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, UnknownData_6FBF, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, EditAnywhere, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, EditDefaultsOnly, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, EditInstanceOnly, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, EditNoBlueprint, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, EditDefaultsOnlyBlueprintReadOnly, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, VisibleAnywhere, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, VisibleDefaultsOnly, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, VisibleInstanceOnly, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExampleWidget, ExampleButtonClickDelegate, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreExampleWidget, 0x0380);
		}

		// class UCoreExternalEffectsWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreExternalEffectsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, UnknownData_2YSL, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, PerkWidgets, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, AddonWidgets, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, UnknownData_REYP, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, _perkViewInterfaces, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, _addonViewInterfaces, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreExternalEffectsWidget, UnknownData_8MJM, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreExternalEffectsWidget, 0x0498);
		}

		// class UCoreHookCountWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreHookCountWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHookCountWidget, UnknownData_5FHJ, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreHookCountWidget, 0x02F0);
		}

		// class UCoreHudAlertWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreHudAlertWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, UnknownData_E4I6, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, MaxDisplayedItems, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, SecondaryAlpha, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, FullAlertDuration, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, PendingAlertDuration, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, AnimationDuration, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, AnimationEasing, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, UnknownData_ROZL, 0x0305);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, AnimationTranslationY, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, UnknownData_D6ME, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, CoreHudScoreAlertItemClass, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, CoreHudStatusEffectAlertItemClass, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, AlertContainer, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, _alerts, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, _pendingAlerts, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, _scoreAlertPool, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, _statusEffectAlertPool, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudAlertWidget, UnknownData_ULQB, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreHudAlertWidget, 0x0378);
		}

		// class UCoreHudObjectiveWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreHudObjectiveWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreHudObjectiveWidget, UnknownData_LGUC, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreHudObjectiveWidget, 0x02F8);
		}

		// class UCoreHudScoreAlertItem : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreHudScoreAlertItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreHudScoreAlertItem, 0x02D0);
		}

		// class UCoreHudStatusEffectAlertItem : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreHudStatusEffectAlertItem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreHudStatusEffectAlertItem, 0x02D0);
		}

		// class UCoreInputPromptTextWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreInputPromptTextWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInputPromptTextWidget, InputPrompt, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInputPromptTextWidget, TextField, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInputPromptTextWidget, inputKey, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInputPromptTextWidget, text, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreInputPromptTextWidget, 0x0318);
		}

		// class UCoreInputPromptWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreInputPromptWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInputPromptWidget, UnfoundInputKeyText, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInputPromptWidget, inputKey, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreInputPromptWidget, 0x0308);
		}

		// class UCoreInteractionProgressWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreInteractionProgressWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionProgressWidget, UnknownData_UQ4E, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionProgressWidget, Proficiencies, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreInteractionProgressWidget, 0x0308);
		}

		// class UCoreInteractionPromptActionWidget : public UCoreInputPromptTextWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreInteractionPromptActionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptActionWidget, InputPrompt2, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptActionWidget, IdleAnimationName, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptActionWidget, UnknownData_FIT7, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptActionWidget, inputKey2, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptActionWidget, UnknownData_72MN, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreInteractionPromptActionWidget, 0x0358);
		}

		// class UCoreInteractionPromptsContainerWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreInteractionPromptsContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, UnknownData_YUMZ, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, CenterContainerBox, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, ContainerBox, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, InteractionPromptWidgetClass, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, MaxDisplayedPrompts, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, SlotMargin, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, UnknownData_IDWS, 0x0324);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, _promptWidgetPool, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreInteractionPromptsContainerWidget, _displayedPromptsMap, 0x0338);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreInteractionPromptsContainerWidget, 0x0388);
		}

		// class UCoreInteractionPromptWidget : public UUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreInteractionPromptWidget)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreInteractionPromptWidget, 0x0260);
		}

		// class UCoreItemBundleWidget : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreItemBundleWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreItemBundleWidget, UnknownData_I7DN, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreItemBundleWidget, 0x02D8);
		}

		// class UCoreItemInteractionWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreItemInteractionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreItemInteractionWidget, UnknownData_3R1P, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreItemInteractionWidget, 0x02F0);
		}

		// class UCoreItemWidget : public UCoreBaseLoadoutPartWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreItemWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreItemWidget, UnknownData_TDGC, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreItemWidget, 0x0288);
		}

		// class UCoreLeaningArrowsWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreLeaningArrowsWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreLeaningArrowsWidget, UnknownData_32TE, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreLeaningArrowsWidget, 0x02F0);
		}

		// class UCoreMatchResultWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreMatchResultWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreMatchResultWidget, UnknownData_PPY4, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreMatchResultWidget, 0x02F0);
		}

		// class UCoreOfferingInteractionWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreOfferingInteractionWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOfferingInteractionWidget, UnknownData_6XA0, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreOfferingInteractionWidget, 0x02F0);
		}

		// class UCoreOfferingWidget : public UCoreBaseLoadoutPartWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreOfferingWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOfferingWidget, UnknownData_O8F4, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreOfferingWidget, 0x0288);
		}

		// class UCoreOffScreenIndicatorItem : public UCoreBaseUserWidget
		TEST_METHOD(Class__DBDUIViewsCore__CoreOffScreenIndicatorItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOffScreenIndicatorItem, InactiveTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOffScreenIndicatorItem, IndicatorPadding, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOffScreenIndicatorItem, DistanceClamping, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOffScreenIndicatorItem, MinDistanceRatio, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOffScreenIndicatorItem, MinDistanceAlpha, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoreOffScreenIndicatorItem, UnknownData_IRFA, 0x02EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoreOffScreenIndicatorItem, 0x02F0);
		}

		// class UCorePerksContainerWidget : public UCoreBaseHudWidget
		TEST_METHOD(Class__DBDUIViewsCore__CorePerksContainerWidget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePerksContainerWidget, UnknownData_CMZU, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePerksContainerWidget, PerkWidgets, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCorePerksContainerWidget, _perkViewInterfaces, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCorePerksContainerWidget, 0x0310);
		}

		// class UBP_OK_W01_C : public UBP_KK_W01_C
		TEST_METHOD(BlueprintGeneratedClass__BP_OK_W01__BP_OK_W01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_OK_W01_C, 0x02B8);
		}

		// class USlasherAnimSlaveFemale_C : public USlaveAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SlasherAnimSlaveFemale__SlasherAnimSlaveFemale_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveFemale_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveFemale_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveFemale_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherAnimSlaveFemale_C, 0x0400);
		}

		// class UAB_Menu_Slasher11_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher11__AB_Menu_Slasher11_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_BlendListByBool_2, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_BlendListByBool, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher11_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher11_C, 0x0642);
		}

		// class UBP_Menu_CamperMale12_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale12__BP_Menu_CamperMale12_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale12_C, 0x0649);
		}

		// class UNiagaraDataInterface : public UNiagaraDataInterfaceBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterface, UnknownData_2GJE, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterface, 0x0038);
		}

		// class UMovieSceneNiagaraTrack : public UMovieSceneNameableTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraTrack, Sections, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraTrack, 0x0070);
		}

		// class UMovieSceneNiagaraParameterTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraParameterTrack, Parameter, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraParameterTrack, 0x00A0);
		}

		// class UMovieSceneNiagaraBoolParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraBoolParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraBoolParameterTrack, 0x00A0);
		}

		// class UMovieSceneNiagaraColorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraColorParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraColorParameterTrack, 0x00A0);
		}

		// class UMovieSceneNiagaraFloatParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraFloatParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraFloatParameterTrack, 0x00A0);
		}

		// class UMovieSceneNiagaraIntegerParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraIntegerParameterTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraIntegerParameterTrack, 0x00A0);
		}

		// class UMovieSceneNiagaraSystemSpawnSection : public UMovieSceneSection
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemSpawnSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionStartBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_08JM, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEvaluateBehavior, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_COT1, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, SectionEndBehavior, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_51X6, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, AgeUpdateMode, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraSystemSpawnSection, UnknownData_NOS7, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemSpawnSection, 0x00F8);
		}

		// class UMovieSceneNiagaraSystemTrack : public UMovieSceneNiagaraTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraSystemTrack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraSystemTrack, 0x0070);
		}

		// class UMovieSceneNiagaraVectorParameterTrack : public UMovieSceneNiagaraParameterTrack
		TEST_METHOD(Class__Niagara__MovieSceneNiagaraVectorParameterTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, ChannelsUsed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovieSceneNiagaraVectorParameterTrack, UnknownData_INWH, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovieSceneNiagaraVectorParameterTrack, 0x00A8);
		}

		// class UNiagaraActor : public Uactor
		TEST_METHOD(Class__Niagara__NiagaraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraActor, NiagaraComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraActor, UnknownData_H2A0, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraActor, 0x0240);
		}

		// class UNiagaraComponent : public UFXSystemComponent
		TEST_METHOD(Class__Niagara__NiagaraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, asset, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, TickBehavior, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_07KJ, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OverrideParameters, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_3MS4, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_RGGF, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, MaxTimeBeforeForceUpdateTransform, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_5HQ5, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, OnSystemFinished, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachParent, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachSocketName, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachLocationRule, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachRotationRule, 0x059D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, AutoAttachScaleRule, 0x059E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponent, UnknownData_TVRC, 0x059F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponent, 0x05E0);
		}

		// class UNiagaraComponentPool : public UObject
		TEST_METHOD(Class__Niagara__NiagaraComponentPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, WorldParticleSystemPools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraComponentPool, UnknownData_D0JY, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraComponentPool, 0x0088);
		}

		// class UNiagaraConvertInPlaceUtilityBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraConvertInPlaceUtilityBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraConvertInPlaceUtilityBase, 0x0030);
		}

		// class UNiagaraDataInterfaceAudioSubmix : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSubmix, Submix, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSubmix, 0x0040);
		}

		// class UNiagaraDataInterfaceAudioOscilloscope : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioOscilloscope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, Submix, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioOscilloscope, ScopeInMilliseconds, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioOscilloscope, 0x0048);
		}

		// class UNiagaraDataInterfaceAudioSpectrum : public UNiagaraDataInterfaceAudioSubmix
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceAudioSpectrum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, resolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MinimumFrequency, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, MaximumFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceAudioSpectrum, NoiseFloorDb, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceAudioSpectrum, 0x0050);
		}

		// class UNiagaraDataInterfaceCamera : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, PlayerControllerIndex, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCamera, UnknownData_NUIP, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCamera, 0x0040);
		}

		// class UNiagaraDataInterfaceCollisionQuery : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCollisionQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCollisionQuery, UnknownData_DCCF, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCollisionQuery, 0x0048);
		}

		// class UNiagaraDataInterfaceCurveBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, ShaderLUT, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMinTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTMaxTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTInvTimeRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, LUTNumSamplesMinusOne, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurveBase, UnknownData_PR1O, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurveBase, 0x0060);
		}

		// class UNiagaraDataInterfaceColorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceColorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, RedCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, GreenCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, BlueCurve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceColorCurve, AlphaCurve, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceColorCurve, 0x0260);
		}

		// class UNiagaraDataInterfaceCurlNoise : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurlNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, seed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurlNoise, UnknownData_9W1H, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurlNoise, 0x0048);
		}

		// class UNiagaraDataInterfaceCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceCurve, curve, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceCurve, 0x00E0);
		}

		// class UNiagaraParticleCallbackHandler : public UInterface
		TEST_METHOD(Class__Niagara__NiagaraParticleCallbackHandler)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParticleCallbackHandler, 0x0030);
		}

		// class UNiagaraDataInterfaceExport : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceExport, CallbackHandlerParameter, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceExport, 0x0068);
		}

		// class UNiagaraDataInterfaceRWBase : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceRWBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, OutputShaderStages, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceRWBase, IterationShaderStages, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceRWBase, 0x00D8);
		}

		// class UNiagaraDataInterfaceGrid2D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumCellsMaxAxis, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, NumAttributes, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, SetGridFromMaxAxis, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_YVW4, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, WorldBBoxSize, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2D, UnknownData_LV03, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2D, 0x00F8);
		}

		// class UNiagaraDataInterfaceGrid2DCollection : public UNiagaraDataInterfaceGrid2D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid2DCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid2DCollection, UnknownData_WFTH, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid2DCollection, 0x0148);
		}

		// class UNiagaraDataInterfaceGrid3D : public UNiagaraDataInterfaceRWBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, NumVoxels, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, VoxelSize, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, SetGridFromVoxelSize, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, UnknownData_8YJ8, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceGrid3D, WorldBBoxSize, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceGrid3D, 0x00F8);
		}

		// class UNiagaraDataInterfaceNeighborGrid3D : public UNiagaraDataInterfaceGrid3D
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceNeighborGrid3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, MaxNeighborsPerVoxel, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceNeighborGrid3D, UnknownData_895F, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceNeighborGrid3D, 0x0100);
		}

		// class UNiagaraDataInterfaceOcclusion : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceOcclusion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceOcclusion, 0x0038);
		}

		// class UNiagaraDataInterfaceParticleRead : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceParticleRead)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceParticleRead, EmitterName, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceParticleRead, 0x0048);
		}

		// class UNiagaraDataInterfaceSimpleCounter : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSimpleCounter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSimpleCounter, 0x0038);
		}

		// class UNiagaraDataInterfaceSkeletalMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, source, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, MeshUserParameter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SourceComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SkinningMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_VTK7, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, SamplingRegions, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, WholeMeshLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_3N3M, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredBones, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, FilteredSockets, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, ExcludeBoneName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSkeletalMesh, UnknownData_DKL1, 0x00C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSkeletalMesh, 0x00D0);
		}

		// class UNiagaraDataInterfaceSpline : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceSpline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceSpline, source, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceSpline, 0x0040);
		}

		// class UNiagaraDataInterfaceStaticMesh : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceStaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, DefaultMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, source, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SourceComponent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, SectionFilter, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceStaticMesh, UnknownData_U922, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceStaticMesh, 0x0068);
		}

		// class UNiagaraDataInterfaceTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceTexture, texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceTexture, 0x0040);
		}

		// class UNiagaraDataInterfaceVector2DCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector2DCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, XCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector2DCurve, YCurve, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector2DCurve, 0x0160);
		}

		// class UNiagaraDataInterfaceVector4Curve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVector4Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, XCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, YCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, ZCurve, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVector4Curve, WCurve, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVector4Curve, 0x0260);
		}

		// class UNiagaraDataInterfaceVectorCurve : public UNiagaraDataInterfaceCurveBase
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, XCurve, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, YCurve, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorCurve, ZCurve, 0x0160);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorCurve, 0x01E0);
		}

		// class UNiagaraDataInterfaceVectorField : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, Field, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileX, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, bTileZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVectorField, UnknownData_CKPS, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVectorField, 0x0048);
		}

		// class UNiagaraDataInterfaceVolumeTexture : public UNiagaraDataInterface
		TEST_METHOD(Class__Niagara__NiagaraDataInterfaceVolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraDataInterfaceVolumeTexture, texture, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraDataInterfaceVolumeTexture, 0x0040);
		}

		// class UNiagaraEditorDataBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEditorDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEditorDataBase, 0x0030);
		}

		// class UNiagaraEffectType : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEffectType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UpdateFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_JQXU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, CullReaction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_03IQ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, DetailLevelScalabilitySettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, SystemScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, EmitterScalabilitySettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEffectType, UnknownData_HO92, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEffectType, 0x0108);
		}

		// class UNiagaraEmitter : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bLocalSpace, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, bDeterminism, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_76VK, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RandomSeed, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, AllocationMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_EFM9, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, PreAllocationCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UpdateScriptProps, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnScriptProps, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterSpawnScriptProps, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EmitterUpdateScriptProps, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_2Y34, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, FixedBounds, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MinDetailLevel, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDetailLevel, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GlobalSpawnCountScaleOverrides, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_P0CQ, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, Platforms, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, ScalabilityOverrides, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_MSE1, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxDeltaTimePerTick, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, DefaultShaderStageIndex, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, MaxUpdateIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SpawnStages, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_JT66, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UniqueEmitterName, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, RendererProperties, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, EventHandlerScriptProps, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SimulationStages, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, GPUComputeScript, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, SharedEventGeneratorIds, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEmitter, UnknownData_UD3J, 0x0210);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEmitter, 0x02B8);
		}

		// class UNiagaraEventReceiverEmitterAction : public UObject
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction, 0x0030);
		}

		// class UNiagaraEventReceiverEmitterAction_SpawnParticles : public UNiagaraEventReceiverEmitterAction
		TEST_METHOD(Class__Niagara__NiagaraEventReceiverEmitterAction_SpawnParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, NumParticles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, UnknownData_6HSV, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraEventReceiverEmitterAction_SpawnParticles, 0x0038);
		}

		// class UNiagaraFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Niagara__NiagaraFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraFunctionLibrary, 0x0030);
		}

		// class UNiagaraRendererProperties : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, SortOrderHint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bIsEnabled, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, bMotionBlurEnabled, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRendererProperties, UnknownData_3D8I, 0x0036);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRendererProperties, 0x0058);
		}

		// class UNiagaraLightRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraLightRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_2NC7, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorAdd, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, UnknownData_8ZBW, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightRenderingEnabledBinding, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, LightExponentBinding, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, PositionBinding, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, ColorBinding, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, RadiusBinding, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraLightRendererProperties, VolumetricScatteringBinding, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraLightRendererProperties, 0x03D0);
		}

		// class UNiagaraMeshRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraMeshRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ParticleMesh, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SortMode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_P3FJ, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_WJTN, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, OverrideMaterials, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_3ZPC, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, FacingMode, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_16DL, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_I5FM, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, LockedAxisSpace, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, UnknownData_3H5H, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, PositionBinding, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ColorBinding, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, VelocityBinding, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MeshOrientationBinding, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, ScaleBinding, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, SubImageIndexBinding, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterialBinding, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial1Binding, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial2Binding, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, DynamicMaterial3Binding, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, MaterialRandomBinding, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CustomSortingBinding, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, NormalizedAgeBinding, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraMeshRendererProperties, CameraOffsetBinding, 0x07F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraMeshRendererProperties, 0x0880);
		}

		// class UNiagaraParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, collection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, OverridenParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollectionInstance, ParameterStorage, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollectionInstance, 0x0100);
		}

		// class UNiagaraParameterCollection : public UObject
		TEST_METHOD(Class__Niagara__NiagaraParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Namespace, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, UnknownData_IX0L, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, Parameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, DefaultInstance, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraParameterCollection, CompileId, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraParameterCollection, 0x0068);
		}

		// class UNiagaraPrecompileContainer : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPrecompileContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, Scripts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPrecompileContainer, System, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPrecompileContainer, 0x0048);
		}

		// class UNiagaraPreviewBase : public Uactor
		TEST_METHOD(Class__Niagara__NiagaraPreviewBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewBase, 0x0230);
		}

		// class UNiagaraPreviewAxis : public UObject
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis, 0x0030);
		}

		// class UNiagaraPreviewAxis_InterpParamBase : public UNiagaraPreviewAxis
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, param, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamBase, Count, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamBase, 0x0040);
		}

		// class UNiagaraPreviewAxis_InterpParamInt32 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamInt32, max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamInt32, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamFloat : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamFloat, max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamFloat, 0x0048);
		}

		// class UNiagaraPreviewAxis_InterpParamVector2D : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector2D, max, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector2D, 0x0050);
		}

		// class UNiagaraPreviewAxis_InterpParamVector : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector, max, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector, 0x0058);
		}

		// class UNiagaraPreviewAxis_InterpParamVector4 : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamVector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamVector4, max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamVector4, 0x0060);
		}

		// class UNiagaraPreviewAxis_InterpParamLinearColor : public UNiagaraPreviewAxis_InterpParamBase
		TEST_METHOD(Class__Niagara__NiagaraPreviewAxis_InterpParamLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewAxis_InterpParamLinearColor, max, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewAxis_InterpParamLinearColor, 0x0060);
		}

		// class UNiagaraPreviewGrid : public Uactor
		TEST_METHOD(Class__Niagara__NiagaraPreviewGrid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, System, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, ResetMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, UnknownData_BEKP, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, PreviewAxisX, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, PreviewAxisY, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, PreviewClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, SpacingX, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, SpacingY, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, NumX, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, NumY, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, PreviewComponents, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraPreviewGrid, UnknownData_OPZJ, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraPreviewGrid, 0x0280);
		}

		// class UNiagaraRibbonRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraRibbonRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MATERIAL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialUserParamBinding, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, FacingMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_5Z9X, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0TilingDistance, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Scale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0Offset, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV0AgeOffsetMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_8XK8, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1TilingDistance, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Scale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1Offset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UV1AgeOffsetMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DrawDirection, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_CWUH, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, CurveTension, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_LBVL, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationFactor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bUseConstantFactor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_AZDH, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, TessellationAngle, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, bScreenSpaceTessellation, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, UnknownData_1QZV, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, PositionBinding, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, ColorBinding, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, VelocityBinding, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, NormalizedAgeBinding, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonTwistBinding, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonWidthBinding, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonFacingBinding, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonIdBinding, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, RibbonLinkOrderBinding, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, MaterialRandomBinding, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterialBinding, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial1Binding, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial2Binding, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraRibbonRendererProperties, DynamicMaterial3Binding, 0x0830);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraRibbonRendererProperties, 0x08C0);
		}

		// class UNiagaraScript : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, Usage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_Y0ZV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UsageId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, RapidIterationParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionParamStore, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, ScriptExecutionBoundParameters, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVMId, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, UnknownData_Q7B8, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedScriptVM, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedParameterCollectionReferences, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScript, CachedDefaultDataInterfaces, 0x0518);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScript, 0x0528);
		}

		// class UNiagaraScriptSourceBase : public UObject
		TEST_METHOD(Class__Niagara__NiagaraScriptSourceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraScriptSourceBase, UnknownData_3DW4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraScriptSourceBase, 0x0050);
		}

		// class UNiagaraSettings : public UDeveloperSettings
		TEST_METHOD(Class__Niagara__NiagaraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterTypes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalPayloadTypes, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, AdditionalParameterEnums, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, QualityLevels, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSettings, DefaultEffectTypePtr, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSettings, 0x00B0);
		}

		// class UNiagaraSimulationStageBase : public UNiagaraMergeable
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, Script, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, SimulationStageName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageBase, UnknownData_CNAF, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageBase, 0x0048);
		}

		// class UNiagaraSimulationStageGeneric : public UNiagaraSimulationStageBase
		TEST_METHOD(Class__Niagara__NiagaraSimulationStageGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, IterationSource, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_S1KC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, Iterations, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, UnknownData_P4IC, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSimulationStageGeneric, DataInterface, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSimulationStageGeneric, 0x0088);
		}

		// class UNiagaraSpriteRendererProperties : public UNiagaraRendererProperties
		TEST_METHOD(Class__Niagara__NiagaraSpriteRendererProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MATERIAL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialUserParamBinding, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, Alignment, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, FacingMode, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_Q3XQ, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PivotInUVSpace, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SortMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_7G4P, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageSize, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_PKWT, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MinFacingCameraBlendDistance, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaxFacingCameraBlendDistance, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_CV2U, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, PositionBinding, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, ColorBinding, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, VelocityBinding, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteRotationBinding, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteSizeBinding, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteFacingBinding, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SpriteAlignmentBinding, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, SubImageIndexBinding, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterialBinding, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial1Binding, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial2Binding, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, DynamicMaterial3Binding, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CameraOffsetBinding, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UVScaleBinding, 0x0808);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, MaterialRandomBinding, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, CustomSortingBinding, 0x0928);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, NormalizedAgeBinding, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSpriteRendererProperties, UnknownData_85JU, 0x0A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSpriteRendererProperties, 0x0A58);
		}

		// class UNiagaraSystem : public UFXSystemAsset
		TEST_METHOD(Class__Niagara__NiagaraSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_1GQF, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugSystemInfo, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bDumpDebugEmitterInfo, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_EGGK, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_X5ED, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, effectType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bOverrideScalabilitySettings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_AOEV, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ScalabilityOverrides, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemScalabilityOverrides, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, EmitterHandles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ParameterCollectionOverrides, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemSpawnScript, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemUpdateScript, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_Z089, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, SystemCompiledData, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, ExposedParameters, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, FixedBounds, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bAutoDeactivate, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_9JF6, 0x042D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTime, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickCount, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, WarmupTickDelta, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, bHasSystemScriptDIsWithPerInstanceData, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_NP2V, 0x043D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UserDINamesReadInSystemScripts, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNiagaraSystem, UnknownData_MXCO, 0x0450);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNiagaraSystem, 0x0480);
		}

		// class UBP_Menu_CamperMale07_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale07__BP_Menu_CamperMale07_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale07_C, UnknownData_KDGP, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale07_C, UberGraphFrame, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale07_C, 0x0658);
		}

		// class UInAppPurchaseComponent : public UactorComponent
		TEST_METHOD(Class__MagicLeap__InAppPurchaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, InAppPurchaseLogMessage, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsSuccess, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetItemsDetailsFailure, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationSuccess, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, PurchaseConfirmationFailure, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistorySuccess, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, GetPurchaseHistoryFailure, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseComponent, UnknownData_R3LN, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseComponent, 0x0130);
		}

		// class ULuminApplicationLifecycleComponent : public UApplicationLifecycleComponent
		TEST_METHOD(Class__MagicLeap__LuminApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceHasReactivatedDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillEnterRealityModeDelegate, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, DeviceWillGoInStandbyDelegate, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusLostDelegate, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULuminApplicationLifecycleComponent, FocusGainedDelegate, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULuminApplicationLifecycleComponent, 0x0198);
		}

		// class UMagicLeapHeadTrackingNotificationsComponent : public UVRNotificationsComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapHeadTrackingNotificationsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingLost, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecovered, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingRecoveryFailed, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, OnHeadTrackingNewSessionStarted, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapHeadTrackingNotificationsComponent, UnknownData_3VZF, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHeadTrackingNotificationsComponent, 0x01D8);
		}

		// class UMagicLeapHMDFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapHMDFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapHMDFunctionLibrary, 0x0030);
		}

		// class UMagicLeapMeshTrackerComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_HUCM, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, OnMeshTrackerUpdated, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, ScanWorld, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MeshType, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_EU9S, 0x022A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BoundingVolume, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, LevelOfDetail, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_QGSN, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, PerimeterOfGapsToFill, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, Planarize, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_49P1, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, DisconnectedSectionArea, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestNormals, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RequestVertexConfidence, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorMode, 0x024A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_NLQJ, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BlockVertexColors, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceZero, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, VertexColorFromConfidenceOne, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, RemoveOverlappingTriangles, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_R9O8, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, MRMesh, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, BricksPerFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapMeshTrackerComponent, UnknownData_ZRZG, 0x0294);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshTrackerComponent, 0x02A0);
		}

		// class UMagicLeapSettings : public UObject
		TEST_METHOD(Class__MagicLeap__MagicLeapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bEnableZI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseVulkanForZI, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, bUseMLAudioForZI, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapSettings, UnknownData_IHDX, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapSettings, 0x0038);
		}

		// class UMagicLeapMeshBlockSelectorInterface : public UInterface
		TEST_METHOD(Class__MagicLeap__MagicLeapMeshBlockSelectorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapMeshBlockSelectorInterface, 0x0030);
		}

		// class UMagicLeapRaycastComponent : public UactorComponent
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapRaycastComponent, UnknownData_PL4W, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastComponent, 0x0120);
		}

		// class UMagicLeapRaycastFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeap__MagicLeapRaycastFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapRaycastFunctionLibrary, 0x0030);
		}

		// class UAB_Menu_Slasher04_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher04__AB_Menu_Slasher04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_RandomPlayer, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_SequencePlayer_2, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_SequencePlayer, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_BlendListByBool_2, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_BlendListByBool, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_StateResult, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, AnimGraphNode_StateMachine, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, Role_Selected, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher04_C, Is_Online, 0x0641);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher04_C, 0x0642);
		}

		// class UBP_Menu_Slasher16_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher16__BP_Menu_Slasher16_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher16_C, UnknownData_YTRE, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher16_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher16_C, BP_Audio_KLR_17, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher16_C, 0x0680);
		}

		// class UAudioCaptureComponent : public USynthComponent
		TEST_METHOD(Class__AudioCapture__AudioCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, JitterLatencyFrames, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCaptureComponent, UnknownData_COKZ, 0x06F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureComponent, 0x07B0);
		}

		// class UAudioCapture : public UAudioGenerator
		TEST_METHOD(Class__AudioCapture__AudioCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioCapture, UnknownData_7DLA, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCapture, 0x00B8);
		}

		// class UAudioCaptureFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__AudioCapture__AudioCaptureFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioCaptureFunctionLibrary, 0x0030);
		}

		// class UBP_Menu_Slasher15_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher15__BP_Menu_Slasher15_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher15_C, UnknownData_GTKB, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher15_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher15_C, BP_Audio_KLR_16, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher15_C, 0x0680);
		}

		// class UAB_Menu_Tap_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Tap__AB_Menu_Tap_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Tap_C, 0x194C);
		}

		// class UAIDisplayDebugInterface : public UInterface
		TEST_METHOD(Class__DBDBots__AIDisplayDebugInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIDisplayDebugInterface, 0x0030);
		}

		// class UAIGoalGeneratorInterface : public UInterface
		TEST_METHOD(Class__DBDBots__AIGoalGeneratorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIGoalGeneratorInterface, 0x0030);
		}

		// class UAIIntentionValidatorInterface : public UInterface
		TEST_METHOD(Class__DBDBots__AIIntentionValidatorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIIntentionValidatorInterface, 0x0030);
		}

		// class UAIPathValidatorInterface : public UInterface
		TEST_METHOD(Class__DBDBots__AIPathValidatorInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAIPathValidatorInterface, 0x0030);
		}

		// class UAISkill : public UObject
		TEST_METHOD(Class__DBDBots__AISkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, RunContexts, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, StopIfPausedByNavLinkProxy, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, UnknownData_EJOQ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, RunTimeLimit, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, RunCooldownTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, RunCooldownTimeDeviation, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, SkillNavigationFilterClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, SkillSenseConfigs, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, DynamicSubtree, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, UnknownData_UMY0, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, _pausedByObjects, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, UnknownData_I4A4, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill, _aiControllerOwner, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill, 0x00C0);
		}

		// class UAISkill_Diversion : public UAISkill
		TEST_METHOD(Class__DBDBots__AISkill_Diversion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, perkID, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, UnknownData_JVDT, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, DiversionFromGoalClasses, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, ThrowOnInteractablesAtDifficultyLevel, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, UnknownData_ZRWH, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, MaxThrowOnInteractableHalfAngle, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, MaxMoveToTargetDistance, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, NavMeshFindLocationExtents, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, PlanInterval, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Diversion, UnknownData_LCDV, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Diversion, 0x0110);
		}

		// class UAISkill_Find : public UAISkill
		TEST_METHOD(Class__DBDBots__AISkill_Find)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, FindClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, BlackboardWishListTag, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, SearchInterval, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, MustBeSeen, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, UnknownData_CNUX, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, _currentWishedObjects, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Find, UnknownData_JVFA, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Find, 0x0100);
		}

		// class UAISkill_FindInteractable : public UAISkill_Find
		TEST_METHOD(Class__DBDBots__AISkill_FindInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable, RequiredInteractionId, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable, RequiredInteractionInputType, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable, UnknownData_6CKK, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindInteractable, 0x0118);
		}

		// class UAISkill_FindCollectable : public UAISkill_FindInteractable
		TEST_METHOD(Class__DBDBots__AISkill_FindCollectable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindCollectable, CollectUnderItemCount, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindCollectable, CollectOverItemChargeRatio, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindCollectable, 0x0120);
		}

		// class UAISkill_FindCollectable_Camper : public UAISkill_FindCollectable
		TEST_METHOD(Class__DBDBots__AISkill_FindCollectable_Camper)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindCollectable_Camper, 0x0120);
		}

		// class UAISkill_FindCollectable_Hatchet : public UAISkill_FindCollectable
		TEST_METHOD(Class__DBDBots__AISkill_FindCollectable_Hatchet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindCollectable_Hatchet, 0x0120);
		}

		// class UAISkill_FindCollectable_Searchable : public UAISkill_FindCollectable
		TEST_METHOD(Class__DBDBots__AISkill_FindCollectable_Searchable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindCollectable_Searchable, SearchIntervalAfterOpenSearchable, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindCollectable_Searchable, OpenSearchableRelevancyDuration, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindCollectable_Searchable, UnknownData_HSQP, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindCollectable_Searchable, _relevantSearchable, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindCollectable_Searchable, 0x0138);
		}

		// class UAISkill_FindCollectable_Trap : public UAISkill_FindCollectable
		TEST_METHOD(Class__DBDBots__AISkill_FindCollectable_Trap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindCollectable_Trap, 0x0120);
		}

		// class UAISkill_FindInteractable_SolveRBT : public UAISkill_FindInteractable
		TEST_METHOD(Class__DBDBots__AISkill_FindInteractable_SolveRBT)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable_SolveRBT, UrgencyGoalWeight, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindInteractable_SolveRBT, 0x0128);
		}

		// class UAISkill_FindInteractable_SolveSickness : public UAISkill_FindInteractable
		TEST_METHOD(Class__DBDBots__AISkill_FindInteractable_SolveSickness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable_SolveSickness, UrgencyGoalWeight, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindInteractable_SolveSickness, 0x0128);
		}

		// class UAISkill_FindInteractable_StatusEffect : public UAISkill_FindInteractable
		TEST_METHOD(Class__DBDBots__AISkill_FindInteractable_StatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable_StatusEffect, RequiredPerkFlag, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable_StatusEffect, InvertCondition, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindInteractable_StatusEffect, UnknownData_70FD, 0x0125);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindInteractable_StatusEffect, 0x0128);
		}

		// class UAISkill_FindInteractable_StatusEffect_Plague : public UAISkill_FindInteractable_StatusEffect
		TEST_METHOD(Class__DBDBots__AISkill_FindInteractable_StatusEffect_Plague)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindInteractable_StatusEffect_Plague, 0x0128);
		}

		// class UAISkill_FindInteractable_Waker : public UAISkill_FindInteractable
		TEST_METHOD(Class__DBDBots__AISkill_FindInteractable_Waker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindInteractable_Waker, 0x0118);
		}

		// class UAISkill_FindOrb : public UAISkill_Find
		TEST_METHOD(Class__DBDBots__AISkill_FindOrb)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_FindOrb, UnknownData_T718, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_FindOrb, 0x0108);
		}

		// class UAB_Menu_Slasher16_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher16__AB_Menu_Slasher16_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, AnimGraphNode_BlendListByBool_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, AnimGraphNode_RandomPlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, AnimGraphNode_BlendListByBool, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, AnimGraphNode_SequencePlayer_2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, Role_Selected, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher16_C, Is_Online, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher16_C, 0x055A);
		}

		// class UAISkill_Interaction : public UAISkill
		TEST_METHOD(Class__DBDBots__AISkill_Interaction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, InputType, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, InputMode, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, CancelInputType, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, CancelInputMode, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, AutoLockInput, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, UnknownData_XPO5, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, StartRoll, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, UnknownData_NH8R, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, StartInteractionID, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, StopInteractionID, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, MinHoldInputTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, AutoReleaseHoldInputWhenCharged, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction, UnknownData_0U0P, 0x0115);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction, 0x0170);
		}

		// class UAISkill_Interaction_AttachRBT : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_AttachRBT)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_AttachRBT, 0x0170);
		}

		// class UAISkill_Interaction_ForThePeople : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_ForThePeople)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction_ForThePeople, UnknownData_68KV, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Interaction_ForThePeople, BlockInteractionId, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_ForThePeople, 0x0188);
		}

		// class UAISkill_Interaction_Kill : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_Kill)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_Kill, 0x0170);
		}

		// class UAISkill_Interaction_OrbAbsorb : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_OrbAbsorb)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_OrbAbsorb, 0x0170);
		}

		// class UAISkill_Interaction_Reel : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_Reel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_Reel, 0x0170);
		}

		// class UAISkill_Interaction_ReloadClown : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_ReloadClown)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_ReloadClown, 0x0170);
		}

		// class UAISkill_Interaction_SendToDeathBed : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_SendToDeathBed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_SendToDeathBed, 0x0170);
		}

		// class UAISkill_Interaction_StaticBlast : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_Interaction_StaticBlast)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Interaction_StaticBlast, 0x0170);
		}

		// class UAISkill_InteractionSetTrap : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_InteractionSetTrap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionSetTrap, TrapClass, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionSetTrap, MaxDistanceFromPointOfInterest, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionSetTrap, MaxDistanceFromAnotherSetTrap, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionSetTrap, 0x0180);
		}

		// class UAISkill_InteractionSetTrap_Demogorgon : public UAISkill_InteractionSetTrap
		TEST_METHOD(Class__DBDBots__AISkill_InteractionSetTrap_Demogorgon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionSetTrap_Demogorgon, 0x0180);
		}

		// class UAISkill_InteractionSetTrap_DreamPallet : public UAISkill_InteractionSetTrap
		TEST_METHOD(Class__DBDBots__AISkill_InteractionSetTrap_DreamPallet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionSetTrap_DreamPallet, 0x0180);
		}

		// class UAISkill_InteractionSetTrap_DreamSnare : public UAISkill_InteractionSetTrap
		TEST_METHOD(Class__DBDBots__AISkill_InteractionSetTrap_DreamSnare)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionSetTrap_DreamSnare, 0x0180);
		}

		// class UAISkill_InteractionSetTrap_Phantom : public UAISkill_InteractionSetTrap
		TEST_METHOD(Class__DBDBots__AISkill_InteractionSetTrap_Phantom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionSetTrap_Phantom, 0x0180);
		}

		// class UAISkill_InteractionTarget : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, TargetRequirement, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, AutoSwapBestStimulusWithBestTarget, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, UnknownData_JNQ8, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, StartMinRange, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, StartMaxRange, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, StopMinRange, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, StopMaxRange, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, StartMaxHalfAngle, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, StopMaxHalfAngle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, IsMaxHalfAngle2D, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, TestMaxHalfAngleOnPath, 0x018D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, UnknownData_JJB2, 0x018E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, MaxAngleFilterClass, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, InSightMode, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, UnknownData_EXDR, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, OutOfSightModeDelay, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, TargetMoveAwayTooFastStopDelay, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, TargetMoveAwayTooFastCooldown, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, AlwaysStrafeAroundTarget, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, UnknownData_CB9C, 0x01A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, _unfilteredTargets, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, _filteredTargets, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget, _targetsMoveAwayTooFastInfo, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget, 0x0220);
		}

		// class UAISkill_InteractionTarget_Aim : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Aim)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Aim, 0x0220);
		}

		// class UAISkill_InteractionTarget_AmbushAttack : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_AmbushAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_AmbushAttack, 0x0220);
		}

		// class UAISkill_InteractionTarget_AmbushMode : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_AmbushMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_AmbushMode, 0x0220);
		}

		// class UAISkill_InteractionTarget_Cloak : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Cloak)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Cloak, 0x0220);
		}

		// class UAISkill_InteractionTarget_Dash : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Dash)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Dash, 0x0220);
		}

		// class UAISkill_InteractionTarget_DashAttack : public UAISkill_InteractionTarget_Dash
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DashAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_DashAttack, DashAttackUnderMaxRange, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_DashAttack, DashAttackUnderMaxHalfAngle, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_DashAttack, ExpectedAttackType, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_DashAttack, UnknownData_I65W, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DashAttack, 0x0230);
		}

		// class UAISkill_InteractionTarget_DashAttack_Cannibal : public UAISkill_InteractionTarget_DashAttack
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DashAttack_Cannibal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DashAttack_Cannibal, 0x0230);
		}

		// class UAISkill_InteractionTarget_DashAttack_Chainsaw : public UAISkill_InteractionTarget_DashAttack
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DashAttack_Chainsaw)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DashAttack_Chainsaw, 0x0230);
		}

		// class UAISkill_InteractionTarget_DashAttack_Demogorgon : public UAISkill_InteractionTarget_DashAttack
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DashAttack_Demogorgon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DashAttack_Demogorgon, 0x0230);
		}

		// class UAISkill_InteractionTarget_DashHillbilly : public UAISkill_InteractionTarget_Dash
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DashHillbilly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DashHillbilly, 0x0220);
		}

		// class UAISkill_InteractionTarget_DashOni : public UAISkill_InteractionTarget_Dash
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DashOni)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DashOni, 0x0220);
		}

		// class UAISkill_InteractionTarget_DeadHard : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DeadHard)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DeadHard, 0x0220);
		}

		// class UAISkill_InteractionTarget_DemonMode : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_DemonMode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_DemonMode, 0x0220);
		}

		// class UAISkill_InteractionTarget_Fire : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Fire)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Fire, 0x0220);
		}

		// class UAISkill_InteractionTarget_Frenzy : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Frenzy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Frenzy, 0x0220);
		}

		// class UAISkill_InteractionTarget_LungeAttack : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_LungeAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_LungeAttack, 0x0220);
		}

		// class UAISkill_InteractionTarget_PhaseWalk : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_PhaseWalk)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_PhaseWalk, 0x0220);
		}

		// class UAISkill_InteractionTarget_ReloadDeathSlinger : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_ReloadDeathSlinger)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_ReloadDeathSlinger, 0x0220);
		}

		// class UAISkill_InteractionTarget_ShockTherapy : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_ShockTherapy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_ShockTherapy, TargetToEvadePointMaxDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_ShockTherapy, CastShockTimeBuffer, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_ShockTherapy, 0x0228);
		}

		// class UAISkill_InteractionTarget_Stalk : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Stalk)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Stalk, 0x0220);
		}

		// class UAISkill_InteractionTarget_StalkGhost : public UAISkill_InteractionTarget_Stalk
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_StalkGhost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StalkGhost, CautiousModeUnderTargetRange, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StalkGhost, CautiousModeSpeedFactor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StalkGhost, BackFromCautiousDelay, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StalkGhost, UnknownData_TSQR, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_StalkGhost, 0x0230);
		}

		// class UAISkill_InteractionTarget_StalkShape : public UAISkill_InteractionTarget_Stalk
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_StalkShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StalkShape, StalkRangeLimitedAtEvilTier, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StalkShape, MaxStalkRangeWhenLimitedByEvilTier, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_StalkShape, 0x0228);
		}

		// class UAISkill_InteractionTarget_StealthGhost : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_StealthGhost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StealthGhost, CrouchSwapDelay, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_StealthGhost, UnknownData_5103, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_StealthGhost, 0x0228);
		}

		// class UAISkill_InteractionTarget_Throw : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_Throw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, ThrowPredictionMode, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, UnknownData_QMHI, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, MaxAddPitchAngle, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, ThrowProjectileMode, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, UnknownData_L659, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, HoldInputTimeRandDeviation, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, PitchAngleRandDeviation, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_Throw, UnknownData_KWW8, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_Throw, 0x0298);
		}

		// class UAISkill_InteractionTarget_ThrowClown : public UAISkill_InteractionTarget_Throw
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_ThrowClown)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_ThrowClown, 0x0298);
		}

		// class UAISkill_InteractionTarget_ThrowHatchet : public UAISkill_InteractionTarget_Throw
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_ThrowHatchet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_ThrowHatchet, 0x0298);
		}

		// class UAISkill_InteractionTarget_ThrowPlague : public UAISkill_InteractionTarget_Throw
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_ThrowPlague)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_ThrowPlague, ProjectileDamageSickTargetTag, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_ThrowPlague, UnknownData_4LU8, 0x02A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_ThrowPlague, 0x02A8);
		}

		// class UAISkill_InteractionTarget_TormentAttack : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_TormentAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentAttack, AdvancedAtNbDetectedTargets, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentAttack, AdvancedStartRoll, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentAttack, UnknownData_EOVD, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_TormentAttack, 0x0250);
		}

		// class UAISkill_InteractionTarget_TormentMode : public UAISkill_InteractionTarget
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTarget_TormentMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentMode, ChasedTargetToEvadePointMaxDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentMode, StartTormentInPatrolAboveChargeRatio, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentMode, StartTormentInChaseAboveChargeRatio, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTarget_TormentMode, UnknownData_XXWG, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTarget_TormentMode, 0x0230);
		}

		// class UAISkill_InteractionTeleport : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTeleport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleport, BlockTeleportWhenPathGoalUnderRange, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleport, UnknownData_921O, 0x0174);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTeleport, 0x0178);
		}

		// class UAISkill_InteractionTeleportEthereal : public UAISkill_InteractionTeleport
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTeleportEthereal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, TeleportPlanInterval, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, MaxTeleportAlignHalfAngle, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, AbortNotWorkingTeleportDelay, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, AbortAddRunCooldownPenaltyTime, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, UnknownData_PGYW, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, _onStimulusInstigator, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal, UnknownData_3EP5, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTeleportEthereal, 0x01C8);
		}

		// class UAISkill_InteractionTeleportEthereal_Blink : public UAISkill_InteractionTeleportEthereal
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTeleportEthereal_Blink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Blink, StartBlinkAtWarpLocationRange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Blink, ValidateBlinkWarpRange, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Blink, BlinkAboveSavedPathLength, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Blink, BlinkIfTargetWillBeInRange, 0x01D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTeleportEthereal_Blink, 0x01D8);
		}

		// class UAISkill_InteractionTeleportEthereal_Demogorgon : public UAISkill_InteractionTeleportEthereal
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTeleportEthereal_Demogorgon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Demogorgon, MaxRangeFromFirstPortal, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Demogorgon, UnknownData_ST63, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Demogorgon, _firstPortal, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Demogorgon, _secondPortal, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTeleportEthereal_Demogorgon, 0x01E0);
		}

		// class UAISkill_InteractionTeleportEthereal_Nightmare : public UAISkill_InteractionTeleportEthereal
		TEST_METHOD(Class__DBDBots__AISkill_InteractionTeleportEthereal_Nightmare)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Nightmare, TeleportIfPathLengthSavedAboveRange, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Nightmare, UnknownData_R6B1, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionTeleportEthereal_Nightmare, _toGenerator, 0x01D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionTeleportEthereal_Nightmare, 0x01D8);
		}

		// class UAISkill_InteractionUseItem : public UAISkill_Interaction
		TEST_METHOD(Class__DBDBots__AISkill_InteractionUseItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem, itemType, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem, UnknownData_1JD6, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem, UnknownData_L1LX, 0x0174);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionUseItem, 0x0178);
		}

		// class UAISkill_InteractionUseItem_Firecracker : public UAISkill_InteractionUseItem
		TEST_METHOD(Class__DBDBots__AISkill_InteractionUseItem_Firecracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Firecracker, StartMaxRange, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Firecracker, TargetFaceMeMaxAngle, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Firecracker, UnknownData_C1LC, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionUseItem_Firecracker, 0x0190);
		}

		// class UAISkill_InteractionUseItem_Flashlight : public UAISkill_InteractionUseItem
		TEST_METHOD(Class__DBDBots__AISkill_InteractionUseItem_Flashlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Flashlight, VulnerableTargetStartRoll, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Flashlight, TargetFaceMeMaxAngle, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Flashlight, _targetActor, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_InteractionUseItem_Flashlight, UnknownData_UTFT, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionUseItem_Flashlight, 0x01E0);
		}

		// class UAISkill_InteractionUseItem_Map : public UAISkill_InteractionUseItem
		TEST_METHOD(Class__DBDBots__AISkill_InteractionUseItem_Map)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_InteractionUseItem_Map, 0x0178);
		}

		// class UAISkill_SkillCheck : public UAISkill
		TEST_METHOD(Class__DBDBots__AISkill_SkillCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_SkillCheck, RegularZoneRoll, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_SkillCheck, BonusZoneRoll, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_SkillCheck, UnknownData_3SOS, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_SkillCheck, 0x0110);
		}

		// class UAISkill_Strafe : public UAISkill
		TEST_METHOD(Class__DBDBots__AISkill_Strafe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, StartMaxRange, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, StopMaxRange, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, IgnoreUnderNavLinkStartRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, PauseStrafeOnAnimation, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, UnknownData_Y8DB, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, StrafeHoldInterval, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, StrafeHoldDeviation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, StrafePauseInterval, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, StrafePauseDeviation, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_Strafe, UnknownData_ZB8D, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_Strafe, 0x0128);
		}

		// class UAISkill_StrafeChained : public UAISkill_Strafe
		TEST_METHOD(Class__DBDBots__AISkill_StrafeChained)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_StrafeChained, 0x0128);
		}

		// class UAISkill_StrafeDodge : public UAISkill_Strafe
		TEST_METHOD(Class__DBDBots__AISkill_StrafeDodge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_StrafeDodge, StartRoll, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_StrafeDodge, UnknownData_3NA8, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_StrafeDodge, 0x0150);
		}

		// class UAISkill_ThroughTorment : public UAISkill
		TEST_METHOD(Class__DBDBots__AISkill_ThroughTorment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_ThroughTorment, ToleratedTerrorPressure, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISkill_ThroughTorment, UnknownData_RQ6D, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISkill_ThroughTorment, 0x00C8);
		}

		// class UBTDecorator_TickableBase : public UBTDecorator
		TEST_METHOD(Class__DBDBots__BTDecorator_TickableBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_TickableBase, 0x0070);
		}

		// class UBTDecorator_CanRunSkill : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_CanRunSkill)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CanRunSkill, Context, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_CanRunSkill, UnknownData_UYM7, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_CanRunSkill, 0x0080);
		}

		// class UBTDecorator_ExtCompareBBEntries : public UBTDecorator_CompareBBEntries
		TEST_METHOD(Class__DBDBots__BTDecorator_ExtCompareBBEntries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtCompareBBEntries, tolerance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtCompareBBEntries, UnknownData_9OTR, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ExtCompareBBEntries, 0x00E0);
		}

		// class UBTDecorator_ExtConeCheck : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_ExtConeCheck)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtConeCheck, BBConeOrigin, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtConeCheck, BBConeDirection, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtConeCheck, BBWith, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtConeCheck, ConeHalfAngle, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ExtConeCheck, 0x0110);
		}

		// class UBTDecorator_ExtIsAtLocation : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_ExtIsAtLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtIsAtLocation, BBLoc, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtIsAtLocation, AcceptableRadius, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ExtIsAtLocation, 0x00B0);
		}

		// class UBTDecorator_ExtIsBBEntryOfClass : public UBTDecorator_IsBBEntryOfClass
		TEST_METHOD(Class__DBDBots__BTDecorator_ExtIsBBEntryOfClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtIsBBEntryOfClass, InvertConditition, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtIsBBEntryOfClass, UnknownData_L5D6, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ExtIsBBEntryOfClass, 0x00B0);
		}

		// class UBTDecorator_ExtTimeLimit : public UBTDecorator_TimeLimit
		TEST_METHOD(Class__DBDBots__BTDecorator_ExtTimeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtTimeLimit, UnknownData_53WT, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtTimeLimit, MaxTimeLimit, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtTimeLimit, BBFilterKey, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtTimeLimit, FilterOperation, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_ExtTimeLimit, UnknownData_FA13, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_ExtTimeLimit, 0x00C8);
		}

		// class UBTDecorator_HasDynamicSubtree : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_HasDynamicSubtree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_HasDynamicSubtree, InjectTag, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_HasDynamicSubtree, UnknownData_RRL1, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_HasDynamicSubtree, 0x0080);
		}

		// class UBTDecorator_IsCamperState : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsCamperState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, BBCamper, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, DamageState, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, DamageOp, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, ImmobilizeState, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, ImmobilizeOp, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, OnFilter, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, OnOthersFilterOp, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, UnknownData_66KF, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, NbOnOthersCampers, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsCamperState, UnknownData_TYDH, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsCamperState, 0x00B0);
		}

		// class UBTDecorator_IsExitOpened : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsExitOpened)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsExitOpened, BBExitObj, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsExitOpened, 0x00A0);
		}

		// class UBTDecorator_IsGameState : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsGameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsGameState, RemainingObjectiveOp, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsGameState, UnknownData_K0JI, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsGameState, NbRemainingObjectives, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsGameState, SurvivorsLeftOp, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsGameState, UnknownData_IOG2, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsGameState, NbSurvivorsLeft, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsGameState, 0x0080);
		}

		// class UBTDecorator_IsInteractionAvailable : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsInteractionAvailable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsInteractionAvailable, InteractionIDs, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsInteractionAvailable, OnFilter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsInteractionAvailable, FailIfAnotherOngoingInteraction, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsInteractionAvailable, FailIfNotPerformingInteraction, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsInteractionAvailable, UnknownData_614N, 0x0083);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsInteractionAvailable, 0x0088);
		}

		// class UBTDecorator_IsInteractorAvailable : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsInteractorAvailable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsInteractorAvailable, BBInteractorObj, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsInteractorAvailable, 0x00A0);
		}

		// class UBTDecorator_IsLocationInPressureZone : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsLocationInPressureZone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsLocationInPressureZone, BBAtLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsLocationInPressureZone, 0x00A0);
		}

		// class UBTDecorator_IsNearestThan : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsNearestThan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsNearestThan, BBFrom, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsNearestThan, BBThan, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsNearestThan, AddDistanceBuffer, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsNearestThan, UnknownData_MLCX, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsNearestThan, 0x00D8);
		}

		// class UBTDecorator_IsObjectFocused : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_IsObjectFocused)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsObjectFocused, BBObj, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsObjectFocused, filter, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_IsObjectFocused, UnknownData_DVFE, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_IsObjectFocused, 0x00A8);
		}

		// class UBTDecorator_Random : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_Random)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_Random, PercentageRatio, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_Random, 0x0080);
		}

		// class UBTDecorator_RandomByDistance : public UBTDecorator_TickableBase
		TEST_METHOD(Class__DBDBots__BTDecorator_RandomByDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, BBAroundLoc, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, BBRelativeFromTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, BBRelativeToTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, StartDistance, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, EndDistance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, PercentageAtStartDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, PercentageAtEndDistance, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTDecorator_RandomByDistance, PercentagesAtTimes, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTDecorator_RandomByDistance, 0x0150);
		}

		// class UBTService_AroundEQS : public UBTService_RunEQS
		TEST_METHOD(Class__DBDBots__BTService_AroundEQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_AroundEQS, BBAroundObj, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_AroundEQS, BBAroundLocation, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_AroundEQS, ValidLocationRefreshInterval, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_AroundEQS, InvalidLocationRefreshInterval, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_AroundEQS, InvalidateLocationUnderTargetDistance, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_AroundEQS, UnknownData_R9S8, 0x0174);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_AroundEQS, 0x0178);
		}

		// class UBTService_OnRelevantBase : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_OnRelevantBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_OnRelevantBase, When, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_OnRelevantBase, UnknownData_K6FH, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_OnRelevantBase, 0x0080);
		}

		// class UBTService_ClearBBEntry : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_ClearBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_ClearBBEntry, BBToResetKey, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_ClearBBEntry, 0x00B0);
		}

		// class UBTService_CopyBBEntry : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_CopyBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CopyBBEntry, BBFrom, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CopyBBEntry, BBTo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CopyBBEntry, CopyOnlyValidKeyValue, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_CopyBBEntry, UnknownData_2AWY, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_CopyBBEntry, 0x00E8);
		}

		// class UBTService_FindInteractor : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_RGTL, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, BBSearchAround, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, SearchInterval, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_4SYS, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, filterClass, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RegisterAsDiscoveredWhenFound, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_940F, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, BBOnlyFromActor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, OnlyWithInteractorIDs, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectIfInPressureZone, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_FFDS, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectCooldownContextName, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectIfFocusedByOther, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectIfNotFocusedBySelf, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectIfWasInCooldownAndFocusedOnAnotherObject, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectIfNotInSight, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, IgnoreSightFilterIfDiscovered, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, IgnoreSightFilterIfInRange, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_YSEZ, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, RejectAboveRange, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, IgnoreRangeFilterIfDiscovered, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, IgnoreRangeFilterIfInSight, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_QY9H, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, BBInteractLocation, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, BBInteractorObj, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, CantInterruptGoalInteractionUnderRemainingTime, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, GoalBasicWeight, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, GoalWeightMaxDistance, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, GoalWeightAtMinDistance, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, _goalInteractor, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, _aiOwner, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor, UnknownData_XQLQ, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor, 0x01E8);
		}

		// class UBTService_FindInteractor_Camper : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Camper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Camper, StatusFilter, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Camper, UnknownData_V7CE, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Camper, AllyDangerStateGoalWeight, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Camper, IncapacitatedAlliesGoalWeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Camper, UnknownData_45BC, 0x020C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Camper, 0x0210);
		}

		// class UBTService_FindInteractor_Exit : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Exit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Exit, filter, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Exit, UnknownData_4D7Y, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Exit, BBFinalExitLocation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Exit, WaitOnClosedDoorOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Exit, OpenedExitGoalWeight, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Exit, UnknownData_3XRU, 0x0234);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Exit, 0x0238);
		}

		// class UBTService_FindInteractor_Generator : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Generator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, StatusFilter, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, UnknownData_OT3Z, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, MinRepairRatioFilter, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, UsePerceptionToGetRepairRatio, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, UnknownData_AP8T, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, MaxRepairGoalWeight, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, InfectedStateGoalWeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, HexRuinGoalWeight, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, HexRuinPerkId, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Generator, UnknownData_ZO4X, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Generator, 0x0240);
		}

		// class UBTService_FindInteractor_Locker : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Locker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Locker, StatusFilter, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Locker, UnknownData_OQYE, 0x01E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Locker, 0x01F0);
		}

		// class UBTService_FindInteractor_MeatHook : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_MeatHook)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, StatusFilter, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, UnknownData_15EP, 0x01E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, AllyDangerStateGoalWeight, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, BotDangerStateGoalWeight, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, BotInjuredStateGoalWeight, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, MaxHookTimeGoalWeight, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, IncapacitatedAlliesGoalWeight, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_MeatHook, UnknownData_146M, 0x023C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_MeatHook, 0x0240);
		}

		// class UBTService_FindInteractor_Pallet : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Pallet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Pallet, BBPickSideRelativelyFrom, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Pallet, IntentionFilter, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Pallet, UnknownData_1WZ6, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Pallet, RaisePalletPerkId, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Pallet, BrokenGeneratorGoalMaxDistance, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Pallet, BrokenGeneratorGoalMaxDistanceWeight, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Pallet, 0x0248);
		}

		// class UBTService_FindInteractor_Searchable : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Searchable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Searchable, 0x01E8);
		}

		// class UBTService_FindInteractor_Totem : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Totem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Totem, InactiveGoalWeightMaxDistance, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Totem, InactiveGoalWeightAtMinDistance, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Totem, 0x0208);
		}

		// class UBTService_FindInteractor_Trap : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_Trap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Trap, HelpDestroyDemoPortal, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Trap, SeeStandardTrapRoll, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_Trap, TrapGroundLocationOffset, 0x021C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_Trap, 0x0220);
		}

		// class UBTService_FindInteractor_WishList : public UBTService_FindInteractor
		TEST_METHOD(Class__DBDBots__BTService_FindInteractor_WishList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_WishList, WishListTag, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_FindInteractor_WishList, UnknownData_DVR0, 0x01F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_FindInteractor_WishList, 0x01F8);
		}

		// class UBTService_Flee : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_Flee)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, UnknownData_Y6VZ, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, BBFleePath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, BBShouldFallPallet, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, PathStrategySelectorClass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, OnEndObjectInFocusCooldown, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, ShouldFallPalletUnderHostileRange, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, ClearFleePathBBKeyDelay, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, UnknownData_1JSF, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, _activePath, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, _lostFocusedObjects, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, _strategySelector, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Flee, UnknownData_N48T, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Flee, 0x0138);
		}

		// class UBTService_GetPinLocation : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_GetPinLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GetPinLocation, BBToSetKey, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GetPinLocation, PinTag, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GetPinLocation, UnknownData_1XO9, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_GetPinLocation, 0x00C0);
		}

		// class UBTService_GetPinObject : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_GetPinObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GetPinObject, BBToSetKey, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GetPinObject, PinTag, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GetPinObject, UnknownData_SZD0, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_GetPinObject, 0x00C0);
		}

		// class UBTService_GoalCoordinator : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_GoalCoordinator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GoalCoordinator, UnknownData_SERB, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_GoalCoordinator, _managedGoals, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_GoalCoordinator, 0x00D0);
		}

		// class UBTService_Patrol : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_Patrol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol, BBPatrolLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol, BBGoToNextPatrolLocation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol, MinPatrolInvestigationDistance, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol, PatrolPointsValidityCheckInterval, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Patrol, 0x00E0);
		}

		// class UBTService_Patrol_Camper : public UBTService_Patrol
		TEST_METHOD(Class__DBDBots__BTService_Patrol_Camper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Camper, MaxFindRandomLocationOnTileAttempts, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Camper, FirstFindOnNbNeighborTiles, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Patrol_Camper, 0x00E8);
		}

		// class UBTService_Patrol_Slasher : public UBTService_Patrol
		TEST_METHOD(Class__DBDBots__BTService_Patrol_Slasher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Slasher, BBPatrolPointOwner, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Slasher, BBMoveAroundPatrolLocation, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Slasher, OnEnterPatrolRefreshPointsDelay, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Slasher, MoveAroundPatrolPointAboveStimulusStrength, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Slasher, NavMeshFindLocationExtents, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_Patrol_Slasher, UnknownData_SEW7, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_Patrol_Slasher, 0x0158);
		}

		// class UBTService_PushObjectFocus : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_PushObjectFocus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_PushObjectFocus, BBFocusObj, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_PushObjectFocus, 0x00A8);
		}

		// class UBTService_RunSkills : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_RunSkills)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunSkills, Context, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunSkills, UnknownData_PAD0, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunSkills, BBFilterKey, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunSkills, FilterOperation, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_RunSkills, UnknownData_5ZQV, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_RunSkills, 0x00C0);
		}

		// class UBTService_SetBBEntry : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_SetBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetBBEntry, BBToSetKey, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetBBEntry, ToSetValue, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_SetBBEntry, 0x00C0);
		}

		// class UBTService_SetBBEntryTime : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_SetBBEntryTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetBBEntryTime, BBToSetKey, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_SetBBEntryTime, 0x00B0);
		}

		// class UBTService_SetFocusCooldown : public UBTService_OnRelevantBase
		TEST_METHOD(Class__DBDBots__BTService_SetFocusCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetFocusCooldown, BBOnObject, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetFocusCooldown, ContextName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetFocusCooldown, InfiniteDuration, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetFocusCooldown, UnknownData_3ZLP, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetFocusCooldown, duration, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetFocusCooldown, UnknownData_52IC, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_SetFocusCooldown, 0x00C8);
		}

		// class UBTService_SetMovementMode : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_SetMovementMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetMovementMode, OnEnterMovementMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetMovementMode, OnExitMovementMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetMovementMode, UnknownData_00NW, 0x007A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_SetMovementMode, 0x0080);
		}

		// class UBTService_SetPathSpeedFactor : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_SetPathSpeedFactor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetPathSpeedFactor, SpeedFactor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_SetPathSpeedFactor, UnknownData_PXZ4, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_SetPathSpeedFactor, 0x0080);
		}

		// class UBTService_StateMonitor : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_StateMonitor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor, BBIsIntroCompleted, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor, BBDifficultyLevel, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_StateMonitor, 0x00D8);
		}

		// class UBTService_StateMonitor_Camper : public UBTService_StateMonitor
		TEST_METHOD(Class__DBDBots__BTService_StateMonitor_Camper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBDamageState, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBImmoblizedState, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBGuidedState, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBEscapedState, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBIsInInjuredBleedout, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBDyingTimerPercentLeft, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBItemCharge, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBIsChased, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBIsChained, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Camper, BBIsInPressureZone, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_StateMonitor_Camper, 0x02B8);
		}

		// class UBTService_StateMonitor_Slasher : public UBTService_StateMonitor
		TEST_METHOD(Class__DBDBots__BTService_StateMonitor_Slasher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StateMonitor_Slasher, BBIsCarrying, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_StateMonitor_Slasher, 0x0108);
		}

		// class UBTService_StimuliMonitor : public UBTService
		TEST_METHOD(Class__DBDBots__BTService_StimuliMonitor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, BBStimulusOriginLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, BBStimulusNavLocation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, BBStimulusActor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, BBStimulusInSight, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, StimuliRefreshInterval, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, ExtrapolateLoseSightDuration, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor, NavMeshFindLocationExtents, 0x014C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_StimuliMonitor, 0x0158);
		}

		// class UBTService_StimuliMonitor_Camper : public UBTService_StimuliMonitor
		TEST_METHOD(Class__DBDBots__BTService_StimuliMonitor_Camper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Camper, BBTerrorPressure, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Camper, BBIsFleeing, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Camper, LastValidTerrorRadiusStimulusMemoryLifeTime, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Camper, UnknownData_P99P, 0x01BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_StimuliMonitor_Camper, 0x01C0);
		}

		// class UBTService_StimuliMonitor_Slasher : public UBTService_StimuliMonitor
		TEST_METHOD(Class__DBDBots__BTService_StimuliMonitor_Slasher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, BBInvestigateStimulusLocation, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, BBInvestigateStimulusActor, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, BBInBehaviorInvestigationStep, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, BBIsBlind, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, BBChasedActor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, UseNextStimulusInvestigationAfterChaseDelay, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, DefaultStimulusToInvestigateMaxAge, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, KOStimulusToInvestigateMaxAge, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, NextStimulusInvestigationMinRange, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, CantSeeOverBlindRatio, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, FavorizeStandingTargetInRange, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, FavorizeStandingTargetOutRange, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTService_StimuliMonitor_Slasher, UnknownData_ZN87, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTService_StimuliMonitor_Slasher, 0x0268);
		}

		// class UBTTask_ClearBBEntry : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_ClearBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ClearBBEntry, BBToResetKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ClearBBEntry, 0x00A8);
		}

		// class UBTTask_CopyBBEntry : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_CopyBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_CopyBBEntry, BBFrom, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_CopyBBEntry, BBTo, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_CopyBBEntry, CopyOnlyValidKeyValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_CopyBBEntry, UnknownData_P52C, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_CopyBBEntry, 0x00E0);
		}

		// class UBTTask_ExtMoveDirecltyToward : public UBTTask_MoveDirectlyToward
		TEST_METHOD(Class__DBDBots__BTTask_ExtMoveDirecltyToward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveDirecltyToward, MovementMode, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveDirecltyToward, UnknownData_F99P, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ExtMoveDirecltyToward, 0x00D0);
		}

		// class UBTTask_ExtMoveTo : public UBTTask_MoveTo
		TEST_METHOD(Class__DBDBots__BTTask_ExtMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, BBStrafeFocus, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, StrafeFocus, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, StrafeFocusPitch, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, UnknownData_MTPD, 0x00F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, StrafeNearFocusModeUnderDistance, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, IntermittentOnStrafeFocusInterval, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, IntermittentOnStrafeFocusDeviation, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, IntermittentOffStrafeFocusInterval, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, IntermittentOffStrafeFocusDeviation, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, EndMoveStrafeFocusPrecisionAngle, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, StrafeFocusOwnerOnComponentBBKey, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, ToGoalMovementMode, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, NearGoalMovementMode, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, UnknownData_W77Z, 0x010F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, NearGoalModeUnderDistance, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, NormalMoveUnderNavLinkDistance, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, BBIgnoreGroupAvoidance, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, RepathInterval, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, UseAccelerationForPaths, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, UnknownData_ZBKS, 0x014D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, PathReachedPointRadius, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtMoveTo, UseContextualAcceptableRadius, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ExtMoveTo, 0x0160);
		}

		// class UBP_Menu_Slasher08_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher08__BP_Menu_Slasher08_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, UnknownData_HMLL, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, BP_Audio_KLR_08, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, ItemMesh_Axe, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, Timeline_1_Dissolve_01C466A74EFEFADB8976FC84BC95D44F, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, Timeline_1__Direction_01C466A74EFEFADB8976FC84BC95D44F, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, UnknownData_SNKJ, 0x068D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, Timeline_2, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher08_C, IsHatchetVisible, 0x0698);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher08_C, 0x0699);
		}

		// class UBTTask_ExtWait : public UBTTask_Wait
		TEST_METHOD(Class__DBDBots__BTTask_ExtWait)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtWait, WaitTimeInterval, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_ExtWait, WaitRandomDeviation, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_ExtWait, 0x00A0);
		}

		// class UBTTask_FleeMoveTo : public UBTTask_ExtMoveTo
		TEST_METHOD(Class__DBDBots__BTTask_FleeMoveTo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FleeMoveTo, InScrambleMovementMinDistance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FleeMoveTo, OutScrambleMovementMinDistance, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FleeMoveTo, InScrambleMovementInterval, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FleeMoveTo, LoopScrambleMovementInterval, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FleeMoveTo, LoopScrambleMovementRandomDeviation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_FleeMoveTo, CrouchWithinLastEvadeLoopPointRadius, 0x0174);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_FleeMoveTo, 0x0178);
		}

		// class UBTTask_InputPress : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_InputPress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_InputPress, input, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_InputPress, InputMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_InputPress, UnknownData_0R29, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_InputPress, InputPressLoopInterval, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_InputPress, 0x0080);
		}

		// class UBTTask_Interact : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_Interact)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, BBInteractorObj, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, input, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, UnknownData_I9UX, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, OnFailFocusCooldownDuration, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, PropagateCooldownOnInteractable, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, UnknownData_WIIR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_Interact, FailStartInteractTimeLimit, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_Interact, 0x00B8);
		}

		// class UBTTask_RunSkills : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_RunSkills)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunSkills, Context, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_RunSkills, UnknownData_RREX, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_RunSkills, 0x0088);
		}

		// class UBTTask_SetBBEntry : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_SetBBEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetBBEntry, BBToSetKey, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetBBEntry, ToSetValue, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetBBEntry, 0x00B8);
		}

		// class UBTTask_SetBBEntryTime : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_SetBBEntryTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetBBEntryTime, BBToSetKey, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetBBEntryTime, 0x00A8);
		}

		// class UBTTask_SetFocusCooldown : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_SetFocusCooldown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetFocusCooldown, BBOnObject, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetFocusCooldown, ContextName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetFocusCooldown, InfiniteDuration, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetFocusCooldown, UnknownData_H1MQ, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetFocusCooldown, duration, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetFocusCooldown, UnknownData_T3QA, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetFocusCooldown, 0x00C0);
		}

		// class UBTTask_SetMovementMode : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_SetMovementMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetMovementMode, MovementMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetMovementMode, UnknownData_Q2RU, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetMovementMode, 0x0080);
		}

		// class UBTTask_SetRandomNavPoint : public UBTTaskNode
		TEST_METHOD(Class__DBDBots__BTTask_SetRandomNavPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, BBFromLocation, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, BBToLocation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, MinAroundRadius, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, MaxAroundRadius, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, MaxNbAttempts, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, UnknownData_432D, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBTTask_SetRandomNavPoint, filterClass, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_SetRandomNavPoint, 0x00F0);
		}

		// class UBTTask_StealthMoveTo : public UBTTask_ExtMoveTo
		TEST_METHOD(Class__DBDBots__BTTask_StealthMoveTo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBTTask_StealthMoveTo, 0x0160);
		}

		// class UDBDAIBTController : public UDBDAIController
		TEST_METHOD(Class__DBDBots__DBDAIBTController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, BehaviorTree, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, BaseSkills, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, RoleSkills, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, PerkSkills, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _dbdPerception, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _dbdBlackboard, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _dbdPathFollowing, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _dbdBehaviorTree, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _navMeshExplorer, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _aiState, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _aiGoal, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, UnknownData_4TI6, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _setDynamicSubtrees, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIBTController, _aiSkills, 0x0570);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIBTController, 0x0580);
		}

		// class UDBDAIBTUtilities : public UDBDAIUtilities
		TEST_METHOD(Class__DBDBots__DBDAIBTUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIBTUtilities, 0x0030);
		}

		// class UDBDAIGoalComponent : public UactorComponent
		TEST_METHOD(Class__DBDBots__DBDAIGoalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIGoalComponent, UnknownData_GG1D, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIGoalComponent, _activeGoals, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIGoalComponent, _foundWeightedGoals, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIGoalComponent, 0x0160);
		}

		// class UDBDAIPerceptionComponent : public UAIPerceptionComponent
		TEST_METHOD(Class__DBDBots__DBDAIPerceptionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPerceptionComponent, UnknownData_F086, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPerceptionComponent, _objOverridingSenses, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPerceptionComponent, _originalSenseConfigs, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPerceptionComponent, _detectedHostileStimuli, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPerceptionComponent, _bestDetectedHostileStimulus, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIPerceptionComponent, UnknownData_B1SQ, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIPerceptionComponent, 0x02C8);
		}

		// class UDBDAIStateComponent : public UactorComponent
		TEST_METHOD(Class__DBDBots__DBDAIStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, UnknownData_YA3Y, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, UnsafeStateAtHookedCount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, DireStateAtHookedCount, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, MidObjectiveStateProgressionRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, UnknownData_TQKM, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, GameStateTable, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, PressureZoneLevelTable, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, PressureZoneHighToMedRangeLerpRatios, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, DefaultChasedPhaseOutDuration, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, InjuredChasedPhaseOutDuration, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDAIStateComponent, UnknownData_BM75, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDAIStateComponent, 0x01D0);
		}

		// class UDBDBehaviorTreeComponent : public UBehaviorTreeComponent
		TEST_METHOD(Class__DBDBots__DBDBehaviorTreeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBehaviorTreeComponent, UnknownData_XNXB, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBehaviorTreeComponent, _lastRelevantNodeMemories, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBehaviorTreeComponent, _createdObjects, 0x02D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBehaviorTreeComponent, 0x02E0);
		}

		// class UDBDBlackboardComponent : public UBlackboardComponent
		TEST_METHOD(Class__DBDBots__DBDBlackboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, UnknownData_A2OG, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _mindFocusEntries, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _pinLocations, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _pinObjects, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _lostMindFocusEntries, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _objectWishListMap, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _discoveredObjects, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDBlackboardComponent, _intentionValidators, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDBlackboardComponent, 0x03F0);
		}

		// class UDBDNavLinkCustomComponent : public UNavLinkCustomComponent
		TEST_METHOD(Class__DBDBots__DBDNavLinkCustomComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, BaseLinkRelativeStart, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, BaseLinkRelativeEnd, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, BaseLinkDirection, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, UnknownData_Y2LC, 0x01B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, AutoSnapSmartLinkPointsUpHeight, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, AutoSnapSmartLinkPointsDownHeight, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, AutoSnapCollisionChannel, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, UnknownData_8QQ6, 0x01BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, AutoSmartLinkDirectionMaxHeight, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, DisableSmartLinkOnPathObstruction, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, UnknownData_KN8Z, 0x01C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, PathObstructionTestDistance, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, PathObstructionTestShapeRadius, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, PathObstructionTestHeightOffset, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, PathObstructionCollisionChannel, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, ShowDebugInfo, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavLinkCustomComponent, UnknownData_PV5Y, 0x01D6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDNavLinkCustomComponent, 0x01F0);
		}

		// class UDBDNavMeshExplorerComponent : public UactorComponent
		TEST_METHOD(Class__DBDBots__DBDNavMeshExplorerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, ExploreAtAgentMoveDistance, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, ExploreAtInterval, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, ExplorationBoxHalfExtent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, FullyAutoExploredAtGameTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, UnknownData_3X2E, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, _pathFollowingComponent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDNavMeshExplorerComponent, UnknownData_MQN4, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDNavMeshExplorerComponent, 0x0140);
		}

		// class UDBDPathFollowingComponent : public UPathFollowingComponent
		TEST_METHOD(Class__DBDBots__DBDPathFollowingComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPathFollowingComponent, UnblockPathDeviationRadius, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPathFollowingComponent, UnblockPathTimeLimit, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPathFollowingComponent, UnknownData_8S42, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPathFollowingComponent, _onNavLinkProxies, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDPathFollowingComponent, UnknownData_BDYJ, 0x03D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDPathFollowingComponent, 0x0478);
		}

		// class UEnvQueryContext_PinActor : public UEnvQueryContext
		TEST_METHOD(Class__DBDBots__EnvQueryContext_PinActor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_PinActor, 0x0030);
		}

		// class UEnvQueryContext_PinLocation : public UEnvQueryContext
		TEST_METHOD(Class__DBDBots__EnvQueryContext_PinLocation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_PinLocation, 0x0030);
		}

		// class UEnvQueryContext_TerrorRadius : public UEnvQueryContext
		TEST_METHOD(Class__DBDBots__EnvQueryContext_TerrorRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryContext_TerrorRadius, 0x0030);
		}

		// class UEnvQueryTest_LineOfSight : public UEnvQueryTest
		TEST_METHOD(Class__DBDBots__EnvQueryTest_LineOfSight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_LineOfSight, QuerierContext, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_LineOfSight, ToContext, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_LineOfSight, ItemHeightOffset, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEnvQueryTest_LineOfSight, Invert, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEnvQueryTest_LineOfSight, 0x02C8);
		}

		// class UNavArea_Blink : public UNavArea
		TEST_METHOD(Class__DBDBots__NavArea_Blink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Blink, 0x0050);
		}

		// class UNavArea_Breakable : public UNavArea
		TEST_METHOD(Class__DBDBots__NavArea_Breakable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Breakable, 0x0050);
		}

		// class UNavArea_Vault : public UNavArea
		TEST_METHOD(Class__DBDBots__NavArea_Vault)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavArea_Vault, 0x0050);
		}

		// class UNavigationQueryFilter_Player : public UNavigationQueryFilter
		TEST_METHOD(Class__DBDBots__NavigationQueryFilter_Player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Player, MaxSearchNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Player, UnknownData_701H, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter_Player, 0x0070);
		}

		// class UNavigationQueryFilter_Camper : public UNavigationQueryFilter_Player
		TEST_METHOD(Class__DBDBots__NavigationQueryFilter_Camper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, SlasherAreaBoundsLimit, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, SlasherAreaPenetrationCost, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, SlasherInSightCost, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, SlasherInSightTestFrequency, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, SlasherAreaExcludeUnderRange, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, SlasherInExcludeAreaCost, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Camper, UnknownData_ANIN, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter_Camper, 0x0090);
		}

		// class UNavigationQueryFilter_CamperStealth : public UNavigationQueryFilter_Camper
		TEST_METHOD(Class__DBDBots__NavigationQueryFilter_CamperStealth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter_CamperStealth, 0x0090);
		}

		// class UNavigationQueryFilter_Slasher : public UNavigationQueryFilter_Player
		TEST_METHOD(Class__DBDBots__NavigationQueryFilter_Slasher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Slasher, DefaultInteractionsTimeCost, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationQueryFilter_Slasher, FrenzyInteractionsTimeCost, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter_Slasher, 0x0110);
		}

		// class UNavigationQueryFilter_Slasher_Limited : public UNavigationQueryFilter_Player
		TEST_METHOD(Class__DBDBots__NavigationQueryFilter_Slasher_Limited)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationQueryFilter_Slasher_Limited, 0x0070);
		}

		// class UNavLinkProxy_Base : public UNavLinkProxy
		TEST_METHOD(Class__DBDBots__NavLinkProxy_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Base, WaitLinkOffset, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Base, MoveOnEndPointTimeLimit, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Base, NbMaxLinkUsers, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Base, UnknownData_9J4I, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Base, _players, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Base, _linkUsedByPlayers, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkProxy_Base, 0x02F0);
		}

		// class UNavLinkProxy_DirectMove : public UNavLinkProxy_Base
		TEST_METHOD(Class__DBDBots__NavLinkProxy_DirectMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_DirectMove, CustomPathPoints, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_DirectMove, MoveToPathPointTimeLimit, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_DirectMove, UnknownData_WX7S, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_DirectMove, _playersOnPath, 0x0308);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkProxy_DirectMove, 0x0358);
		}

		// class UNavLinkProxy_Interaction : public UNavLinkProxy_Base
		TEST_METHOD(Class__DBDBots__NavLinkProxy_Interaction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Interaction, PlayerSetups, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Interaction, InteractionStartTimeLimit, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Interaction, UnknownData_YG5V, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkProxy_Interaction, _playersInteractionInputAtTime, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkProxy_Interaction, 0x0398);
		}

		// class UNavMovePath : public UObject
		TEST_METHOD(Class__DBDBots__NavMovePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovePath, UnknownData_3U1W, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovePath, 0x0060);
		}

		// class UPathBuilder : public UObject
		TEST_METHOD(Class__DBDBots__PathBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder, UnknownData_SJ11, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder, PathReachedPointRadius, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder, ToleratedTerrorPressure, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder, UnknownData_IP4U, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder, _path, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder, _aiOwner, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathBuilder, 0x0050);
		}

		// class UPathBuilder_EQS : public UPathBuilder
		TEST_METHOD(Class__DBDBots__PathBuilder_EQS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EQS, EQSRequest, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EQS, NbMaxEQSRequests, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EQS, MergeToSinglePathPoint, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EQS, UnknownData_1QUJ, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EQS, _pendingEQSRequestBuilder, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathBuilder_EQS, 0x00D0);
		}

		// class UPathBuilder_EvadeLoop : public UPathBuilder
		TEST_METHOD(Class__DBDBots__PathBuilder_EvadeLoop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, AddDistanceToRequiredEvadeGap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, ForceEvadePointUnderDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, ChaserCrossingEvadeTimePenalty, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, SwapPathReachTimeBuffer, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, BreakPalletInteractionId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, OnPathRadius, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, MaxEvadeInteractableWeightDistance, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, WeightAtMaxDistance, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, MaxWeightAtNearestDistanceIfHostileHasRangedAbility, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, UnknownData_2IQ1, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, WeightAtMaxSafety, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, MaxNearAllyPenaltyPathPointDistance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, WeightWhenNearAlly, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, UnknownData_ZLLP, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, _originalEvadeLoopWorkPath, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, _querierWorkPathA, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, _querierWorkPathB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, _chaserWorkPath, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, _pickedEvadeLoopComponent, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathBuilder_EvadeLoop, UnknownData_ZJXN, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathBuilder_EvadeLoop, 0x00C0);
		}

		// class UPathBuilder_LastGoal : public UPathBuilder
		TEST_METHOD(Class__DBDBots__PathBuilder_LastGoal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathBuilder_LastGoal, 0x0050);
		}

		// class UPathStrategy : public UObject
		TEST_METHOD(Class__DBDBots__PathStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, UnknownData_USXB, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, DefaultPathBuilders, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, RefreshPartialPathDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, StartNextBranchBuildDelay, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, _aiOwner, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, _pathBuilders, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy, UnknownData_Q5ER, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathStrategy, 0x00B8);
		}

		// class UPathStrategy_Flee : public UPathStrategy
		TEST_METHOD(Class__DBDBots__PathStrategy_Flee)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathStrategy_Flee, 0x00B8);
		}

		// class UPathStrategy_FleeLoop : public UPathStrategy_Flee
		TEST_METHOD(Class__DBDBots__PathStrategy_FleeLoop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, GameStateFleeLoopStrategyTable, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, FleeLoopStrategyPathBuilders, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, CanBranchUnderEndPathDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, UnknownData_H3YW, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, BranchRolls, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, RejectLoopBranchUnderEndPointsDistance, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, RejectBranchPointNearerHostileSourceDistance, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, RejectBranchUnderNavLinkDistance, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, AddDistanceToRequiredBranchEvadeGap, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategy_FleeLoop, UnknownData_CNMD, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathStrategy_FleeLoop, 0x0210);
		}

		// class UPathStrategySelector : public UObject
		TEST_METHOD(Class__DBDBots__PathStrategySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector, UnknownData_P05C, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector, _aiOwner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector, _activePathStrategies, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector, _nextPathStrategies, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector, UnknownData_C7QR, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathStrategySelector, 0x0068);
		}

		// class UPathStrategySelector_Flee : public UPathStrategySelector
		TEST_METHOD(Class__DBDBots__PathStrategySelector_Flee)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector_Flee, FleePathStrategies, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector_Flee, UnknownData_ULGZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPathStrategySelector_Flee, _activeFleePathStrategiesMap, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathStrategySelector_Flee, 0x0110);
		}

		// class UBP_Audio_KLR_15_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_16__BP_Audio_KLR_15_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_15_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_15_C, 0x00F8);
		}

		// class UActorPairQueryEvaluatorUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDGameplay__ActorPairQueryEvaluatorUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorPairQueryEvaluatorUtilities, 0x0030);
		}

		// class UAimableComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__AimableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, UnknownData_04CR, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, _occlusionIgnoredActors, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, _maxAimDistance, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, UnknownData_EIYE, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, _aimDirectionProvider, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, _useOcclusion, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, UnknownData_HTTF, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, _aimPointLerpFactor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, _preOcclusionAimPointProcessors, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimableComponent, UnknownData_74TD, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimableComponent, 0x0110);
		}

		// class UAimDirectionProvider : public UObject
		TEST_METHOD(Class__DBDGameplay__AimDirectionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimDirectionProvider, 0x0030);
		}

		// class UAimPointProcessor : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__AimPointProcessor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimPointProcessor, 0x00B8);
		}

		// class UAimPointPerlinNoise : public UAimPointProcessor
		TEST_METHOD(Class__DBDGameplay__AimPointPerlinNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, UnknownData_73VU, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, _baseInaccuracyNoisePersistence, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, _baseInaccuracyNoiseOctaveCount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, _baseInaccuracyNoiseAmplitude, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, UnknownData_6N4F, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, _baseInaccuracyNoiseFrequency, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, UnknownData_UXAT, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, _timeOffset, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimPointPerlinNoise, UnknownData_T5BS, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimPointPerlinNoise, 0x00E8);
		}

		// class UFlashlightableLightingStrategy : public UObject
		TEST_METHOD(Class__DBDGameplay__FlashlightableLightingStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightableLightingStrategy, 0x0030);
		}

		// class UFlashlightablePointsLightingStrategy : public UFlashlightableLightingStrategy
		TEST_METHOD(Class__DBDGameplay__FlashlightablePointsLightingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightablePointsLightingStrategy, _pointsProvider, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightablePointsLightingStrategy, _impactPointDistanceError, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightablePointsLightingStrategy, UnknownData_K31Z, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightablePointsLightingStrategy, 0x0040);
		}

		// class UBlindFlashlightableLightingStrategy : public UFlashlightablePointsLightingStrategy
		TEST_METHOD(Class__DBDGameplay__BlindFlashlightableLightingStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlindFlashlightableLightingStrategy, 0x0040);
		}

		// class UFlashlightTargetFXComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__FlashlightTargetFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightTargetFXComponent, UnknownData_JYVV, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightTargetFXComponent, _modifiesBeamAngle, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightTargetFXComponent, UnknownData_NFHE, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightTargetFXComponent, _flashlightable, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightTargetFXComponent, UnknownData_0AKG, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightTargetFXComponent, 0x0100);
		}

		// class UBlindFlashlightTargetFXComponent : public UFlashlightTargetFXComponent
		TEST_METHOD(Class__DBDGameplay__BlindFlashlightTargetFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlindFlashlightTargetFXComponent, UnknownData_CQ3J, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlindFlashlightTargetFXComponent, 0x0128);
		}

		// class UCollectableComponentUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDGameplay__CollectableComponentUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollectableComponentUtilities, 0x0030);
		}

		// class UDBDCharacterPusherComponent : public UCharacterPusherComponent
		TEST_METHOD(Class__DBDGameplay__DBDCharacterPusherComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDCharacterPusherComponent, UnknownData_8C0N, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDCharacterPusherComponent, 0x0180);
		}

		// class UDebugIndicator : public Uactor
		TEST_METHOD(Class__DBDGameplay__DebugIndicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugIndicator, _staticMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugIndicator, _outlineComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugIndicator, UnknownData_977R, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugIndicator, 0x0250);
		}

		// class UEtherealComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__EtherealComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEtherealComponent, UnknownData_HFVM, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEtherealComponent, _isEthereal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEtherealComponent, UnknownData_SB5D, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEtherealComponent, 0x00E8);
		}

		// class URangeToActorsTrackerStrategy : public UObject
		TEST_METHOD(Class__DBDGameplay__RangeToActorsTrackerStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangeToActorsTrackerStrategy, _range, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URangeToActorsTrackerStrategy, UnknownData_D34I, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangeToActorsTrackerStrategy, 0x0070);
		}

		// class UExitGateSwitchesRangeTrackerStrategy : public URangeToActorsTrackerStrategy
		TEST_METHOD(Class__DBDGameplay__ExitGateSwitchesRangeTrackerStrategy)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExitGateSwitchesRangeTrackerStrategy, 0x0070);
		}

		// class UFadeComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__FadeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeComponent, OnFadePercentChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeComponent, _fadeDuration, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFadeComponent, UnknownData_HAH1, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFadeComponent, 0x00D8);
		}

		// class UFlashLightableComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__FlashLightableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashLightableComponent, OnFlashlightAddedEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashLightableComponent, OnFlashlightRemovedEvent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashLightableComponent, OnFlashlightLitChangedEvent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashLightableComponent, _lightingStrategy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashLightableComponent, _flashlights, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashLightableComponent, 0x0140);
		}

		// class UFlashlightComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__FlashlightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, UnknownData_M4QC, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, OnFlashlightTurnedOn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, OnFlashlightTurnedOff, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, OnFlashlightablesUpdated, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _baseBlindnessDuration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _baseAccuracy, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _lagDuration, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _flashlightables, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _autonomousLitFlashlightables, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _replicatedLitFlashlightables, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, _isOwnerLagging, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightComponent, UnknownData_B1TH, 0x01D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightComponent, 0x0200);
		}

		// class UFlashlightConeComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__FlashlightConeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, AIAimBeamLocationOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, AIAimBeamRotationOffset, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, _flashlightBottom, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, _baseBeamAngle, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, _baseBeamLength, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, _cacheCollidingActor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightConeComponent, UnknownData_0GPP, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightConeComponent, 0x0148);
		}

		// class UFlashlightFXComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__FlashlightFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, OnFlashEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _tip, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _centerGlowMesh, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _beamMesh, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _minimumOcclusionDistanceForSpotlight, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, UnknownData_0WMC, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _flashEffectIntensityCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _flashEffectDuration, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _spotLightHalfAngle, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _spotLightIntensity, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _visualReworkSpotLightIntensity, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _beamBlindingHalfAngle, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _beamFlashHalfAngle, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _beamBlindingRatioInterpSpeedWithTarget, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _beamBlindingRatioInterpSpeedWithoutTarget, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _resizeConeLength, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, UnknownData_GQ4O, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _centerGlowWidthScaleWithoutBlindTarget, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _centerGlowWidthScaleWithBlindTarget, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _centerGlowWidthScaleDuringFlash, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _centerGlowShrinkDistance, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _centerGlowLengthMaxScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _aimedAtSoundLoop, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _currentBeamModifyingTarget, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, _targets, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFlashlightFXComponent, UnknownData_99SB, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightFXComponent, 0x0258);
		}

		// class UFlashlightUtilities : public UObject
		TEST_METHOD(Class__DBDGameplay__FlashlightUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFlashlightUtilities, 0x0030);
		}

		// class UHooksWithSurvivorRangeTrackerStrategy : public URangeToActorsTrackerStrategy
		TEST_METHOD(Class__DBDGameplay__HooksWithSurvivorRangeTrackerStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHooksWithSurvivorRangeTrackerStrategy, UnknownData_T6GR, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHooksWithSurvivorRangeTrackerStrategy, 0x00D8);
		}

		// class UInteractionStarterComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__InteractionStarterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionStarterComponent, UnknownData_GNGE, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionStarterComponent, _interaction, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionStarterComponent, _shouldStartInteraction, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionStarterComponent, UnknownData_E8K5, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionStarterComponent, 0x00D0);
		}

		// class UKillerFlashlightSFXComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__KillerFlashlightSFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerFlashlightSFXComponent, _targetSoundLoop, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerFlashlightSFXComponent, _flashlightTargets, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerFlashlightSFXComponent, UnknownData_9AWS, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerFlashlightSFXComponent, 0x0158);
		}

		// class UAB_Menu_Slasher20_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher20__AB_Menu_Slasher20_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, AnimGraphNode_BlendListByBool_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, AnimGraphNode_RandomPlayer, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, AnimGraphNode_BlendListByBool, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, AnimGraphNode_SequencePlayer_2, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, AnimGraphNode_SequencePlayer, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, Role_Selected, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher20_C, Is_Online, 0x0559);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher20_C, 0x055A);
		}

		// class ULightBurnableFlashlightTargetFXComponent : public UFlashlightTargetFXComponent
		TEST_METHOD(Class__DBDGameplay__LightBurnableFlashlightTargetFXComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnableFlashlightTargetFXComponent, _burnable, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnableFlashlightTargetFXComponent, UnknownData_C5A5, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBurnableFlashlightTargetFXComponent, 0x0110);
		}

		// class UMedkit : public Ucollectable
		TEST_METHOD(Class__DBDGameplay__Medkit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _interactable, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _collectableInteractor, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _dropItemInteractor, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _collectItemInteractor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _sphereComponent, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _outlineComponent, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _dropInterrupt, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _collectInterrupt, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _akComponent, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _materialHelper, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _survivorCollectableOutlineUpdateStrategy, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _charger, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _dustRingTemplate, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _medkitGetAkEvent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _medkitDropAkEvent, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _medkitBank, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, _healOtherChargeMultiplier, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMedkit, UnknownData_YCEX, 0x04A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMedkit, 0x04B0);
		}

		// class UPointsProvider : public UObject
		TEST_METHOD(Class__DBDGameplay__PointsProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointsProvider, 0x0030);
		}

		// class UMeshSocketPointsProvider : public UPointsProvider
		TEST_METHOD(Class__DBDGameplay__MeshSocketPointsProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSocketPointsProvider, _meshReference, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSocketPointsProvider, _mesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSocketPointsProvider, _sockets, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSocketPointsProvider, 0x0078);
		}

		// class UPlayerCameraAimDirectionProvider : public UAimDirectionProvider
		TEST_METHOD(Class__DBDGameplay__PlayerCameraAimDirectionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCameraAimDirectionProvider, 0x0030);
		}

		// class ULightBurnable : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__LightBurnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, OnBurnChargeCompleteEvent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, UnknownData_BWU1, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, _chargeable, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, _flashlightable, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, _firecrackerEffectHandler, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, _isBurning, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightBurnable, UnknownData_DUXX, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightBurnable, 0x0100);
		}

		// class UPlayerLightBurnable : public ULightBurnable
		TEST_METHOD(Class__DBDGameplay__PlayerLightBurnable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerLightBurnable, 0x0100);
		}

		// class UPlayerMovementUtilities : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__DBDGameplay__PlayerMovementUtilities)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerMovementUtilities, 0x0030);
		}

		// class UPowerChargeComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__PowerChargeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargeComponent, OnPowerChargeChanged, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargeComponent, UnknownData_1ENH, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargeComponent, _currentCharge, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargeComponent, UnknownData_U4WY, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargeComponent, _forceFullCharge, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargeComponent, UnknownData_FHDJ, 0x015D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerChargeComponent, 0x0160);
		}

		// class UPowerChargePresentationItemProgressComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__DBDGameplay__PowerChargePresentationItemProgressComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargePresentationItemProgressComponent, _powerChargeComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargePresentationItemProgressComponent, _powerToggleComponent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargePresentationItemProgressComponent, _chargeReadyThreshold, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerChargePresentationItemProgressComponent, UnknownData_WVB7, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerChargePresentationItemProgressComponent, 0x00D0);
		}

		// class UPowerToggleComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__PowerToggleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerToggleComponent, UnknownData_59HJ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerToggleComponent, _isInPower, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerToggleComponent, UnknownData_SNFN, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerToggleComponent, 0x00D8);
		}

		// class URangeToActorsTrackerComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__RangeToActorsTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangeToActorsTrackerComponent, _rangeTrackers, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangeToActorsTrackerComponent, 0x00C8);
		}

		// class URangeToActorsTrackerDefaultStrategy : public URangeToActorsTrackerStrategy
		TEST_METHOD(Class__DBDGameplay__RangeToActorsTrackerDefaultStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URangeToActorsTrackerDefaultStrategy, _actorClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URangeToActorsTrackerDefaultStrategy, 0x0078);
		}

		// class USceneComponentPointProvider : public UPointsProvider
		TEST_METHOD(Class__DBDGameplay__SceneComponentPointProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponentPointProvider, _sceneReference, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponentPointProvider, _sceneComponent, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponentPointProvider, 0x0068);
		}

		// class USurvivorAimStanceCameraDirectionProvider : public UAimDirectionProvider
		TEST_METHOD(Class__DBDGameplay__SurvivorAimStanceCameraDirectionProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorAimStanceCameraDirectionProvider, 0x0030);
		}

		// class UTracingConeFlashlightableLightingStrategy : public UFlashlightableLightingStrategy
		TEST_METHOD(Class__DBDGameplay__TracingConeFlashlightableLightingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTracingConeFlashlightableLightingStrategy, _aroundConeCircleTraceCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTracingConeFlashlightableLightingStrategy, UnknownData_CSQD, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTracingConeFlashlightableLightingStrategy, 0x0038);
		}

		// class UUnhookedSurvivorTrackerComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplay__UnhookedSurvivorTrackerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUnhookedSurvivorTrackerComponent, UnknownData_X9GL, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUnhookedSurvivorTrackerComponent, 0x00E8);
		}

		// class UVisibleHatchRangeTrackerStrategy : public URangeToActorsTrackerStrategy
		TEST_METHOD(Class__DBDGameplay__VisibleHatchRangeTrackerStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVisibleHatchRangeTrackerStrategy, UnknownData_D0OE, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisibleHatchRangeTrackerStrategy, 0x0098);
		}

		// class UOnlineBeacon : public Uactor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeacon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeacon, UnknownData_WJY0, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeacon, BeaconConnectionInitialTimeout, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeacon, BeaconConnectionTimeout, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeacon, NetDriver, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeacon, UnknownData_R6V9, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBeacon, 0x0268);
		}

		// class UOnlineBeaconClient : public UOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconClient, BeaconOwner, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconClient, BeaconConnection, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconClient, ConnectionState, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconClient, UnknownData_984I, 0x0279);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBeaconClient, 0x02C8);
		}

		// class UOnlineBeaconHostObject : public Uactor
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHostObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHostObject, BeaconTypeName, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHostObject, ClientBeaconActorClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHostObject, ClientActors, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBeaconHostObject, 0x0258);
		}

		// class UAchievementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementBlueprintLibrary, 0x0030);
		}

		// class UAchievementQueryCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementQueryCallbackProxy, UnknownData_XYPE, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementQueryCallbackProxy, 0x0070);
		}

		// class UAchievementWriteCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__AchievementWriteCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAchievementWriteCallbackProxy, UnknownData_LYI1, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAchievementWriteCallbackProxy, 0x0090);
		}

		// class UConnectionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ConnectionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConnectionCallbackProxy, UnknownData_27C2, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConnectionCallbackProxy, 0x0080);
		}

		// class UCreateSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__CreateSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCreateSessionCallbackProxy, UnknownData_AQ93, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCreateSessionCallbackProxy, 0x00A0);
		}

		// class UDestroySessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__DestroySessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroySessionCallbackProxy, UnknownData_2T99, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroySessionCallbackProxy, 0x0080);
		}

		// class UEndMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndMatchCallbackProxy, UnknownData_Q0WX, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndMatchCallbackProxy, 0x0088);
		}

		// class UEndTurnCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__EndTurnCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndTurnCallbackProxy, UnknownData_0Y30, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndTurnCallbackProxy, 0x0080);
		}

		// class UFindSessionsCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindSessionsCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindSessionsCallbackProxy, UnknownData_KJDN, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindSessionsCallbackProxy, 0x0098);
		}

		// class UFindTurnBasedMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__FindTurnBasedMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFindTurnBasedMatchCallbackProxy, UnknownData_V2U4, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFindTurnBasedMatchCallbackProxy, 0x0090);
		}

		// class UInAppPurchaseCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy, UnknownData_ELG6, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy, 0x0088);
		}

		// class UInAppPurchaseCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseCallbackProxy2, UnknownData_C62V, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseCallbackProxy2, 0x00B0);
		}

		// class UInAppPurchaseQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy, UnknownData_2ANT, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy, 0x0098);
		}

		// class UInAppPurchaseQueryCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseQueryCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseQueryCallbackProxy2, UnknownData_7P2G, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseQueryCallbackProxy2, 0x0070);
		}

		// class UInAppPurchaseRestoreCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy, UnknownData_FVGM, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy, 0x0098);
		}

		// class UInAppPurchaseRestoreCallbackProxy2 : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__InAppPurchaseRestoreCallbackProxy2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInAppPurchaseRestoreCallbackProxy2, UnknownData_RAV2, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInAppPurchaseRestoreCallbackProxy2, 0x00B0);
		}

		// class UIpConnection : public UNetConnection
		TEST_METHOD(Class__OnlineSubsystemUtils__IpConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_PUML, 0x1A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, SocketErrorDisconnectDelay, 0x1A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpConnection, UnknownData_L7PH, 0x1A9C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpConnection, 0x1AE8);
		}

		// class UIpNetDriver : public UNetDriver
		TEST_METHOD(Class__OnlineSubsystemUtils__IpNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_U4XN, 0x0761);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxPortCountToTry, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_92Z5, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketReceiveBufferBytes, 0x0774);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ServerDesiredSocketSendBufferBytes, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketReceiveBufferBytes, 0x077C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ClientDesiredSocketSendBufferBytes, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_LRWW, 0x0784);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, MaxSecondsInReceive, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, NbPacketsBetweenReceiveTimeTest, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, ResolutionConnectionTimeout, 0x0794);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIpNetDriver, UnknownData_08AH, 0x0798);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIpNetDriver, 0x07D0);
		}

		// class UJoinSessionCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__JoinSessionCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UJoinSessionCallbackProxy, UnknownData_4AVD, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UJoinSessionCallbackProxy, 0x0138);
		}

		// class ULeaderboardBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardBlueprintLibrary, 0x0030);
		}

		// class ULeaderboardFlushCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardFlushCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardFlushCallbackProxy, UnknownData_UMQ7, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardFlushCallbackProxy, 0x0070);
		}

		// class ULeaderboardQueryCallbackProxy : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__LeaderboardQueryCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnSuccess, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, OnFailure, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULeaderboardQueryCallbackProxy, UnknownData_4A15, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULeaderboardQueryCallbackProxy, 0x00A0);
		}

		// class ULogoutCallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__LogoutCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULogoutCallbackProxy, UnknownData_FORF, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULogoutCallbackProxy, 0x0070);
		}

		// class UOnlineBeaconHost : public UOnlineBeacon
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHost, ListenPort, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHost, UnknownData_72MF, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHost, ClientActors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineBeaconHost, UnknownData_WOX9, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBeaconHost, 0x0320);
		}

		// class UOnlineEngineInterfaceImpl : public UOnlineEngineInterface
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineEngineInterfaceImpl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, VoiceSubsystemNameOverride, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineEngineInterfaceImpl, UnknownData_UFQK, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterfaceImpl, 0x0138);
		}

		// class UOnlinePIESettings : public UDeveloperSettings
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlinePIESettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, bOnlinePIEEnabled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, UnknownData_6YO5, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePIESettings, Logins, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePIESettings, 0x0060);
		}

		// class UOnlineSessionClient : public UOnlineSession
		TEST_METHOD(Class__OnlineSubsystemUtils__OnlineSessionClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_ABRF, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bIsFromInvite, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, bHandlingDisconnect, 0x01C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlineSessionClient, UnknownData_O1IG, 0x01C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSessionClient, 0x01C8);
		}

		// class UPartyBeaconClient : public UOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, UnknownData_2YV8, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, DestSessionId, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, PendingReservation, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, requestType, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, bPendingReservationSent, 0x0359);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, bCancelReservation, 0x035A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconClient, UnknownData_BDVB, 0x035B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconClient, 0x0388);
		}

		// class UPartyBeaconHost : public UOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, state, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, UnknownData_8U9A, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, bLogoutOnSessionTimeout, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, UnknownData_753K, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, SessionTimeoutSecs, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, TravelSessionTimeoutSecs, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconHost, UnknownData_GN0E, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconHost, 0x02D0);
		}

		// class UPartyBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__PartyBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, SessionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumConsumedReservations, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, MaxReservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumTeams, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, NumPlayersPerTeam, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, TeamAssignmentMethod, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ReservedHostTeamNum, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, ForceTeamNum, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bRestrictCrossConsole, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, bEnableRemovalRequests, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_QY0U, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, Reservations, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyBeaconState, UnknownData_2LKZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyBeaconState, 0x0088);
		}

		// class UQuitMatchCallbackProxy : public UOnlineBlueprintCallProxyBase
		TEST_METHOD(Class__OnlineSubsystemUtils__QuitMatchCallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UQuitMatchCallbackProxy, UnknownData_C8CR, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UQuitMatchCallbackProxy, 0x0080);
		}

		// class UShowLoginUICallbackProxy : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__OnlineSubsystemUtils__ShowLoginUICallbackProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShowLoginUICallbackProxy, UnknownData_3QVB, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShowLoginUICallbackProxy, 0x0068);
		}

		// class USpectatorBeaconClient : public UOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, UnknownData_TJVA, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, DestSessionId, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, PendingReservation, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, requestType, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, bPendingReservationSent, 0x0381);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, bCancelReservation, 0x0382);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconClient, UnknownData_0LD0, 0x0383);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconClient, 0x03B0);
		}

		// class USpectatorBeaconHost : public UOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconHost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, state, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, UnknownData_VFT8, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, bLogoutOnSessionTimeout, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, UnknownData_H5W6, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, SessionTimeoutSecs, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, TravelSessionTimeoutSecs, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconHost, UnknownData_1TLS, 0x02CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconHost, 0x02D0);
		}

		// class USpectatorBeaconState : public UObject
		TEST_METHOD(Class__OnlineSubsystemUtils__SpectatorBeaconState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, SessionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, NumConsumedReservations, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, MaxReservations, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, bRestrictCrossConsole, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_M9E1, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, Reservations, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorBeaconState, UnknownData_I33E, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorBeaconState, 0x0068);
		}

		// class UTestBeaconClient : public UOnlineBeaconClient
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconClient)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestBeaconClient, 0x02C8);
		}

		// class UTestBeaconHost : public UOnlineBeaconHostObject
		TEST_METHOD(Class__OnlineSubsystemUtils__TestBeaconHost)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestBeaconHost, 0x0258);
		}

		// class UTurnBasedBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__OnlineSubsystemUtils__TurnBasedBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurnBasedBlueprintLibrary, 0x0030);
		}

		// class UVoipListenerSynthComponent : public USynthComponent
		TEST_METHOD(Class__OnlineSubsystemUtils__VoipListenerSynthComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoipListenerSynthComponent, UnknownData_BS1E, 0x06F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoipListenerSynthComponent, 0x0750);
		}

		// class UAB_Menu_Jane_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Jane__AB_Menu_Jane_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Jane_C, 0x194C);
		}

		// class USurvivorStatusComponent : public UactorComponent
		TEST_METHOD(Class__DBDGameplayPresenter__SurvivorStatusComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorStatusComponent, _survivor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorStatusComponent, UnknownData_3UQB, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorStatusComponent, 0x00F0);
		}

		// class UBP_Menu_CamperFemale11_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale11__BP_Menu_CamperFemale11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale11_C, 0x0649);
		}

		// class UBP_Audio_KLR_20_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_21__BP_Audio_KLR_20_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_20_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_20_C, 0x00F8);
		}

		// class UAB_Menu_Slasher21_C : public UBaseMenuAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Slasher21__AB_Menu_Slasher21_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_SequencePlayer_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_SequencePlayer, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_ComponentToLocalSpace, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_LocalToComponentSpace, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_AnimDynamics_5, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_AnimDynamics_4, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_AnimDynamics_3, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_AnimDynamics_2, 0x1100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_AnimDynamics, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_BlendListByBool_2, 0x19C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_RandomPlayer, 0x1A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_BlendListByBool, 0x1AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_StateResult, 0x1B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, AnimGraphNode_StateMachine, 0x1BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, Role_Selected, 0x1C60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_Menu_Slasher21_C, Is_Online, 0x1C61);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Slasher21_C, 0x1C62);
		}

		// class UBlinkAttack : public UPounceAttack
		TEST_METHOD(Class__TheNurse__BlinkAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlinkAttack, 0x02E0);
		}

		// class UBlinkAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheNurse__BlinkAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlinkAttackSuccessSubstate, 0x00D8);
		}

		// class UNurseAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheNurse__NurseAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNurseAnimInstance, UnknownData_98VD, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNurseAnimInstance, 0x05B0);
		}

		// class UNurseBurnable : public UPlayerLightBurnable
		TEST_METHOD(Class__TheNurse__NurseBurnable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNurseBurnable, 0x0100);
		}

		// class Uactor : public UObject
		TEST_METHOD(Class__Engine__actor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, PrimaryActorTick, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UpdateOverlapsMethodDuringLevelStreaming, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, DefaultUpdateOverlapsMethodDuringLevelStreaming, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, RemoteRole, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, ReplicatedMovement, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, InitialLifeSpan, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, CustomTimeDilation, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_2AB3, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, AttachmentReplication, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, owner, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, NetDriverName, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, role, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, NetDormancy, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, SpawnCollisionHandlingMethod, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, AutoReceiveInput, 0x00FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, InputPriority, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_XKUG, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, InputComponent, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, NetCullDistanceSquared, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, NetTag, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, NetUpdateFrequency, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, MinNetUpdateFrequency, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, NetPriority, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_9UST, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, instigator, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, Children, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, rootComponent, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, ControllingMatineeActors, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_5YRB, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, Layers, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, ParentComponent, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_WRG0, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, tags, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnTakeAnyDamage, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnTakePointDamage, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnTakeRadialDamage, 0x0192);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnActorBeginOverlap, 0x0193);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnActorEndOverlap, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnBeginCursorOver, 0x0195);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnEndCursorOver, 0x0196);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnClicked, 0x0197);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnReleased, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnInputTouchBegin, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnInputTouchEnd, 0x019A);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnInputTouchEnter, 0x019B);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnInputTouchLeave, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnActorHit, 0x019D);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnDestroyed, 0x019E);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, OnEndPlay, 0x019F);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_NTGH, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, InstanceComponents, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, BlueprintCreatedComponents, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uactor, UnknownData_OITI, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uactor, 0x0230);
		}

		// class UBP_Menu_Slasher20_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher20__BP_Menu_Slasher20_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher20_C, UnknownData_R6DW, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher20_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher20_C, BP_Audio_KLR_21, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher20_C, 0x0680);
		}

		// class UgameInstance : public UObject
		TEST_METHOD(Class__Engine__gameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameInstance, UnknownData_HOPO, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameInstance, LocalPlayers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameInstance, OnlineSession, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameInstance, ReferencedObjects, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameInstance, UnknownData_6FZS, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgameInstance, 0x01F0);
		}

		// class UInfo : public Uactor
		TEST_METHOD(Class__Engine__Info)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInfo, 0x0230);
		}

		// class UBlueprintFunctionLibrary : public UObject
		TEST_METHOD(Class__Engine__BlueprintFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintFunctionLibrary, 0x0030);
		}

		// class UBlueprintAsyncActionBase : public UObject
		TEST_METHOD(Class__Engine__BlueprintAsyncActionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintAsyncActionBase, UnknownData_HAJH, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintAsyncActionBase, 0x0038);
		}

		// class UOnlineBlueprintCallProxyBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__OnlineBlueprintCallProxyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineBlueprintCallProxyBase, 0x0038);
		}

		// class Uplayer : public UObject
		TEST_METHOD(Class__Engine__player)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uplayer, UnknownData_NLIG, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uplayer, playerController, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uplayer, CurrentNetSpeed, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uplayer, ConfiguredInternetSpeed, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uplayer, ConfiguredLanSpeed, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uplayer, UnknownData_7OBW, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uplayer, 0x0050);
		}

		// class UNetConnection : public Uplayer
		TEST_METHOD(Class__Engine__NetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Children, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, Driver, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMapClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, PackageMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OpenChannels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, SentTemporaries, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ViewTarget, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, OwningActor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, MaxPacket, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_JDGG, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, playerId, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_WHA3, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, LastReceiveTime, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_SP2N, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, ChannelsToTick, 0x1518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetConnection, UnknownData_78RP, 0x1528);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetConnection, 0x1A48);
		}

		// class UNetDriver : public UObject
		TEST_METHOD(Class__Engine__NetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_N26X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClassName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClassName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxDownloadSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_B7I2, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetServerMaxTickRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxNetTickRate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxInternetClientRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, MaxClientRate, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerTravelPause, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, SpawnPrioritySeconds, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RelevantTimeout, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, KeepAliveTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, InitialConnectTimeout, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ConnectionTimeout, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, TimeoutMultiplierForUnoptimizedBuilds, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNoTimeouts, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, bNeverApplyNetworkEmulationSettings, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_T4I9, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ServerConnection, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ClientConnections, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_VWYQ, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, RecentlyDisconnectedTrackingTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_MO0A, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, world, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, WorldPackage, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_TEM9, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetConnectionClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriverClass, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_ZZ2N, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, NetDriverName, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_UWSX, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitions, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ChannelDefinitionMap, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ActorChannelPool, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_E4IV, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, time, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_NM71, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ExpireViewTargetDelay, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_LQCO, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, ReplicationDriver, 0x0700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetDriver, UnknownData_J1QI, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetDriver, 0x0760);
		}

		// class UOnlineEngineInterface : public UObject
		TEST_METHOD(Class__Engine__OnlineEngineInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineEngineInterface, 0x0030);
		}

		// class UDeveloperSettings : public UObject
		TEST_METHOD(Class__Engine__DeveloperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeveloperSettings, UnknownData_CRF2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeveloperSettings, 0x0048);
		}

		// class UOnlineSession : public UObject
		TEST_METHOD(Class__Engine__OnlineSession)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlineSession, 0x0030);
		}

		// class UactorComponent : public UObject
		TEST_METHOD(Class__Engine__actorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UnknownData_VDKJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, PrimaryComponentTick, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, ComponentTags, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, AssetUserData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UnknownData_O8D7, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UCSSerializationIndex, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UnknownData_BRPT, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, CreationMethod, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, OnComponentActivated, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, OnComponentDeactivated, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UnknownData_XRTK, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UCSModifiedProperties, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UactorComponent, UnknownData_PNI4, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UactorComponent, 0x00B8);
		}

		// class USceneComponent : public UactorComponent
		TEST_METHOD(Class__Engine__SceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_4P6B, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolume, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachParent, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachSocketName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_2X5P, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, AttachChildren, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ClientAttachedChildren, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_SXI6, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeLocation, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeRotation, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, RelativeScale3D, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, ComponentVelocity, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_1XN1, 0x0166);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, Mobility, 0x0167);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailMode, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_UKOX, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, DetailModeBitmask, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, PhysicsVolumeChangedDelegate, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneComponent, UnknownData_Q5XG, 0x0171);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneComponent, 0x0210);
		}

		// class UprimitiveComponent : public USceneComponent
		TEST_METHOD(Class__Engine__primitiveComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_BOG8, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, MinDrawDistance, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, LDMaxDrawDistance, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, CachedMaxDrawDistance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, DepthPriorityGroup, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, ViewOwnerDepthPriorityGroup, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, IndirectLightingCacheQuality, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, LightmapType, 0x0227);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_B640, 0x022B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_O7L7, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, DetailLevelBeforeCastShadows, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, DetailLevelBeforeCastDynamicShadows, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_7NFF, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, bHasCustomNavigableGeometry, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_Y41Z, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, CanCharacterStepUpOn, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, lightingChannels, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, CustomDepthStencilWriteMask, 0x023F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, CustomDepthStencilValue, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_TRTI, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, CustomPrimitiveData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, CustomPrimitiveDataInternal, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_L3RD, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, TranslucencySortPriority, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, VisibilityId, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, RuntimeVirtualTextures, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, VirtualTextureLodBias, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, VirtualTextureCullMips, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, VirtualTextureMinCoverage, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, VirtualTextureRenderPassType, 0x028B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_GK08, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, LpvBiasMultiplier, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_JNPH, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, BoundsScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_XGFD, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, MoveIgnoreActors, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, MoveIgnoreComponents, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_M9SZ, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, BodyInstance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnComponentHit, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnComponentBeginOverlap, 0x03F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnComponentEndOverlap, 0x03FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnComponentWake, 0x03FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnComponentSleep, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_5SBF, 0x03FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnBeginCursorOver, 0x03FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnEndCursorOver, 0x03FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnClicked, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnReleased, 0x0401);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnInputTouchBegin, 0x0402);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnInputTouchEnd, 0x0403);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnInputTouchEnter, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, OnInputTouchLeave, 0x0405);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, UnknownData_C08B, 0x0406);
			CHEAT_GEAR_CHECK_OFFSET(CG::UprimitiveComponent, LODParentPrimitive, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UprimitiveComponent, 0x0428);
		}

		// class USplinteredStatesSubsystem : public UGameInstanceSubsystem
		TEST_METHOD(Class__SplinteredStates__SplinteredStatesSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplinteredStatesSubsystem, UnknownData_DISX, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplinteredStatesSubsystem, 0x04F0);
		}

		// class UMeshComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__MeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, OverrideMaterials, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, BackupMaterials, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_MY8F, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshComponent, UnknownData_YT5V, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshComponent, 0x0478);
		}

		// class USkinnedMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__SkinnedMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkeletalMesh, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SelectedMasterPoseComponent, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MasterPoseComponent, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, SkinCacheUsage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_0TUT, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, PhysicsAssetOverride, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, ForcedLodModel, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, MinLodModel, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, bUseMasterPoseLod, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_JV2D, 0x05B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StaticMeshesUsingSameLOD, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_GLQ6, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, StreamingDistanceMultiplier, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_VIJD, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, LODInfo, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_ER1E, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, VisibilityBasedAnimTickOption, 0x061C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_9HKK, 0x061D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_MWO1, 0x0621);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, AnimationTresholdToFrameSkip, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_JGZ5, 0x0639);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CapsuleIndirectShadowMinVisibility, 0x063C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_HE90, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldSpaceBounds, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, CachedWorldToLocalTransform, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkinnedMeshComponent, UnknownData_XHMS, 0x06B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkinnedMeshComponent, 0x06D0);
		}

		// class UStreamableRenderAsset : public UObject
		TEST_METHOD(Class__Engine__StreamableRenderAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, ForceMipLevelsToBeResidentTimestamp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, NumCinematicMipLevels, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, StreamingIndex, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedCombinedLODBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, CachedNumResidentLODs, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamableRenderAsset, UnknownData_DSU9, 0x0046);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamableRenderAsset, 0x0048);
		}

		// class USkeletalMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__SkeletalMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_NPQF, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Skeleton, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ImportedBounds, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ExtendedBounds, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PositiveBoundsExtension, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NegativeBoundsExtension, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Materials, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorTable, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, LODInfo, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_WJKS, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MinLod, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, DisableBelowMinLodStripping, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorAxis, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkelMirrorFlipAxis, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, BodySetup, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PhysicsAsset, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, ShadowPhysicsAsset, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, NodeMappingData, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MorphTargets, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_4DKQ, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, PostProcessAnimBlueprint, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, MeshClothingAssets, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SamplingInfo, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, AssetUserData, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_8LVI, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, Sockets, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, UnknownData_TVK5, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMesh, SkinWeightProfiles, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMesh, 0x0388);
		}

		// class UAssetImportData : public UObject
		TEST_METHOD(Class__Engine__AssetImportData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetImportData, 0x0030);
		}

		// class UAssetUserData : public UObject
		TEST_METHOD(Class__Engine__AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetUserData, 0x0030);
		}

		// class Ubrush : public Uactor
		TEST_METHOD(Class__Engine__brush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, BrushType, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, UnknownData_GNND, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, BrushColor, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, PolyFlags, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, UnknownData_4MEZ, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, brush, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, BrushComponent, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, UnknownData_B8NL, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ubrush, SavedSelections, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ubrush, 0x0268);
		}

		// class Uvolume : public Ubrush
		TEST_METHOD(Class__Engine__volume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uvolume, 0x0268);
		}

		// class Uworld : public UObject
		TEST_METHOD(Class__Engine__world)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_8M7X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, PersistentLevel, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, NetDriver, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, LineBatcher, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, PersistentLineBatcher, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, ForegroundLineBatcher, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, NetworkManager, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, PhysicsCollisionHandler, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, ExtraReferencedObjects, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, PerModuleDataObjects, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, LevelSequenceActors, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_SC6O, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, StreamingLevels, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, StreamingLevelsToConsider, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, StreamingLevelsPrefix, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, CurrentLevelPendingVisibility, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, CurrentLevelPendingInvisibility, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, DemoNetDriver, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, MyParticleEventManager, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, DefaultPhysicsVolume, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_HDK1, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_PMXX, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, NavigationSystem, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, AuthorityGameMode, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, gameState, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, AISystem, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, AvoidanceManager, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, Levels, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, LevelCollections, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_IJP4, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, OwningGameInstance, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, ParameterCollectionInstances, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, CanvasForRenderingToTarget, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, CanvasForDrawMaterialToRenderTarget, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_Y4V4, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, ComponentsThatNeedEndOfFrameUpdate, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, ComponentsThatNeedEndOfFrameUpdate_OnGameThread, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_9WYR, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, WorldComposition, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_V39U, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, PSCPool, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uworld, UnknownData_TFWE, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uworld, 0x0728);
		}

		// class UInterpTrack : public UObject
		TEST_METHOD(Class__Engine__InterpTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_VD07, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, SubTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackInstClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, ActiveCondition, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_HTCW, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, TrackTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrack, UnknownData_ZKPK, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrack, 0x0078);
		}

		// class UInterpTrackVectorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVectorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, VectorTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorBase, UnknownData_3K7X, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorBase, 0x0098);
		}

		// class UInterpTrackFloatBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackFloatBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, FloatTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatBase, UnknownData_RBOU, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatBase, 0x0098);
		}

		// class UInterpTrackInst : public UObject
		TEST_METHOD(Class__Engine__InterpTrackInst)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInst, 0x0030);
		}

		// class UskeletalMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__skeletalMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, AnimBlueprintGeneratedClass, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, AnimClass, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, AnimScriptInstance, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, PostProcessAnimInstance, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, AnimationData, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_VRIV, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, RootBoneTranslation, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, LineCheckBoundsScale, 0x0724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_DYXQ, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, LinkedInstances, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, CachedBoneSpaceTransforms, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, CachedComponentSpaceTransforms, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_UC2L, 0x0780);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, GlobalAnimRateScale, 0x07A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, KinematicBonesUpdateType, 0x07A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, PhysicsTransformUpdateMode, 0x07A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_OZ1J, 0x07A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, AnimationMode, 0x07A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_H8W8, 0x07A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_A51Z, 0x07AF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, CachedAnimCurveUidVersion, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, MassMode, 0x07B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_FNC1, 0x07B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UniformMass, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, TotalMass, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, Density, 0x07BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, MinPerParticleMass, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, ClothBlendWeight, 0x07C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, EdgeStiffness, 0x07C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, BendingStiffness, 0x07CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, AreaStiffness, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, VolumeStiffness, 0x07D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, StrainLimitingStiffness, 0x07D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, ShapeTargetStiffness, 0x07DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, DisallowedAnimCurves, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, BodySetup, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_6ZNT, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, OnConstraintBroken, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, ClothingSimulationFactory, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_8PXS, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, TeleportDistanceThreshold, 0x08E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, TeleportRotationThreshold, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_ENT2, 0x08F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, LastPoseTickFrame, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_GWYD, 0x08FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, ClothingInteractor, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_AQH5, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, OnAnimInitialized, 0x0A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UskeletalMeshComponent, UnknownData_074C, 0x0A30);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UskeletalMeshComponent, 0x0B5C);
		}

		// class UAppleImageUtilsBaseAsyncTaskBlueprintProxy : public UObject
		TEST_METHOD(Class__AppleImageUtils__AppleImageUtilsBaseAsyncTaskBlueprintProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_B9JJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnSuccess, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, OnFailure, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_O23F, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, ConversionResult, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, UnknownData_TF5C, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageUtilsBaseAsyncTaskBlueprintProxy, 0x0090);
		}

		// class UAppleImageInterface : public UInterface
		TEST_METHOD(Class__AppleImageUtils__AppleImageInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppleImageInterface, 0x0030);
		}

		// class UCommandlet : public UObject
		TEST_METHOD(Class__Engine__Commandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpUsage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpWebLink, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamNames, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, HelpParamDescriptions, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCommandlet, UnknownData_8FNW, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCommandlet, 0x0088);
		}

		// class UMaterialExpression : public UObject
		TEST_METHOD(Class__Engine__MaterialExpression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, MATERIAL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, Function, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpression, UnknownData_YAYB, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpression, 0x0048);
		}

		// class UMaterialExpressionTextureBase : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, texture, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, SamplerType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureBase, UnknownData_FUQ1, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureBase, 0x0058);
		}

		// class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, Coordinates, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_IACD, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, TextureObject, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_M0E5, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValue, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_CUHO, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDX, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_FSO4, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, CoordinatesDY, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_AN4F, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, AutomaticViewMipBiasValue, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, UnknownData_GOMT, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, MipValueMode, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, SamplerSource, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstCoordinate, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSample, ConstMipValue, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSample, 0x0108);
		}

		// class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, parameterName, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, ExpressionGUID, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameter, Group, 0x0124);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter, 0x0130);
		}

		// class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2D, 0x0130);
		}

		// class Upawn : public Uactor
		TEST_METHOD(Class__Engine__pawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, UnknownData_0H1N, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, UnknownData_YV8C, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, BaseEyeHeight, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, AutoPossessPlayer, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, AutoPossessAI, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, RemoteViewPitch, 0x0242);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, UnknownData_LO2N, 0x0243);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, AIControllerClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, playerState, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, UnknownData_EDBQ, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, LastHitBy, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, controller, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, UnknownData_T2WV, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, ControlInputVector, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, LastControlInputVector, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Upawn, UnknownData_GW1K, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Upawn, 0x0290);
		}

		// class Ucharacter : public Upawn
		TEST_METHOD(Class__Engine__character)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, mesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, CharacterMovement, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, CapsuleComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, BasedMovement, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, ReplicatedBasedMovement, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, AnimRootMotionTranslationScale, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, BaseTranslationOffset, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_0AZ6, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, BaseRotationOffset, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, ReplicatedServerLastTransformUpdateTimeStamp, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, ReplayLastTransformUpdateTimeStamp, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, ReplicatedMovementMode, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, bInBaseReplication, 0x0339);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_LNVN, 0x033A);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, CrouchedEyeHeight, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_20U1, 0x0342);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, JumpKeyHoldTime, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, JumpForceTimeRemaining, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, ProxyJumpForceStartedTime, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, JumpMaxHoldTime, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, JumpMaxCount, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, JumpCurrentCount, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_KEHC, 0x035C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, OnReachedJumpApex, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_3YK1, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, MovementModeChangedDelegate, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, OnCharacterMovementUpdated, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, SavedRootMotion, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_K80V, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, ClientRootMotionParams, 0x03E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, RootMotionRepMoves, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, RepRootMotion, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UseMovementPrediction, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucharacter, UnknownData_05R1, 0x04C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucharacter, 0x04D0);
		}

		// class UDataAsset : public UObject
		TEST_METHOD(Class__Engine__DataAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataAsset, NativeClass, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataAsset, 0x0038);
		}

		// class UsplineComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__splineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, SplineCurves, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, SplineInfo, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, SplineRotInfo, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, SplineScaleInfo, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, SplineReparamTable, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bAllowSplineEditingPerInstance, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, UnknownData_80B6, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, ReparamStepsPerSegment, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, duration, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bStationaryEndpoints, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bSplineHasBeenEdited, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bModifiedByConstructionScript, 0x04FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bInputSplinePointsToConstructionScript, 0x04FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bDrawDebug, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bClosedLoop, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, bLoopPositionOverride, 0x0502);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, UnknownData_8V54, 0x0503);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, LoopPosition, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, DefaultUpVector, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UsplineComponent, UnknownData_UFX7, 0x0514);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UsplineComponent, 0x0520);
		}

		// class UanimInstance : public UObject
		TEST_METHOD(Class__Engine__animInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, CurrentSkeleton, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, RootMotionMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, UnknownData_Z1WS, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, OnMontageBlendingOut, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, OnMontageStarted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, OnMontageEnded, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, OnAllMontageInstancesEnded, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, UnknownData_9YI6, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, NotifyQueue, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, ActiveAnimNotifyState, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimInstance, UnknownData_S66Q, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UanimInstance, 0x0270);
		}

		// class UAudioComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AudioComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Sound, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, InstanceParameters, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SoundClassOverride, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_3B5Q, 0x0233);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AudioComponentUserID, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMin, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchModulationMax, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMin, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeModulationMax, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, VolumeMultiplier, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerAttackTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, EnvelopeFollowerReleaseTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, priority, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SubtitlePriority, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, SourceEffectChain, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, PitchMultiplier, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, LowPassFilterFrequency, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_N5O2, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationSettings, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AttenuationOverrides, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySettings, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, ConcurrencySet, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_WHS2, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachLocationRule, 0x068C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachRotationRule, 0x068D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachScaleRule, 0x068E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_WIB6, 0x068F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioFinished, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_9U39, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioPlaybackPercent, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_V8F2, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioSingleEnvelopeValue, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_YTU1, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnAudioMultiEnvelopeValue, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_9JXN, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, Modulation, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, OnQueueSubtitles, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_KUJU, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachParent, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, AutoAttachSocketName, 0x075C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioComponent, UnknownData_L1T8, 0x0768);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioComponent, 0x0800);
		}

		// class UFXSystemComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__FXSystemComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemComponent, 0x0428);
		}

		// class UFXSystemAsset : public UObject
		TEST_METHOD(Class__Engine__FXSystemAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, MaxPoolSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFXSystemAsset, UnknownData_DFV4, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFXSystemAsset, 0x0038);
		}

		// class UanimNotify : public UObject
		TEST_METHOD(Class__Engine__animNotify)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UanimNotify, UnknownData_5C24, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UanimNotify, 0x0040);
		}

		// class UAnimNotifyState : public UObject
		TEST_METHOD(Class__Engine__AnimNotifyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState, UnknownData_KW3M, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState, 0x0038);
		}

		// class USignificanceManager : public UObject
		TEST_METHOD(Class__SignificanceManager__SignificanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, UnknownData_ZCJU, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USignificanceManager, SignificanceManagerClassName, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USignificanceManager, 0x0130);
		}

		// class USaveGame : public UObject
		TEST_METHOD(Class__Engine__SaveGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USaveGame, 0x0030);
		}

		// class UGameModeBase : public UInfo
		TEST_METHOD(Class__Engine__GameModeBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, OptionsString, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, GameSessionClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, GameStateClass, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, PlayerControllerClass, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, PlayerStateClass, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, HUDClass, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, DefaultPawnClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, SpectatorClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, ReplaySpectatorPlayerControllerClass, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, ServerStatReplicatorClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, GameSession, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, gameState, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, ServerStatReplicator, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, DefaultPlayerName, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameModeBase, UnknownData_B4CT, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameModeBase, 0x02D8);
		}

		// class UBuildPatchManifest : public UObject
		TEST_METHOD(Class__BuildPatchServices__BuildPatchManifest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ManifestFileVersion, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, bIsFileData, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, UnknownData_O066, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, AppName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, BuildVersion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchExe, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, LaunchCommand, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqIds, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqPath, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, PrereqArgs, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, FileManifestList, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, ChunkList, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBuildPatchManifest, CustomFields, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBuildPatchManifest, 0x0128);
		}

		// class UGameMode : public UGameModeBase
		TEST_METHOD(Class__Engine__GameMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, MatchState, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, UnknownData_DC41, 0x02E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, NumSpectators, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, NumPlayers, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, NumBots, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, MinRespawnDelay, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, NumTravellingPlayers, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, UnknownData_NGRT, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, EngineMessageClass, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, InactivePlayerArray, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, InactivePlayerStateLifeSpan, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, MaxInactivePlayers, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, bHandleDedicatedServerReplays, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameMode, UnknownData_RAKR, 0x0321);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameMode, 0x0328);
		}

		// class UGameStateBase : public UInfo
		TEST_METHOD(Class__Engine__GameStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, GameModeClass, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, AuthorityGameMode, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, SpectatorClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, PlayerArray, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, bReplicatedHasBegunPlay, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, UnknownData_SAB6, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, ReplicatedWorldTimeSeconds, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, ServerWorldTimeSecondsDelta, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, ServerWorldTimeSecondsUpdateFrequency, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameStateBase, UnknownData_T653, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameStateBase, 0x0280);
		}

		// class UgameState : public UGameStateBase
		TEST_METHOD(Class__Engine__gameState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameState, MatchState, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameState, PreviousMatchState, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameState, ElapsedTime, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UgameState, UnknownData_HE2J, 0x029C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UgameState, 0x02A8);
		}

		// class Ucontroller : public Uactor
		TEST_METHOD(Class__Engine__controller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, UnknownData_DGLI, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, playerState, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, UnknownData_1ICK, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, OnInstigatedAnyDamage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, stateName, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, UnknownData_2QGW, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, pawn, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, UnknownData_EKTP, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, character, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, TransformComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, UnknownData_1I83, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, ControlRotation, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ucontroller, UnknownData_MFC5, 0x02AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ucontroller, 0x02B0);
		}

		// class UplayerController : public Ucontroller
		TEST_METHOD(Class__Engine__playerController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, player, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, AcknowledgedPawn, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, ControllingDirTrackInst, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, MyHUD, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, PlayerCameraManager, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, PlayerCameraManagerClass, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, bAutoManageActiveCameraTarget, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_NWAI, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, TargetViewRotation, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_G101, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, SmoothTargetViewRotationSpeed, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_7Y4V, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, HiddenActors, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, HiddenPrimitiveComponents, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_AAFI, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, LastSpectatorStateSynchTime, 0x032C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, LastSpectatorSyncLocation, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, LastSpectatorSyncRotation, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, ClientCap, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_SARL, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, CheatManager, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, CheatClass, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, playerInput, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, ActiveForceFeedbackEffects, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_BGXJ, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_QNYE, 0x03E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, NetPlayerIndex, 0x03EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_IQ03, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, PendingSwapConnection, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, NetConnection, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_XZFN, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, InputYawScale, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, InputPitchScale, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, InputRollScale, 0x044C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_QI7E, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, ForceFeedbackScale, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, ClickEventKeys, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, DefaultMouseCursor, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, CurrentMouseCursor, 0x0469);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, DefaultClickTraceChannel, 0x046A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, CurrentClickTraceChannel, 0x046B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, HitResultTraceDistance, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, SeamlessTravelCount, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, LastCompletedSeamlessTravelCount, 0x0472);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_KSV4, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, InactiveStateInputComponent, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_EYH9, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, CurrentTouchInterface, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_DQT7, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, SpectatorPawn, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_R6FX, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, bIsLocalPlayerController, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_LBAJ, 0x056D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, SpawnLocation, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerController, UnknownData_RX93, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UplayerController, 0x0588);
		}

		// class UApplicationLifecycleComponent : public UactorComponent
		TEST_METHOD(Class__Engine__ApplicationLifecycleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillDeactivateDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasReactivatedDelegate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillEnterBackgroundDelegate, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationHasEnteredForegroundDelegate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationWillTerminateDelegate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationShouldUnloadResourcesDelegate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, ApplicationReceivedStartupArgumentsDelegate, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnTemperatureChangeDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UApplicationLifecycleComponent, OnLowPowerModeDelegate, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApplicationLifecycleComponent, 0x0148);
		}

		// class USubsystem : public UObject
		TEST_METHOD(Class__Engine__Subsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsystem, UnknownData_L7PU, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystem, 0x0038);
		}

		// class UDynamicSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__DynamicSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicSubsystem, 0x0038);
		}

		// class UEngineSubsystem : public UDynamicSubsystem
		TEST_METHOD(Class__Engine__EngineSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineSubsystem, 0x0038);
		}

		// class UMovementComponent : public UactorComponent
		TEST_METHOD(Class__Engine__MovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UpdatedPrimitive, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_LBD9, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, Velocity, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintNormal, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintOrigin, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_YE02, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, PlaneConstraintAxisSetting, 0x00F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMovementComponent, UnknownData_J9H4, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMovementComponent, 0x00F8);
		}

		// class UNavMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__NavMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, NavAgentProps, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, FixedPathBrakingDistance, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, MovementState, 0x0135);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, UnknownData_PYT7, 0x0136);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavMovementComponent, PathFollowingComp, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavMovementComponent, 0x0140);
		}

		// class UPawnMovementComponent : public UNavMovementComponent
		TEST_METHOD(Class__Engine__PawnMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnMovementComponent, PawnOwner, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnMovementComponent, 0x0148);
		}

		// class USoundEffectPreset : public UObject
		TEST_METHOD(Class__Engine__SoundEffectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectPreset, UnknownData_D8LS, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectPreset, 0x0048);
		}

		// class USoundEffectSourcePreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSourcePreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePreset, 0x0048);
		}

		// class USoundEffectSubmixPreset : public USoundEffectPreset
		TEST_METHOD(Class__Engine__SoundEffectSubmixPreset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSubmixPreset, 0x0048);
		}

		// class UGameInstanceSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__GameInstanceSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameInstanceSubsystem, 0x0038);
		}

		// class UShapeComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__ShapeComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeBodySetup, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, AreaClass, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, ShapeColor, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShapeComponent, UnknownData_48SK, 0x043D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShapeComponent, 0x0440);
		}

		// class UBoxComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__BoxComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, BoxExtent, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxComponent, LineThickness, 0x044C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxComponent, 0x0450);
		}

		// class UNavAreaBase : public UObject
		TEST_METHOD(Class__Engine__NavAreaBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavAreaBase, UnknownData_OKNN, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAreaBase, 0x0038);
		}

		// class ULevelScriptActor : public Uactor
		TEST_METHOD(Class__Engine__LevelScriptActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelScriptActor, UnknownData_JSN7, 0x0231);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptActor, 0x0238);
		}

		// class UCameraActor : public Uactor
		TEST_METHOD(Class__Engine__CameraActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, AutoActivateForPlayer, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, UnknownData_9LEA, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, CameraComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, SceneComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, UnknownData_OOIT, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, UnknownData_7CAQ, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, AspectRatio, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, FOVAngle, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, PostProcessBlendWeight, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraActor, PostProcessSettings, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraActor, 0x07A0);
		}

		// class UPrimaryDataAsset : public UDataAsset
		TEST_METHOD(Class__Engine__PrimaryDataAsset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryDataAsset, 0x0038);
		}

		// class UDecalActor : public Uactor
		TEST_METHOD(Class__Engine__DecalActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalActor, Decal, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalActor, 0x0238);
		}

		// class UCharacterMovementComponent : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__CharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_2BE6, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CharacterOwner, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GravityScale, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxStepHeight, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpZVelocity, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOffJumpZFactor, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorAngle, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, WalkableFloorZ, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MovementMode, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CustomMovementMode, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSmoothingMode, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_56RF, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundFriction, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_RG6I, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, maxWalkSpeed, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxWalkSpeedCrouched, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSwimSpeed, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxFlySpeed, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxCustomMovementSpeed, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxAcceleration, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinAnalogWalkSpeed, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFrictionFactor, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingFriction, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingSubStepTime, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationWalking, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFalling, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationSwimming, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, BrakingDecelerationFlying, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControl, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostMultiplier, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AirControlBoostVelocityThreshold, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, FallingLateralFriction, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CrouchedHalfHeight, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Buoyancy, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchRadiusThreshold, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PerchAdditionalHeight, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RotationRate, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_QM1A, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DeferredUpdatedMoveComponent, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxOutOfWaterStepHeight, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, OutofWaterZ, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Mass, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, StandingDownwardForceScale, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, InitialPushForceFactor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForceFactor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PushForcePointZOffsetFactor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, TouchForceFactor, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTouchForce, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxTouchForce, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RepulsionForce, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, Acceleration, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_MOA6, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateRotation, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateLocation, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LastUpdateVelocity, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastTransformUpdateTimeStamp, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientGoodMoveAckTime, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ServerLastClientAdjustmentTime, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingImpulseToApply, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingForceToApply, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnalogInputModifier, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_BCIQ, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationTimeStep, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxSimulationIterations, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxJumpApexAttemptsPerSimulation, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometry, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithGeometryAsProxy, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawn, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MaxDepenetrationWithPawnAsProxy, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothLocationTime, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkSimulatedSmoothRotationTime, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothLocationTime, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, ListenServerNetworkSimulatedSmoothRotationTime, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkRadius, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetProxyShrinkHalfHeight, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMaxSmoothUpdateDistance, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkNoSmoothUpdateDistance, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAckGoodMoves, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustments, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkMinTimeBetweenClientAdjustmentsLargeCorrection, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NetworkLargeClientCorrectionDistance, 0x02F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, LedgeCheckThreshold, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, JumpOutOfWaterPitch, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentFloor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultLandMovementMode, 0x039C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, DefaultWaterMovementMode, 0x039D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroundMovementMode, 0x039E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_F9IF, 0x03A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceConsiderationRadius, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RequestedVelocity, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceUID, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceGroup, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToAvoid, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, GroupsToIgnore, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AvoidanceWeight, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PendingLaunchVelocity, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_ELKT, 0x03E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterval, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionTimer, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionInterpSpeed, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleUp, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavMeshProjectionHeightScaleDown, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, NavWalkingFloorDistTolerance, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, PostPhysicsTickFunction, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_KR12, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, MinTimeBetweenTimeStampResets, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_XW05, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, CurrentRootMotion, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_8THE, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, RootMotionParams, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, AnimRootMotionVelocity, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCharacterMovementComponent, UnknownData_XX52, 0x060C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCharacterMovementComponent, 0x0630);
		}

		// class UParticleSystemComponent : public UFXSystemComponent
		TEST_METHOD(Class__Engine__ParticleSystemComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, Template, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, EmitterMaterials, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SkelMeshComponents, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_YO5H, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_C0K3, 0x0453);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, LODMethod, 0x045F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, RequiredSignificance, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_QAVP, 0x0461);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, InstanceParameters, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleSpawn, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleBurst, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleDeath, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnParticleCollide, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, bOldPositionValid, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_761T, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OldPosition, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, PartSysVelocity, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTime, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, WarmupTickRate, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_DXLQ, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, SecondsBeforeInactive, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_YJ2F, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, MaxTimeBeforeForceUpdateTransform, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_RFID, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, ReplayClips, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_VVQK, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, CustomTimeDilation, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_EZF1, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachParent, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachSocketName, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachLocationRule, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachRotationRule, 0x05A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, AutoAttachScaleRule, 0x05A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_394Z, 0x05A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, OnSystemFinished, 0x05D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemComponent, UnknownData_EI69, 0x05E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemComponent, 0x06AC);
		}

		// class UHud : public Uactor
		TEST_METHOD(Class__Engine__Hud)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, PlayerOwner, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, UnknownData_5LFF, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, CurrentTargetIndex, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, UnknownData_1C2R, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, PostRenderedActors, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, UnknownData_47VA, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, DebugDisplay, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, ToggledDebugCategories, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, Canvas, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, DebugCanvas, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, DebugTextList, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, ShowDebugTargetDesiredClass, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, ShowDebugTargetActor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHud, UnknownData_Y8HS, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHud, 0x0320);
		}

		// class UCheatManager : public UObject
		TEST_METHOD(Class__Engine__CheatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerRef, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, DebugCameraControllerClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheatManager, UnknownData_OYP4, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheatManager, 0x0080);
		}

		// class UDebugCameraController : public UplayerController
		TEST_METHOD(Class__Engine__DebugCameraController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, UnknownData_A473, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, DrawFrustum, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, SelectedActor, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, SelectedComponent, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, SelectedHitPoint, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, OriginalControllerRef, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, OriginalPlayer, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, SpeedScale, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, InitialMaxSpeed, 0x064C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, InitialAccel, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, InitialDecel, 0x0654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraController, UnknownData_EHPC, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraController, 0x0690);
		}

		// class Uengine : public UObject
		TEST_METHOD(Class__Engine__engine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_GNUJ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TinyFont, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TinyFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SmallFont, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SmallFontName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MediumFont, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MediumFontName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LargeFont, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LargeFontName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SubtitleFont, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SubtitleFontName, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AdditionalFonts, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_PC9H, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AdditionalFontNames, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConsoleClass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConsoleClassName, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameViewportClientClass, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameViewportClientClassName, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LocalPlayerClass, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LocalPlayerClassName, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, WorldSettingsClass, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, WorldSettingsClassName, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NavigationSystemClassName, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NavigationSystemClass, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NavigationSystemConfigClassName, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NavigationSystemConfigClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AvoidanceManagerClassName, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AvoidanceManagerClass, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PhysicsCollisionHandlerClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PhysicsCollisionHandlerClassName, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameUserSettingsClassName, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameUserSettingsClass, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AIControllerClassName, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameUserSettings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LevelScriptActorClass, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LevelScriptActorClassName, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBlueprintBaseClassName, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameSingletonClassName, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameSingleton, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AssetManagerClassName, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, AssetManager, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultTexture, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultTextureName, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultDiffuseTexture, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultDiffuseTextureName, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBSPVertexTexture, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBSPVertexTextureName, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, HighFrequencyNoiseTexture, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, HighFrequencyNoiseTextureName, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBokehTexture, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBokehTextureName, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBloomKernelTexture, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultBloomKernelTextureName, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, WireframeMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, WireframeMaterialName, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DebugMeshMaterial, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DebugMeshMaterialName, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, EmissiveMeshMaterial, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, EmissiveMeshMaterialName, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LevelColorationLitMaterial, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LevelColorationLitMaterialName, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LevelColorationUnlitMaterial, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LevelColorationUnlitMaterialName, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightingTexelDensityMaterial, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightingTexelDensityName, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ShadedLevelColorationLitMaterial, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ShadedLevelColorationLitMaterialName, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ShadedLevelColorationUnlitMaterial, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ShadedLevelColorationUnlitMaterialName, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, RemoveSurfaceMaterial, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, RemoveSurfaceMaterialName, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorMaterial, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorMaterialName, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterial_ColorOnly, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterialName_ColorOnly, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterial_AlphaAsColor, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterialName_AlphaAsColor, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterial_RedOnly, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterialName_RedOnly, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterial_GreenOnly, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterialName_GreenOnly, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterial_BlueOnly, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, VertexColorViewModeMaterialName_BlueOnly, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DebugEditorMaterialName, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterial, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialX, 0x0600);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialXAxis, 0x0608);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialY, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialYAxis, 0x0618);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialZ, 0x0620);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialZAxis, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ConstraintLimitMaterialPrismatic, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, InvalidLightmapSettingsMaterial, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, InvalidLightmapSettingsMaterialName, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PreviewShadowsIndicatorMaterial, 0x0660);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PreviewShadowsIndicatorMaterialName, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ArrowMaterial, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ArrowMaterialYellow, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ArrowMaterialName, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightingOnlyBrightness, 0x06B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ShaderComplexityColors, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, QuadComplexityColors, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightComplexityColors, 0x06E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, StationaryLightOverlapColors, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LODColorationColors, 0x0708);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, HLODColorationColors, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, StreamingAccuracyColors, 0x0728);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaxPixelShaderAdditiveComplexityCount, 0x0738);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaxES3PixelShaderAdditiveComplexityCount, 0x073C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MinLightMapDensity, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, IdealLightMapDensity, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaxLightMapDensity, 0x0748);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_1R1L, 0x074D);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, RenderLightMapDensityGrayscaleScale, 0x0750);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, RenderLightMapDensityColorScale, 0x0754);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightMapDensityVertexMappedColor, 0x0758);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightMapDensitySelectedColor, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, StatColorMappings, 0x0778);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultPhysMaterial, 0x0788);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultPhysMaterialName, 0x0790);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ActiveGameNameRedirects, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ActiveClassRedirects, 0x07C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ActivePluginRedirects, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ActiveStructRedirects, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PreIntegratedSkinBRDFTexture, 0x07F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PreIntegratedSkinBRDFTextureName, 0x07F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, BlueNoiseTexture, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, BlueNoiseTextureName, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MiniFontTexture, 0x0840);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MiniFontTextureName, 0x0848);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, WeightMapPlaceholderTexture, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, WeightMapPlaceholderTextureName, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightMapDensityTexture, 0x0890);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, LightMapDensityTextureName, 0x0898);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_JWHF, 0x08B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameViewport, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DeferredCommands, 0x08C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TickCycles, 0x08D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameCycles, 0x08DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ClientCycles, 0x08E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NearClipPlane, 0x08E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_XBWH, 0x08E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaximumLoopIterationCount, 0x08EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_2ZGU, 0x08F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, FixedFrameRate, 0x08F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SmoothedFrameRateRange, 0x08F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, CustomTimeStep, 0x0908);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_UP8U, 0x0910);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, CustomTimeStepClassName, 0x0930);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TimecodeProvider, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_SYX1, 0x0958);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TimecodeProviderClassName, 0x0978);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, bGenerateDefaultTimecode, 0x0998);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_KJVZ, 0x0999);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GenerateDefaultTimecodeFrameRate, 0x099C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GenerateDefaultTimecodeFrameDelay, 0x09A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_3BTX, 0x09A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NumPawnsAllowedToBeSpawnedInAFrame, 0x09AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_MZ10, 0x09B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_WorldBox, 0x09B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_BrushWire, 0x09B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_AddWire, 0x09BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_SubtractWire, 0x09C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_SemiSolidWire, 0x09C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_NonSolidWire, 0x09C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_WireBackground, 0x09CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_ScaleBoxHi, 0x09D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_VolumeCollision, 0x09D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_BSPCollision, 0x09D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_OrthoBackground, 0x09DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_Volume, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, C_BrushShape, 0x09E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, StreamingDistanceFactor, 0x09E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_5UNC, 0x09EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, GameScreenshotSaveDirectory, 0x09F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TransitionType, 0x0A00);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_JGNW, 0x0A01);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TransitionDescription, 0x0A08);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, TransitionGameMode, 0x0A18);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MeshLODRange, 0x0A28);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_OWTT, 0x0A2D);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, CameraRotationThreshold, 0x0A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, CameraTranslationThreshold, 0x0A34);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PrimitiveProbablyVisibleTime, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaxOcclusionPixelsFraction, 0x0A3C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_QWV0, 0x0A41);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaxParticleResize, 0x0A44);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MaxParticleResizeWarn, 0x0A48);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_2348, 0x0A4C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, PendingDroppedNotes, 0x0A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NetClientTicksPerSecond, 0x0A60);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DisplayGamma, 0x0A64);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, MinDesiredFrameRate, 0x0A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, DefaultSelectedMaterialColor, 0x0A6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SelectedMaterialColor, 0x0A7C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SelectionOutlineColor, 0x0A8C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SubduedSelectionOutlineColor, 0x0A9C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SelectedMaterialColorOverride, 0x0AAC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, bIsOverridingSelectedColor, 0x0ABC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_O46Z, 0x0ABD);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_YHUK, 0x0AC1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, bEnableVisualLogRecordingOnStart, 0x0AC4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_F03C, 0x0AC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ScreenSaverInhibitorSemaphore, 0x0ACC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_8PY9, 0x0AD1);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ParticleEventManagerClassPath, 0x0AD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SelectionHighlightIntensity, 0x0AE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, BSPSelectionHighlightIntensity, 0x0AEC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, SelectionHighlightIntensityBillboards, 0x0AF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_KBNY, 0x0AF4);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NetDriverDefinitions, 0x0D40);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, ServerActors, 0x0D50);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, RuntimeServerActors, 0x0D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NetErrorLogInterval, 0x0D70);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_P35S, 0x0D75);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, NextWorldContextHandle, 0x0D90);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uengine, UnknownData_42LB, 0x0D94);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uengine, 0x0F28);
		}

		// class UBP_Menu_Slasher21_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher21__BP_Menu_Slasher21_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher21_C, UnknownData_JUA9, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher21_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher21_C, BP_Audio_KLR_22, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher21_C, 0x0680);
		}

		// class UGameEngine : public Uengine
		TEST_METHOD(Class__Engine__GameEngine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, MaxDeltaTime, 0x0F28);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, ServerFlushLogInterval, 0x0F2C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, gameInstance, 0x0F30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameEngine, UnknownData_3QVA, 0x0F38);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameEngine, 0x0F78);
		}

		// class UGameSession : public UInfo
		TEST_METHOD(Class__Engine__GameSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, MaxSpectators, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, MaxPlayers, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, MaxPartySize, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, MaxSplitscreensPerConnection, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, bRequiresPushToTalk, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, UnknownData_7WX6, 0x023E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, SessionName, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameSession, UnknownData_STXN, 0x024C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameSession, 0x0250);
		}

		// class UGameUserSettings : public UObject
		TEST_METHOD(Class__Engine__GameUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseVSync, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDynamicResolution, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_EXLN, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, ResolutionSizeY, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeX, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedResolutionSizeY, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosX, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, WindowPosY, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FullscreenMode, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedFullscreenMode, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, PreferredFullscreenMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, version, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, AudioQualityLevel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastConfirmedAudioQualityLevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, FrameRateLimit, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_U04I, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenWidth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseDesiredScreenHeight, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_PHI3, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, DesiredScreenHeight, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenWidth, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastUserConfirmedDesiredScreenHeight, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenWidth, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastRecommendedScreenHeight, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkResult, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkResult, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_ID2S, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastCPUBenchmarkSteps, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkSteps, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, LastGPUBenchmarkMultiplier, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, bUseHDRDisplayOutput, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_KJNJ, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, HDRDisplayOutputNits, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, UnknownData_2Q20, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameUserSettings, OnGameUserSettingsUINeedsUpdate, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameUserSettings, 0x0128);
		}

		// class UScriptViewportClient : public UObject
		TEST_METHOD(Class__Engine__ScriptViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScriptViewportClient, UnknownData_L7S5, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScriptViewportClient, 0x0040);
		}

		// class UGameViewportClient : public UScriptViewportClient
		TEST_METHOD(Class__Engine__GameViewportClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_VZSY, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, ViewportConsole, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, DebugProperties, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_F4C8, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, MaxSplitscreenPlayers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_SLBG, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, world, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, gameInstance, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameViewportClient, UnknownData_56HN, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameViewportClient, 0x0340);
		}

		// class ULocalPlayer : public Uplayer
		TEST_METHOD(Class__Engine__LocalPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_O0IP, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ViewportClient, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_UVDK, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, AspectRatioAxisConstraint, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_QL2B, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, PendingLevelPlayerControllerClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_0HQH, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, ControllerID, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalPlayer, UnknownData_SMKV, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayer, 0x0268);
		}

		// class UPlayerCameraManager : public Uactor
		TEST_METHOD(Class__Engine__PlayerCameraManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, PCOwner, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, TransformComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_CBHK, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, DefaultFOV, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_54XT, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, DefaultOrthoWidth, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_WWAB, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, DefaultAspectRatio, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_YBX4, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, CameraCache, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, LastFrameCameraCache, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewTarget, 0x0E60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, PendingViewTarget, 0x1450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_LJ3Y, 0x1A40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, CameraCachePrivate, 0x1A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, LastFrameCameraCachePrivate, 0x2050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ModifierList, 0x2630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, DefaultModifiers, 0x2640);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, FreeCamDistance, 0x2650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, FreeCamOffset, 0x2654);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewTargetOffset, 0x2660);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_Z08E, 0x266C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, CameraLensEffects, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, CachedCameraShakeMod, 0x2690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, AnimInstPool, 0x2698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, PostProcessBlendCache, 0x26D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_V5TQ, 0x26E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ActiveAnims, 0x26F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, FreeAnims, 0x2708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, AnimCameraActor, 0x2718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_VU6X, 0x2722);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewPitchMin, 0x2724);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewPitchMax, 0x2728);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewYawMin, 0x272C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewYawMax, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewRollMin, 0x2734);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ViewRollMax, 0x2738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_PPZN, 0x273C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, ServerUpdateCameraTimeout, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerCameraManager, UnknownData_VDUN, 0x2744);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerCameraManager, 0x274C);
		}

		// class UChaosDebugDrawComponent : public UactorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDebugDrawComponent, UnknownData_KUA1, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDebugDrawComponent, 0x00C0);
		}

		// class UChaosEventListenerComponent : public UactorComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosEventListenerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosEventListenerComponent, UnknownData_R383, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosEventListenerComponent, 0x00C0);
		}

		// class UChaosGameplayEventDispatcher : public UChaosEventListenerComponent
		TEST_METHOD(Class__ChaosSolverEngine__ChaosGameplayEventDispatcher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_TUEG, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, CollisionEventRegistrations, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, BreakEventRegistrations, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosGameplayEventDispatcher, UnknownData_4ZY6, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosGameplayEventDispatcher, 0x0278);
		}

		// class UChaosNotifyHandlerInterface : public UInterface
		TEST_METHOD(Class__ChaosSolverEngine__ChaosNotifyHandlerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosNotifyHandlerInterface, 0x0030);
		}

		// class UChaosSolverEngineBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverEngineBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverEngineBlueprintLibrary, 0x0030);
		}

		// class UChaosSolver : public UObject
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolver, 0x0030);
		}

		// class UChaosSolverActor : public Uactor
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, TimeStepMultiplier, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, CollisionIterations, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, PushOutIterations, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, PushOutPairIterations, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, ClusterConnectionFactor, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, ClusterUnionConnectionType, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, DoGenerateCollisionData, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, UnknownData_4VGB, 0x0246);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, CollisionFilterSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, DoGenerateBreakingData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, UnknownData_YJZQ, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, BreakingFilterSettings, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, DoGenerateTrailingData, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, UnknownData_RA7L, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, TrailingFilterSettings, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, bHasFloor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, UnknownData_AE56, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, FloorHeight, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, MassScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, bGenerateContactGraph, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, ChaosDebugSubstepControl, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, SpriteComponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, UnknownData_CKH6, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverActor, GameplayEventDispatcherComponent, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverActor, 0x02B8);
		}

		// class UNavigationObjectBase : public Uactor
		TEST_METHOD(Class__Engine__NavigationObjectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationObjectBase, UnknownData_TVZU, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationObjectBase, CapsuleComponent, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationObjectBase, GoodSprite, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationObjectBase, BadSprite, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationObjectBase, UnknownData_C3YP, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationObjectBase, 0x0258);
		}

		// class UChaosSolverSettings : public UDeveloperSettings
		TEST_METHOD(Class__ChaosSolverEngine__ChaosSolverSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, UnknownData_324S, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosSolverSettings, DefaultChaosSolverActorClass, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosSolverSettings, 0x0070);
		}

		// class UPlayerStart : public UNavigationObjectBase
		TEST_METHOD(Class__Engine__PlayerStart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerStart, PlayerStartTag, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerStart, UnknownData_J9L6, 0x0264);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStart, 0x0268);
		}

		// class UplayerState : public UInfo
		TEST_METHOD(Class__Engine__playerState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, Score, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, playerId, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, Ping, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UnknownData_UC2Z, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UnknownData_ASAV, 0x023B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, startTime, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, EngineMessageClass, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UnknownData_GMPC, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, SavedNetworkAddress, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UniqueID, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UnknownData_I7CJ, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, PawnPrivate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UnknownData_5WBI, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, PlayerNamePrivate, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerState, UnknownData_Y3OU, 0x0328);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UplayerState, 0x0338);
		}

		// class UDefaultPawn : public Upawn
		TEST_METHOD(Class__Engine__DefaultPawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultPawn, BaseTurnRate, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultPawn, BaseLookUpRate, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultPawn, MovementComponent, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultPawn, CollisionComponent, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultPawn, MeshComponent, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDefaultPawn, UnknownData_KQJY, 0x02B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultPawn, 0x02B8);
		}

		// class USpectatorPawn : public UDefaultPawn
		TEST_METHOD(Class__Engine__SpectatorPawn)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawn, 0x02B8);
		}

		// class USpringArmComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SpringArmComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetArmLength, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, SocketOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, TargetOffset, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeSize, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, ProbeChannel, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_CSK8, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_6M87, 0x0236);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagSpeed, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraRotationLagSpeed, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxTimeStep, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, CameraLagMaxDistance, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpringArmComponent, UnknownData_KDVR, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpringArmComponent, 0x02A0);
		}

		// class UStaticMeshComponent : public UMeshComponent
		TEST_METHOD(Class__Engine__StaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_HGKP, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, PreviousLODLevel, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, MinLod, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, SubDivisionStepSize, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_ODD3, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StaticMesh, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, WireframeColorOverride, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, UnknownData_TORD, 0x049E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, OverriddenLightMapRes, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldIndirectShadowMinVisibility, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, DistanceFieldSelfShadowBias, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingDistanceMultiplier, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LodData, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, StreamingTextureData, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshComponent, LightmassSettings, 0x04D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshComponent, 0x04E8);
		}

		// class UInstancedStaticMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__InstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMData, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumCustomDataFloats, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_USCE, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, PerInstanceSMCustomData, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstancingRandomSeed, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceStartCullDistance, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceEndCullDistance, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_JBE0, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, InstanceReorderTable, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_09IE, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, NumPendingLightmaps, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_VM3L, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, CachedMappings, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInstancedStaticMeshComponent, UnknownData_CHU2, 0x0590);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInstancedStaticMeshComponent, 0x05A0);
		}

		// class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HierarchicalInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_1442, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, SortedInstances, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, NumBuiltInstances, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_86FF, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, BuiltInstanceBounds, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBounds, 0x05DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnbuiltInstanceBoundsList, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_CPJY, 0x0609);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, OcclusionLayerNumNodes, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, CacheMeshExtendedBounds, 0x0614);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, bDisableCollision, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_SOHW, 0x0631);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, InstanceCountToRender, 0x0634);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalInstancedStaticMeshComponent, UnknownData_9XH7, 0x0638);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalInstancedStaticMeshComponent, 0x0688);
		}

		// class UHISMMaterialHelperComponent : public UHierarchicalInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__HISMMaterialHelperComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHISMMaterialHelperComponent, MaterialConfigurations, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHISMMaterialHelperComponent, IndexOverrides, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHISMMaterialHelperComponent, UnknownData_DRJG, 0x06A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHISMMaterialHelperComponent, 0x06B0);
		}

		// class USkeletalMeshActor : public Uactor
		TEST_METHOD(Class__Engine__SkeletalMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, UnknownData_BP0X, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, UnknownData_LO85, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, skeletalMeshComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, ReplicatedMesh, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, ReplicatedPhysAsset, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, ReplicatedMaterial0, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, ReplicatedMaterial1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshActor, UnknownData_ZAD4, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshActor, 0x02B8);
		}

		// class UWorldSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__WorldSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSubsystem, 0x0038);
		}

		// class USphereComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__SphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, SphereRadius, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereComponent, UnknownData_KXKP, 0x0444);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereComponent, 0x0450);
		}

		// class UCapsuleComponent : public UShapeComponent
		TEST_METHOD(Class__Engine__CapsuleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleHalfHeight, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, CapsuleRadius, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCapsuleComponent, UnknownData_G06F, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCapsuleComponent, 0x0450);
		}

		// class ULightComponentBase : public USceneComponent
		TEST_METHOD(Class__Engine__LightComponentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightGuid, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, brightness, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, intensity, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, LightColor, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_V92R, 0x022D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DetailLevelBeforeCastShadows, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_39DP, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DetailLevelBeforeCastDynamicShadows, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_JL88, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, CascadeShadowMapQualityReductionBHVR, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_2FIN, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, DetailLevelThresholdBeforeIgnoringDynamicObjectsInShadows, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_VDEY, 0x023D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_ZAOL, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, IndirectLightingIntensity, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, VolumetricScatteringIntensity, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, AmbientOcclusionContribution, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, SamplesPerPixel, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponentBase, UnknownData_QFGN, 0x0258);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponentBase, 0x025C);
		}

		// class ULightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__LightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDrawDistance, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MaxDistanceFadeRange, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_XJ3H, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowMapChannel, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_8PLC, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, MinRoughness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, SpecularScale, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowResolutionScale, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowBias, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSlopeBias, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ShadowSharpen, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, ContactShadowLength, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_JJQ6, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, lightingChannels, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_CEXY, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionMaterial, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionScale, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_UFFR, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESTexture, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_1MLV, 0x02B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, IESBrightnessScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, LightFunctionFadeDistance, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, DisabledBrightness, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_UQEL, 0x02C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomScale, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomThreshold, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomMaxBrightness, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, BloomTint, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, bUseRayTracedDistanceFieldShadows, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_7G85, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, RayStartOffsetDepthScale, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightComponent, UnknownData_EBUF, 0x02E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightComponent, 0x038C);
		}

		// class ULocalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__LocalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, radius, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, AttenuationRadius, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocalLightComponent, LightmassSettings, 0x0394);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalLightComponent, 0x03A0);
		}

		// class UPointLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__PointLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_4NMM, 0x03A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, LightFalloffExponent, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceRadius, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SoftSourceRadius, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, SourceLength, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLightComponent, UnknownData_LN7B, 0x03B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLightComponent, 0x03BC);
		}

		// class USpotLightComponent : public UPointLightComponent
		TEST_METHOD(Class__Engine__SpotLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, OuterConeAngle, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, LightShaftConeAngle, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLightComponent, UnknownData_ADLR, 0x03C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLightComponent, 0x03C8);
		}

		// class ULocalPlayerSubsystem : public USubsystem
		TEST_METHOD(Class__Engine__LocalPlayerSubsystem)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalPlayerSubsystem, 0x0038);
		}

		// class UProjectileMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__ProjectileMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InitialSpeed, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSpeed, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_KAED, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, PreviousHitNormal, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, ProjectileGravityScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Buoyancy, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Bounciness, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, Friction, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceVelocityStopSimulatingThreshold, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MinFrictionFraction, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_LU4S, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileBounce, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, OnProjectileStop, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingAccelerationMagnitude, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, HomingTargetComponent, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationTimeStep, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, MaxSimulationIterations, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, BounceAdditionalIterations, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationTime, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpRotationTime, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationMaxLagDistance, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, InterpLocationSnapToTargetDistance, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProjectileMovementComponent, UnknownData_3FMT, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProjectileMovementComponent, 0x01E0);
		}

		// class USkyLight : public UInfo
		TEST_METHOD(Class__Engine__SkyLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLight, LightComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLight, UnknownData_Z9ZY, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLight, 0x0240);
		}

		// class Utexture : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__texture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, UnknownData_3VXK, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, LightingGuid, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, LODBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, CompressionSettings, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, filter, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, MipLoadOptions, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, LODGroup, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, UnknownData_N751, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, AssetUserData, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::Utexture, UnknownData_7LE8, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Utexture, 0x00C0);
		}

		// class UTextureCube : public Utexture
		TEST_METHOD(Class__Engine__TextureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureCube, UnknownData_X0OZ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureCube, 0x0118);
		}

		// class UStaticMeshActor : public Uactor
		TEST_METHOD(Class__Engine__StaticMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshActor, StaticMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshActor, bStaticMeshReplicateMovement, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshActor, NavigationGeometryGatheringMode, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshActor, UnknownData_UUKZ, 0x023A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshActor, 0x0240);
		}

		// class UmaterialInterface : public UObject
		TEST_METHOD(Class__Engine__materialInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, UnknownData_R0TA, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, SubsurfaceProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, UnknownData_9OH6, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, LightmassSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, TextureStreamingData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, AssetUserData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UmaterialInterface, UnknownData_WQ63, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UmaterialInterface, 0x0090);
		}

		// class UMaterialInstance : public UmaterialInterface
		TEST_METHOD(Class__Engine__MaterialInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, PhysicalMaterialMap, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, Parent, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_4R41, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, ScalarParameterValues, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, VectorParameterValues, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, TextureParameterValues, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, RuntimeVirtualTextureParameterValues, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, FontParameterValues, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, BasePropertyOverrides, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_5IUQ, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, StaticParameters, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedLayerParameters, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, CachedReferencedTextures, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstance, UnknownData_7U2S, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstance, 0x0410);
		}

		// class UMaterialInstanceConstant : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceConstant, PhysMaterialMask, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceConstant, 0x0418);
		}

		// class UMaterialExpressionCustomOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustomOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustomOutput, 0x0048);
		}

		// class UEngineCustomTimeStep : public UObject
		TEST_METHOD(Class__Engine__EngineCustomTimeStep)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineCustomTimeStep, 0x0030);
		}

		// class UDynamicBlueprintBinding : public UObject
		TEST_METHOD(Class__Engine__DynamicBlueprintBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicBlueprintBinding, 0x0030);
		}

		// class UBlueprintGeneratedClass : public UClass
		TEST_METHOD(Class__Engine__BlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, NumReplicatedProperties, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_CDBH, 0x0245);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, DynamicBindingObjects, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentTemplates, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, Timelines, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, ComponentClassOverrides, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, SimpleConstructionScript, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, InheritableComponentHandler, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFramePointerProperty, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_6N4B, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UberGraphFunction, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, CookedComponentInstancingData, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintGeneratedClass, UnknownData_W6UH, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintGeneratedClass, 0x0338);
		}

		// class UCameraComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, FieldOfView, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoWidth, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoNearClipPlane, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, OrthoFarClipPlane, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, AspectRatio, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, ProjectionMode, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_410Q, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessBlendWeight, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, UnknownData_L412, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraComponent, PostProcessSettings, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraComponent, 0x07D0);
		}

		// class USoundBase : public UObject
		TEST_METHOD(Class__Engine__SoundBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundClassObject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, VirtualizationMode, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, UnknownData_14LQ, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencySet, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, ConcurrencyOverrides, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, duration, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, MaxDistance, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, TotalSamples, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, priority, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, AttenuationSettings, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, Modulation, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixObject, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SoundSubmixSends, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, SourceEffectChain, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, BusSends, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundBase, PreEffectBusSends, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundBase, 0x0168);
		}

		// class USoundWave : public USoundBase
		TEST_METHOD(Class__Engine__SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CompressionQuality, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, StreamingPriority, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRateQuality, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_VR1G, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SoundGroup, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, LoadingBehavior, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_EXKM, 0x0177);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, FrequenciesToAnalyze, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedSpectralTimeData, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, CookedEnvelopeTimeData, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InitialChunkSize, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_1H9U, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SpokenText, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SubtitlePriority, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, volume, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Pitch, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, NumChannels, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, SampleRate, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_UA3C, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Subtitles, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, Curves, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, InternalCurves, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWave, UnknownData_V05D, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWave, 0x0318);
		}

		// class USoundWaveProcedural : public USoundWave
		TEST_METHOD(Class__Engine__SoundWaveProcedural)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundWaveProcedural, UnknownData_EDAH, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundWaveProcedural, 0x0370);
		}

		// class UBlueprintCore : public UObject
		TEST_METHOD(Class__Engine__BlueprintCore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, SkeletonGeneratedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, GeneratedClass, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, bLegacyNeedToPurgeSkelRefs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_OEFJ, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, BlueprintGuid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprintCore, UnknownData_2066, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintCore, 0x0058);
		}

		// class UBlueprint : public UBlueprintCore
		TEST_METHOD(Class__Engine__Blueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ParentClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, UnknownData_YBKV, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, BlueprintSystemVersion, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, SimpleConstructionScript, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentTemplates, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, Timelines, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, ComponentClassOverrides, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlueprint, InheritableComponentHandler, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprint, 0x00A8);
		}

		// class UModel : public UObject
		TEST_METHOD(Class__Engine__Model)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModel, UnknownData_XYVO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModel, 0x0260);
		}

		// class Uchannel : public UObject
		TEST_METHOD(Class__Engine__channel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Uchannel, Connection, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Uchannel, UnknownData_IMZQ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Uchannel, 0x0078);
		}

		// class UActorChannel : public Uchannel
		TEST_METHOD(Class__Engine__ActorChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, actor, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_IWYI, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, CreateSubObjects, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UActorChannel, UnknownData_Q2GP, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UActorChannel, 0x02A0);
		}

		// class UAnimationAsset : public UObject
		TEST_METHOD(Class__Engine__AnimationAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_5UK4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Skeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, UnknownData_38Q6, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, Metadata, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationAsset, AssetUserData, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationAsset, 0x0088);
		}

		// class UBlendSpaceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__BlendSpaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_7N8B, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, bRotationBlendInMeshSpace, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_PZJS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, AnimLength, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, InterpolationParam, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, TargetWeightInterpolationSpeedPerSec, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, NotifyTriggerMode, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_T0Y9, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, PerBoneBlend, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleIndexWithMarkers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, UnknownData_S4F5, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, SampleData, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, GridSamples, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpaceBase, BlendParameters, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpaceBase, 0x0150);
		}

		// class UBlendspace : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__Blendspace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendspace, AxisToScaleAnimation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendspace, UnknownData_54ZD, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendspace, 0x0158);
		}

		// class UAimOffsetBlendSpace : public UBlendspace
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace, 0x0158);
		}

		// class UBlendSpace1D : public UBlendSpaceBase
		TEST_METHOD(Class__Engine__BlendSpace1D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, bScaleAnimation, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendSpace1D, UnknownData_O0UJ, 0x0151);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendSpace1D, 0x0158);
		}

		// class UAimOffsetBlendSpace1D : public UBlendSpace1D
		TEST_METHOD(Class__Engine__AimOffsetBlendSpace1D)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetBlendSpace1D, 0x0158);
		}

		// class UAISystemBase : public UObject
		TEST_METHOD(Class__Engine__AISystemBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemClassName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, AISystemModuleName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_52QV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, bInstantiateAISystemOnClient, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAISystemBase, UnknownData_0JRO, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAISystemBase, 0x0070);
		}

		// class UAmbientSound : public Uactor
		TEST_METHOD(Class__Engine__AmbientSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAmbientSound, AudioComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAmbientSound, 0x0238);
		}

		// class UAnimationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AnimationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, CompressCommandletVersion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, UnknownData_W0KC, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, KeyEndEffectorsMatchNameArray, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, ForceRecompression, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bOnlyCheckForMissingSkeletalMeshes, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bForceBelowThreshold, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bFirstRecompressUsingCurrentOrDefault, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bRaiseMaxErrorToExisting, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bEnablePerformanceLog, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bStripAnimationDataOnDedicatedServer, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimationSettings, bTickAnimationOnSkeletalMeshInit, 0x0067);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimationSettings, 0x0068);
		}

		// class UAnimBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__AnimBlueprint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_L2KD, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, TargetSkeleton, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, Groups, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bUseMultiThreadedAnimationUpdate, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, bWarnAboutBlueprintUsage, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprint, UnknownData_JQNE, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprint, 0x00D0);
		}

		// class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
		TEST_METHOD(Class__Engine__AnimBlueprintGeneratedClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_UCC1, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, BakedStateMachines, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, TargetSkeleton, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, AnimNotifies, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, OrderedSavedPoseIndicesMap, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, UnknownData_4T1V, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, SyncGroupNames, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, EvaluateGraphExposedInputs, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphAssetPlayerInformation, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBlueprintGeneratedClass, GraphBlendOptions, 0x04A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBlueprintGeneratedClass, 0x04F8);
		}

		// class UAnimBoneCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionCodec)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionCodec, description, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionCodec, 0x0040);
		}

		// class UAnimBoneCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimBoneCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimBoneCompressionSettings, Codecs, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimBoneCompressionSettings, 0x0040);
		}

		// class UAnimClassData : public UObject
		TEST_METHOD(Class__Engine__AnimClassData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_8N7X, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, BakedStateMachines, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, TargetSkeleton, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNotifies, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, OrderedSavedPoseIndicesMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctions, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimBlueprintFunctionData, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, AnimNodeProperties, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_VK9V, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimGraphNodeProperties, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_E81M, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, LinkedAnimLayerNodeProperties, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_Y0I7, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, PreUpdateNodeProperties, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_MXCU, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, DynamicResetNodeProperties, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_AXWQ, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, StateMachineNodeProperties, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_372Q, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, InitializationNodeProperties, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, UnknownData_VEUP, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphNameAssetPlayers, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, SyncGroupNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, EvaluateGraphExposedInputs, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimClassData, GraphBlendOptions, 0x0220);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassData, 0x0270);
		}

		// class UAnimClassInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimClassInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimClassInterface, 0x0030);
		}

		// class UAnimSequenceBase : public UAnimationAsset
		TEST_METHOD(Class__Engine__AnimSequenceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, Notifies, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, SequenceLength, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RateScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequenceBase, RawCurveData, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequenceBase, 0x00B0);
		}

		// class UAnimCompositeBase : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimCompositeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompositeBase, 0x00B0);
		}

		// class UAnimComposite : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimComposite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimComposite, AnimationTrack, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimComposite, 0x00C0);
		}

		// class UAnimCompress : public UAnimBoneCompressionCodec
		TEST_METHOD(Class__Engine__AnimCompress)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_EALN, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, TranslationCompressionFormat, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, RotationCompressionFormat, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, ScaleCompressionFormat, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress, UnknownData_7L9Q, 0x0047);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress, 0x0048);
		}

		// class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_BitwiseCompressOnly)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_BitwiseCompressOnly, 0x0048);
		}

		// class UAnimCompress_LeastDestructive : public UAnimCompress_BitwiseCompressOnly
		TEST_METHOD(Class__Engine__AnimCompress_LeastDestructive)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_LeastDestructive, 0x0048);
		}

		// class UAnimCompress_RemoveLinearKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveLinearKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxPosDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxAngleDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxScaleDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MaxEffectorDiff, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, MinEffectorDiff, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, EffectorDiffSocket, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, ParentKeyScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveLinearKeys, UnknownData_8EMY, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveLinearKeys, 0x0068);
		}

		// class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
		TEST_METHOD(Class__Engine__AnimCompress_PerTrackCompression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxZeroingThreshold, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxPosDiffBitwise, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxAngleDiffBitwise, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxScaleDiffBitwise, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedRotationFormats, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedTranslationFormats, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, AllowedScaleFormats, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_PPGG, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ResampledFramerate, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MinKeysForResampling, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_FF5L, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TrackHeightBias, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisor, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ParentingDivisorExponent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_QTMU, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, RotationErrorSourceRatio, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, TranslationErrorSourceRatio, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, ScaleErrorSourceRatio, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, MaxErrorPerTrackRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, PerturbationProbeSize, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_PerTrackCompression, UnknownData_3GSK, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_PerTrackCompression, 0x00E0);
		}

		// class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveEverySecondKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, MinKeys, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveEverySecondKey, UnknownData_23PG, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveEverySecondKey, 0x0050);
		}

		// class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
		TEST_METHOD(Class__Engine__AnimCompress_RemoveTrivialKeys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxPosDiff, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxAngleDiff, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, MaxScaleDiff, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCompress_RemoveTrivialKeys, UnknownData_G13Z, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCompress_RemoveTrivialKeys, 0x0058);
		}

		// class UAnimCurveCompressionCodec : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec, 0x0030);
		}

		// class UAnimCurveCompressionCodec_CompressedRichCurve : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_CompressedRichCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_CompressedRichCurve, 0x0030);
		}

		// class UAnimCurveCompressionCodec_UniformIndexable : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformIndexable)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformIndexable, 0x0030);
		}

		// class UAnimCurveCompressionCodec_UniformlySampled : public UAnimCurveCompressionCodec
		TEST_METHOD(Class__Engine__AnimCurveCompressionCodec_UniformlySampled)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionCodec_UniformlySampled, 0x0030);
		}

		// class UAnimCurveCompressionSettings : public UObject
		TEST_METHOD(Class__Engine__AnimCurveCompressionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimCurveCompressionSettings, Codec, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimCurveCompressionSettings, 0x0038);
		}

		// class UAnimLayerInterface : public UInterface
		TEST_METHOD(Class__Engine__AnimLayerInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimLayerInterface, 0x0030);
		}

		// class UAnimMetaData : public UObject
		TEST_METHOD(Class__Engine__AnimMetaData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMetaData, 0x0030);
		}

		// class UAnimMontage : public UAnimCompositeBase
		TEST_METHOD(Class__Engine__AnimMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendIn, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendInTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_0W0Y, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOut, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, blendOutTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BlendOutTriggerTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncGroup, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SyncSlotIndex, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, MarkerData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, CompositeSections, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, SlotAnimTracks, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPoints, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionTranslation, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableRootMotionRotation, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, bEnableAutoBlendOut, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, RootMotionRootLock, 0x0183);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_8Z4M, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointMarkers, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, BranchingPointStateNotifyIndices, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurve, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, TimeStretchCurveName, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimMontage, UnknownData_WQ9J, 0x01DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimMontage, 0x01E0);
		}

		// class UAnimNotify_PauseClothingSimulation : public UanimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PauseClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PauseClothingSimulation, 0x0040);
		}

		// class UAnimNotify_PlayParticleEffect : public UanimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlayParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, PSTemplate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, LocationOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, RotationOffset, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, scale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_NTF0, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, UnknownData_DJEL, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlayParticleEffect, SocketName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlayParticleEffect, 0x0090);
		}

		// class UAnimNotify_PlaySound : public UanimNotify
		TEST_METHOD(Class__Engine__AnimNotify_PlaySound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, Sound, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, VolumeMultiplier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, PitchMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, UnknownData_15C0, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotify_PlaySound, AttachName, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_PlaySound, 0x0060);
		}

		// class UAnimNotify_ResetClothingSimulation : public UanimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetClothingSimulation, 0x0040);
		}

		// class UAnimNotify_ResetDynamics : public UanimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResetDynamics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResetDynamics, 0x0040);
		}

		// class UAnimNotify_ResumeClothingSimulation : public UanimNotify
		TEST_METHOD(Class__Engine__AnimNotify_ResumeClothingSimulation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotify_ResumeClothingSimulation, 0x0040);
		}

		// class UAnimNotifyState_DisableRootMotion : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_DisableRootMotion)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_DisableRootMotion, 0x0038);
		}

		// class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_TimedParticleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, SocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, LocationOffset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, RotationOffset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, bDestroyAtEnd, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_TimedParticleEffect, UnknownData_B745, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_TimedParticleEffect, 0x0068);
		}

		// class UAnimNotifyState_Trail : public UAnimNotifyState
		TEST_METHOD(Class__Engine__AnimNotifyState_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, PSTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, FirstSocketName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, SecondSocketName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleMode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_ZSIU, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, WidthScaleCurve, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimNotifyState_Trail, UnknownData_YSKE, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimNotifyState_Trail, 0x0070);
		}

		// class UAnimSequence : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, NumFrames, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_VKDI, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, TrackToSkeletonMapTable, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_6A0J, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, BoneCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, CurveCompressionSettings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_ZMDD, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AdditiveAnimType, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseType, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_89VR, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefPoseSeq, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RefFrameIndex, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RetargetSource, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, Interpolation, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bEnableRootMotion, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, RootMotionRootLock, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bForceRootLock, 0x017B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bUseNormalizedRootMotionScale, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, bRootMotionSettingsCopiedFromMontage, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_R1YD, 0x017E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, AuthoredSyncMarkers, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSequence, UnknownData_IPU5, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSequence, 0x01A8);
		}

		// class UAnimSet : public UObject
		TEST_METHOD(Class__Engine__AnimSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_416Z, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, TrackBoneNames, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, LinkupCache, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BoneUseAnimTranslation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceUseMeshTranslation, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UseTranslationBoneNames, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, ForceMeshTranslationBoneNames, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, PreviewSkelMeshName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, BestRatioSkelMeshName, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSet, UnknownData_60CJ, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSet, 0x0100);
		}

		// class UAnimSingleNodeInstance : public UanimInstance
		TEST_METHOD(Class__Engine__AnimSingleNodeInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, CurrentAsset, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, PostEvaluateAnimEvent, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, UnknownData_42MV, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimSingleNodeInstance, UnknownData_AG75, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimSingleNodeInstance, 0x0290);
		}

		// class UAnimStateMachineTypes : public UObject
		TEST_METHOD(Class__Engine__AnimStateMachineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStateMachineTypes, 0x0030);
		}

		// class UAnimStreamable : public UAnimSequenceBase
		TEST_METHOD(Class__Engine__AnimStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, NumFrames, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, Interpolation, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_FIOS, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RetargetSource, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_694E, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, BoneCompressionSettings, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, CurveCompressionSettings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bEnableRootMotion, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, RootMotionRootLock, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bForceRootLock, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, bUseNormalizedRootMotionScale, 0x00EB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAnimStreamable, UnknownData_KVNN, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAnimStreamable, 0x00F0);
		}

		// class UArrowComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__ArrowComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_5OWN, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ArrowSize, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, ScreenSize, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArrowComponent, UnknownData_PT7Q, 0x0435);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArrowComponent, 0x0440);
		}

		// class UAssetExportTask : public UObject
		TEST_METHOD(Class__Engine__AssetExportTask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Object, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Exporter, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, FileName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bSelected, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bReplaceIdentical, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bPrompt, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bAutomated, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bUseFileArchive, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, bWriteEmptyFiles, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, UnknownData_92P1, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, IgnoreObjectList, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Options, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetExportTask, Errors, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetExportTask, 0x0080);
		}

		// class UAssetManager : public UObject
		TEST_METHOD(Class__Engine__AssetManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_KPWE, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, ObjectReferenceList, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsGlobalAsyncScanEnvironment, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldGuessTypeAndName, 0x02D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldUseSynchronousLoad, 0x02DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsLoadingFromPakFiles, 0x02DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bShouldAcquireMissingChunksOnLoad, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bOnlyCookProductionAssets, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsBulkScanning, 0x02DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsPrimaryAssetDirectoryCurrent, 0x02DF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIsManagementDatabaseCurrent, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bUpdateManagementDatabaseAfterScan, 0x02E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, bIncludeOnlyOnDiskAssets, 0x02E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_8ADI, 0x02E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, NumberOfSpawnedNotifications, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManager, UnknownData_2QZD, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManager, 0x0440);
		}

		// class UAssetManagerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AssetManagerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypesToScan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, DirectoriesToExclude, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetRules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, CustomPrimaryAssetRules, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bOnlyCookProductionAssets, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldManagerDetermineTypeAndName, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldGuessTypeAndNameInEditor, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, bShouldAcquireMissingChunksOnLoad, 0x008B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, UnknownData_XZEW, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetIdRedirects, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, PrimaryAssetTypeRedirects, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, AssetPathRedirects, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetManagerSettings, MetaDataTagsForAssetRegistry, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetManagerSettings, 0x0110);
		}

		// class UAssetMappingTable : public UObject
		TEST_METHOD(Class__Engine__AssetMappingTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAssetMappingTable, MappedAssets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAssetMappingTable, 0x0040);
		}

		// class UAsyncActionHandleSaveGame : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionHandleSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, Completed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, UnknownData_SAY5, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionHandleSaveGame, SaveGameObject, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionHandleSaveGame, 0x0070);
		}

		// class UAsyncActionLoadPrimaryAssetBase : public UBlueprintAsyncActionBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetBase, UnknownData_HPJL, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetBase, 0x0080);
		}

		// class UAsyncActionLoadPrimaryAsset : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAsset, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAsset, 0x0090);
		}

		// class UAsyncActionLoadPrimaryAssetClass : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClass, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClass, 0x0090);
		}

		// class UAsyncActionLoadPrimaryAssetList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetList, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetList, 0x0090);
		}

		// class UAsyncActionLoadPrimaryAssetClassList : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionLoadPrimaryAssetClassList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionLoadPrimaryAssetClassList, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionLoadPrimaryAssetClassList, 0x0090);
		}

		// class UAsyncActionChangePrimaryAssetBundles : public UAsyncActionLoadPrimaryAssetBase
		TEST_METHOD(Class__Engine__AsyncActionChangePrimaryAssetBundles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAsyncActionChangePrimaryAssetBundles, Completed, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAsyncActionChangePrimaryAssetBundles, 0x0090);
		}

		// class UAtmosphericFog : public UInfo
		TEST_METHOD(Class__Engine__AtmosphericFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFog, AtmosphericFogComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFog, 0x0238);
		}

		// class UAtmosphericFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__AtmosphericFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunMultiplier, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, FogMultiplier, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityMultiplier, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DensityOffset, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, AltitudeScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DistanceOffset, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, GroundOffset, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, StartDistance, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, SunDiscScale, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultBrightness, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, DefaultLightColor, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_H5NA, 0x0241);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, PrecomputeParams, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, TransmittanceTexture, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, IrradianceTexture, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAtmosphericFogComponent, UnknownData_HPL5, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAtmosphericFogComponent, 0x0320);
		}

		// class UAudioSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__AudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundClassName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultMediaSoundClassName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultSoundConcurrencyName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultBaseSoundMix, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSoundClass, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MasterSubmix, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, ReverbSubmix, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, EQSubmix, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, VoiPSampleRate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_O2QH, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DefaultReverbSendLevel, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MaximumConcurrentStreams, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMinPitchScale, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, GlobalMaxPitchScale, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_97RJ, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, QualityLevels, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_2DMN, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, NumStoppingSources, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, PanningMethod, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, MonoChannelUpmixMethod, 0x0179);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_3CWV, 0x017A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, DialogueFilenameFormat, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioSettings, UnknownData_I54M, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioSettings, 0x0198);
		}

		// class UAudioVolume : public Uvolume
		TEST_METHOD(Class__Engine__AudioVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioVolume, priority, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioVolume, UnknownData_V9UN, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioVolume, settings, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioVolume, AmbientZoneSettings, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudioVolume, UnknownData_1LJ1, 0x02B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudioVolume, 0x02B8);
		}

		// class UAutoDestroySubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__AutoDestroySubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, UnknownData_CRSL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutoDestroySubsystem, ActorsToPoll, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoDestroySubsystem, 0x0050);
		}

		// class UAutomationTestSettings : public UObject
		TEST_METHOD(Class__Engine__AutomationTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EngineTestModules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorTestModules, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AutomationTestmap, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, EditorPerformanceTestMaps, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, AssetsToOpen, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BuildPromotionTest, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, MaterialEditorPromotionTest, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ParticleEditorPromotionTest, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, BlueprintEditorPromotionTest, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, TestLevelFolders, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ExternalTools, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, ImportExportTestDefinitions, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, LaunchOnSettings, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAutomationTestSettings, DefaultScreenshotResolution, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutomationTestSettings, 0x0338);
		}

		// class UAvoidanceManager : public UObject
		TEST_METHOD(Class__Engine__AvoidanceManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_07X6, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DefaultTimeToLive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterAvoid, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, LockTimeAfterClean, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, DeltaTimeToPredict, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, ArtificialRadiusExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, TestHeightDifference, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, HeightCheckMargin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAvoidanceManager, UnknownData_DAK4, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAvoidanceManager, 0x00E8);
		}

		// class UBandwidthTestActor : public Uactor
		TEST_METHOD(Class__Engine__BandwidthTestActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBandwidthTestActor, BandwidthGenerator, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBandwidthTestActor, 0x0250);
		}

		// class UGPUCullingInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
		TEST_METHOD(Class__Engine__GPUCullingInstancedStaticMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGPUCullingInstancedStaticMeshComponent, UnknownData_B3ER, 0x05A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGPUCullingInstancedStaticMeshComponent, 0x05B0);
		}

		// class UBillboardComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__BillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, Sprite, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_YB6D, 0x0431);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, ScreenSize, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, U, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UL, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, V, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, VL, 0x0444);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBillboardComponent, UnknownData_BPDH, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBillboardComponent, 0x0450);
		}

		// class UBlendableInterface : public UInterface
		TEST_METHOD(Class__Engine__BlendableInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendableInterface, 0x0030);
		}

		// class USkeleton : public UObject
		TEST_METHOD(Class__Engine__Skeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_4R5L, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BoneTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, RefLocalPoses, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_0XVH, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBoneGuid, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, VirtualBones, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, Sockets, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_8TK4, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SmartNames, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_5BXD, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, BlendProfiles, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, SlotGroups, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, UnknownData_QEI3, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeleton, AssetUserData, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeleton, 0x0370);
		}

		// class UBlendProfile : public UObject
		TEST_METHOD(Class__Engine__BlendProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, UnknownData_JZE5, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, OwningSkeleton, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlendProfile, ProfileEntries, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlendProfile, 0x0050);
		}

		// class UBlockingVolume : public Uvolume
		TEST_METHOD(Class__Engine__BlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlockingVolume, 0x0268);
		}

		// class UBlueprintExtension : public UObject
		TEST_METHOD(Class__Engine__BlueprintExtension)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintExtension, 0x0030);
		}

		// class UBlueprintMapLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintMapLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintMapLibrary, 0x0030);
		}

		// class UBlueprintPathsLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPathsLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPathsLibrary, 0x0030);
		}

		// class UPlatformGameInstance : public UgameInstance
		TEST_METHOD(Class__Engine__PlatformGameInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillDeactivateDelegate, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasReactivatedDelegate, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillEnterBackgroundDelegate, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationHasEnteredForegroundDelegate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationWillTerminateDelegate, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationShouldUnloadResourcesDelegate, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedStartupArgumentsDelegate, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForRemoteNotificationsDelegate, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationRegisteredForUserNotificationsDelegate, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationFailedToRegisterForRemoteNotificationsDelegate, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedRemoteNotificationDelegate, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedLocalNotificationDelegate, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformGameInstance, ApplicationReceivedScreenOrientationChangedNotificationDelegate, 0x02B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformGameInstance, 0x02C0);
		}

		// class UBlueprintPlatformLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintPlatformLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintPlatformLibrary, 0x0030);
		}

		// class UBlueprintSetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__BlueprintSetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlueprintSetLibrary, 0x0030);
		}

		// class UBodySetup : public UObject
		TEST_METHOD(Class__Engine__BodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, AggGeom, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BoneName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysicsType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_KHGF, 0x0096);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionReponse, 0x0097);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, CollisionTraceFlag, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_RNP3, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, PhysMaterial, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, WalkableSlopeOverride, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_HW29, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, DefaultInstance, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_MXOI, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, BuildScale3D, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBodySetup, UnknownData_BDIX, 0x025C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBodySetup, 0x0268);
		}

		// class UBoneMaskFilter : public UObject
		TEST_METHOD(Class__Engine__BoneMaskFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoneMaskFilter, BlendPoses, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoneMaskFilter, 0x0040);
		}

		// class UBookmarkBase : public UObject
		TEST_METHOD(Class__Engine__BookmarkBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookmarkBase, 0x0030);
		}

		// class UBookMark : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, location, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark, HiddenLevels, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark, 0x0058);
		}

		// class UBookMark2D : public UBookmarkBase
		TEST_METHOD(Class__Engine__BookMark2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, Zoom2D, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, location, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBookMark2D, UnknownData_ZNXT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBookMark2D, 0x0040);
		}

		// class UReflectionCapture : public Uactor
		TEST_METHOD(Class__Engine__ReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCapture, CaptureComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCapture, 0x0238);
		}

		// class UBoxReflectionCapture : public UReflectionCapture
		TEST_METHOD(Class__Engine__BoxReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCapture, 0x0238);
		}

		// class UReflectionCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffsetComponent, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, ReflectionSourceType, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_P0H8, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, Cubemap, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, SourceCubemapAngle, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, brightness, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, contributionFactor, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, CaptureOffset, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, MapBuildDataId, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReflectionCaptureComponent, UnknownData_7ITL, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReflectionCaptureComponent, 0x028C);
		}

		// class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__BoxReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, UnknownData_3841, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewInfluenceBox, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBoxReflectionCaptureComponent, PreviewCaptureBox, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBoxReflectionCaptureComponent, 0x02A0);
		}

		// class UBreakpoint : public UObject
		TEST_METHOD(Class__Engine__Breakpoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_B7LW, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, Node, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreakpoint, UnknownData_XJYA, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreakpoint, 0x0048);
		}

		// class UBrushBuilder : public UObject
		TEST_METHOD(Class__Engine__BrushBuilder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, BitmapFilename, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, ToolTip, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_7TOI, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Vertices, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Polys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, Layer, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushBuilder, UnknownData_PX2S, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushBuilder, 0x0088);
		}

		// class UBrushComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__BrushComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, brush, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, BrushBodySetup, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrushComponent, UnknownData_953K, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushComponent, 0x0440);
		}

		// class UBrushShape : public Ubrush
		TEST_METHOD(Class__Engine__BrushShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrushShape, 0x0268);
		}

		// class UButtonStyleAsset : public UObject
		TEST_METHOD(Class__Engine__ButtonStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonStyleAsset, ButtonStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonStyleAsset, 0x02D8);
		}

		// class UCameraAnim : public UObject
		TEST_METHOD(Class__Engine__CameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, CameraInterpGroup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, AnimLength, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BoundingBox, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_DA0N, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BaseFOV, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, BasePostProcessBlendWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnim, UnknownData_5U2B, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnim, 0x05B0);
		}

		// class UCameraAnimInst : public UObject
		TEST_METHOD(Class__Engine__CameraAnimInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, CamAnim, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, InterpGroupInst, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_7XFH, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, playRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_I4KN, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveTrack, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, MoveInst, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, PlaySpace, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraAnimInst, UnknownData_J887, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraAnimInst, 0x0120);
		}

		// class UCameraBlockingVolume : public Uvolume
		TEST_METHOD(Class__Engine__CameraBlockingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraBlockingVolume, 0x0268);
		}

		// class UCameraModifier : public UObject
		TEST_METHOD(Class__Engine__CameraModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_01M0, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, priority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_GW5E, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, CameraOwner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaInTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, AlphaOutTime, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, Alpha, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier, UnknownData_4UAM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier, 0x0050);
		}

		// class UCameraModifier_CameraShake : public UCameraModifier
		TEST_METHOD(Class__Engine__CameraModifier_CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ActiveShakes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, ExpiredPooledShakesMap, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, SplitScreenShakeScale, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraModifier_CameraShake, UnknownData_XCUE, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraModifier_CameraShake, 0x00B8);
		}

		// class UCameraShake : public UObject
		TEST_METHOD(Class__Engine__CameraShake)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_4UDV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationDuration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendInTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillationBlendOutTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RotOscillation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, LocOscillation, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, FOVOscillation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimPlayRate, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendInTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimBlendOutTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, RandomAnimSegmentDuration, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, Anim, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_7RZE, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, CameraOwner, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_MT78, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, ShakeScale, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, OscillatorTimeRemaining, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, AnimInst, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShake, UnknownData_1G6F, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShake, 0x0170);
		}

		// class UCameraShakeSourceActor : public Uactor
		TEST_METHOD(Class__Engine__CameraShakeSourceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceActor, CameraShakeSourceComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceActor, 0x0238);
		}

		// class UCameraShakeSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__CameraShakeSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, Attenuation, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_C3WE, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, InnerAttenuationRadius, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, OuterAttenuationRadius, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_IC4E, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, CameraShake, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, bAutoPlay, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCameraShakeSourceComponent, UnknownData_57GM, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCameraShakeSourceComponent, 0x0230);
		}

		// class UCanvas : public UObject
		TEST_METHOD(Class__Engine__Canvas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, OrgY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipX, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ClipY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DrawColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_X3TG, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, sizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, sizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ColorModulate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, DefaultTexture, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, GradientTexture0, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, ReporterGraph, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvas, UnknownData_KGTZ, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvas, 0x02D0);
		}

		// class UTextureRenderTarget : public Utexture
		TEST_METHOD(Class__Engine__TextureRenderTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, TargetGamma, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget, UnknownData_XTL2, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget, 0x00C8);
		}

		// class UTextureRenderTarget2D : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, sizeX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, sizeY, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, ClearColor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressX, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, AddressY, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, RenderTargetFormat, 0x00E3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsSamplerFilter, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressU, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, MipsAddressV, 0x00E7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, OverrideFormat, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTarget2D, UnknownData_TDYL, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTarget2D, 0x00F0);
		}

		// class UCanvasRenderTarget2D : public UTextureRenderTarget2D
		TEST_METHOD(Class__Engine__CanvasRenderTarget2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, OnCanvasRenderTargetUpdate, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, world, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, bShouldClearRenderTargetOnReceiveUpdate, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCanvasRenderTarget2D, UnknownData_J6IX, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCanvasRenderTarget2D, 0x0110);
		}

		// class UChaosPhysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__ChaosPhysicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Friction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, StaticFriction, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, Restitution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, LinearEtherDrag, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, AngularEtherDrag, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingLinearVelocityThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, SleepingAngularVelocityThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosPhysicalMaterial, UnknownData_DKGK, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosPhysicalMaterial, 0x0050);
		}

		// class UCheckBoxStyleAsset : public UObject
		TEST_METHOD(Class__Engine__CheckBoxStyleAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCheckBoxStyleAsset, CheckBoxStyle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCheckBoxStyleAsset, 0x0610);
		}

		// class UChildActorComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ChildActorComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorClass, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, ChildActorTemplate, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, bAlwaysRecreateOnRegister, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildActorComponent, UnknownData_NGBN, 0x0229);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildActorComponent, 0x0250);
		}

		// class UChildConnection : public UNetConnection
		TEST_METHOD(Class__Engine__ChildConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChildConnection, Parent, 0x1A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChildConnection, 0x1A50);
		}

		// class UPlatformInterfaceBase : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceBase, AllDelegates, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceBase, 0x0040);
		}

		// class UCloudStorageBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__CloudStorageBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, LocalCloudFiles, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCloudStorageBase, UnknownData_J6WT, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCloudStorageBase, 0x0058);
		}

		// class UCollisionProfile : public UDeveloperSettings
		TEST_METHOD(Class__Engine__CollisionProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, Profiles, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, DefaultChannelResponses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, EditProfiles, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, ProfileRedirects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, CollisionChannelRedirects, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCollisionProfile, UnknownData_WIHZ, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCollisionProfile, 0x0168);
		}

		// class UDBDTimeUtilities : public UGameInstanceSubsystem
		TEST_METHOD(Class__TimeUtilities__DBDTimeUtilities)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDBDTimeUtilities, UnknownData_DQE1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDBDTimeUtilities, 0x0060);
		}

		// class UComponentDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__ComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UComponentDelegateBinding, ComponentDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UComponentDelegateBinding, 0x0040);
		}

		// class UCurveTable : public UObject
		TEST_METHOD(Class__Engine__CurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveTable, UnknownData_G275, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveTable, 0x00A8);
		}

		// class UCompositeCurveTable : public UCurveTable
		TEST_METHOD(Class__Engine__CompositeCurveTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, ParentTables, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, OldParentTables, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeCurveTable, UnknownData_XGO5, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeCurveTable, 0x00D0);
		}

		// class UDataTable : public UObject
		TEST_METHOD(Class__Engine__DataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, RowStruct, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_5KO1, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_8JII, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, ImportKeyField, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDataTable, UnknownData_WZ18, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTable, 0x00D0);
		}

		// class UCompositeDataTable : public UDataTable
		TEST_METHOD(Class__Engine__CompositeDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, ParentTables, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, OldParentTables, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCompositeDataTable, UnknownData_59DN, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCompositeDataTable, 0x00F8);
		}

		// class UConsole : public UObject
		TEST_METHOD(Class__Engine__Console)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_ZHT4, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, ConsoleTargetPlayer, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_Black, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, DefaultTexture_White, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_7034, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, HistoryBuffer, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConsole, UnknownData_ZZ9S, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConsole, 0x0140);
		}

		// class UControlChannel : public Uchannel
		TEST_METHOD(Class__Engine__ControlChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UControlChannel, UnknownData_QPXL, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UControlChannel, 0x0090);
		}

		// class UStreamingSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__StreamingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_3Q17, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMultiplier, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, TimeLimitExceededMinTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, MinBulkDataSizeForAsyncLoading, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_UZJ7, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, AsyncLoadingTimeLimit, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityAsyncLoadingExtraTime, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingActorsUpdateTimeLimit, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, PriorityLevelStreamingActorsUpdateExtraTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsRegistrationGranularity, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingUnregisterComponentsTimeLimit, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, LevelStreamingComponentsUnregistrationGranularity, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStreamingSettings, UnknownData_PPAY, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStreamingSettings, 0x0080);
		}

		// class UGarbageCollectionSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__GarbageCollectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, TimeBetweenPurgingPendingKillObjects, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, UnknownData_1U4I, 0x004E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MinGCClusterSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, NumRetriesBeforeForcingGC, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsNotConsideredByGC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, SizeOfPermanentObjectPool, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInGame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGarbageCollectionSettings, MaxObjectsInEditor, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGarbageCollectionSettings, 0x0068);
		}

		// class UCullDistanceVolume : public Uvolume
		TEST_METHOD(Class__Engine__CullDistanceVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullDistanceVolume, CullDistances, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCullDistanceVolume, UnknownData_GKMG, 0x0279);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCullDistanceVolume, 0x0280);
		}

		// class UCurveBase : public UObject
		TEST_METHOD(Class__Engine__CurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveBase, UnknownData_9M4V, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveBase, 0x0038);
		}

		// class UCurveEdPresetCurve : public UObject
		TEST_METHOD(Class__Engine__CurveEdPresetCurve)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveEdPresetCurve, 0x0030);
		}

		// class UCurveFloat : public UCurveBase
		TEST_METHOD(Class__Engine__CurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, FloatCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, bIsEventCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveFloat, UnknownData_OIVF, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveFloat, 0x00C0);
		}

		// class UCurveLinearColor : public UCurveBase
		TEST_METHOD(Class__Engine__CurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, FloatCurves, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustHue, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustSaturation, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightness, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustBrightnessCurve, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustVibrance, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMinAlpha, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, AdjustMaxAlpha, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColor, UnknownData_1DPZ, 0x0254);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColor, 0x0258);
		}

		// class UTexture2D : public Utexture
		TEST_METHOD(Class__Engine__Texture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, LevelIndex, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, FirstResourceMemMip, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressX, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, AddressY, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_0LLQ, 0x00CB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, ImportedSize, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2D, UnknownData_KOEJ, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2D, 0x00F0);
		}

		// class UBP_DBDGameInstance_C : public UDBDGameInstance
		TEST_METHOD(BlueprintGeneratedClass__BP_DBDGameInstance__BP_DBDGameInstance_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DBDGameInstance_C, 0x0988);
		}

		// class UCurveLinearColorAtlas : public UTexture2D
		TEST_METHOD(Class__Engine__CurveLinearColorAtlas)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, TextureSize, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, UnknownData_BBLU, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveLinearColorAtlas, GradientCurves, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveLinearColorAtlas, 0x0108);
		}

		// class UCurveSourceInterface : public UInterface
		TEST_METHOD(Class__Engine__CurveSourceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveSourceInterface, 0x0030);
		}

		// class UCurveVector : public UCurveBase
		TEST_METHOD(Class__Engine__CurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCurveVector, FloatCurves, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCurveVector, 0x01B8);
		}

		// class UDamageType : public UObject
		TEST_METHOD(Class__Engine__DamageType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_WE15, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageImpulse, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleImpulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DestructibleDamageSpreadScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, DamageFalloff, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDamageType, UnknownData_0MSX, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDamageType, 0x0048);
		}

		// class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DataTableFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDataTableFunctionLibrary, 0x0030);
		}

		// class UDebugCameraControllerSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__DebugCameraControllerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDebugCameraControllerSettings, CycleViewModes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraControllerSettings, 0x0058);
		}

		// class UDebugCameraHUD : public UHud
		TEST_METHOD(Class__Engine__DebugCameraHUD)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugCameraHUD, 0x0320);
		}

		// class UDebugDrawService : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__DebugDrawService)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDebugDrawService, 0x0030);
		}

		// class UDecalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__DecalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, decalMaterial, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, SortOrder, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeScreenSize, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeStartDelay, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeDuration, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, FadeInStartDelay, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_776P, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, decalSize, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDecalComponent, UnknownData_EBE0, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDecalComponent, 0x0250);
		}

		// class UPhysicsVolume : public Uvolume
		TEST_METHOD(Class__Engine__PhysicsVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsVolume, TerminalVelocity, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsVolume, priority, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsVolume, FluidFriction, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsVolume, UnknownData_25TG, 0x0275);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsVolume, 0x0278);
		}

		// class UDefaultPhysicsVolume : public UPhysicsVolume
		TEST_METHOD(Class__Engine__DefaultPhysicsVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDefaultPhysicsVolume, 0x0278);
		}

		// class UDemoNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__DemoNetConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetConnection, UnknownData_Q53F, 0x1A48);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetConnection, 0x1AB8);
		}

		// class UDemoNetDriver : public UNetDriver
		TEST_METHOD(Class__Engine__DemoNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_XISY, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, RollbackNetStartupActors, 0x0858);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_Y1D0, 0x08A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, CheckpointSaveMaxMSPerFrame, 0x0C6C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_ROR9, 0x0C70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, MulticastRecordOptions, 0x0CA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_9TOD, 0x0CB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, bIsLocalReplay, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_OCSY, 0x0D01);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, SpectatorControllers, 0x0D08);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDemoNetDriver, UnknownData_HM1Z, 0x0D18);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoNetDriver, 0x1138);
		}

		// class UPendingNetGame : public UObject
		TEST_METHOD(Class__Engine__PendingNetGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_I257, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, NetDriver, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, DemoNetDriver, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPendingNetGame, UnknownData_OLJF, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPendingNetGame, 0x00C8);
		}

		// class UDemoPendingNetGame : public UPendingNetGame
		TEST_METHOD(Class__Engine__DemoPendingNetGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDemoPendingNetGame, 0x00C8);
		}

		// class UDestructibleInterface : public UInterface
		TEST_METHOD(Class__Engine__DestructibleInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestructibleInterface, 0x0030);
		}

		// class UTextureLODSettings : public UObject
		TEST_METHOD(Class__Engine__TextureLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLODSettings, TextureLODGroups, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLODSettings, 0x0040);
		}

		// class UDeviceProfile : public UTextureLODSettings
		TEST_METHOD(Class__Engine__DeviceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, DeviceType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, BaseProfileName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, Parent, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_BVQ8, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, CVars, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfile, UnknownData_T52D, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfile, 0x00A0);
		}

		// class UDeviceProfileManager : public UObject
		TEST_METHOD(Class__Engine__DeviceProfileManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, Profiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeviceProfileManager, UnknownData_BIJY, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeviceProfileManager, 0x00B8);
		}

		// class UDialogueSoundWaveProxy : public USoundBase
		TEST_METHOD(Class__Engine__DialogueSoundWaveProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueSoundWaveProxy, UnknownData_31UI, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueSoundWaveProxy, 0x0180);
		}

		// class UDialogueVoice : public UObject
		TEST_METHOD(Class__Engine__DialogueVoice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Gender, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, Plurality, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_64PA, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, LocalizationGUID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueVoice, UnknownData_K55P, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueVoice, 0x0048);
		}

		// class UDialogueWave : public UObject
		TEST_METHOD(Class__Engine__DialogueWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, UnknownData_ZM4K, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SpokenText, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, SubtitleOverride, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, ContextMappings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDialogueWave, LocalizationGUID, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDialogueWave, 0x0078);
		}

		// class Ulight : public Uactor
		TEST_METHOD(Class__Engine__light)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulight, LightComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulight, UnknownData_ZNWJ, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ulight, 0x0240);
		}

		// class UDirectionalLight : public Ulight
		TEST_METHOD(Class__Engine__DirectionalLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLight, 0x0240);
		}

		// class UDirectionalLightComponent : public ULightComponent
		TEST_METHOD(Class__Engine__DirectionalLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_4CLR, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionMaskDarkness, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OcclusionDepthRange, 0x0394);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightShaftOverrideDirection, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WholeSceneDynamicShadowRadius, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceMovableLight, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowDistanceStationaryLight, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DynamicShadowCascades, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeDistributionExponent, 0x03B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, CascadeTransitionFraction, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowDistanceFadeoutFraction, 0x03BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_RI9D, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowCascadeCount, 0x03C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FarShadowDistance, 0x03C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, DistanceFieldShadowDistance, 0x03CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceAngle, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightSourceSoftAngle, 0x03D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, TraceDistance, 0x03D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, LightmassSettings, 0x03DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_M63Z, 0x03ED);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, OriginOfCachedShadowMap, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, WidthOfCachedShadowMap, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, FractionOfOriginHeightToShiftBounds, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ModulatedShadowColor, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, ShadowAmount, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_2GMD, 0x040D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, AtmosphereSunLightIndex, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDirectionalLightComponent, UnknownData_H2TF, 0x0414);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDirectionalLightComponent, 0x0420);
		}

		// class UDistribution : public UObject
		TEST_METHOD(Class__Engine__Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistribution, UnknownData_5ZOZ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistribution, 0x0038);
		}

		// class UDistributionFloat : public UDistribution
		TEST_METHOD(Class__Engine__DistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloat, UnknownData_RXDH, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloat, 0x0040);
		}

		// class UDistributionFloatConstant : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, Constant, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstant, UnknownData_RA8N, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstant, 0x0048);
		}

		// class UDistributionFloatConstantCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatConstantCurve, ConstantCurve, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatConstantCurve, 0x0058);
		}

		// class UDistributionFloatParameterBase : public UDistributionFloatConstant
		TEST_METHOD(Class__Engine__DistributionFloatParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, parameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinInput, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxInput, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MinOutput, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, MaxOutput, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, ParamMode, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatParameterBase, UnknownData_N464, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParameterBase, 0x0068);
		}

		// class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
		TEST_METHOD(Class__Engine__DistributionFloatParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatParticleParameter, 0x0068);
		}

		// class UDistributionFloatUniform : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, min, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniform, max, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniform, 0x0048);
		}

		// class UDistributionFloatUniformCurve : public UDistributionFloat
		TEST_METHOD(Class__Engine__DistributionFloatUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionFloatUniformCurve, ConstantCurve, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionFloatUniformCurve, 0x0058);
		}

		// class UDistributionVector : public UDistribution
		TEST_METHOD(Class__Engine__DistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVector, UnknownData_Y3XZ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVector, 0x0040);
		}

		// class UDistributionVectorConstant : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, Constant, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_R95N, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, LockedAxes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstant, UnknownData_FD3D, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstant, 0x0058);
		}

		// class UDistributionVectorConstantCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorConstantCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, ConstantCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_Y7AV, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, LockedAxes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorConstantCurve, UnknownData_ENVT, 0x005D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorConstantCurve, 0x0060);
		}

		// class UDistributionVectorParameterBase : public UDistributionVectorConstant
		TEST_METHOD(Class__Engine__DistributionVectorParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, parameterName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxInput, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MinOutput, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, MaxOutput, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, ParamModes, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorParameterBase, UnknownData_8YX9, 0x0097);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParameterBase, 0x0098);
		}

		// class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
		TEST_METHOD(Class__Engine__DistributionVectorParticleParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorParticleParameter, 0x0098);
		}

		// class UDistributionVectorUniform : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, max, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, min, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_11LE, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, LockedAxes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, MirrorFlags, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniform, UnknownData_6E09, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniform, 0x0068);
		}

		// class UDistributionVectorUniformCurve : public UDistributionVector
		TEST_METHOD(Class__Engine__DistributionVectorUniformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, ConstantCurve, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_JK9E, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, LockedAxes, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, MirrorFlags, 0x005E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_5JR9, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDistributionVectorUniformCurve, UnknownData_MM3P, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDistributionVectorUniformCurve, 0x0068);
		}

		// class UDocumentationActor : public Uactor
		TEST_METHOD(Class__Engine__DocumentationActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDocumentationActor, UnknownData_OZBC, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDocumentationActor, 0x0238);
		}

		// class UDPICustomScalingRule : public UObject
		TEST_METHOD(Class__Engine__DPICustomScalingRule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDPICustomScalingRule, 0x0030);
		}

		// class UDrawFrustumComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__DrawFrustumComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_75PG, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAngle, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumAspectRatio, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumStartDist, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, FrustumEndDist, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_WTOO, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, texture, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDrawFrustumComponent, UnknownData_95WO, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawFrustumComponent, 0x0450);
		}

		// class UDrawSphereComponent : public USphereComponent
		TEST_METHOD(Class__Engine__DrawSphereComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDrawSphereComponent, 0x0450);
		}

		// class UEdGraph : public UObject
		TEST_METHOD(Class__Engine__EdGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Schema, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, Nodes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraph, UnknownData_X5CD, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraph, 0x0068);
		}

		// class UGraphNodeContextMenuContext : public UObject
		TEST_METHOD(Class__Engine__GraphNodeContextMenuContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Blueprint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Graph, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, Node, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_85ZH, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, bIsDebugging, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGraphNodeContextMenuContext, UnknownData_18EN, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGraphNodeContextMenuContext, 0x0058);
		}

		// class UEdGraphNode : public UObject
		TEST_METHOD(Class__Engine__EdGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_ZMAO, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, DeprecatedPins, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodePosY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeWidth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeHeight, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, AdvancedPinDisplay, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, EnabledState, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_SLMQ, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_40MQ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeComment, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, UnknownData_E7P8, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, ErrorMsg, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode, NodeGuid, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode, 0x00A0);
		}

		// class UEdGraphNode_Documentation : public UEdGraphNode
		TEST_METHOD(Class__Engine__EdGraphNode_Documentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Link, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphNode_Documentation, Excerpt, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphNode_Documentation, 0x00C0);
		}

		// class UEdGraphPin_Deprecated : public UObject
		TEST_METHOD(Class__Engine__EdGraphPin_Deprecated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinToolTip, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, direction, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, UnknownData_L75Y, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, PinType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultValue, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, AutogeneratedDefaultValue, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultObject, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, DefaultTextValue, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, LinkedTo, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, SubPins, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ParentPin, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEdGraphPin_Deprecated, ReferencePassThroughConnection, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphPin_Deprecated, 0x0138);
		}

		// class UEdGraphSchema : public UObject
		TEST_METHOD(Class__Engine__EdGraphSchema)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEdGraphSchema, 0x0030);
		}

		// class UEmitter : public Uactor
		TEST_METHOD(Class__Engine__Emitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitter, ParticleSystemComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitter, UnknownData_YU5S, 0x0239);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitter, OnParticleSpawn, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitter, OnParticleBurst, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitter, OnParticleDeath, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitter, OnParticleCollide, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmitter, 0x0280);
		}

		// class UEmitterCameraLensEffectBase : public UEmitter
		TEST_METHOD(Class__Engine__EmitterCameraLensEffectBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, PS_CameraEffect, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, PS_CameraEffectNonExtremeContent, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, BaseCamera, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, UnknownData_25NA, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, RelativeTransform, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, BaseFOV, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, UnknownData_KFAS, 0x02D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, EmittersToTreatAsSame, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, DistFromCamera, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEmitterCameraLensEffectBase, UnknownData_MCDM, 0x02EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEmitterCameraLensEffectBase, 0x02F0);
		}

		// class UViewModeUtils : public UObject
		TEST_METHOD(Class__Engine__ViewModeUtils)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UViewModeUtils, 0x0030);
		}

		// class UEngineBaseTypes : public UObject
		TEST_METHOD(Class__Engine__EngineBaseTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineBaseTypes, 0x0030);
		}

		// class UEngineHandlerComponentFactory : public UHandlerComponentFactory
		TEST_METHOD(Class__Engine__EngineHandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineHandlerComponentFactory, 0x0030);
		}

		// class ULocalMessage : public UObject
		TEST_METHOD(Class__Engine__LocalMessage)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocalMessage, 0x0030);
		}

		// class UEngineMessage : public ULocalMessage
		TEST_METHOD(Class__Engine__EngineMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, FailedPlaceMessage, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, MaxedOutMessage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, EnteredMessage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, LeftMessage, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, GlobalNameChange, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, SpecEnteredMessage, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewPlayerMessage, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEngineMessage, NewSpecMessage, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineMessage, 0x00B0);
		}

		// class UEngineTypes : public UObject
		TEST_METHOD(Class__Engine__EngineTypes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEngineTypes, 0x0030);
		}

		// class UExponentialHeightFog : public UInfo
		TEST_METHOD(Class__Engine__ExponentialHeightFog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFog, component, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFog, UnknownData_MTNV, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFog, 0x0240);
		}

		// class UExponentialHeightFogComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ExponentialHeightFogComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogDensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogHeightFalloff, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, SecondFogData, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogInscatteringColor, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_UBVV, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemap, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringColorCubemapAngle, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, InscatteringTextureTint, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FullyDirectionalInscatteringColorDistance, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, NonDirectionalInscatteringColorDistance, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringExponent, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringStartDistance, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DirectionalInscatteringColor, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogMaxOpacity, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, StartDistance, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogCutoffDistance, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bEnableVolumetricFog, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_E724, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogScatteringDistribution, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogAlbedo, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogEmissive, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogExtinctionScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogDistance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, VolumetricFogStaticLightingScatteringIntensity, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, bOverrideLightColorsWithFogInscatteringColors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_DCY1, 0x02A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, FogGradient, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DistanceUntilFlatFog, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, DistanceUntilNoFog, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExponentialHeightFogComponent, UnknownData_1OYU, 0x02C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExponentialHeightFogComponent, 0x02D0);
		}

		// class UExporter : public UObject
		TEST_METHOD(Class__Engine__Exporter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, SupportedClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportRootScope, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, FormatDescription, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, PreferredFormatIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, TextIndent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_D5ZJ, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, ExportTask, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExporter, UnknownData_7JQW, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExporter, 0x0080);
		}

		// class UFloatingPawnMovement : public UPawnMovementComponent
		TEST_METHOD(Class__Engine__FloatingPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, MaxSpeed, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Acceleration, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, Deceleration, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, TurningBoost, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFloatingPawnMovement, UnknownData_O5N5, 0x0159);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFloatingPawnMovement, 0x0160);
		}

		// class UFont : public UObject
		TEST_METHOD(Class__Engine__Font)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_DHHO, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, FontCacheType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_ZTBD, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, characters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Textures, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, IsRemapped, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, EmScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Ascent, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Descent, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Leading, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, Kerning, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ImportOptions, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, NumCharacters, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_YW4L, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, MaxCharHeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, ScalingFactor, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontSize, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, LegacyFontName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_U0PF, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, CompositeFont, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFont, UnknownData_IXMF, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFont, 0x01E0);
		}

		// class UFontFace : public UObject
		TEST_METHOD(Class__Engine__FontFace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_GWFQ, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, SourceFilename, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, Hinting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LoadingPolicy, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, LayoutMethod, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontFace, UnknownData_7POM, 0x004B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontFace, 0x0060);
		}

		// class UFontImportOptions : public UObject
		TEST_METHOD(Class__Engine__FontImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFontImportOptions, data, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFontImportOptions, 0x00E0);
		}

		// class UForceFeedbackAttenuation : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackAttenuation, Attenuation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackAttenuation, 0x00E0);
		}

		// class UForceFeedbackComponent : public USceneComponent
		TEST_METHOD(Class__Engine__ForceFeedbackComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, ForceFeedbackEffect, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_AJJT, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, IntensityMultiplier, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationSettings, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, AttenuationOverrides, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, OnForceFeedbackFinished, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackComponent, UnknownData_1VRF, 0x02E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackComponent, 0x02F0);
		}

		// class UForceFeedbackEffect : public UObject
		TEST_METHOD(Class__Engine__ForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, ChannelDetails, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, duration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UForceFeedbackEffect, UnknownData_03ST, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UForceFeedbackEffect, 0x0048);
		}

		// class UGameNetworkManager : public UInfo
		TEST_METHOD(Class__Engine__GameNetworkManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, BadPacketLossThreshold, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, SeverePacketLossThreshold, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, BadPingThreshold, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, SeverePingThreshold, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, AdjustedNetSpeed, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, LastNetSpeedUpdateTime, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, TotalNetBandwidth, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MinDynamicBandwidth, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MaxDynamicBandwidth, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, UnknownData_2P1J, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, StandbyRxCheatTime, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, StandbyTxCheatTime, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, PercentMissingForRxStandby, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, PercentMissingForTxStandby, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, PercentForBadPing, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, JoinInProgressStandbyWaitTime, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MoveRepSize, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MAXPOSITIONERRORSQUARED, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MAXNEARZEROVELOCITYSQUARED, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, CLIENTADJUSTUPDATECOST, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MAXCLIENTUPDATEINTERVAL, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MaxClientForcedUpdateDuration, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ServerForcedUpdateHitchThreshold, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ServerForcedUpdateHitchCooldown, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MaxMoveDeltaTime, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MaxClientSmoothingDeltaTime, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetSendMoveDeltaTime, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetSendMoveDeltaTimeThrottled, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetSendMoveDeltaTimeStationary, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetSendMoveThrottleAtNetSpeed, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetSendMoveThrottleOverPlayerCount, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientAuthorativePosition, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, UnknownData_UX06, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientErrorUpdateRateLimit, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetCamUpdateDeltaTime, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, ClientNetCamUpdatePositionLimit, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, bMovementTimeDiscrepancyDetection, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, bMovementTimeDiscrepancyResolution, 0x02BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, UnknownData_TG25, 0x02BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MovementTimeDiscrepancyMaxTimeMargin, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MovementTimeDiscrepancyMinTimeMargin, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MovementTimeDiscrepancyResolutionRate, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, MovementTimeDiscrepancyDriftAllowance, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, bMovementTimeDiscrepancyForceCorrectionsDuringResolution, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, bUseDistanceBasedRelevancy, 0x02D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGameNetworkManager, UnknownData_V6KW, 0x02D2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameNetworkManager, 0x02E0);
		}

		// class UGameplayStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__GameplayStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGameplayStatics, 0x0030);
		}

		// class USpotLight : public Ulight
		TEST_METHOD(Class__Engine__SpotLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpotLight, SpotLightComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpotLight, 0x0248);
		}

		// class UGeneratedMeshAreaLight : public USpotLight
		TEST_METHOD(Class__Engine__GeneratedMeshAreaLight)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratedMeshAreaLight, 0x0248);
		}

		// class UHapticFeedbackEffect_Base : public UObject
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Base)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Base, 0x0030);
		}

		// class UHapticFeedbackEffect_Buffer : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Buffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, Amplitudes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, SampleRate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Buffer, UnknownData_IP7L, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Buffer, 0x0070);
		}

		// class UHapticFeedbackEffect_Curve : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_Curve, HapticDetails, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_Curve, 0x0140);
		}

		// class UHapticFeedbackEffect_SoundWave : public UHapticFeedbackEffect_Base
		TEST_METHOD(Class__Engine__HapticFeedbackEffect_SoundWave)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, SoundWave, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHapticFeedbackEffect_SoundWave, UnknownData_PP5H, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHapticFeedbackEffect_SoundWave, 0x0068);
		}

		// class UHealthSnapshotBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__HealthSnapshotBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealthSnapshotBlueprintLibrary, 0x0030);
		}

		// class UHLODProxy : public UObject
		TEST_METHOD(Class__Engine__HLODProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHLODProxy, ProxyMeshes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHLODProxy, 0x0040);
		}

		// class UImportanceSamplingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__ImportanceSamplingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportanceSamplingLibrary, 0x0030);
		}

		// class UImportantToggleSettingInterface : public UInterface
		TEST_METHOD(Class__Engine__ImportantToggleSettingInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UImportantToggleSettingInterface, 0x0030);
		}

		// class UInGameAdManager : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__InGameAdManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, UnknownData_3OOT, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClickedBannerDelegates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInGameAdManager, ClosedAdDelegates, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInGameAdManager, 0x0068);
		}

		// class UInheritableComponentHandler : public UObject
		TEST_METHOD(Class__Engine__InheritableComponentHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, Records, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInheritableComponentHandler, UnnecessaryComponents, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInheritableComponentHandler, 0x0050);
		}

		// class UInputDelegateBinding : public UDynamicBlueprintBinding
		TEST_METHOD(Class__Engine__InputDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputDelegateBinding, 0x0030);
		}

		// class UInputActionDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputActionDelegateBinding, InputActionDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputActionDelegateBinding, 0x0040);
		}

		// class UInputAxisDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisDelegateBinding, InputAxisDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisDelegateBinding, 0x0040);
		}

		// class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputAxisKeyDelegateBinding, InputAxisKeyDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputAxisKeyDelegateBinding, 0x0040);
		}

		// class UInputComponent : public UactorComponent
		TEST_METHOD(Class__Engine__InputComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_VS0X, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, CachedKeyToActionInfo, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputComponent, UnknownData_5YLF, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputComponent, 0x0140);
		}

		// class UInputKeyDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputKeyDelegateBinding, InputKeyDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputKeyDelegateBinding, 0x0040);
		}

		// class UInputSettings : public UObject
		TEST_METHOD(Class__Engine__InputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisConfig, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, bUseAutocorrect, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_GL94, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectOS, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectCultures, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ExcludedAutocorrectDeviceModels, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseCaptureMode, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultViewportMouseLockMode, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_510M, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, FOVScale, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DoubleClickTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, UnknownData_YW01, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ActionMappings, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, AxisMappings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, SpeechMappings, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, DefaultTouchInterface, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKey, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputSettings, ConsoleKeys, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputSettings, 0x0108);
		}

		// class UInputTouchDelegateBinding : public UInputDelegateBinding
		TEST_METHOD(Class__Engine__InputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputTouchDelegateBinding, InputTouchDelegateBindings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputTouchDelegateBinding, 0x0040);
		}

		// class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
		TEST_METHOD(Class__Engine__InputVectorAxisDelegateBinding)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputVectorAxisDelegateBinding, 0x0040);
		}

		// class UInterface_AssetUserData : public UInterface
		TEST_METHOD(Class__Engine__Interface_AssetUserData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_AssetUserData, 0x0030);
		}

		// class UInterface_CollisionDataProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_CollisionDataProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_CollisionDataProvider, 0x0030);
		}

		// class UInterface_PostProcessVolume : public UInterface
		TEST_METHOD(Class__Engine__Interface_PostProcessVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PostProcessVolume, 0x0030);
		}

		// class UInterface_PreviewMeshProvider : public UInterface
		TEST_METHOD(Class__Engine__Interface_PreviewMeshProvider)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterface_PreviewMeshProvider, 0x0030);
		}

		// class UInterpCurveEdSetup : public UObject
		TEST_METHOD(Class__Engine__InterpCurveEdSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, Tabs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, ActiveTab, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpCurveEdSetup, UnknownData_SNJW, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpCurveEdSetup, 0x0048);
		}

		// class UInterpData : public UObject
		TEST_METHOD(Class__Engine__InterpData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, PathBuildTime, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, InterpGroups, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CurveEdSetup, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, EdSectionEnd, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, UnknownData_KP2Q, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, CachedDirectorGroup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpData, AllEventNames, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpData, 0x0078);
		}

		// class UInterpFilter : public UObject
		TEST_METHOD(Class__Engine__InterpFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpFilter, Caption, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter, 0x0040);
		}

		// class UInterpFilter_Classes : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Classes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Classes, 0x0040);
		}

		// class UInterpFilter_Custom : public UInterpFilter
		TEST_METHOD(Class__Engine__InterpFilter_Custom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpFilter_Custom, 0x0040);
		}

		// class UInterpGroup : public UObject
		TEST_METHOD(Class__Engine__InterpGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_JP2P, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, InterpTracks, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, groupName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, GroupColor, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroup, UnknownData_T3VU, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroup, 0x0060);
		}

		// class UInterpGroupCamera : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupCamera)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CameraAnimInst, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, CompressTolerance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupCamera, UnknownData_MVSV, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupCamera, 0x0070);
		}

		// class UInterpGroupDirector : public UInterpGroup
		TEST_METHOD(Class__Engine__InterpGroupDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupDirector, 0x0060);
		}

		// class UInterpGroupInst : public UObject
		TEST_METHOD(Class__Engine__InterpGroupInst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, Group, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, GroupActor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpGroupInst, TrackInst, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInst, 0x0050);
		}

		// class UInterpGroupInstCamera : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstCamera)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstCamera, 0x0050);
		}

		// class UInterpGroupInstDirector : public UInterpGroupInst
		TEST_METHOD(Class__Engine__InterpGroupInstDirector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpGroupInstDirector, 0x0050);
		}

		// class UInterpToMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__InterpToMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, duration, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_INRO, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bSweep, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, TeleportType, 0x0101);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, BehaviourType, 0x0102);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, bCheckIfStillInWorld, 0x0103);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_ITC1, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToReverse, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnInterpToStop, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitBeginDelegate, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnWaitEndDelegate, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, OnResetDelegate, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationTimeStep, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, MaxSimulationIterations, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, ControlPoints, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpToMovementComponent, UnknownData_JPMW, 0x0170);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpToMovementComponent, 0x0198);
		}

		// class UInterpTrackAnimControl : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, SlotName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_HIFC, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, AnimSeqs, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackAnimControl, UnknownData_E4FQ, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAnimControl, 0x00C0);
		}

		// class UInterpTrackAudioMaster : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackAudioMaster, 0x0098);
		}

		// class UInterpTrackBoolProp : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, BoolTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, propertyName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackBoolProp, UnknownData_4UVP, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackBoolProp, 0x0098);
		}

		// class UInterpTrackColorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, propertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackColorProp, UnknownData_6U36, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorProp, 0x00A8);
		}

		// class UInterpTrackColorScale : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackColorScale, 0x0098);
		}

		// class UInterpTrackDirector : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, CutTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackDirector, UnknownData_A6IZ, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackDirector, 0x0090);
		}

		// class UInterpTrackEvent : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, EventTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackEvent, UnknownData_TQDZ, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackEvent, 0x0090);
		}

		// class UInterpTrackFade : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_NBFE, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, FadeColor, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFade, UnknownData_R8MD, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFade, 0x00B0);
		}

		// class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimBlueprintClass, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, AnimClass, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, ParamName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatAnimBPParam, UnknownData_QPRI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatAnimBPParam, 0x00B8);
		}

		// class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, TargetMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, ParamName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatMaterialParam, UnknownData_2BSX, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatMaterialParam, 0x00B8);
		}

		// class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, ParamName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatParticleParam, UnknownData_0F6V, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatParticleParam, 0x00A8);
		}

		// class UInterpTrackFloatProp : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, propertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackFloatProp, UnknownData_5DWL, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackFloatProp, 0x00A8);
		}

		// class UInterpTrackInstAnimControl : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAnimControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstAnimControl, UnknownData_APTX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAnimControl, 0x0038);
		}

		// class UInterpTrackInstAudioMaster : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstAudioMaster)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstAudioMaster, 0x0030);
		}

		// class UInterpTrackInstProperty : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, InterpProperty, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstProperty, PropertyOuterObjectInst, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstProperty, 0x0058);
		}

		// class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstBoolProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_1PC2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, ResetBool, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstBoolProp, UnknownData_PR77, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstBoolProp, 0x0070);
		}

		// class UInterpTrackInstColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_IZPP, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, ResetColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstColorProp, UnknownData_HLLA, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorProp, 0x0068);
		}

		// class UInterpTrackInstColorScale : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstColorScale)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstColorScale, 0x0030);
		}

		// class UInterpTrackInstDirector : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstDirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstDirector, OldViewTarget, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstDirector, 0x0038);
		}

		// class UInterpTrackInstEvent : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstEvent, UnknownData_FUIO, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstEvent, 0x0038);
		}

		// class UInterpTrackInstFade : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFade, 0x0030);
		}

		// class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatAnimBPParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, AnimScriptInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, ResetFloat, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatAnimBPParam, UnknownData_63RR, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatAnimBPParam, 0x0048);
		}

		// class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, MaterialInstances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, ResetFloats, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, PrimitiveMaterialRefs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatMaterialParam, InstancedTrack, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatMaterialParam, 0x0068);
		}

		// class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstFloatParticleParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, ResetFloat, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatParticleParam, UnknownData_EUPA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatParticleParam, 0x0038);
		}

		// class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstFloatProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_ZRNU, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, ResetFloat, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstFloatProp, UnknownData_1VRP, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstFloatProp, 0x0068);
		}

		// class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, UnknownData_SBZL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstLinearColorProp, ResetColor, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstLinearColorProp, 0x0070);
		}

		// class UInterpTrackInstMove : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetLocation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstMove, ResetRotation, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstMove, 0x0048);
		}

		// class UInterpTrackInstParticleReplay : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstParticleReplay, UnknownData_P3X5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstParticleReplay, 0x0038);
		}

		// class UInterpTrackInstSlomo : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSlomo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, OldTimeDilation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSlomo, UnknownData_ITVG, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSlomo, 0x0038);
		}

		// class UInterpTrackInstSound : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, LastUpdatePosition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, UnknownData_WPSN, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstSound, PlayAudioComp, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstSound, 0x0040);
		}

		// class UInterpTrackInstToggle : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, Action, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_34DU, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, LastUpdatePosition, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstToggle, UnknownData_MWNN, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstToggle, 0x0040);
		}

		// class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, MaterialInstances, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, ResetVectors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, PrimitiveMaterialRefs, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorMaterialParam, InstancedTrack, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorMaterialParam, 0x0068);
		}

		// class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
		TEST_METHOD(Class__Engine__InterpTrackInstVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_GYXZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, ResetVector, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVectorProp, UnknownData_UXR5, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVectorProp, 0x0070);
		}

		// class UInterpTrackInstVisibility : public UInterpTrackInst
		TEST_METHOD(Class__Engine__InterpTrackInstVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, Action, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, UnknownData_EGBD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackInstVisibility, LastUpdatePosition, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackInstVisibility, 0x0038);
		}

		// class UInterpTrackLinearColorBase : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackLinearColorBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, LinearColorTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, CurveTension, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorBase, UnknownData_VMCV, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorBase, 0x0098);
		}

		// class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
		TEST_METHOD(Class__Engine__InterpTrackLinearColorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, propertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackLinearColorProp, UnknownData_8IOK, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackLinearColorProp, 0x00A8);
		}

		// class UInterpTrackMove : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, PosTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, EulerTrack, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookupTrack, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LookAtGroupName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, LinCurveTension, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, AngCurveTension, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_S7C6, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, RotMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMove, UnknownData_L9YU, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMove, 0x00D8);
		}

		// class UInterpTrackMoveAxis : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackMoveAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, MoveAxis, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, UnknownData_UIZF, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackMoveAxis, LookupTrack, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackMoveAxis, 0x00B0);
		}

		// class UInterpTrackParticleReplay : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackParticleReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackParticleReplay, TrackKeys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackParticleReplay, 0x0088);
		}

		// class UInterpTrackSlomo : public UInterpTrackFloatBase
		TEST_METHOD(Class__Engine__InterpTrackSlomo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSlomo, 0x0098);
		}

		// class UInterpTrackSound : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, Sounds, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackSound, UnknownData_7T6D, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackSound, 0x00B0);
		}

		// class UInterpTrackToggle : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackToggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, ToggleTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackToggle, UnknownData_KTXF, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackToggle, 0x0090);
		}

		// class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorMaterialParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, TargetMaterials, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, ParamName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorMaterialParam, UnknownData_QP0I, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorMaterialParam, 0x00B8);
		}

		// class UInterpTrackVectorProp : public UInterpTrackVectorBase
		TEST_METHOD(Class__Engine__InterpTrackVectorProp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, propertyName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVectorProp, UnknownData_IMMB, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVectorProp, 0x00A8);
		}

		// class UInterpTrackVisibility : public UInterpTrack
		TEST_METHOD(Class__Engine__InterpTrackVisibility)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, VisibilityTrack, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInterpTrackVisibility, UnknownData_5OO1, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInterpTrackVisibility, 0x0090);
		}

		// class UIntSerialization : public UObject
		TEST_METHOD(Class__Engine__IntSerialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt16Variable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_VZXS, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt32Variable, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt64Variable, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt8Variable, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_HK5M, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt16Variable, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_XYLE, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt64Variable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnsignedInt8Variable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, UnknownData_5UNW, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIntSerialization, SignedInt32Variable, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIntSerialization, 0x0058);
		}

		// class UKillZVolume : public UPhysicsVolume
		TEST_METHOD(Class__Engine__KillZVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillZVolume, 0x0278);
		}

		// class UKismetArrayLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetArrayLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetArrayLibrary, 0x0030);
		}

		// class UChaosDestructionListener : public USceneComponent
		TEST_METHOD(Class__GeometryCollectionEngine__ChaosDestructionListener)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_HR24, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, CollisionEventRequestSettings, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, BreakingEventRequestSettings, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, TrailingEventRequestSettings, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_R8NG, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, ChaosSolverActors, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, GeometryCollectionActors, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnCollisionEvents, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnBreakingEvents, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, OnTrailingEvents, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChaosDestructionListener, UnknownData_HLM4, 0x0330);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChaosDestructionListener, 0x0440);
		}

		// class UKismetGuidLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetGuidLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetGuidLibrary, 0x0030);
		}

		// class UKismetInputLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInputLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInputLibrary, 0x0030);
		}

		// class UGeometryCollectionActor : public Uactor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionActor, GeometryCollectionComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionActor, GeometryCollectionDebugDrawComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionActor, 0x0240);
		}

		// class UGeometryCollectionCache : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, RecordedData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, SupportedCollection, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionCache, CompatibleCollectionState, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionCache, 0x0058);
		}

		// class UKismetInternationalizationLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetInternationalizationLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetInternationalizationLibrary, 0x0030);
		}

		// class UGeometryCollectionComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_VXDD, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ChaosSolverActor, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_D6H9, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, RestCollection, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitializationFields, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, Simulating, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_FIR2, 0x0581);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ObjectType, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, EnableClustering, 0x0589);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_CEP3, 0x058A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterGroupIndex, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, MaxClusterLevel, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_1FQB, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DamageThreshold, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, ClusterConnectionType, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_2WJ1, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionGroup, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CollisionSampleFraction, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, LinearEtherDrag, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, AngularEtherDrag, 0x05B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_QSN5, 0x05BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, physicalMaterial, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialVelocityType, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_OXBG, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialLinearVelocity, 0x05CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, InitialAngularVelocity, 0x05D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_92C9, 0x05E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CacheParameters, 0x05E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsStateChange, 0x0638);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, NotifyGeometryCollectionPhysicsLoadingStateChange, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_WVYE, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosBreakEvent, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DesiredCacheTime, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, CachePlayback, 0x0684);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_QMB9, 0x0685);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, OnChaosPhysicsCollision, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyBreaks, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, bNotifyCollisions, 0x0699);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_ROII, 0x069A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, DummyBodySetup, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionComponent, UnknownData_WJFR, 0x0888);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionComponent, 0x08B0);
		}

		// class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMaterialLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMaterialLibrary, 0x0030);
		}

		// class UKismetMathLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetMathLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetMathLibrary, 0x0030);
		}

		// class UGeometryCollectionDebugDrawActor : public Uactor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, WarningMessage, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, UnknownData_ZV2I, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, SelectedRigidBody, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bDebugDrawWholeCollection, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bDebugDrawHierarchy, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bDebugDrawClustering, 0x0252);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, HideGeometry, 0x0253);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyId, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyCollision, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bCollisionAtOrigin, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyTransform, 0x0257);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyInertia, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyVelocity, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyForce, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowRigidBodyInfos, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowTransformIndex, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowTransform, 0x025D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowParent, 0x025E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowLevel, 0x025F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowConnectivityEdges, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowGeometryIndex, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowGeometryTransform, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowBoundingBox, 0x0263);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowFaces, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowFaceIndices, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowFaceNormals, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowSingleFace, 0x0267);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, SingleFaceIndex, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowVertices, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowVertexIndices, 0x026D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bShowVertexNormals, 0x026E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bUseActiveVisualization, 0x026F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, PointThickness, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, LineThickness, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, bTextShadow, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, UnknownData_NIX0, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, TextScale, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, NormalScale, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, AxisScale, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, ArrowScale, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyIdColor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyTransformScale, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyCollisionColor, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyInertiaColor, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyVelocityColor, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyForceColor, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, RigidBodyInfoColor, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, TransformIndexColor, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, TransformScale, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, LevelColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, ParentColor, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, ConnectivityEdgeThickness, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, GeometryIndexColor, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, GeometryTransformScale, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, BoundingBoxColor, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, FaceColor, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, FaceIndexColor, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, FaceNormalColor, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, SingleFaceColor, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, VertexColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, VertexIndexColor, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, VertexNormalColor, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, UnknownData_DXUV, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, SpriteComponent, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawActor, UnknownData_S8CH, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawActor, 0x0318);
		}

		// class UGeometryCollectionDebugDrawComponent : public UactorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionDebugDrawComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionDebugDrawActor, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, GeometryCollectionRenderLevelSetActor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionDebugDrawComponent, UnknownData_DNHA, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionDebugDrawComponent, 0x00D0);
		}

		// class UGeometryCollection : public UObject
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_NGYI, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Materials, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, ImplicitType, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_GT4O, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinLevelSetResolution, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxLevelSetResolution, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinClusterLevelSetResolution, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaxClusterLevelSetResolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionObjectReductionPercentage, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, bMassAsDensity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_M2VX, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MinimumMassClamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, CollisionParticlesFraction, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, MaximumCollisionParticles, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_ACYT, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, SizeSpecificData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, EnableRemovePiecesOnFracture, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_386I, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, RemoveOnFractureMaterials, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, PersistentGuid, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, StateGuid, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, BoneSelectedMaterialIndex, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollection, UnknownData_R0M9, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollection, 0x00D8);
		}

		// class UGeometryCollectionRenderLevelSetActor : public Uactor
		TEST_METHOD(Class__GeometryCollectionEngine__GeometryCollectionRenderLevelSetActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, TargetVolumeTexture, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, RayMarchMaterial, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, SurfaceTolerance, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, Isovalue, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, enabled, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, RenderVolumeBoundingBox, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCollectionRenderLevelSetActor, UnknownData_8RSL, 0x024A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCollectionRenderLevelSetActor, 0x02D0);
		}

		// class USkeletalMeshSimulationComponent : public UactorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__SkeletalMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_GE18, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, physicalMaterial, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ChaosSolverActor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OverridePhysicsAsset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bSimulating, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, bNotifyCollisions, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ObjectType, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_ULO9, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, Density, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinMass, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxMass, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_JN3K, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeParticlesPerUnitArea, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMinNumParticles, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, ImplicitShapeMaxNumParticles, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MinLevelSetResolution, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, MaxLevelSetResolution, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, CollisionGroup, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialVelocityType, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_Z6OD, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialLinearVelocity, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, InitialAngularVelocity, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, OnChaosPhysicsCollision, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimulationComponent, UnknownData_E8YR, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimulationComponent, 0x0140);
		}

		// class UStaticMeshSimulationComponent : public UactorComponent
		TEST_METHOD(Class__GeometryCollectionEngine__StaticMeshSimulationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_PHOZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Simulating, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, bNotifyCollisions, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ObjectType, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_WTH3, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, Mass, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, CollisionType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ImplicitType, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_8KR3, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MinLevelSetResolution, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, MaxLevelSetResolution, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialVelocityType, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_0T0L, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialLinearVelocity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, InitialAngularVelocity, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, DamageThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_3DK8, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, physicalMaterial, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, ChaosSolverActor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, OnChaosPhysicsCollision, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_7575, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, SimulatedComponents, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSimulationComponent, UnknownData_RV49, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSimulationComponent, 0x0140);
		}

		// class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetNodeHelperLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetNodeHelperLibrary, 0x0030);
		}

		// class UKismetRenderingLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetRenderingLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetRenderingLibrary, 0x0030);
		}

		// class UKismetStringLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringLibrary, 0x0030);
		}

		// class UKismetStringTableLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetStringTableLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetStringTableLibrary, 0x0030);
		}

		// class UKismetSystemLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetSystemLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetSystemLibrary, 0x0030);
		}

		// class UBP_GrabCursor_C : public UCoreCursor
		TEST_METHOD(WidgetBlueprintGeneratedClass__BP_GrabCursor__BP_GrabCursor_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_GrabCursor_C, image_18, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GrabCursor_C, 0x0270);
		}

		// class UKismetTextLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__KismetTextLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKismetTextLibrary, 0x0030);
		}

		// class ULayer : public UObject
		TEST_METHOD(Class__Engine__Layer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, LayerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, UnknownData_GFBX, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULayer, ActorStats, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULayer, 0x0050);
		}

		// class ULevelPartitionInterface : public UInterface
		TEST_METHOD(Class__Engine__LevelPartitionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelPartitionInterface, 0x0030);
		}

		// class Ulevel : public UObject
		TEST_METHOD(Class__Engine__level)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, UnknownData_F10E, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, OwningWorld, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, Model, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, ModelComponents, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, ActorCluster, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, NumTextureStreamingUnbuiltComponents, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, NumTextureStreamingDirtyResources, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, LevelScriptActor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, NavListStart, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, NavListEnd, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, NavDataChunks, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, LightmapTotalSize, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, ShadowmapTotalSize, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, StaticNavigableGeometry, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, StreamingTextureGuids, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, UnknownData_1LKL, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, LevelBuildDataId, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, MapBuildData, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, LightBuildLevelOffset, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, UnknownData_2LOM, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, WorldSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, UnknownData_QJOF, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, AssetUserData, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, UnknownData_EHTN, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::Ulevel, DestroyedReplicatedStaticActors, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Ulevel, 0x0288);
		}

		// class ULevelActorContainer : public UObject
		TEST_METHOD(Class__Engine__LevelActorContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelActorContainer, actors, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelActorContainer, 0x0040);
		}

		// class ULevelBounds : public Uactor
		TEST_METHOD(Class__Engine__LevelBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelBounds, BoxComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelBounds, bAutoUpdateBounds, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelBounds, UnknownData_H1QS, 0x0239);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelBounds, 0x0240);
		}

		// class ULevelScriptBlueprint : public UBlueprint
		TEST_METHOD(Class__Engine__LevelScriptBlueprint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelScriptBlueprint, 0x00A8);
		}

		// class ULevelStreaming : public UObject
		TEST_METHOD(Class__Engine__LevelStreaming)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, WorldAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PackageNameToLoad, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_5BGJ, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LODPackageNames, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_SZ7O, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelTransform, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelLODIndex, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, StreamingPriority, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_WU7P, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LevelColor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_XHCZ, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, EditorStreamingVolumes, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, MinTimeBetweenVolumeUnloadRequests, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_QGNL, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelLoaded, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelUnloaded, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelShown, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, OnLevelHidden, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, LoadedLevel, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, PendingUnloadLevel, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreaming, UnknownData_AZA8, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreaming, 0x0160);
		}

		// class ULevelStreamingAlwaysLoaded : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingAlwaysLoaded)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingAlwaysLoaded, 0x0160);
		}

		// class ULevelStreamingDynamic : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingDynamic, UnknownData_7300, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingDynamic, 0x0170);
		}

		// class ULevelStreamingPersistent : public ULevelStreaming
		TEST_METHOD(Class__Engine__LevelStreamingPersistent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingPersistent, 0x0160);
		}

		// class ULevelStreamingVolume : public Uvolume
		TEST_METHOD(Class__Engine__LevelStreamingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingVolume, StreamingLevelNames, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingVolume, UnknownData_X4J3, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingVolume, StreamingUsage, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelStreamingVolume, UnknownData_Z8Q3, 0x027D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelStreamingVolume, 0x0280);
		}

		// class ULightmappedSurfaceCollection : public UObject
		TEST_METHOD(Class__Engine__LightmappedSurfaceCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, SourceModel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmappedSurfaceCollection, Surfaces, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmappedSurfaceCollection, 0x0048);
		}

		// class ULightMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapTexture2D, UnknownData_QJVG, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapTexture2D, 0x00F8);
		}

		// class ULightmassCharacterIndirectDetailVolume : public Uvolume
		TEST_METHOD(Class__Engine__LightmassCharacterIndirectDetailVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassCharacterIndirectDetailVolume, 0x0268);
		}

		// class ULightmassImportanceVolume : public Uvolume
		TEST_METHOD(Class__Engine__LightmassImportanceVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassImportanceVolume, 0x0268);
		}

		// class ULightmassPortal : public Uactor
		TEST_METHOD(Class__Engine__LightmassPortal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortal, PortalComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortal, 0x0238);
		}

		// class ULightmassPortalComponent : public USceneComponent
		TEST_METHOD(Class__Engine__LightmassPortalComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, PreviewBox, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPortalComponent, UnknownData_T9PI, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPortalComponent, 0x0220);
		}

		// class ULightmassPrimitiveSettingsObject : public UObject
		TEST_METHOD(Class__Engine__LightmassPrimitiveSettingsObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightmassPrimitiveSettingsObject, LightmassSettings, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightmassPrimitiveSettingsObject, 0x0048);
		}

		// class ULineBatchComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__LineBatchComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_3MNL, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULineBatchComponent, UnknownData_OZ6Y, 0x0430);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULineBatchComponent, 0x0470);
		}

		// class ULODActor : public Uactor
		TEST_METHOD(Class__Engine__LODActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, StaticMeshComponent, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, ImpostersStaticMeshComponents, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, Proxy, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, key, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, LODDrawDistance, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, LODLevel, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, UnknownData_6CAC, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, SubActors, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, CachedNumHLODLevels, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULODActor, UnknownData_T7BS, 0x02B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULODActor, 0x02C0);
		}

		// class UMapBuildDataRegistry : public UObject
		TEST_METHOD(Class__Engine__MapBuildDataRegistry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, LevelLightingQuality, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMapBuildDataRegistry, UnknownData_P38W, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMapBuildDataRegistry, 0x0240);
		}

		// class UMATERIAL : public UmaterialInterface
		TEST_METHOD(Class__Engine__MATERIAL)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, PhysMaterial, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, PhysMaterialMask, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, PhysicalMaterialMap, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, Metallic, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_LNSM, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, Specular, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_D5EE, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, Anisotropy, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_J6UT, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, normal, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_CVSY, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, Tangent, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_PXBQ, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, EmissiveColor, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_GBBW, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, CustomColourNoDepth, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_ZSSE, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, MaterialDomain, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, BlendMode, 0x01A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, DecalBlendMode, 0x01A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, MaterialDecalResponse, 0x01A7);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, ShadingModel, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_0USN, 0x01AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_N9A9, 0x01AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, ShadingModels, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_8VN1, 0x01B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, OpacityMaskClipValue, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, WorldPositionOffset, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_4Q22, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, Refraction, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_UL1X, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, MaterialAttributes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_5OE3, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, PixelDepthOffset, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_3JNK, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, ShadingModelFromMaterialExpression, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_L5WV, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucencyLightingMode, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_M9OY, 0x024B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, NumCustomizedUVs, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucencyDirectionalLightingIntensity, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentShadowDensityScale, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentSelfShadowDensityScale, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentSelfShadowSecondDensityScale, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentSelfShadowSecondOpacity, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentBackscatteringExponent, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentMultipleScatteringExtinction, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, TranslucentShadowStartOffset, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_OGGD, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_VS04, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_JJCO, 0x0287);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_14JL, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_PZUD, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_V0XC, 0x0291);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, D3D11TessellationMode, 0x0295);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, ShadingRate, 0x0297);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_0DJY, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_WDS4, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, BlendableLocation, 0x02A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, StencilCompare, 0x02A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, StencilRefValue, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, RefractionMode, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_5YJD, 0x02A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, BlendablePriority, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_16XF, 0x02AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UsageFlagWarnings, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, RefractionDepthBias, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, StateId, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, MaxDisplacement, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, UnknownData_GBP6, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMATERIAL, CachedExpressionData, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMATERIAL, 0x0580);
		}

		// class UMaterialBillboardComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__MaterialBillboardComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, Elements, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialBillboardComponent, UnknownData_4Z0B, 0x0438);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialBillboardComponent, 0x0440);
		}

		// class UMaterialExpressionAbs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAbs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAbs, UnknownData_QBX6, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAbs, 0x0068);
		}

		// class UMaterialExpressionActorPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionActorPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionActorPositionWS, 0x0048);
		}

		// class UMaterialExpressionAdd : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAdd)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_9004, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, UnknownData_PESV, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAdd, ConstB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAdd, 0x0088);
		}

		// class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionAntialiasedTextureMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, threshold, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, channel, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAntialiasedTextureMask, UnknownData_8H7U, 0x0135);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAntialiasedTextureMask, 0x0138);
		}

		// class UMaterialExpressionAppendVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAppendVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_OE2H, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAppendVector, UnknownData_GJTZ, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAppendVector, 0x0080);
		}

		// class UMaterialExpressionArccosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosine, UnknownData_TAG1, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosine, 0x0068);
		}

		// class UMaterialExpressionArccosineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArccosineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArccosineFast, UnknownData_YL5J, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArccosineFast, 0x0068);
		}

		// class UMaterialExpressionArcsine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsine, UnknownData_FV93, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsine, 0x0068);
		}

		// class UMaterialExpressionArcsineFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArcsineFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArcsineFast, UnknownData_ALXZ, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArcsineFast, 0x0068);
		}

		// class UMaterialExpressionArctangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent, UnknownData_30K2, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent, 0x0068);
		}

		// class UMaterialExpressionArctangent2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, y, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_7I60, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, x, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2, UnknownData_MNBF, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2, 0x0080);
		}

		// class UMaterialExpressionArctangent2Fast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangent2Fast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, y, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_65F7, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, x, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangent2Fast, UnknownData_AM8Q, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangent2Fast, 0x0080);
		}

		// class UMaterialExpressionArctangentFast : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionArctangentFast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionArctangentFast, UnknownData_0S5D, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionArctangentFast, 0x0068);
		}

		// class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericFogColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, WorldPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionAtmosphericFogColor, UnknownData_71UP, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericFogColor, 0x0068);
		}

		// class UMaterialExpressionAtmosphericLightColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightColor, 0x0048);
		}

		// class UMaterialExpressionAtmosphericLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionAtmosphericLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionAtmosphericLightVector, 0x0048);
		}

		// class UMaterialExpressionBentNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionBentNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBentNormalCustomOutput, UnknownData_LH6U, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBentNormalCustomOutput, 0x0068);
		}

		// class UMaterialExpressionBlackBody : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlackBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, Temp, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlackBody, UnknownData_Q04X, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlackBody, 0x0068);
		}

		// class UMaterialExpressionBlendMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBlendMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_8HBO, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, B, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_M3Z4, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, Alpha, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_C1HF, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, PixelAttributeBlendType, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, VertexAttributeBlendType, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBlendMaterialAttributes, UnknownData_L0W3, 0x00A6);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBlendMaterialAttributes, 0x00A8);
		}

		// class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBreakMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, MaterialAttributes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBreakMaterialAttributes, UnknownData_QN97, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBreakMaterialAttributes, 0x0068);
		}

		// class UMaterialExpressionBumpOffset : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionBumpOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Coordinate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_OE3I, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, Height, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_0SYX, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatioInput, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, UnknownData_FYJ9, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, HeightRatio, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ReferencePlane, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionBumpOffset, ConstCoordinate, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionBumpOffset, 0x00A8);
		}

		// class UMaterialExpressionCameraPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraPositionWS, 0x0048);
		}

		// class UMaterialExpressionCameraVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCameraVectorWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCameraVectorWS, 0x0048);
		}

		// class UMaterialExpressionCeil : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCeil)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCeil, UnknownData_P9QE, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCeil, 0x0068);
		}

		// class UMaterialExpressionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, parameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParameter, UnknownData_0TFY, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParameter, 0x0068);
		}

		// class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, bUseCustomPrimitiveData, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, PrimitiveDataIndex, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorParameter, UnknownData_ECYO, 0x007A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorParameter, 0x0080);
		}

		// class UMaterialExpressionChannelMaskParameter : public UMaterialExpressionVectorParameter
		TEST_METHOD(Class__Engine__MaterialExpressionChannelMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, MaskChannel, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_SI0M, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, input, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionChannelMaskParameter, UnknownData_KSW8, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionChannelMaskParameter, 0x00A0);
		}

		// class UMaterialExpressionClamp : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_FM6N, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, min, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_TK8D, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, max, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_P97W, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, ClampMode, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, UnknownData_SUAA, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MinDefault, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClamp, MaxDefault, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClamp, 0x00A8);
		}

		// class UMaterialExpressionClearCoatNormalCustomOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionClearCoatNormalCustomOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionClearCoatNormalCustomOutput, UnknownData_2V0N, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionClearCoatNormalCustomOutput, 0x0068);
		}

		// class UMaterialExpressionCollectionParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCollectionParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, collection, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, parameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, ParameterId, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCollectionParameter, UnknownData_LGAC, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCollectionParameter, 0x0070);
		}

		// class UMaterialExpressionComment : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, sizeX, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, sizeY, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, text, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, CommentColor, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, FontSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComment, UnknownData_6HSV, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComment, 0x0078);
		}

		// class UMaterialExpressionComponentMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionComponentMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_EC67, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionComponentMask, UnknownData_1JD2, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionComponentMask, 0x0068);
		}

		// class UMaterialExpressionConstant : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, R, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant, UnknownData_47CM, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant, 0x0050);
		}

		// class UMaterialExpressionConstant2Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant2Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, R, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant2Vector, G, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant2Vector, 0x0050);
		}

		// class UMaterialExpressionConstant3Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant3Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant3Vector, Constant, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant3Vector, 0x0058);
		}

		// class UMaterialExpressionConstant4Vector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstant4Vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstant4Vector, Constant, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstant4Vector, 0x0058);
		}

		// class UMaterialExpressionConstantBiasScale : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionConstantBiasScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_8M3I, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, Bias, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, scale, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionConstantBiasScale, UnknownData_JD5H, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionConstantBiasScale, 0x0070);
		}

		// class UMaterialExpressionCosine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCosine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, UnknownData_GZRX, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCosine, Period, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCosine, 0x0068);
		}

		// class UMaterialExpressionCrossProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCrossProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_D01U, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCrossProduct, UnknownData_0838, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCrossProduct, 0x0080);
		}

		// class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, bUseCustomPrimitiveData, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, PrimitiveDataIndex, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionScalarParameter, UnknownData_HTNE, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScalarParameter, 0x0070);
		}

		// class UMaterialExpressionCurveAtlasRowParameter : public UMaterialExpressionScalarParameter
		TEST_METHOD(Class__Engine__MaterialExpressionCurveAtlasRowParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, curve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, Atlas, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, InputTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCurveAtlasRowParameter, UnknownData_Z44R, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCurveAtlasRowParameter, 0x00A0);
		}

		// class UMaterialExpressionCustom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionCustom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Code, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, OutputType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, UnknownData_A9S5, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, description, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, Inputs, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, AdditionalDefines, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionCustom, IncludeFilePaths, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionCustom, 0x00A0);
		}

		// class UMaterialExpressionDDX : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDX)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDX, UnknownData_HCGL, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDX, 0x0068);
		}

		// class UMaterialExpressionDDY : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDDY)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, Value, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDDY, UnknownData_X8JM, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDDY, 0x0068);
		}

		// class UMaterialExpressionDecalDerivative : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalDerivative)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalDerivative, 0x0048);
		}

		// class UMaterialExpressionDecalLifetimeOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalLifetimeOpacity)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalLifetimeOpacity, 0x0048);
		}

		// class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDecalMipmapLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, TextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_3V5I, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, ConstHeight, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDecalMipmapLevel, UnknownData_2N5X, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDecalMipmapLevel, 0x0070);
		}

		// class UMaterialExpressionDeltaTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeltaTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeltaTime, 0x0048);
		}

		// class UAxisFlick : public UObject
		TEST_METHOD(Class__InputUtilities__AxisFlick)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisFlick, UnknownData_YWFM, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisFlick, 0x0060);
		}

		// class UMaterialExpressionDepthFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, InOpacity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_ICAX, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistance, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, UnknownData_MM7J, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, OpacityDefault, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthFade, FadeDistanceDefault, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthFade, 0x0088);
		}

		// class UAxisFlickMasher : public UactorComponent
		TEST_METHOD(Class__InputUtilities__AxisFlickMasher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisFlickMasher, _inputComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisFlickMasher, UnknownData_TMXF, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisFlickMasher, _axisFlick1, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisFlickMasher, _axisFlick2, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAxisFlickMasher, UnknownData_7RCJ, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAxisFlickMasher, 0x00F8);
		}

		// class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDepthOfFieldFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, FunctionValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_6KQ6, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, Depth, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDepthOfFieldFunction, UnknownData_5X7O, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDepthOfFieldFunction, 0x0068);
		}

		// class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDeriveNormalZ)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, InXY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDeriveNormalZ, UnknownData_PTEI, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDeriveNormalZ, 0x0068);
		}

		// class UButtonPressTracker : public ULocalPlayerSubsystem
		TEST_METHOD(Class__InputUtilities__ButtonPressTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonPressTracker, UnknownData_LEN5, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonPressTracker, _trackedInputComponent, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UButtonPressTracker, _playerInput, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UButtonPressTracker, 0x0060);
		}

		// class UMaterialExpressionDesaturation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDesaturation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_8VY0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, Fraction, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, UnknownData_7P77, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDesaturation, LuminanceFactors, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDesaturation, 0x0090);
		}

		// class UMaterialExpressionDistance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_95T4, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistance, UnknownData_F7PM, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistance, 0x0080);
		}

		// class UInputMasher : public UactorComponent
		TEST_METHOD(Class__InputUtilities__InputMasher)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMasher, _inputComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInputMasher, UnknownData_ZWE4, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInputMasher, 0x00F0);
		}

		// class UMaterialExpressionDistanceCullFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceCullFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceCullFade, 0x0048);
		}

		// class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceFieldGradient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceFieldGradient, UnknownData_SMRG, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceFieldGradient, 0x0068);
		}

		// class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDistanceToNearestSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDistanceToNearestSurface, UnknownData_XQBD, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDistanceToNearestSurface, 0x0068);
		}

		// class UMaterialExpressionDivide : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDivide)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_DVIZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, UnknownData_81OK, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDivide, ConstB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDivide, 0x0088);
		}

		// class UVirtualKeyboard : public UObject
		TEST_METHOD(Class__InputUtilities__VirtualKeyboard)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualKeyboard, UnknownData_Y976, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualKeyboard, 0x0040);
		}

		// class UMaterialExpressionDotProduct : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDotProduct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_B2KK, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDotProduct, UnknownData_VZ9Q, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDotProduct, 0x0080);
		}

		// class UMaterialExpressionDynamicParameter : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParamNames, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, DefaultValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, ParameterIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionDynamicParameter, UnknownData_Z9PL, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionDynamicParameter, 0x0070);
		}

		// class UMaterialExpressionEyeAdaptation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionEyeAdaptation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionEyeAdaptation, 0x0048);
		}

		// class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFeatureLevelSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_FOFR, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, Inputs, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFeatureLevelSwitch, UnknownData_D206, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFeatureLevelSwitch, 0x00D8);
		}

		// class UMaterialExpressionFloor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFloor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFloor, UnknownData_TFQR, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFloor, 0x0068);
		}

		// class UMaterialExpressionFmod : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFmod)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_TVXL, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFmod, UnknownData_GI9H, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFmod, 0x0080);
		}

		// class UMaterialExpressionFontSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFontSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, Font, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, FontTexturePage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSample, UnknownData_RI3M, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSample, 0x0058);
		}

		// class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
		TEST_METHOD(Class__Engine__MaterialExpressionFontSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, parameterName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, ExpressionGUID, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFontSampleParameter, Group, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFontSampleParameter, 0x0080);
		}

		// class UMaterialExpressionFrac : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFrac)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFrac, UnknownData_B07Y, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFrac, 0x0068);
		}

		// class UMaterialExpressionFresnel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFresnel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, ExponentIn, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_Q0WF, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, Exponent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFractionIn, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_BR06, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, BaseReflectFraction, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, normal, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFresnel, UnknownData_M309, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFresnel, 0x00A8);
		}

		// class UMaterialExpressionFunctionInput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Preview, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_CXJR, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputName, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, description, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, Id, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, InputType, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_9H47, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, PreviewValue, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_V257, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, SortPriority, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionInput, UnknownData_A7SS, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionInput, 0x00E0);
		}

		// class UMaterialExpressionFunctionOutput : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionFunctionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, OutputName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_Y2Q3, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, SortPriority, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, A, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_X85P, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_V3G9, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, Id, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionFunctionOutput, UnknownData_R7A3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionFunctionOutput, 0x00A0);
		}

		// class UMaterialExpressionGetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, MaterialAttributes, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, UnknownData_O10Z, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGetMaterialAttributes, AttributeGetTypes, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGetMaterialAttributes, 0x0078);
		}

		// class UMaterialExpressionGIReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionGIReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_18X3, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, StaticIndirect, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_5ACX, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, DynamicIndirect, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionGIReplace, UnknownData_5YFD, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionGIReplace, 0x00A0);
		}

		// class UMaterialExpressionHairAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionHairAttributes)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionHairAttributes, 0x0048);
		}

		// class UMaterialExpressionIf : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionIf)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_2BSJ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_G310, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AGreaterThanB, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_EW7W, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, AEqualsB, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_5HT6, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ALessThanB, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, UnknownData_YCAJ, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, EqualsThreshold, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstB, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionIf, ConstAEqualsB, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionIf, 0x00E0);
		}

		// class UMaterialExpressionLightmapUVs : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmapUVs)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmapUVs, 0x0048);
		}

		// class UMaterialExpressionLightmassReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightmassReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Realtime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_CR2A, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, Lightmass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLightmassReplace, UnknownData_F56F, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightmassReplace, 0x0080);
		}

		// class UMaterialExpressionLightVector : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLightVector)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLightVector, 0x0048);
		}

		// class UMaterialExpressionLinearInterpolate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLinearInterpolate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_QRO0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_9ZHU, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, Alpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, UnknownData_K9R8, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstA, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstB, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLinearInterpolate, ConstAlpha, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLinearInterpolate, 0x00A8);
		}

		// class UMaterialExpressionLogarithm10 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, x, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm10, UnknownData_VB4T, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm10, 0x0068);
		}

		// class UMaterialExpressionLogarithm2 : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionLogarithm2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, x, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionLogarithm2, UnknownData_53XX, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionLogarithm2, 0x0068);
		}

		// class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMakeMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, BaseColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_A4GP, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Metallic, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_BNKW, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Specular, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_315C, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Roughness, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_X0HU, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Anisotropy, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_IX29, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, EmissiveColor, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_M0I4, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, opacity, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_GUWA, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, OpacityMask, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_0VC2, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, normal, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_RV23, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Tangent, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_UGPL, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldPositionOffset, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_4QCZ, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, WorldDisplacement, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_FD4M, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, TessellationMultiplier, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CHDY, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, SubsurfaceColor, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_LNW6, 0x01C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoat, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_I3QJ, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ClearCoatRoughness, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_XPCW, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, AmbientOcclusion, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_59OG, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, Refraction, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_L7AC, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomizedUVs, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_CPLD, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, PixelDepthOffset, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZJ8T, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, ShadingModel, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_95U1, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, CustomColourNoDepth, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMakeMaterialAttributes, UnknownData_ZGG8, 0x0368);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMakeMaterialAttributes, 0x0378);
		}

		// class UMaterialExpressionMapARPassthroughCameraUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMapARPassthroughCameraUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMapARPassthroughCameraUV, UnknownData_FAB0, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMapARPassthroughCameraUV, 0x0068);
		}

		// class UMaterialExpressionMaterialAttributeLayers : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialAttributeLayers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, parameterName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, ExpressionGUID, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, input, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_AIQD, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, DefaultLayers, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, LayerCallers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveLayerCallers, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_RNT4, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, BlendCallers, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, NumActiveBlendCallers, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, bIsLayerGraphBuilt, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialAttributeLayers, UnknownData_OXRF, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialAttributeLayers, 0x0100);
		}

		// class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialFunctionCall)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, MaterialFunction, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, FunctionParameterInfo, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialFunctionCall, UnknownData_OVCQ, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialFunctionCall, 0x0068);
		}

		// class UMaterialExpressionMaterialLayerOutput : public UMaterialExpressionFunctionOutput
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialLayerOutput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialLayerOutput, 0x00A0);
		}

		// class UMaterialExpressionMaterialProxyReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMaterialProxyReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, Realtime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_350V, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, MaterialProxy, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMaterialProxyReplace, UnknownData_AC0P, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMaterialProxyReplace, 0x0080);
		}

		// class UMaterialExpressionMax : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMax)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_B1JM, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, UnknownData_WMBN, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMax, ConstB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMax, 0x0088);
		}

		// class UMaterialExpressionMin : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_VQYF, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, UnknownData_PHYL, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMin, ConstB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMin, 0x0088);
		}

		// class UMaterialExpressionMultiply : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionMultiply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_KCBC, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, UnknownData_A7I5, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionMultiply, ConstB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionMultiply, 0x0088);
		}

		// class UMaterialExpressionNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_HH8X, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, FilterWidth, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_NESO, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, scale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Quality, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, NoiseFunction, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_ATVW, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_3A5M, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, Levels, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMin, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, OutputMax, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, LevelScale, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, UnknownData_GVG2, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNoise, RepeatSize, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNoise, 0x00A8);
		}

		// class UMaterialExpressionNormalize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionNormalize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, VectorInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionNormalize, UnknownData_MNBT, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionNormalize, 0x0068);
		}

		// class UMaterialExpressionObjectBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectBounds, 0x0048);
		}

		// class UMaterialExpressionObjectOrientation : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectOrientation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectOrientation, 0x0048);
		}

		// class UMaterialExpressionObjectPositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectPositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectPositionWS, 0x0048);
		}

		// class UMaterialExpressionObjectRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionObjectRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionObjectRadius, 0x0048);
		}

		// class UMaterialExpressionOneMinus : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionOneMinus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionOneMinus, UnknownData_K8MS, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionOneMinus, 0x0068);
		}

		// class UMaterialExpressionPanner : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPanner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, Coordinate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_S64O, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, time, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_SB1K, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, speed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_F2DK, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedX, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, SpeedY, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, ConstCoordinate, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, bFractionalPart, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPanner, UnknownData_HZ5P, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPanner, 0x00B0);
		}

		// class UMaterialExpressionParticleColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleColor, 0x0048);
		}

		// class UMaterialExpressionParticleDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleDirection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleDirection, 0x0048);
		}

		// class UMaterialExpressionParticleMacroUV : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMacroUV)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMacroUV, 0x0048);
		}

		// class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleMotionBlurFade)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleMotionBlurFade, 0x0048);
		}

		// class UMaterialExpressionParticlePositionWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticlePositionWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticlePositionWS, 0x0048);
		}

		// class UMaterialExpressionParticleRadius : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRadius)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRadius, 0x0048);
		}

		// class UMaterialExpressionParticleRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRandom, 0x0048);
		}

		// class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleRelativeTime)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleRelativeTime, 0x0048);
		}

		// class UMaterialExpressionParticleSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSize, 0x0048);
		}

		// class UMaterialExpressionParticleSpeed : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSpeed)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSpeed, 0x0048);
		}

		// class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionParticleSubUV, UnknownData_GQ4F, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUV, 0x0110);
		}

		// class UMaterialExpressionParticleSubUVProperties : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionParticleSubUVProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionParticleSubUVProperties, 0x0048);
		}

		// class UMaterialExpressionPerInstanceCustomData : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceCustomData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DefaultValue, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_35DE, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, ConstDefaultValue, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, DataIndex, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPerInstanceCustomData, UnknownData_FYDU, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceCustomData, 0x0070);
		}

		// class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceFadeAmount)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceFadeAmount, 0x0048);
		}

		// class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPerInstanceRandom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPerInstanceRandom, 0x0048);
		}

		// class UMaterialExpressionPixelDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelDepth)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelDepth, 0x0048);
		}

		// class UMaterialExpressionPixelNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPixelNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPixelNormalWS, 0x0048);
		}

		// class UMaterialExpressionPower : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPower)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Base, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_J1MV, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, Exponent, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_C60C, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, ConstExponent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPower, UnknownData_PB93, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPower, 0x0088);
		}

		// class UAB_MT_Hair_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_MT_Hair_ACC01__AB_MT_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, UnknownData_9KD7, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_24, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_23, 0x07E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_22, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_21, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_20, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_19, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x1DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x2220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x2680);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x2AE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x2F40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x33A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x3800);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x3830);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x3850);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x3870);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, UnknownData_XDH8, 0x38A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x38B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x3D10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x4170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x45D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x4A30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x4E90);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x52F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x5750);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x5BB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x6010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x6470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x68D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x6D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x6D60);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x6D80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_StateResult, 0x6DA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x6DD8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x6E88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_MT_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x6FC8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_MT_Hair_ACC01_C, 0x7080);
		}

		// class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPrecomputedAOMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPrecomputedAOMask, 0x0048);
		}

		// class UMaterialExpressionPreSkinnedLocalBounds : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedLocalBounds)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedLocalBounds, 0x0048);
		}

		// class UMaterialExpressionPreSkinnedNormal : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedNormal, 0x0048);
		}

		// class UMaterialExpressionPreSkinnedPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreSkinnedPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreSkinnedPosition, 0x0048);
		}

		// class UMaterialExpressionPreviousFrameSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionPreviousFrameSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, CurrentFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_01H0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, PreviousFrame, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionPreviousFrameSwitch, UnknownData_GI6C, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionPreviousFrameSwitch, 0x0080);
		}

		// class UMaterialExpressionQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_YGD0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, Inputs, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionQualitySwitch, UnknownData_40W6, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionQualitySwitch, 0x00B8);
		}

		// class UMaterialExpressionRayTracingQualitySwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRayTracingQualitySwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, normal, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_MMX0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, RayTraced, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRayTracingQualitySwitch, UnknownData_U00L, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRayTracingQualitySwitch, 0x0080);
		}

		// class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReflectionVectorWS)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, CustomWorldNormal, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_MBRE, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReflectionVectorWS, UnknownData_RAOB, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReflectionVectorWS, 0x0068);
		}

		// class UMaterialExpressionReroute : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionReroute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionReroute, UnknownData_XN86, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionReroute, 0x0068);
		}

		// class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotateAboutAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, NormalizedRotationAxis, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_1B5D, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, RotationAngle, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_XV0M, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, PivotPoint, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_K30C, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, position, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_OJI9, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, Period, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotateAboutAxis, UnknownData_B5EX, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotateAboutAxis, 0x00C0);
		}

		// class UMaterialExpressionRotator : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, Coordinate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_JW0W, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, time, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, UnknownData_Z9J3, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterX, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, CenterY, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, speed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRotator, ConstCoordinate, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRotator, 0x0090);
		}

		// class UMaterialExpressionRound : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRound, UnknownData_O08T, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRound, 0x0068);
		}

		// class UMaterialExpressionRuntimeVirtualTextureOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, BaseColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_4WYA, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Specular, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_1W9S, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Roughness, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_LOZH, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, normal, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_2O91, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, WorldHeight, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_JKXF, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, opacity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_LJNY, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, Mask, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureOutput, UnknownData_M6A0, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureOutput, 0x0110);
		}

		// class UAddon_K22Power_11 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_11)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_11, 0x0228);
		}

		// class UAddon_K22Power_12 : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_12)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_12, _increaseRemoveTwinTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_12, UnknownData_6R5Y, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_12, 0x0228);
		}

		// class UAddon_K22Power_15 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_15)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_15, _brokenDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_15, UnknownData_GNPR, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_15, 0x0230);
		}

		// class UMaterialExpressionRuntimeVirtualTextureReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_U1YY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, VirtualTextureOutput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureReplace, UnknownData_LZFO, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureReplace, 0x0080);
		}

		// class UAddon_K22Power_17 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_17)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_17, 0x0228);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSample : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_JCB6, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, WorldPosition, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_URZD, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValue, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_J9X4, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, VirtualTexture, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MaterialType, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, bSinglePhysicalSpace, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, MipValueMode, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSample, UnknownData_VJ8U, 0x00AB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSample, 0x00B0);
		}

		// class UAddon_K22Power_18 : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_18)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_18, UnknownData_SMYV, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_18, _lingerDuration, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_18, 0x0250);
		}

		// class UMaterialExpressionRuntimeVirtualTextureSampleParameter : public UMaterialExpressionRuntimeVirtualTextureSample
		TEST_METHOD(Class__Engine__MaterialExpressionRuntimeVirtualTextureSampleParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, parameterName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, ExpressionGUID, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, Group, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionRuntimeVirtualTextureSampleParameter, 0x00D8);
		}

		// class UMaterialExpressionSaturate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSaturate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSaturate, UnknownData_JUTF, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSaturate, 0x0068);
		}

		// class UMaterialExpressionSceneColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, InputMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_NARD, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, input, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_7CPK, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, OffsetFraction, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_5EFC, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, ConstInput, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneColor, UnknownData_BUUS, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneColor, 0x0090);
		}

		// class UAddon_K22Power_19 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_19)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_19, _auraRevealedDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_19, UnknownData_FDDO, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_19, 0x0230);
		}

		// class UMaterialExpressionSceneDepth : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneDepth)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, InputMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_J1UH, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, input, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_F8W9, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, Coordinates, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_LFYG, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, ConstInput, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneDepth, UnknownData_UN9R, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneDepth, 0x0090);
		}

		// class UAddon_K22Power_20 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_20)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_20, _undetectableDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_20, UnknownData_EVRC, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_20, 0x0230);
		}

		// class UAddon_K22Power_21 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_21)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_21, _exposedDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_21, UnknownData_PYVF, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_21, 0x0230);
		}

		// class UMaterialExpressionSceneTexelSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexelSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexelSize, 0x0048);
		}

		// class UBPI_Effect_Environment_C : public UInterface
		TEST_METHOD(BlueprintGeneratedClass__BPI_Effect_Environment__BPI_Effect_Environment_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBPI_Effect_Environment_C, 0x0030);
		}

		// class UMaterialExpressionSceneTexture : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSceneTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, Coordinates, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_RFES, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, SceneTextureId, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, bFiltered, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSceneTexture, UnknownData_58YC, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSceneTexture, 0x0068);
		}

		// class UAddon_K22Power_9 : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_9)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_9, _increaseDestroyTwinTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_9, UnknownData_61PR, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_9, 0x0228);
		}

		// class UAddon_K22Power_10 : public UOnEventBaseAddon
		TEST_METHOD(Class__TheTwins__Addon_K22Power_10)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_10, _blindnessDuration, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAddon_K22Power_10, UnknownData_GBZT, 0x022C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAddon_K22Power_10, 0x0230);
		}

		// class UMaterialExpressionScreenPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionScreenPosition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionScreenPosition, 0x0048);
		}

		// class UMaterialExpressionSetMaterialAttributes : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSetMaterialAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, Inputs, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSetMaterialAttributes, AttributeSetTypes, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSetMaterialAttributes, 0x0068);
		}

		// class UAppraisal : public Uperk
		TEST_METHOD(Class__TheTwins__Appraisal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppraisal, _chestSearchSpeedMultiplier, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAppraisal, UnknownData_3J6Y, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAppraisal, 0x0358);
		}

		// class UMaterialExpressionShaderStageSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShaderStageSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, PixelShader, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_LRYM, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, VertexShader, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShaderStageSwitch, UnknownData_JDA9, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShaderStageSwitch, 0x0080);
		}

		// class UPossessPlayer : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTwins__PossessPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessPlayer, _possessThePlayerMaxCharge, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessPlayer, UnknownData_4JL2, 0x0650);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPossessPlayer, 0x0660);
		}

		// class UMaterialExpressionShadingModel : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, ShadingModel, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingModel, UnknownData_1AL9, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingModel, 0x0050);
		}

		// class UMaterialExpressionShadingPathSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadingPathSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_HL5Q, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, Inputs, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadingPathSwitch, UnknownData_WXJQ, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadingPathSwitch, 0x00B8);
		}

		// class UPossessTheConjoinedTwin : public UPossessPlayer
		TEST_METHOD(Class__TheTwins__PossessTheConjoinedTwin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessTheConjoinedTwin, UnknownData_KY4K, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPossessTheConjoinedTwin, 0x06B0);
		}

		// class UMaterialExpressionShadowReplace : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionShadowReplace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Default, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_3Q7D, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, Shadow, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionShadowReplace, UnknownData_QMUU, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionShadowReplace, 0x0080);
		}

		// class UAutoPossessTheConjoinedTwin : public UPossessTheConjoinedTwin
		TEST_METHOD(Class__TheTwins__AutoPossessTheConjoinedTwin)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAutoPossessTheConjoinedTwin, 0x06B0);
		}

		// class UBeingPossessedInteraction : public UinteractionDefinition
		TEST_METHOD(Class__TheTwins__BeingPossessedInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBeingPossessedInteraction, _beingPossessedMaxCharge, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBeingPossessedInteraction, 0x0540);
		}

		// class UMaterialExpressionSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSign)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSign, UnknownData_URYP, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSign, 0x0068);
		}

		// class UBrotherBlindFlashlightableLightingStrategy : public UBlindFlashlightableLightingStrategy
		TEST_METHOD(Class__TheTwins__BrotherBlindFlashlightableLightingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBrotherBlindFlashlightableLightingStrategy, UnknownData_3D56, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBrotherBlindFlashlightableLightingStrategy, 0x0050);
		}

		// class UMaterialExpressionSine : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, UnknownData_N8AN, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSine, Period, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSine, 0x0068);
		}

		// class UChargeTwinJumpInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTwins__ChargeTwinJumpInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, UnknownData_SS2A, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, UnknownData_5WGD, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, _chargeJumpMaxCharge, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, UnknownData_1B9D, 0x0698);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, _interactionViewPitchMax, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, _interactionViewPitchMin, 0x06C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, UnknownData_AMQU, 0x06F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, _cancelCooldownTime, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChargeTwinJumpInteraction, UnknownData_4RHG, 0x0740);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChargeTwinJumpInteraction, 0x0780);
		}

		// class UMaterialExpressionSingleLayerWaterMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionSingleLayerWaterMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, ScatteringCoefficients, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_JL39, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, AbsorptionCoefficients, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_SKWI, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, PhaseG, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, UnknownData_D1UA, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSingleLayerWaterMaterialOutput, 0x00A0);
		}

		// class UMaterialExpressionSkyAtmosphereLightDirection : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, LightIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDirection, UnknownData_BDAG, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDirection, 0x0050);
		}

		// class UConjoinedTwin : public UdbdPlayer
		TEST_METHOD(Class__TheTwins__ConjoinedTwin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _restrictedPossessionAreaTracker, 0x0FF8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _twinOutlineUpdateStrategy, 0x1000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _twinLullabyAudioComponent, 0x1008);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _twinBlindingFX, 0x1010);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _customizedAudio, 0x1018);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _attackerComponent, 0x1020);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _maxWalkSpeed, 0x1028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _hitValidatorComponent, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _hitValidationConfigurator, 0x1058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _gravityScale, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _animationFollower, 0x1088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, UnknownData_W8RH, 0x1090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _revealDurationOnAttached, 0x10A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _firstPersonViewComponent, 0x10D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _eyesFlashlightable, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _blindFlashlightTargetFXComponent, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _firecrackerEffectHandlerComponent, 0x10E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, UnknownData_3UO0, 0x10F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _flashlightBlindEvasionScoreTimer, 0x10F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _flashlightEvasionScoreCooldown, 0x1128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, _twinPossessNegationEffectComponent, 0x1150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwin, UnknownData_ZUTR, 0x1158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConjoinedTwin, 0x1170);
		}

		// class UMaterialExpressionSkyAtmosphereLightIlluminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightIlluminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, LightIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, WorldPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, UnknownData_FXO5, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightIlluminance, 0x0068);
		}

		// class UMaterialExpressionSkyAtmosphereLightDiskLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereLightDiskLuminance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, LightIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, UnknownData_UV66, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereLightDiskLuminance, 0x0050);
		}

		// class UMaterialExpressionSkyAtmosphereAerialPerspective : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereAerialPerspective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, WorldPosition, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, UnknownData_SQOK, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereAerialPerspective, 0x0068);
		}

		// class UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereDistantLightScatteredLuminance, 0x0048);
		}

		// class UMaterialExpressionSkyAtmosphereViewLuminance : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSkyAtmosphereViewLuminance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSkyAtmosphereViewLuminance, 0x0048);
		}

		// class UMaterialExpressionSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, Cell, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_LRGK, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, index, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_4J8T, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, seed, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, UnknownData_3Y9Y, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstIndex, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSobol, ConstSeed, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSobol, 0x00A8);
		}

		// class UConjoinedTwinAnimInstance : public UPlayerAnimInstance
		TEST_METHOD(Class__TheTwins__ConjoinedTwinAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _owningConjoinedTwin, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _firstPersonView, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, UnknownData_4DEA, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _forwardVelocity, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _lateralVelocity, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _interactionType, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isInAir, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isIdle, 0x04FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, UnknownData_5Y4B, 0x04FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _idleTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isAttacking, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, UnknownData_RP0M, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _attackerComponent, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _twinAttachmentComponent, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _twinLockerBlockerComponent, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _animYaw, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _animPitch, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isSpectator, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, UnknownData_63RI, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _animDirection, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _animSpeed, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isAttachedToSister, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isAttachedToSurvivor, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isAttachedToFemaleSurvivor, 0x0536);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isChargingTwinJump, 0x0537);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isPossessing, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isWakingUpFromPossess, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isDormant, 0x053A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isBeingAutoPossessedAfterRelease, 0x053B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _isAttachedToLocker, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, _attackState, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinAnimInstance, UnknownData_8UNC, 0x053E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConjoinedTwinAnimInstance, 0x05A0);
		}

		// class UMaterialExpressionSpeedTree : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSpeedTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryInput, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_UF3Y, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindInput, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_P6QB, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODInput, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_6M6H, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, ExtraBendWS, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_GLZT, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, GeometryType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, WindType, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, LODType, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_60M5, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, BillboardThreshold, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, bAccurateWindVelocities, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSpeedTree, UnknownData_Y4B5, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSpeedTree, 0x00C8);
		}

		// class UMaterialExpressionSphereMask : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphereMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_VHE9, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_6734, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, radius, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_U4YG, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, Hardness, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, UnknownData_YS47, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, AttenuationRadius, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphereMask, HardnessPercent, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphereMask, 0x00C0);
		}

		// class UConjoinedTwinInteractable : public UPlayerInteractable
		TEST_METHOD(Class__TheTwins__ConjoinedTwinInteractable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinInteractable, _possessKillerChargeable, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinInteractable, _chargeTwinJumpChargeable, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinInteractable, _removeTwinChargeable, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UConjoinedTwinInteractable, _destroyTwinChargeable, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConjoinedTwinInteractable, 0x02F8);
		}

		// class UConjoinedTwinStateMachine : public UPlayerStateMachine
		TEST_METHOD(Class__TheTwins__ConjoinedTwinStateMachine)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UConjoinedTwinStateMachine, 0x0130);
		}

		// class UCoupDeGrace : public Uperk
		TEST_METHOD(Class__TheTwins__CoupDeGrace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoupDeGrace, _lungeAttackAddDurationMultiplier, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCoupDeGrace, UnknownData_KABF, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCoupDeGrace, 0x0358);
		}

		// class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSphericalParticleOpacity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, Density, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, UnknownData_36XQ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSphericalParticleOpacity, ConstantDensity, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSphericalParticleOpacity, 0x0068);
		}

		// class UDeception : public Uperk
		TEST_METHOD(Class__TheTwins__Deception)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeception, _noScratchMarksDuration, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeception, _perkCooldownDuration, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeception, _statusEffect, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeception, UnknownData_ZNIJ, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeception, _iconStrategy, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDeception, UnknownData_4HVJ, 0x0378);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDeception, 0x0380);
		}

		// class UMaterialExpressionSquareRoot : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSquareRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSquareRoot, UnknownData_12RR, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSquareRoot, 0x0068);
		}

		// class UMaterialExpressionStaticBool : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBool, UnknownData_49U0, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBool, 0x0050);
		}

		// class UDestroyTwin : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTwins__DestroyTwin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyTwin, UnknownData_11H0, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyTwin, UnknownData_JK5J, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyTwin, _destroyTwinMaxCharge, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDestroyTwin, UnknownData_JUKF, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDestroyTwin, 0x06A0);
		}

		// class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticBoolParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticBoolParameter, UnknownData_FPBZ, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticBoolParameter, 0x0070);
		}

		// class UHoarder : public Uperk
		TEST_METHOD(Class__TheTwins__Hoarder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, UnknownData_6M0S, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, _chests, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, _camperInteractItemPickupRevealRange, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, _extraChestsSpawned, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, _bubbleIndicatorLifetime, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, _showUniqueChestVisualPerState, 0x0384);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHoarder, UnknownData_8WGO, 0x0385);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHoarder, 0x0398);
		}

		// class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, input, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_TCWM, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticComponentMaskParameter, UnknownData_XT4N, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticComponentMaskParameter, 0x0088);
		}

		// class UMaterialExpressionStaticSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_5OC2, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, A, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_HVD3, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, B, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_ZXF7, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, Value, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitch, UnknownData_MDYF, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitch, 0x00A0);
		}

		// class UIsTwinRecallReady : public UEventDrivenModifierCondition
		TEST_METHOD(Class__TheTwins__IsTwinRecallReady)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIsTwinRecallReady, UnknownData_ZE78, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIsTwinRecallReady, 0x00F0);
		}

		// class UK22AchievementTagTeam : public UactorComponent
		TEST_METHOD(Class__TheTwins__K22AchievementTagTeam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22AchievementTagTeam, UnknownData_1P8U, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UK22AchievementTagTeam, 0x00D0);
		}

		// class UK22Power : public Ucollectable
		TEST_METHOD(Class__TheTwins__K22Power)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, UnknownData_CKBV, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _releaseConjoinedTwinChargeable, 0x0438);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _possessConjoinedTwinChargeable, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, UnknownData_53IJ, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _conjoinedTwin, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _conjoinedTwinParadise, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _powerCharge, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _powerChargePresentationItemProgress, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _powerMaxCharge, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _conjoinedTwinClass, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, UnknownData_J086, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _powerRechargeRate, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _timeBeforeAutoDestroy, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, _timeBeforeRecallAvailable, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22Power, UnknownData_AEX1, 0x0540);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UK22Power, 0x0588);
		}

		// class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
		TEST_METHOD(Class__Engine__MaterialExpressionStaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, A, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_28C1, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, B, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionStaticSwitchParameter, UnknownData_PWEL, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionStaticSwitchParameter, 0x00A8);
		}

		// class UMaterialExpressionSubtract : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionSubtract)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, A, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_1Y7Z, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, B, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, UnknownData_EG51, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstA, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionSubtract, ConstB, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionSubtract, 0x0088);
		}

		// class UMaterialExpressionTangent : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, UnknownData_NRTY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangent, Period, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangent, 0x0068);
		}

		// class UK22PowerChargePresentationItemProgressComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__TheTwins__K22PowerChargePresentationItemProgressComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22PowerChargePresentationItemProgressComponent, _powerChargeComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22PowerChargePresentationItemProgressComponent, UnknownData_SDJO, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UK22PowerChargePresentationItemProgressComponent, 0x00D0);
		}

		// class UK22ScoreComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__K22ScoreComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UK22ScoreComponent, UnknownData_5P83, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UK22ScoreComponent, 0x00D0);
		}

		// class UKillerBeingPossessedInteraction : public UBeingPossessedInteraction
		TEST_METHOD(Class__TheTwins__KillerBeingPossessedInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerBeingPossessedInteraction, _wakeUpSpeedCurve, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerBeingPossessedInteraction, UnknownData_G44B, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerBeingPossessedInteraction, 0x0550);
		}

		// class UPossessionComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__PossessionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessionComponent, UnknownData_L35X, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessionComponent, _startPossessed, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessionComponent, UnknownData_2BUE, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessionComponent, _emptyController, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessionComponent, UnknownData_R7EA, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPossessionComponent, 0x0140);
		}

		// class UMaterialExpressionTangentOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionTangentOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTangentOutput, UnknownData_YOXT, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTangentOutput, 0x0068);
		}

		// class UMaterialExpressionTemporalSobol : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTemporalSobol)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, index, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_QV8G, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, seed, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_E99T, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, ConstSeed, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTemporalSobol, UnknownData_BRLY, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTemporalSobol, 0x0090);
		}

		// class UMaterialExpressionTextureCoordinate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, CoordinateIndex, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UTiling, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, VTiling, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureCoordinate, UnknownData_WF4B, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureCoordinate, 0x0058);
		}

		// class UKillerPossessionComponent : public UPossessionComponent
		TEST_METHOD(Class__TheTwins__KillerPossessionComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerPossessionComponent, 0x0140);
		}

		// class UPossessNegationEffectComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__PossessNegationEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessNegationEffectComponent, PlayCantPossessSound, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessNegationEffectComponent, UnknownData_XYSZ, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPossessNegationEffectComponent, 0x00D0);
		}

		// class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObject)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObject, 0x0058);
		}

		// class UKillerPossessNegationEffectComponent : public UPossessNegationEffectComponent
		TEST_METHOD(Class__TheTwins__KillerPossessNegationEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerPossessNegationEffectComponent, UnknownData_M4AA, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerPossessNegationEffectComponent, 0x00F0);
		}

		// class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureObjectParameter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureObjectParameter, 0x0130);
		}

		// class UMaterialExpressionTextureProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTextureProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, TextureObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_V8MS, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, Property, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureProperty, UnknownData_PQHQ, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureProperty, 0x0068);
		}

		// class UOppression : public Uperk
		TEST_METHOD(Class__TheTwins__Oppression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOppression, _nbGeneratorsAffectedByPerk, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOppression, _perkCooldown, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOppression, 0x0360);
		}

		// class UPossessTheKiller : public UPossessPlayer
		TEST_METHOD(Class__TheTwins__PossessTheKiller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPossessTheKiller, UnknownData_5GLD, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPossessTheKiller, 0x0690);
		}

		// class UMaterialExpressionTextureSampleParameter2DArray : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameter2DArray)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameter2DArray, 0x0130);
		}

		// class UPowerStruggle : public Uperk
		TEST_METHOD(Class__TheTwins__PowerStruggle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerStruggle, _wigglePercentToActivatePerk, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPowerStruggle, UnknownData_4ZJM, 0x0354);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPowerStruggle, 0x0358);
		}

		// class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterCube)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterCube, 0x0130);
		}

		// class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTextureSampleParameterSubUV, UnknownData_916V, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterSubUV, 0x0138);
		}

		// class UPushTwinOnLockerInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTwins__PushTwinOnLockerInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushTwinOnLockerInteraction, _pushTwinOnLockerChargeable, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushTwinOnLockerInteraction, _pushTwinOnLockerMaxCharge, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPushTwinOnLockerInteraction, UnknownData_RTBV, 0x0658);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPushTwinOnLockerInteraction, 0x0690);
		}

		// class UMaterialExpressionTextureSampleParameterVolume : public UMaterialExpressionTextureSampleParameter
		TEST_METHOD(Class__Engine__MaterialExpressionTextureSampleParameterVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTextureSampleParameterVolume, 0x0130);
		}

		// class UMaterialExpressionThinTranslucentMaterialOutput : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionThinTranslucentMaterialOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, TransmittanceColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionThinTranslucentMaterialOutput, UnknownData_WQEU, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionThinTranslucentMaterialOutput, 0x0068);
		}

		// class URecallTwin : public UinteractionDefinition
		TEST_METHOD(Class__TheTwins__RecallTwin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URecallTwin, UnknownData_F4VR, 0x0500);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URecallTwin, 0x0530);
		}

		// class UMaterialExpressionTime : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, UnknownData_K49V, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTime, Period, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTime, 0x0050);
		}

		// class UReleaseConjoinedTwin : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTwins__ReleaseConjoinedTwin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReleaseConjoinedTwin, _releaseMaxCharge, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReleaseConjoinedTwin, _releaseExitTime, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReleaseConjoinedTwin, UnknownData_TWSS, 0x0690);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReleaseConjoinedTwin, _releaseAnimationWentToTheEnd, 0x06C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReleaseConjoinedTwin, UnknownData_7NB7, 0x06C5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReleaseConjoinedTwin, 0x0750);
		}

		// class UMaterialExpressionTransform : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_TG40, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformSourceType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, TransformType, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransform, UnknownData_QWLV, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransform, 0x0068);
		}

		// class UMaterialExpressionTransformPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTransformPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_BZSY, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformSourceType, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, TransformType, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTransformPosition, UnknownData_TVAR, 0x0066);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTransformPosition, 0x0068);
		}

		// class URemoveTwin : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheTwins__RemoveTwin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveTwin, UnknownData_URLF, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveTwin, UnknownData_HPL2, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveTwin, _removeTwinMaxCharge, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveTwin, _removeTwinExitTime, 0x0680);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveTwin, _brotherRemoveDistanceFromSurvivor, 0x06A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoveTwin, UnknownData_47PK, 0x06AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoveTwin, 0x06C0);
		}

		// class UMaterialExpressionTruncate : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTruncate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionTruncate, UnknownData_Z0DW, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTruncate, 0x0068);
		}

		// class USisterBlindFlashlightableLightingStrategy : public UBlindFlashlightableLightingStrategy
		TEST_METHOD(Class__TheTwins__SisterBlindFlashlightableLightingStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USisterBlindFlashlightableLightingStrategy, UnknownData_GJZU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USisterBlindFlashlightableLightingStrategy, 0x0070);
		}

		// class UMaterialExpressionTwoSidedSign : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionTwoSidedSign)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionTwoSidedSign, 0x0048);
		}

		// class UMaterialExpressionVectorNoise : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVectorNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, position, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_N76I, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, NoiseFunction, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_AL0A, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, Quality, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_5PCJ, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, TileSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVectorNoise, UnknownData_MUAF, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVectorNoise, 0x0078);
		}

		// class UTheTwinsCheatComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__TheTwinsCheatComponent)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTheTwinsCheatComponent, 0x00B8);
		}

		// class UTwinAOELingeringStatusEffect : public UBaseLingeringStatusEffect
		TEST_METHOD(Class__TheTwins__TwinAOELingeringStatusEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAOELingeringStatusEffect, _shriekingRange, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAOELingeringStatusEffect, UnknownData_95SL, 0x02F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinAOELingeringStatusEffect, 0x0310);
		}

		// class UMaterialExpressionVertexColor : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexColor)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexColor, 0x0048);
		}

		// class UTwinAttachmentComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__TwinAttachmentComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, UnknownData_D12M, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, _attachedPlayer, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, UnknownData_C021, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, _hasBeenDetachedBySurvivorDamageChanged, 0x0172);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, UnknownData_UQ35, 0x0173);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, _cantEscapeByGateLingerDuration, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinAttachmentComponent, _escapeBlockerLingerTimers, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinAttachmentComponent, 0x01F0);
		}

		// class UMaterialExpressionVertexInterpolator : public UMaterialExpressionCustomOutput
		TEST_METHOD(Class__Engine__MaterialExpressionVertexInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, input, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVertexInterpolator, UnknownData_H9F7, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexInterpolator, 0x0070);
		}

		// class UMaterialExpressionVertexNormalWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexNormalWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexNormalWS, 0x0048);
		}

		// class UMaterialExpressionVertexTangentWS : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVertexTangentWS)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVertexTangentWS, 0x0048);
		}

		// class UMaterialExpressionViewProperty : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, Property, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionViewProperty, UnknownData_8QBZ, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewProperty, 0x0050);
		}

		// class UMaterialExpressionViewSize : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionViewSize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionViewSize, 0x0048);
		}

		// class UTwinBaseAddon : public UItemAddon
		TEST_METHOD(Class__TheTwins__TwinBaseAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinBaseAddon, _statusEffectID, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinBaseAddon, _customParam, 0x0224);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinBaseAddon, 0x0228);
		}

		// class UMaterialExpressionVirtualTextureFeatureSwitch : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionVirtualTextureFeatureSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, No, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_3R6G, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, Yes, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionVirtualTextureFeatureSwitch, UnknownData_5JKV, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionVirtualTextureFeatureSwitch, 0x0080);
		}

		// class UTwinBaseKillerInstinctEffect : public UstatusEffect
		TEST_METHOD(Class__TheTwins__TwinBaseKillerInstinctEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinBaseKillerInstinctEffect, _lullabyRange, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinBaseKillerInstinctEffect, _lingerDuration, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinBaseKillerInstinctEffect, UnknownData_FBBZ, 0x0310);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinBaseKillerInstinctEffect, 0x03B0);
		}

		// class UMaterialExpressionWorldPosition : public UMaterialExpression
		TEST_METHOD(Class__Engine__MaterialExpressionWorldPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, WorldPositionShaderOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialExpressionWorldPosition, UnknownData_STNT, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialExpressionWorldPosition, 0x0050);
		}

		// class UMaterialFunctionInterface : public UObject
		TEST_METHOD(Class__Engine__MaterialFunctionInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, StateId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, MaterialFunctionUsage, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInterface, UnknownData_ZDVZ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInterface, 0x0048);
		}

		// class UTwinBeingPossessedInteraction : public UBeingPossessedInteraction
		TEST_METHOD(Class__TheTwins__TwinBeingPossessedInteraction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinBeingPossessedInteraction, 0x0540);
		}

		// class UTwinCharacterMovementComponent : public UDBDCharacterMovementComponent
		TEST_METHOD(Class__TheTwins__TwinCharacterMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinCharacterMovementComponent, UnknownData_5SSC, 0x08C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinCharacterMovementComponent, 0x08D0);
		}

		// class UMaterialFunction : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunction, UnknownData_8R3D, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunction, 0x0060);
		}

		// class UTwinDestructionComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__TwinDestructionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, UnknownData_RLYC, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, _huskClass, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, _dyingTransform, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, UnknownData_EDIP, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, _diedFromSurvivorRemovingTwin, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, UnknownData_Q7A9, 0x0139);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, _dyingFromSurvivorTranslation, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinDestructionComponent, UnknownData_B5A7, 0x0194);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinDestructionComponent, 0x01A0);
		}

		// class UMaterialFunctionInstance : public UMaterialFunctionInterface
		TEST_METHOD(Class__Engine__MaterialFunctionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Parent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, Base, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, ScalarParameterValues, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, VectorParameterValues, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, TextureParameterValues, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, FontParameterValues, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticSwitchParameterValues, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, StaticComponentMaskParameterValues, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialFunctionInstance, RuntimeVirtualTextureParameterValues, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionInstance, 0x00C8);
		}

		// class UTwinFirstPersonViewComponent : public UFirstPersonViewComponent
		TEST_METHOD(Class__TheTwins__TwinFirstPersonViewComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinFirstPersonViewComponent, UnknownData_T9HO, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinFirstPersonViewComponent, 0x00E8);
		}

		// class UMaterialFunctionMaterialLayer : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayer, 0x0060);
		}

		// class UTwinHuskAnimInstance : public UanimInstance
		TEST_METHOD(Class__TheTwins__TwinHuskAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinHuskAnimInstance, _isDeadFromSurvivorBack, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinHuskAnimInstance, UnknownData_0CRT, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinHuskAnimInstance, _owningPawn, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinHuskAnimInstance, _twinHuskStateComponent, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinHuskAnimInstance, UnknownData_I064, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinHuskAnimInstance, 0x0290);
		}

		// class UMaterialFunctionMaterialLayerInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerInstance, 0x00C8);
		}

		// class UMaterialFunctionMaterialLayerBlend : public UMaterialFunction
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlend)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlend, 0x0060);
		}

		// class UTwinHuskStateComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__TwinHuskStateComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinHuskStateComponent, UnknownData_NIPA, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinHuskStateComponent, 0x00C0);
		}

		// class UMaterialFunctionMaterialLayerBlendInstance : public UMaterialFunctionInstance
		TEST_METHOD(Class__Engine__MaterialFunctionMaterialLayerBlendInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialFunctionMaterialLayerBlendInstance, 0x00C8);
		}

		// class UMaterialInstanceActor : public Uactor
		TEST_METHOD(Class__Engine__MaterialInstanceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceActor, TargetActors, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceActor, 0x0240);
		}

		// class UBaseTwinInspectLocker : public UBaseLockerInteraction
		TEST_METHOD(Class__TheTwins__BaseTwinInspectLocker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTwinInspectLocker, _inspectInteractionTime, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseTwinInspectLocker, UnknownData_LXBH, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseTwinInspectLocker, 0x0540);
		}

		// class UMaterialInstanceDynamic : public UMaterialInstance
		TEST_METHOD(Class__Engine__MaterialInstanceDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialInstanceDynamic, UnknownData_Z7OH, 0x0410);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialInstanceDynamic, 0x0460);
		}

		// class UTwinInspectEmptyLocker : public UBaseTwinInspectLocker
		TEST_METHOD(Class__TheTwins__TwinInspectEmptyLocker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinInspectEmptyLocker, 0x0540);
		}

		// class UTwinInspectOccupiedLocker : public UBaseTwinInspectLocker
		TEST_METHOD(Class__TheTwins__TwinInspectOccupiedLocker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinInspectOccupiedLocker, 0x0540);
		}

		// class UTwinJumpAttack : public UPounceAttack
		TEST_METHOD(Class__TheTwins__TwinJumpAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, _jumpVelocity, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, _jumpAngleCurve, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, UnknownData_H4R9, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, _upDownObstructionAnglePrecision, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, _leftRightObstructionAnglePrecision, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, _authorizedLandingHeight, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, UnknownData_23EZ, 0x03B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, _shouldTwinHaveJumpObjectType, 0x03C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttack, UnknownData_1HSG, 0x03C2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpAttack, 0x03D0);
		}

		// class UMaterialParameterCollection : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, StateId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, ScalarParameters, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, VectorParameters, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollection, UnknownData_5HOS, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollection, 0x0080);
		}

		// class UTwinJumpAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__TheTwins__TwinJumpAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttackOpenSubstate, UnknownData_6U09, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpAttackOpenSubstate, 0x0190);
		}

		// class UMaterialParameterCollectionInstance : public UObject
		TEST_METHOD(Class__Engine__MaterialParameterCollectionInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_OTEV, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, collection, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMaterialParameterCollectionInstance, UnknownData_FQ12, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMaterialParameterCollectionInstance, 0x00F8);
		}

		// class UTwinJumpAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheTwins__TwinJumpAttackSuccessSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttackSuccessSubstate, _jumpSucceedAttachedCooldownTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpAttackSuccessSubstate, _jumpSucceedNotAttachedCooldownTime, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpAttackSuccessSubstate, 0x0128);
		}

		// class UMatineeActor : public Uactor
		TEST_METHOD(Class__Engine__MatineeActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, MatineeData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, MatineeControllerName, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, playRate, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_W7GC, 0x0249);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, ForceStartPosition, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_M1Q8, 0x0251);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, PreferredSplitScreenNum, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_5D30, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, GroupActorInfos, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_HQXS, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, GroupInst, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, CameraCuts, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_YCKO, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, InterpPosition, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_MI8B, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, ReplicationForceIsPlaying, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_AM7I, 0x02A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, OnPlay, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, OnStop, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, OnPause, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActor, UnknownData_RJ2M, 0x02D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeActor, 0x02E0);
		}

		// class UTwinJumpAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__TheTwins__TwinJumpAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpAttackMissSubstate, 0x00E0);
		}

		// class UTwinJumpAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__TheTwins__TwinJumpAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpAttackObstructSubstate, 0x00E8);
		}

		// class UTwinJumpAudioMutedEffect : public UstatusEffect
		TEST_METHOD(Class__TheTwins__TwinJumpAudioMutedEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpAudioMutedEffect, 0x02A8);
		}

		// class UTwinJumpTargetVisibleEffect : public UstatusEffect
		TEST_METHOD(Class__TheTwins__TwinJumpTargetVisibleEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpTargetVisibleEffect, _twinJumpTargetObject, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpTargetVisibleEffect, _twinJumpTarget, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinJumpTargetVisibleEffect, _jumpTargetVisibility, 0x02B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinJumpTargetVisibleEffect, 0x02C0);
		}

		// class UTwinLockerBlockerComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__TwinLockerBlockerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLockerBlockerComponent, _interactionClasses, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLockerBlockerComponent, UnknownData_O91P, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLockerBlockerComponent, _interactionsToDisableOnLockerClasses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLockerBlockerComponent, UnknownData_DVDX, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinLockerBlockerComponent, 0x0128);
		}

		// class UTwinLullabyRangeAdditiveEffect : public UstatusEffect
		TEST_METHOD(Class__TheTwins__TwinLullabyRangeAdditiveEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLullabyRangeAdditiveEffect, _defaultTwinLullabyDormantRange, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLullabyRangeAdditiveEffect, _twinLullabyDormantRange, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLullabyRangeAdditiveEffect, _twinLullabyAttachedRange, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinLullabyRangeAdditiveEffect, UnknownData_0K1E, 0x0350);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinLullabyRangeAdditiveEffect, 0x0378);
		}

		// class UMatineeActorCameraAnim : public UMatineeActor
		TEST_METHOD(Class__Engine__MatineeActorCameraAnim)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMatineeActorCameraAnim, CameraAnim, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeActorCameraAnim, 0x02E8);
		}

		// class UTwinOutlineUpdateStrategy : public UOutlineUpdateStrategy
		TEST_METHOD(Class__TheTwins__TwinOutlineUpdateStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinOutlineUpdateStrategy, _visibleColorForKiller, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinOutlineUpdateStrategy, UnknownData_BB4F, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinOutlineUpdateStrategy, 0x0110);
		}

		// class UMatineeAnimInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeAnimInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeAnimInterface, 0x0030);
		}

		// class UTwinPlacerComponent : public UObjectPlacerComponent
		TEST_METHOD(Class__TheTwins__TwinPlacerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinPlacerComponent, UnknownData_WUQL, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinPlacerComponent, 0x0270);
		}

		// class UMatineeInterface : public UInterface
		TEST_METHOD(Class__Engine__MatineeInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMatineeInterface, 0x0030);
		}

		// class UtwinPossessionComponent : public UPossessionComponent
		TEST_METHOD(Class__TheTwins__twinPossessionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UtwinPossessionComponent, UnknownData_XNH4, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UtwinPossessionComponent, 0x0160);
		}

		// class UMeshMergeCullingVolume : public Uvolume
		TEST_METHOD(Class__Engine__MeshMergeCullingVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshMergeCullingVolume, 0x0268);
		}

		// class UTwinPossessNegationEffectComponent : public UPossessNegationEffectComponent
		TEST_METHOD(Class__TheTwins__TwinPossessNegationEffectComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinPossessNegationEffectComponent, UnknownData_8V2U, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinPossessNegationEffectComponent, 0x00F0);
		}

		// class UMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__MeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, MeshReductionModuleName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshSimplificationSettings, UnknownData_BLGX, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshSimplificationSettings, 0x0058);
		}

		// class UTwinsAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheTwins__TwinsAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinsAnimInstance, UnknownData_65B2, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinsAnimInstance, UnknownData_IR43, 0x05B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinsAnimInstance, 0x0640);
		}

		// class UTwinsSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__TheTwins__TwinsSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinsSurvivorSubAnimInstance, _isRemovingTwin, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinsSurvivorSubAnimInstance, UnknownData_F1BO, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinsSurvivorSubAnimInstance, 0x0530);
		}

		// class UMeshVertexPainterKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__MeshVertexPainterKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshVertexPainterKismetLibrary, 0x0030);
		}

		// class UTwinStateHelperComponent : public UactorComponent
		TEST_METHOD(Class__TheTwins__TwinStateHelperComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinStateHelperComponent, UnknownData_94ZF, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinStateHelperComponent, 0x00E8);
		}

		// class UTwinStunnableComponent : public UstunnableComponent
		TEST_METHOD(Class__TheTwins__TwinStunnableComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinStunnableComponent, UnknownData_2L3K, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinStunnableComponent, 0x00D8);
		}

		// class UTwinSubjectProvider : public UModifierSubjectProvider
		TEST_METHOD(Class__TheTwins__TwinSubjectProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTwinSubjectProvider, UnknownData_8KAP, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwinSubjectProvider, 0x0050);
		}

		// class UMicroTransactionBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__MicroTransactionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, AvailableProducts, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastError, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMicroTransactionBase, LastErrorSolution, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMicroTransactionBase, 0x0070);
		}

		// class UModelComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__ModelComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_I0ZI, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_XAV1, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, ModelBodySetup, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UModelComponent, UnknownData_37PM, 0x0448);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UModelComponent, 0x0470);
		}

		// class UMorphTarget : public UObject
		TEST_METHOD(Class__Engine__MorphTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, BaseSkelMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMorphTarget, UnknownData_FTDO, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMorphTarget, 0x0048);
		}

		// class UNavAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__NavAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavAgentInterface, 0x0030);
		}

		// class UNavCollisionBase : public UObject
		TEST_METHOD(Class__Engine__NavCollisionBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavCollisionBase, UnknownData_8ECA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavCollisionBase, 0x0078);
		}

		// class UNavEdgeProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NavEdgeProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavEdgeProviderInterface, 0x0030);
		}

		// class UNavigationDataChunk : public UObject
		TEST_METHOD(Class__Engine__NavigationDataChunk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, NavigationDataName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationDataChunk, UnknownData_KQ8M, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataChunk, 0x0040);
		}

		// class UNavigationDataInterface : public UInterface
		TEST_METHOD(Class__Engine__NavigationDataInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationDataInterface, 0x0030);
		}

		// class UNavigationSystemBase : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemBase, 0x0030);
		}

		// class UNavigationSystemConfig : public UObject
		TEST_METHOD(Class__Engine__NavigationSystemConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, NavigationSystemClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, SupportedAgentsMask, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, DefaultAgentName, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavigationSystemConfig, UnknownData_FYRM, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavigationSystemConfig, 0x0068);
		}

		// class UNullNavSysConfig : public UNavigationSystemConfig
		TEST_METHOD(Class__Engine__NullNavSysConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNullNavSysConfig, 0x0068);
		}

		// class UNavLinkDefinition : public UObject
		TEST_METHOD(Class__Engine__NavLinkDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, Links, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, SegmentLinks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNavLinkDefinition, UnknownData_6XMG, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavLinkDefinition, 0x0058);
		}

		// class UNavPathObserverInterface : public UInterface
		TEST_METHOD(Class__Engine__NavPathObserverInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavPathObserverInterface, 0x0030);
		}

		// class UNavRelevantInterface : public UInterface
		TEST_METHOD(Class__Engine__NavRelevantInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNavRelevantInterface, 0x0030);
		}

		// class USimulatedClientNetConnection : public UNetConnection
		TEST_METHOD(Class__Engine__SimulatedClientNetConnection)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimulatedClientNetConnection, 0x1A48);
		}

		// class UNetPushModelHelpers : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__NetPushModelHelpers)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetPushModelHelpers, 0x0030);
		}

		// class UNetworkPredictionInterface : public UInterface
		TEST_METHOD(Class__Engine__NetworkPredictionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkPredictionInterface, 0x0030);
		}

		// class UNetworkSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__NetworkSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_S6OA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArraySize, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, MaxRepArrayMemory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, UnknownData_1GOU, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNetworkSettings, NetworkEmulationProfiles, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNetworkSettings, 0x0068);
		}

		// class UNodeMappingContainer : public UObject
		TEST_METHOD(Class__Engine__NodeMappingContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceItems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetItems, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceToTarget, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, SourceAsset, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UNodeMappingContainer, TargetAsset, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingContainer, 0x0180);
		}

		// class UNodeMappingProviderInterface : public UInterface
		TEST_METHOD(Class__Engine__NodeMappingProviderInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNodeMappingProviderInterface, 0x0030);
		}

		// class UNote : public Uactor
		TEST_METHOD(Class__Engine__Note)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UNote, 0x0230);
		}

		// class UObjectLibrary : public UObject
		TEST_METHOD(Class__Engine__ObjectLibrary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, ObjectBaseClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bHasBlueprintClasses, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_JF24, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, Objects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, WeakObjects, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bUseWeakReferences, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, bIsFullyLoaded, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectLibrary, UnknownData_ZE1H, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectLibrary, 0x00B0);
		}

		// class UObjectReferencer : public UObject
		TEST_METHOD(Class__Engine__ObjectReferencer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectReferencer, ReferencedObjects, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectReferencer, 0x0040);
		}

		// class UObjectTraceWorldSubsystem : public UWorldSubsystem
		TEST_METHOD(Class__Engine__ObjectTraceWorldSubsystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UObjectTraceWorldSubsystem, UnknownData_CJVE, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UObjectTraceWorldSubsystem, 0x0040);
		}

		// class UPackageMapClient : public UPackageMap
		TEST_METHOD(Class__Engine__PackageMapClient)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPackageMapClient, UnknownData_PCQR, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPackageMapClient, 0x0400);
		}

		// class UPainCausingVolume : public UPhysicsVolume
		TEST_METHOD(Class__Engine__PainCausingVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, UnknownData_3614, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, DamagePerSec, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, DamageType, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, PainInterval, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, UnknownData_IYUK, 0x028D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, DamageInstigator, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPainCausingVolume, UnknownData_YUD0, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPainCausingVolume, 0x02A0);
		}

		// class UParticleEmitter : public UObject
		TEST_METHOD(Class__Engine__ParticleEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SubUVDataOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, EmitterRenderMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, SignificanceLevel, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_4RQO, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_VJE1, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, LODLevels, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, PeakActiveParticles, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, InitialAllocationCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, QualityLevelSpawnRateScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, DetailModeBitmask, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, BHVRDetailModeBitMask, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleEmitter, UnknownData_A0C3, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEmitter, 0x01D0);
		}

		// class UParticleEventManager : public Uactor
		TEST_METHOD(Class__Engine__ParticleEventManager)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleEventManager, 0x0230);
		}

		// class UParticleLODLevel : public UObject
		TEST_METHOD(Class__Engine__ParticleLODLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, level, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_6FA3, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, RequiredModule, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, Modules, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, TypeDataModule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModule, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventGenerator, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawningModules, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, SpawnModules, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UpdateModules, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, OrbitModules, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, EventReceiverModules, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, UnknownData_RS7T, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleLODLevel, PeakActiveParticles, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleLODLevel, 0x00C0);
		}

		// class UParticleModule : public UObject
		TEST_METHOD(Class__Engine__ParticleModule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, LODValidity, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModule, UnknownData_RXAI, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModule, 0x0038);
		}

		// class UParticleModuleAccelerationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationBase, UnknownData_HU3K, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationBase, 0x0040);
		}

		// class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAcceleration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, Acceleration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAcceleration, UnknownData_3I2K, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAcceleration, 0x0090);
		}

		// class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationConstant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, Acceleration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationConstant, UnknownData_DMMQ, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationConstant, 0x0050);
		}

		// class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDrag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficient, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDrag, DragCoefficientRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDrag, 0x0078);
		}

		// class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationDragScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationDragScaleOverLife, DragScaleRaw, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationDragScaleOverLife, 0x0078);
		}

		// class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
		TEST_METHOD(Class__Engine__ParticleModuleAccelerationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAccelerationOverLifetime, AccelOverLife, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAccelerationOverLifetime, 0x0088);
		}

		// class UParticleModuleAttractorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleAttractorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorBase, 0x0038);
		}

		// class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint0, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, EndPoint1, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, range, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorLine, Strength, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorLine, 0x00B0);
		}

		// class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorParticle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, EmitterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_O5ZZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, range, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_2XVA, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, Strength, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_WXF0, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, SelectionMethod, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_36LD, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, UnknownData_0ZNF, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorParticle, LastSelIndex, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorParticle, 0x00C0);
		}

		// class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, range, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, Strength, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPoint, UnknownData_CQSE, 0x00E2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPoint, 0x00E8);
		}

		// class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
		TEST_METHOD(Class__Engine__ParticleModuleAttractorPointGravity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, position, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, radius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, Strength, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleAttractorPointGravity, StrengthRaw, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleAttractorPointGravity, 0x0080);
		}

		// class UParticleModuleBeamBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleBeamBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamBase, 0x0038);
		}

		// class UParticleModuleBeamModifier : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, ModifierType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_6MNJ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, PositionOptions, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, position, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, TangentOptions, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_PIKF, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Tangent, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, UnknownData_PXYM, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, StrengthOptions, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamModifier, Strength, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamModifier, 0x0110);
		}

		// class UParticleModuleBeamNoise : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamNoise)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_OE25, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, frequency, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, Frequency_LowRange, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_LE30, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRange, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseRangeScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_2G6C, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseSpeed, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_KXIY, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockRadius, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_OB3E, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseLockTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTension, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7CO5, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTangentStrength, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseTessellation, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_7OXI, 0x015D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, FrequencyDistance, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, UnknownData_U4CC, 0x0165);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamNoise, NoiseScale, 0x0168);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamNoise, 0x0198);
		}

		// class UParticleModuleBeamSource : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_MIQZ, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_L5C0, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, source, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_8OTN, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangentMethod, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_KY8I, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceTangent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_SXR3, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, SourceStrength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamSource, UnknownData_XKM9, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamSource, 0x0128);
		}

		// class UParticleModuleBeamTarget : public UParticleModuleBeamBase
		TEST_METHOD(Class__Engine__ParticleModuleBeamTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_LY12, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, target, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_3CZY, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangentMethod, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_1XCA, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetTangent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_SCXS, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, TargetStrength, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_J23Z, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, LockRadius, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleBeamTarget, UnknownData_6JXA, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleBeamTarget, 0x0128);
		}

		// class UParticleModuleCameraBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCameraBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraBase, 0x0038);
		}

		// class UParticleModuleCameraOffset : public UParticleModuleCameraBase
		TEST_METHOD(Class__Engine__ParticleModuleCameraOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, CameraOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_OKS8, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UpdateMethod, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCameraOffset, UnknownData_STW0, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCameraOffset, 0x0070);
		}

		// class UParticleModuleCollisionBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleCollisionBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionBase, 0x0038);
		}

		// class UParticleModuleCollision : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollision)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DampingFactorRotation, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisions, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionCompletionOption, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_WTSJ, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, CollisionTypes, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_J07T, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_5B6D, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, ParticleMass, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DirScalar, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_YBIB, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, VerticalFudgeFactor, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_AEKQ, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, DelayAmount, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, UnknownData_FES9, 0x0191);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollision, MaxCollisionDistance, 0x0194);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollision, 0x0198);
		}

		// class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
		TEST_METHOD(Class__Engine__ParticleModuleCollisionGPU)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Resilience, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, ResilienceScaleOverLife, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Friction, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomSpread, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RandomDistribution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusScale, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, RadiusBias, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, Response, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, CollisionMode, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleCollisionGPU, UnknownData_Q7FZ, 0x00AE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleCollisionGPU, 0x00B0);
		}

		// class UParticleModuleColorBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleColorBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorBase, 0x0038);
		}

		// class UParticleModuleColor : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, StartAlpha, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor, UnknownData_3L42, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor, 0x00B8);
		}

		// class UParticleModuleColor_Seeded : public UParticleModuleColor
		TEST_METHOD(Class__Engine__ParticleModuleColor_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColor_Seeded, RandomSeedInfo, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColor_Seeded, 0x00D8);
		}

		// class UParticleModuleColorOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, ColorOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, AlphaOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorOverLife, UnknownData_XTCM, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorOverLife, 0x00B8);
		}

		// class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
		TEST_METHOD(Class__Engine__ParticleModuleColorScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, ColorScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, AlphaScaleOverLife, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleColorScaleOverLife, UnknownData_BT2M, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleColorScaleOverLife, 0x00B8);
		}

		// class UParticleModuleEventBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleEventBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventBase, 0x0038);
		}

		// class UParticleModuleEventGenerator : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventGenerator, Events, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventGenerator, 0x0048);
		}

		// class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventGeneratorType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, UnknownData_VHZU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverBase, EventName, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverBase, 0x0048);
		}

		// class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverKillParticles)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverKillParticles, UnknownData_HD18, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverKillParticles, 0x0050);
		}

		// class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
		TEST_METHOD(Class__Engine__ParticleModuleEventReceiverSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, SpawnCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_2WCG, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, InheritVelocityScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, PhysicalMaterials, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleEventReceiverSpawn, UnknownData_BAL7, 0x00D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventReceiverSpawn, 0x00E0);
		}

		// class UParticleModuleEventSendToGame : public UObject
		TEST_METHOD(Class__Engine__ParticleModuleEventSendToGame)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleEventSendToGame, 0x0030);
		}

		// class UParticleModuleKillBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleKillBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBase, 0x0038);
		}

		// class UParticleModuleKillBox : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, LowerLeftCorner, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UpperRightCorner, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillBox, UnknownData_43O6, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillBox, 0x00D0);
		}

		// class UParticleModuleKillHeight : public UParticleModuleKillBase
		TEST_METHOD(Class__Engine__ParticleModuleKillHeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleKillHeight, UnknownData_A9BG, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleKillHeight, 0x0070);
		}

		// class UParticleModuleLifetimeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLifetimeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetimeBase, 0x0038);
		}

		// class UParticleModuleLifetime : public UParticleModuleLifetimeBase
		TEST_METHOD(Class__Engine__ParticleModuleLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime, lifeTime, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime, 0x0068);
		}

		// class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
		TEST_METHOD(Class__Engine__ParticleModuleLifetime_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLifetime_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLifetime_Seeded, 0x0088);
		}

		// class UParticleModuleLightBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLightBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLightBase, 0x0038);
		}

		// class UParticleModuleLight : public UParticleModuleLightBase
		TEST_METHOD(Class__Engine__ParticleModuleLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bUseInverseSquaredFalloff, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bAffectsTranslucency, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bPreviewLightRadius, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_H4S2, 0x003B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, SpawnFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, ColorScaleOverLife, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, BrightnessOverLife, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, RadiusScale, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, LightExponent, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, lightingChannels, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_231E, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, VolumetricScatteringIntensity, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bHighQualityLights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, bShadowCastingLights, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight, UnknownData_E6B0, 0x0122);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight, 0x0128);
		}

		// class UParticleModuleLight_Seeded : public UParticleModuleLight
		TEST_METHOD(Class__Engine__ParticleModuleLight_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLight_Seeded, RandomSeedInfo, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLight_Seeded, 0x0148);
		}

		// class UParticleModuleLocationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleLocationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBase, 0x0038);
		}

		// class UParticleModuleLocation : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, StartLocation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeOverNPoints, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation, DistributeThreshold, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation, 0x0088);
		}

		// class UParticleModuleLocation_Seeded : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocation_Seeded, 0x00A8);
		}

		// class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationBoneSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_E1PK, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UniversalOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SourceLocations, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SelectionMethod, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_Q0RF, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_QIOQ, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, InheritVelocityScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, SkelMeshActorParamName, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, NumPreSelectedIndices, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationBoneSocket, UnknownData_1FP5, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationBoneSocket, 0x0078);
		}

		// class UParticleModuleLocationDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, location, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, LocationOffset, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, scaleFactor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationDirect, direction, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationDirect, 0x0158);
		}

		// class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, EmitterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, SelectionMethod, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_EFVT, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_Z7KP, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceVelocityScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, UnknownData_Z1YJ, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitter, InheritSourceRotationScale, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitter, 0x0058);
		}

		// class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationEmitterDirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, EmitterName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationEmitterDirect, UnknownData_Q0J6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationEmitterDirect, 0x0048);
		}

		// class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, UnknownData_RP2U, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, VelocityScale, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveBase, StartLocation, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveBase, 0x00B8);
		}

		// class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_K0O8, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartRadius, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, StartHeight, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, HeightAxis, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder, UnknownData_G6UT, 0x0121);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder, 0x0128);
		}

		// class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveCylinder_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, RandomSeedInfo, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveCylinder_Seeded, 0x0148);
		}

		// class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere, StartRadius, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere, 0x00E8);
		}

		// class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveSphere_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveSphere_Seeded, RandomSeedInfo, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveSphere_Seeded, 0x0108);
		}

		// class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationPrimitiveTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, StartOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Height, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, angle, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationPrimitiveTriangle, Thickness, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationPrimitiveTriangle, 0x0110);
		}

		// class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationSkelVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_UEPS, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UniversalOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_GCOL, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritVelocityScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, SkelMeshActorParamName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_YLPD, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidAssociatedBones, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_EZDO, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalToCompare, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckToleranceDegrees, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, NormalCheckTolerance, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, ValidMaterialIndices, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, UnknownData_CT9K, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationSkelVertSurface, InheritUVChannel, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationSkelVertSurface, 0x00A0);
		}

		// class UParticleModuleLocationStaticVertSurface : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleLocationStaticVertSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, SourceType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, UnknownData_F0QU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, UniversalOffset, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, UnknownData_AJOJ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, StaticMeshActorParamName, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, UnknownData_KKF7, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, NormalToCompare, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, NormalCheckToleranceDegrees, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, NormalCheckTolerance, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, ValidMaterialIndices, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, UnknownData_5KO0, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationStaticVertSurface, InheritUVChannel, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationStaticVertSurface, 0x0088);
		}

		// class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset, 0x0088);
		}

		// class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
		TEST_METHOD(Class__Engine__ParticleModuleLocationWorldOffset_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleLocationWorldOffset_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleLocationWorldOffset_Seeded, 0x00A8);
		}

		// class UParticleModuleMaterialBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleMaterialBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMaterialBase, 0x0038);
		}

		// class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshMaterial, MeshMaterials, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshMaterial, 0x0048);
		}

		// class UParticleModuleRotationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationBase, 0x0038);
		}

		// class UParticleModuleMeshRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, StartRotation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation, UnknownData_7BXB, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation, 0x0088);
		}

		// class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotation_Seeded, RandomSeedInfo, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotation_Seeded, 0x00A8);
		}

		// class UParticleModuleRotationRateBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateBase, 0x0038);
		}

		// class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate, StartRotationRate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate, 0x0080);
		}

		// class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRate_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRate_Seeded, 0x00A0);
		}

		// class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateMultiplyLife, LifeMultiplier, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateMultiplyLife, 0x0080);
		}

		// class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleMeshRotationRateOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, RotRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleMeshRotationRateOverLife, UnknownData_64F8, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleMeshRotationRateOverLife, 0x0088);
		}

		// class UParticleModuleOrbitBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrbitBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbitBase, UnknownData_45TG, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbitBase, 0x0040);
		}

		// class UParticleModuleOrbit : public UParticleModuleOrbitBase
		TEST_METHOD(Class__Engine__ParticleModuleOrbit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, ChainMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_QXJ5, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetAmount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, OffsetOptions, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_L4TZ, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationAmount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationOptions, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_5IY4, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateAmount, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, RotationRateOptions, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrbit, UnknownData_L0WS, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrbit, 0x0138);
		}

		// class UParticleModuleOrientationBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleOrientationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationBase, 0x0038);
		}

		// class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
		TEST_METHOD(Class__Engine__ParticleModuleOrientationAxisLock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, LockAxisFlags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleOrientationAxisLock, UnknownData_VJMA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleOrientationAxisLock, 0x0040);
		}

		// class UParticleModuleParameterBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleParameterBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterBase, 0x0038);
		}

		// class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, DynamicParams, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UpdateFlags, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic, UnknownData_09RH, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic, 0x0050);
		}

		// class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
		TEST_METHOD(Class__Engine__ParticleModuleParameterDynamic_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleParameterDynamic_Seeded, RandomSeedInfo, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleParameterDynamic_Seeded, 0x0070);
		}

		// class UParticleModulePivotOffset : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModulePivotOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModulePivotOffset, PivotOffset, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModulePivotOffset, 0x0040);
		}

		// class UParticleModuleRequired : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleRequired)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MATERIAL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MinFacingCameraBlendDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxFacingCameraBlendDistance, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterOrigin, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterRotation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ScreenAlignment, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SortMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDuration, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SpawnRate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BurstList, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelay, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDelayLow, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, InterpolationMethod, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, ParticleBurstMethod, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, OpacitySourceMode, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterNormalsMode, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Horizontal, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, SubImages_Vertical, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, RandomImageChanges, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVPosition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MacroUVRadius, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UVFlippingMode, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, BoundingMode, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_2D1R, 0x00DB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsSphereCenter, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, AlphaThreshold, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterLoops, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, CutoutTexture, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, MaxDrawCount, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, EmitterDurationLow, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NormalsCylinderDirection, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_9Y46, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, NamedMaterialOverrides, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRequired, UnknownData_222W, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRequired, 0x0148);
		}

		// class UParticleModuleRotation : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation, StartRotation, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation, 0x0068);
		}

		// class UParticleModuleRotation_Seeded : public UParticleModuleRotation
		TEST_METHOD(Class__Engine__ParticleModuleRotation_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotation_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotation_Seeded, 0x0088);
		}

		// class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, RotationOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationOverLifetime, UnknownData_R411, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationOverLifetime, 0x0070);
		}

		// class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate, StartRotationRate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate, 0x0068);
		}

		// class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
		TEST_METHOD(Class__Engine__ParticleModuleRotationRate_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRate_Seeded, RandomSeedInfo, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRate_Seeded, 0x0088);
		}

		// class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
		TEST_METHOD(Class__Engine__ParticleModuleRotationRateMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleRotationRateMultiplyLife, LifeMultiplier, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleRotationRateMultiplyLife, 0x0068);
		}

		// class UParticleModuleSizeBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSizeBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeBase, 0x0038);
		}

		// class UParticleModuleSize : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize, StartSize, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize, 0x0080);
		}

		// class UParticleModuleSize_Seeded : public UParticleModuleSize
		TEST_METHOD(Class__Engine__ParticleModuleSize_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSize_Seeded, RandomSeedInfo, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSize_Seeded, 0x00A0);
		}

		// class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeMultiplyLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, LifeMultiplier, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeMultiplyLife, UnknownData_QDD8, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeMultiplyLife, 0x0088);
		}

		// class UParticleModuleSizeScale : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, SizeScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScale, UnknownData_59WO, 0x0081);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScale, 0x0088);
		}

		// class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
		TEST_METHOD(Class__Engine__ParticleModuleSizeScaleBySpeed)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, SpeedScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSizeScaleBySpeed, MaxScale, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSizeScaleBySpeed, 0x0048);
		}

		// class UParticleModuleSourceMovement : public UParticleModuleLocationBase
		TEST_METHOD(Class__Engine__ParticleModuleSourceMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSourceMovement, SourceMovementScale, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSourceMovement, 0x0080);
		}

		// class UParticleModuleSpawnBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSpawnBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnBase, UnknownData_0FPA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnBase, 0x0040);
		}

		// class UParticleModuleSpawn : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawn)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, rate, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, RateScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, ParticleBurstMethod, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_K3M3, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstList, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, BurstScale, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawn, UnknownData_XMCH, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawn, 0x00F0);
		}

		// class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
		TEST_METHOD(Class__Engine__ParticleModuleSpawnPerUnit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnitScalar, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MovementTolerance, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, SpawnPerUnit, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, MaxFrameDistance, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSpawnPerUnit, UnknownData_L15C, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSpawnPerUnit, 0x0080);
		}

		// class UParticleModuleSubUVBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleSubUVBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVBase, 0x0038);
		}

		// class UParticleModuleSubUV : public UParticleModuleSubUVBase
		TEST_METHOD(Class__Engine__ParticleModuleSubUV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, animation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, SubImageIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUV, UnknownData_SSPO, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUV, 0x0078);
		}

		// class UParticleModuleSubUVMovie : public UParticleModuleSubUV
		TEST_METHOD(Class__Engine__ParticleModuleSubUVMovie)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_VQCS, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, FrameRate, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, StartingFrame, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleSubUVMovie, UnknownData_H0XC, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleSubUVMovie, 0x00B8);
		}

		// class UParticleModuleTrailBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTrailBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailBase, 0x0038);
		}

		// class UParticleModuleTrailSource : public UParticleModuleTrailBase
		TEST_METHOD(Class__Engine__ParticleModuleTrailSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_SVEN, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceStrength, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_Z903, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SourceOffsetDefaults, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, SelectionMethod, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_05HV, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTrailSource, UnknownData_EKOB, 0x0095);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTrailSource, 0x0098);
		}

		// class UParticleModuleTypeDataBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBase, 0x0038);
		}

		// class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataAnimTrail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_G6K3, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TilingDistance, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, DistanceTessellationStepSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, TangentTessellationStepSize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, WidthTessellationStepSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataAnimTrail, UnknownData_H44G, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataAnimTrail, 0x0050);
		}

		// class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataBeam2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BeamMethod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_IS4H, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTile, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TextureTileDistance, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, Sheets, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, MaxBeamCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, speed, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, InterpolationPoints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_DPOY, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UpVectorStepSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, BranchParentName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, distance, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_GOWH, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperFactor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, TaperScale, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataBeam2, UnknownData_NJYQ, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataBeam2, 0x0158);
		}

		// class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataGpu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_PU5S, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, EmitterInfo, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, ResourceData, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, CameraMotionBlurAmount, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataGpu, UnknownData_Q5RG, 0x0425);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataGpu, 0x0430);
		}

		// class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, mesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_2PCG, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, LODSizeScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, MeshAlignment, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_TWS6, 0x004F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, RollPitchYawRange, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, AxisLockOption, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingUpAxisOption, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, CameraFacingOption, 0x009B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataMesh, UnknownData_ABNW, 0x009D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataMesh, 0x00A0);
		}

		// class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
		TEST_METHOD(Class__Engine__ParticleModuleTypeDataRibbon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTessellationBetweenParticles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, SheetsPerTrail, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxTrailCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, MaxParticleInTrailCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_D6I7, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, RenderAxis, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_H3NW, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentSpawningScalar, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_8L0M, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TilingDistance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, DistanceTessellationStepSize, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, UnknownData_AXPY, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleTypeDataRibbon, TangentTessellationScalar, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleTypeDataRibbon, 0x0068);
		}

		// class UParticleModuleVectorFieldBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldBase, 0x0038);
		}

		// class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldGlobal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_6ZGM, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldScale, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, GlobalVectorFieldTightness, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldGlobal, UnknownData_6CAI, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldGlobal, 0x0048);
		}

		// class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, VectorField, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeTranslation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, RelativeScale3D, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldLocal, UnknownData_GF80, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldLocal, 0x0070);
		}

		// class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MinInitialRotation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotation, MaxInitialRotation, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotation, 0x0050);
		}

		// class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldRotationRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, RotationRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldRotationRate, UnknownData_Z6AE, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldRotationRate, 0x0048);
		}

		// class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScale, VectorFieldScaleRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScale, 0x0070);
		}

		// class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
		TEST_METHOD(Class__Engine__ParticleModuleVectorFieldScaleOverLife)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLife, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVectorFieldScaleOverLife, VectorFieldScaleOverLifeRaw, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVectorFieldScaleOverLife, 0x0070);
		}

		// class UParticleModuleVelocityBase : public UParticleModule
		TEST_METHOD(Class__Engine__ParticleModuleVelocityBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityBase, UnknownData_2EAZ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityBase, 0x0040);
		}

		// class UParticleModuleVelocity : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity, StartVelocityRadial, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity, 0x00B8);
		}

		// class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
		TEST_METHOD(Class__Engine__ParticleModuleVelocity_Seeded)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocity_Seeded, RandomSeedInfo, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocity_Seeded, 0x00D8);
		}

		// class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityCone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, angle, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, Velocity, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, direction, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityCone, UnknownData_1RB6, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityCone, 0x00B0);
		}

		// class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityInheritParent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityInheritParent, scale, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityInheritParent, 0x0088);
		}

		// class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
		TEST_METHOD(Class__Engine__ParticleModuleVelocityOverLifetime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, VelOverLife, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleModuleVelocityOverLifetime, UnknownData_QIRM, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleModuleVelocityOverLifetime, 0x0090);
		}

		// class UParticleSpriteEmitter : public UParticleEmitter
		TEST_METHOD(Class__Engine__ParticleSpriteEmitter)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSpriteEmitter, 0x01D0);
		}

		// class UparticleSystem : public UFXSystemAsset
		TEST_METHOD(Class__Engine__particleSystem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, UpdateTime_FPS, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, UpdateTime_Delta, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, WarmupTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, WarmupTickRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, Emitters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, PreviewComponent, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, CurveEdSetup, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, LODDistanceCheckTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, MacroUVRadius, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, LODDistances, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, LODSettings, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, FixedRelativeBoundingBox, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, SecondsBeforeInactive, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, delay, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, DelayLow, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, SystemUpdateMode, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, LODMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, InsignificantReaction, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, OcclusionBoundsMethod, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, UnknownData_KE64, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, MaxSignificanceLevel, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, MinTimeBetweenTicks, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, InsignificanceDelay, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, MacroUVPosition, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, CustomOcclusionBounds, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, SoloTracking, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, NamedMaterialSlots, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UparticleSystem, UnknownData_NHDP, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UparticleSystem, 0x0118);
		}

		// class UParticleSystemReplay : public UObject
		TEST_METHOD(Class__Engine__ParticleSystemReplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, ClipIDNumber, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UParticleSystemReplay, UnknownData_RIFT, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UParticleSystemReplay, 0x0048);
		}

		// class UPathFollowingAgentInterface : public UInterface
		TEST_METHOD(Class__Engine__PathFollowingAgentInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPathFollowingAgentInterface, 0x0030);
		}

		// class UPawnNoiseEmitterComponent : public UactorComponent
		TEST_METHOD(Class__Engine__PawnNoiseEmitterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_M6CL, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoisePosition, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, NoiseLifetime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseVolume, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastRemoteNoiseTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseVolume, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, LastLocalNoiseTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnNoiseEmitterComponent, UnknownData_BKUA, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnNoiseEmitterComponent, 0x00E0);
		}

		// class UPhysicalAnimationComponent : public UactorComponent
		TEST_METHOD(Class__Engine__PhysicalAnimationComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, StrengthMultiplyer, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_E7PA, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, skeletalMeshComponent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalAnimationComponent, UnknownData_GNQH, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalAnimationComponent, 0x00F8);
		}

		// class UphysicalMaterial : public UObject
		TEST_METHOD(Class__Engine__physicalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, Friction, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, FrictionCombineMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, bOverrideFrictionCombineMode, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, UnknownData_18AS, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, Restitution, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, RestitutionCombineMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, bOverrideRestitutionCombineMode, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, UnknownData_BNCX, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, Density, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, RaiseMassToPower, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, DestructibleDamageThresholdScale, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, UnknownData_Q8DH, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, PhysicalMaterialProperty, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, surfaceType, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, UnknownData_2X0C, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, TireFrictionScale, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, TireFrictionScales, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, OcclusionAffect, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, IgnoreComponentOcclussionAffect, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UphysicalMaterial, UnknownData_CR84, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UphysicalMaterial, 0x0090);
		}

		// class UPhysicalMaterialMask : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UVChannelIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressX, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, AddressY, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicalMaterialMask, UnknownData_5DD4, 0x0036);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialMask, 0x0038);
		}

		// class UPhysicalMaterialPropertyBase : public UObject
		TEST_METHOD(Class__Engine__PhysicalMaterialPropertyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicalMaterialPropertyBase, 0x0030);
		}

		// class UPhysicsAsset : public UObject
		TEST_METHOD(Class__Engine__PhysicsAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_BN6Y, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BoundsBodies, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SkeletalBodySetups, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ConstraintSetup, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, SolverIterations, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, UnknownData_J56E, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, ThumbnailInfo, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsAsset, BodySetup, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsAsset, 0x0140);
		}

		// class USkeletalBodySetup : public UBodySetup
		TEST_METHOD(Class__Engine__SkeletalBodySetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, bSkipScaleFromAnimation, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, UnknownData_VB6J, 0x0269);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalBodySetup, PhysicalAnimationData, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalBodySetup, 0x0280);
		}

		// class UPhysicsCollisionHandler : public UObject
		TEST_METHOD(Class__Engine__PhysicsCollisionHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactThreshold, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, ImpactReFireDelay, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, DefaultImpactSound, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, LastImpactSoundTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsCollisionHandler, UnknownData_VXNJ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsCollisionHandler, 0x0048);
		}

		// class URigidBodyBase : public Uactor
		TEST_METHOD(Class__Engine__RigidBodyBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URigidBodyBase, 0x0230);
		}

		// class UPhysicsConstraintActor : public URigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsConstraintActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintActor, ConstraintComp, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintActor, ConstraintActor1, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintActor, ConstraintActor2, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintActor, UnknownData_FNIY, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintActor, 0x0250);
		}

		// class UPhysicsConstraintComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsConstraintComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor1, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName1, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_UF9C, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintActor2, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ComponentName2, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, UnknownData_EJXD, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintSetup, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, OnConstraintBroken, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintComponent, ConstraintInstance, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintComponent, 0x0430);
		}

		// class UPhysicsConstraintTemplate : public UObject
		TEST_METHOD(Class__Engine__PhysicsConstraintTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, ProfileHandles, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, DefaultProfile, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsConstraintTemplate, UnknownData_9UYG, 0x030C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsConstraintTemplate, 0x0310);
		}

		// class UPhysicsHandleComponent : public UactorComponent
		TEST_METHOD(Class__Engine__PhysicsHandleComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, GrabbedComponent, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_539M, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_XYY5, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearDamping, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, LinearStiffness, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularDamping, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, AngularStiffness, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_2IQ5, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, InterpolationSpeed, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsHandleComponent, UnknownData_7PWB, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsHandleComponent, 0x0160);
		}

		// class UPhysicsSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__PhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultGravityZ, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultTerminalVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultFluidFriction, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SimulateScratchMemorySize, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RagdollAggregateThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, TriangleMeshTriangleMinAreaThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableShapeSharing, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnablePCM, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableStabilization, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bWarnMissingLocks, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnable2DPhysics, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_62OI, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicErrorCorrection, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, LockedAxis, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultDegreesOfFreedom, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_YF8A, 0x009E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, BounceThresholdVelocity, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, FrictionCombineMode, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, RestitutionCombineMode, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_NCK5, 0x00A6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxAngularVelocity, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxDepenetrationVelocity, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ContactOffsetMultiplier, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MinContactOffset, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxContactOffset, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateSkeletalMeshOnDedicatedServer, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultShapeComplexity, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDefaultHasComplexCollision, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSuppressFaceRemapTable, 0x00BF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSupportUVFromHitResults, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableActiveActors, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicStaticPairs, 0x00C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableKinematicKinematicPairs, 0x00C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bDisableCCD, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bEnableEnhancedDeterminism, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_0P08, 0x00C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, AnimPhysicsMinDeltaTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSimulateAnimPhysicsAfterReset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_F17S, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxPhysicsDeltaTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubstepping, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, bSubsteppingAsync, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_OEZK, 0x00D6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubstepDeltaTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, MaxSubsteps, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, SyncSceneSmoothingFactor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, InitialAverageFrameRate, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysXTreeRebuildRate, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_DB6A, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, PhysicalSurfaces, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, DefaultBroadphaseSettings, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, ChaosSettings, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSettings, UnknownData_LH7I, 0x0143);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSettings, 0x0148);
		}

		// class UPhysicsSpringComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsSpringComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringStiffness, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringDamping, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringLengthAtRest, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringRadius, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringChannel, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, bIgnoreSelf, 0x0221);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_W1Y2, 0x0222);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, SpringCompression, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsSpringComponent, UnknownData_BP9X, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsSpringComponent, 0x0240);
		}

		// class UPhysicsThruster : public URigidBodyBase
		TEST_METHOD(Class__Engine__PhysicsThruster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThruster, ThrusterComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThruster, 0x0238);
		}

		// class UPhysicsThrusterComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PhysicsThrusterComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, ThrustStrength, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPhysicsThrusterComponent, UnknownData_FJGD, 0x0214);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPhysicsThrusterComponent, 0x0220);
		}

		// class USceneCapture : public Uactor
		TEST_METHOD(Class__Engine__SceneCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCapture, MeshComp, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCapture, SceneComponent, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCapture, 0x0240);
		}

		// class UPlanarReflection : public USceneCapture
		TEST_METHOD(Class__Engine__PlanarReflection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflection, PlanarReflectionComponent, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflection, bShowPreviewPlane, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflection, UnknownData_DEEW, 0x0249);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflection, 0x0250);
		}

		// class USceneCaptureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, PrimitiveRenderMode, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSource, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bAlwaysPersistRenderingState, 0x0213);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_1760, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenComponents, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, HiddenActors, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyComponents, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowOnlyActors, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, LODDistanceFactor, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, MaxViewDistanceOverride, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, CaptureSortPriority, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bUseRayTracingIfEnabled, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, bIgnoreCullDistanceVolumes, 0x0265);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_NM4F, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ShowFlagSettings, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_7UU1, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, ProfilingEventName, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent, UnknownData_ZJ0O, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent, 0x02A8);
		}

		// class UPlanarReflectionComponent : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__PlanarReflectionComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PreviewBox, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, NormalDistortionStrength, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughness, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, PrefilterRoughnessDistance, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ScreenPercentage, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, ExtraFOV, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeStart, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeEnd, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutStart, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, DistanceFromPlaneFadeoutEnd, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeStart, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, AngleFromPlaneFadeEnd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bShowPreviewPlane, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, bRenderSceneTwoSided, 0x02DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlanarReflectionComponent, UnknownData_R03S, 0x02DE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlanarReflectionComponent, 0x0390);
		}

		// class UPlaneReflectionCapture : public UReflectionCapture
		TEST_METHOD(Class__Engine__PlaneReflectionCapture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCapture, 0x0238);
		}

		// class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__PlaneReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, UnknownData_SV9I, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewInfluenceRadius, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlaneReflectionCaptureComponent, PreviewCaptureBox, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlaneReflectionCaptureComponent, 0x02A0);
		}

		// class UPlatformEventsComponent : public UactorComponent
		TEST_METHOD(Class__Engine__PlatformEventsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToLaptopModeDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformEventsComponent, PlatformChangedToTabletModeDelegate, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformEventsComponent, 0x00D8);
		}

		// class UPlatformInterfaceWebResponse : public UObject
		TEST_METHOD(Class__Engine__PlatformInterfaceWebResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, OriginalURL, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, ResponseCode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, tag, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, StringResponse, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, BinaryResponse, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlatformInterfaceWebResponse, UnknownData_4EU8, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlatformInterfaceWebResponse, 0x00B8);
		}

		// class UplayerInput : public UObject
		TEST_METHOD(Class__Engine__playerInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, UnknownData_UW6O, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, DebugExecBindings, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, UnknownData_AGKE, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, ActionMappings, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, AxisMappings, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, InvertedAxis, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UplayerInput, UnknownData_DSFC, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UplayerInput, 0x03B0);
		}

		// class UPlayerStartPIE : public UPlayerStart
		TEST_METHOD(Class__Engine__PlayerStartPIE)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerStartPIE, 0x0268);
		}

		// class UPluginCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__PluginCommandlet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPluginCommandlet, UnknownData_0NYR, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPluginCommandlet, 0x00A8);
		}

		// class UPointLight : public Ulight
		TEST_METHOD(Class__Engine__PointLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPointLight, PointLightComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPointLight, 0x0248);
		}

		// class UPolys : public UObject
		TEST_METHOD(Class__Engine__Polys)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPolys, UnknownData_G54D, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPolys, 0x0040);
		}

		// class UPoseableMeshComponent : public USkinnedMeshComponent
		TEST_METHOD(Class__Engine__PoseableMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseableMeshComponent, UnknownData_OVLP, 0x06D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseableMeshComponent, 0x0830);
		}

		// class UPoseAsset : public UAnimationAsset
		TEST_METHOD(Class__Engine__PoseAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, PoseContainer, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, bAdditivePose, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_H81C, 0x0119);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, BasePoseIndex, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, RetargetSource, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseAsset, UnknownData_DPLL, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseAsset, 0x0130);
		}

		// class UPoseWatch : public UObject
		TEST_METHOD(Class__Engine__PoseWatch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, Node, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, PoseWatchColour, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPoseWatch, UnknownData_JNAW, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPoseWatch, 0x0040);
		}

		// class UPostProcessComponent : public USceneComponent
		TEST_METHOD(Class__Engine__PostProcessComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_YXL4, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, settings, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, priority, 0x0760);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendRadius, 0x0764);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, BlendWeight, 0x0768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessComponent, UnknownData_V77H, 0x076D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessComponent, 0x0770);
		}

		// class UPostProcessVolume : public Uvolume
		TEST_METHOD(Class__Engine__PostProcessVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessVolume, UnknownData_M2VR, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessVolume, settings, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessVolume, priority, 0x07B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessVolume, BlendRadius, 0x07B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessVolume, BlendWeight, 0x07B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPostProcessVolume, UnknownData_HZQ6, 0x07BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPostProcessVolume, 0x07C0);
		}

		// class UPrecomputedVisibilityOverrideVolume : public Uvolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityOverrideVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrecomputedVisibilityOverrideVolume, OverrideVisibleActors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrecomputedVisibilityOverrideVolume, OverrideInvisibleActors, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrecomputedVisibilityOverrideVolume, OverrideInvisibleLevels, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrecomputedVisibilityOverrideVolume, 0x0298);
		}

		// class UPrecomputedVisibilityVolume : public Uvolume
		TEST_METHOD(Class__Engine__PrecomputedVisibilityVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrecomputedVisibilityVolume, 0x0268);
		}

		// class UPreviewCollectionInterface : public UInterface
		TEST_METHOD(Class__Engine__PreviewCollectionInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewCollectionInterface, 0x0030);
		}

		// class UBP_S25_Jabot_ACC01_C : public UBP_S24_necklace_ACC01_REF_C
		TEST_METHOD(BlueprintGeneratedClass__BP_S25_Jabot_ACC01__BP_S25_Jabot_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_S25_Jabot_ACC01_C, 0x02B8);
		}

		// class UPreviewMeshCollection : public UDataAsset
		TEST_METHOD(Class__Engine__PreviewMeshCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, UnknownData_XT4B, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, Skeleton, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPreviewMeshCollection, SkeletalMeshes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPreviewMeshCollection, 0x0058);
		}

		// class UPrimaryAssetLabel : public UPrimaryDataAsset
		TEST_METHOD(Class__Engine__PrimaryAssetLabel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, Rules, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_VZ18, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitAssets, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, ExplicitBlueprints, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, AssetCollection, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPrimaryAssetLabel, UnknownData_TZZK, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPrimaryAssetLabel, 0x0078);
		}

		// class UProxyLODMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__ProxyLODMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, ProxyLODMeshReductionModuleName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UProxyLODMeshSimplificationSettings, UnknownData_AU0L, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UProxyLODMeshSimplificationSettings, 0x0058);
		}

		// class URadialForceActor : public URigidBodyBase
		TEST_METHOD(Class__Engine__RadialForceActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceActor, ForceComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceActor, 0x0238);
		}

		// class URadialForceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RadialForceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, radius, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, Falloff, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_BLR6, 0x0215);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ImpulseStrength, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_DMP2, 0x021D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ForceStrength, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, DestructibleDamage, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, ObjectTypesToAffect, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::URadialForceComponent, UnknownData_RXAM, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URadialForceComponent, 0x0240);
		}

		// class URectLight : public Ulight
		TEST_METHOD(Class__Engine__RectLight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLight, RectLightComponent, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLight, 0x0248);
		}

		// class URectLightComponent : public ULocalLightComponent
		TEST_METHOD(Class__Engine__RectLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceWidth, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceHeight, 0x03A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorAngle, 0x03A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, BarnDoorLength, 0x03AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, SourceTexture, 0x03B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URectLightComponent, UnknownData_7U6R, 0x03B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URectLightComponent, 0x03C0);
		}

		// class URendererSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_B7NI, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MaxMobileCascades, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileMSAASampleCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8WKT, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_8OIC, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForLights, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForEarlyZPass, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MinScreenRadiusForCSMdepth, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Y3WW, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureTileBorderSize, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, VirtualTextureFeedbackFactor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_2BIN, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ReflectionCaptureResolution, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AQNK, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TessellationAdaptivePixelsPerTriangle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_I5UH, 0x0085);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortPolicy, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_RVAS, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, TranslucentSortAxis, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, CustomDepthStencil, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_5DNY, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Y5UP, 0x009D);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, bEnableAlphaChannelInPostProcessing, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_N4DX, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_EOG4, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposure, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_INVL, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAutoExposureBias, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_OLTR, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultFeatureAntiAliasing, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultLightUnits, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultBackBufferPixelFormat, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_A833, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_JOEG, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, EarlyZPass, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AZSS, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_NZG4, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, ClearSceneMethod, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Y09E, 0x00C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_AZET, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeX, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GPUSimulationTextureSizeY, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_U6Y0, 0x00D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, GBufferFormat, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_B0G8, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_Z6XO, 0x00DE);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, WireframeCullThreshold, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_6YBG, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, DefaultSkinCacheBehavior, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_C3IW, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, SkinCacheSceneMemoryLimitInMB, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_ZMEK, 0x00F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, MobileNumDynamicPointLights, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererSettings, UnknownData_19ES, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererSettings, 0x0100);
		}

		// class URendererOverrideSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__RendererOverrideSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URendererOverrideSettings, UnknownData_O9GK, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URendererOverrideSettings, 0x0050);
		}

		// class UReplicationDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationDriver, 0x0030);
		}

		// class UReplicationConnectionDriver : public UObject
		TEST_METHOD(Class__Engine__ReplicationConnectionDriver)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReplicationConnectionDriver, 0x0030);
		}

		// class UReporterBase : public UObject
		TEST_METHOD(Class__Engine__ReporterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterBase, UnknownData_V886, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterBase, 0x0038);
		}

		// class UReporterGraph : public UReporterBase
		TEST_METHOD(Class__Engine__ReporterGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReporterGraph, UnknownData_NU0L, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReporterGraph, 0x00B0);
		}

		// class UReverbEffect : public UObject
		TEST_METHOD(Class__Engine__ReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Density, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Diffusion, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, Gain, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, GainHF, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, DecayHFRatio, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsGain, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, ReflectionsDelay, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateGain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, LateDelay, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, AirAbsorptionGainHF, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UReverbEffect, RoomRolloffFactor, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UReverbEffect, 0x0060);
		}

		// class URig : public UObject
		TEST_METHOD(Class__Engine__Rig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, UnknownData_0M37, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, TransformBases, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URig, Nodes, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URig, 0x0058);
		}

		// class URotatingMovementComponent : public UMovementComponent
		TEST_METHOD(Class__Engine__RotatingMovementComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, RotationRate, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, PivotTranslation, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::URotatingMovementComponent, UnknownData_0E3R, 0x0111);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URotatingMovementComponent, 0x0118);
		}

		// class URuntimeOptionsBase : public UObject
		TEST_METHOD(Class__Engine__RuntimeOptionsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeOptionsBase, UnknownData_D6AB, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeOptionsBase, 0x0040);
		}

		// class URuntimeVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__RuntimeVirtualTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, MaterialType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bCompressTextures, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnable, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bClearTextures, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bSinglePhysicalSpace, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bPrivateSpace, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableScalability, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_6YHA, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, tileCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, TileBorderSize, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamLowMips, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_AE2V, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, StreamingTexture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, bEnableCompressCrunch, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_7A3D, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, RemoveLowMips, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTexture, UnknownData_D0F9, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTexture, 0x00B0);
		}

		// class URuntimeVirtualTextureComponent : public USceneComponent
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, VirtualTexture, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, bUseStreamingLowMipsInEditor, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_VY07, 0x0219);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, BoundsSourceActor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureComponent, UnknownData_D00Z, 0x0228);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureComponent, 0x0230);
		}

		// class URuntimeVirtualTextureStreamingProxy : public UTexture2D
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureStreamingProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, settings, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, bSinglePhysicalSpace, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_9UDU, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, BuildHash, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureStreamingProxy, UnknownData_R2KC, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureStreamingProxy, 0x0108);
		}

		// class URuntimeVirtualTextureVolume : public Uactor
		TEST_METHOD(Class__Engine__RuntimeVirtualTextureVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URuntimeVirtualTextureVolume, VirtualTextureComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URuntimeVirtualTextureVolume, 0x0238);
		}

		// class URVOAvoidanceInterface : public UInterface
		TEST_METHOD(Class__Engine__RVOAvoidanceInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URVOAvoidanceInterface, 0x0030);
		}

		// class UScene : public UObject
		TEST_METHOD(Class__Engine__Scene)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScene, 0x0030);
		}

		// class USceneCapture2D : public USceneCapture
		TEST_METHOD(Class__Engine__SceneCapture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCapture2D, CaptureComponent2D, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCapture2D, 0x0248);
		}

		// class USceneCaptureComponent2D : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponent2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_7OG2, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, FOVAngle, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, OrthoWidth, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_TZ49, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, TextureTarget, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CompositeMode, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_836O, 0x02C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessSettings, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, PostProcessBlendWeight, 0x0810);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_GC8F, 0x0815);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomNearClippingPlane, 0x0818);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bUseCustomProjectionMatrix, 0x081C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_8SC9, 0x081D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, CustomProjectionMatrix, 0x0820);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bEnableClipPlane, 0x0860);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_4HVM, 0x0861);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneBase, 0x0864);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, ClipPlaneNormal, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_6JVK, 0x087D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, bDisableFlipCopyGLES, 0x0880);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponent2D, UnknownData_QC3W, 0x0881);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponent2D, 0x08A0);
		}

		// class USceneCaptureComponentCube : public USceneCaptureComponent
		TEST_METHOD(Class__Engine__SceneCaptureComponentCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTarget, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, bCaptureRotation, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_WIBE, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetLeft, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetRight, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, TextureTargetODS, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, IPD, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureComponentCube, UnknownData_8AGI, 0x02D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureComponentCube, 0x02E0);
		}

		// class USceneCaptureCube : public USceneCapture
		TEST_METHOD(Class__Engine__SceneCaptureCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USceneCaptureCube, CaptureComponentCube, 0x0240);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USceneCaptureCube, 0x0248);
		}

		// class USCS_Node : public UObject
		TEST_METHOD(Class__Engine__SCS_Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ComponentTemplate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, CookedComponentInstancingData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, AttachToName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOrVariableName, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ParentComponentOwnerClassName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, bIsParentComponentNative, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_DTS5, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, ChildNodes, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, MetaDataArray, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, VariableGuid, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, InternalVariableName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USCS_Node, UnknownData_M33T, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USCS_Node, 0x00F8);
		}

		// class USelection : public UObject
		TEST_METHOD(Class__Engine__Selection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USelection, UnknownData_TPXI, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USelection, 0x00A8);
		}

		// class UServerStatReplicator : public UInfo
		TEST_METHOD(Class__Engine__ServerStatReplicator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, bUpdateStatNet, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, bOverwriteClientStats, 0x0231);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, UnknownData_WN1R, 0x0232);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, Channels, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InRate, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutRate, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, UnknownData_G5EX, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, MaxPacketOverhead, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InRateClientMax, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InRateClientMin, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InRateClientAvg, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InPacketsClientMax, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InPacketsClientMin, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InPacketsClientAvg, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutRateClientMax, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutRateClientMin, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutRateClientAvg, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutPacketsClientMax, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutPacketsClientMin, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutPacketsClientAvg, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NetNumClients, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InPackets, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutPackets, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InBunches, 0x0284);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutBunches, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, OutLoss, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, InLoss, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, VoiceBytesSent, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, VoiceBytesRecv, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, VoicePacketsSent, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, VoicePacketsRecv, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, PercentInVoice, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, PercentOutVoice, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumActorChannels, 0x02AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumConsideredActors, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, PrioritizedActors, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumRelevantActors, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumRelevantDeletedActors, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumReplicatedActorAttempts, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumReplicatedActors, 0x02C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumActors, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumNetActors, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumDormantActors, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumInitiallyDormantActors, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumNetGUIDsAckd, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumNetGUIDsPending, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NumNetGUIDsUnAckd, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, ObjPathBytes, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NetGUIDOutRate, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NetGUIDInRate, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, NetSaturated, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UServerStatReplicator, UnknownData_21FO, 0x02F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UServerStatReplicator, 0x02F8);
		}

		// class UShadowMapTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__ShadowMapTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, ShadowmapFlags, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UShadowMapTexture2D, UnknownData_6QN9, 0x00F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UShadowMapTexture2D, 0x00F8);
		}

		// class USimpleConstructionScript : public UObject
		TEST_METHOD(Class__Engine__SimpleConstructionScript)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, RootNodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, AllNodes, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, DefaultSceneRootNode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USimpleConstructionScript, UnknownData_7GKC, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USimpleConstructionScript, 0x00A8);
		}

		// class USkeletalMeshEditorData : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshEditorData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshEditorData, 0x0030);
		}

		// class USkeletalMeshLODSettings : public UDataAsset
		TEST_METHOD(Class__Engine__SkeletalMeshLODSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MinLod, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, DisableBelowMinLodStripping, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, bSupportLODStreaming, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, UnknownData_IDE6, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumStreamedLODs, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, MaxNumOptionalLODs, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshLODSettings, LODGroups, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshLODSettings, 0x0058);
		}

		// class USkeletalMeshSimplificationSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__SkeletalMeshSimplificationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, SkeletalMeshReductionModuleName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSimplificationSettings, UnknownData_2VO6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSimplificationSettings, 0x0058);
		}

		// class USkeletalMeshSocket : public UObject
		TEST_METHOD(Class__Engine__SkeletalMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, BoneName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeLocation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeRotation, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, RelativeScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, bForceAlwaysAnimated, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkeletalMeshSocket, UnknownData_CH73, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkeletalMeshSocket, 0x0070);
		}

		// class UBP_BloodwebGenerator_C : public UBloodwebGenerator
		TEST_METHOD(BlueprintGeneratedClass__BP_BloodwebGenerator__BP_BloodwebGenerator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_BloodwebGenerator_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_BloodwebGenerator_C, 0x00F8);
		}

		// class USkyAtmosphereComponent : public USceneComponent
		TEST_METHOD(Class__Engine__SkyAtmosphereComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransformMode, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_KJLO, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, BottomRadius, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, GroundAlbedo, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AtmosphereHeight, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MultiScatteringFactor, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScatteringScale, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighScattering, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, RayleighExponentialDistribution, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScatteringScale, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieScattering, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorptionScale, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAbsorption, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieAnisotropy, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, MieExponentialDistribution, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorptionScale, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherAbsorption, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, OtherTentDistribution, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, SkyLuminanceFactor, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, AerialPespectiveViewDistanceScale, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, HeightFogContribution, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, TransmittanceMinLightElevationAngle, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_QHUU, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, bStaticLightingBuiltGUID, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphereComponent, UnknownData_3L40, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphereComponent, 0x02E0);
		}

		// class USkyAtmosphere : public UInfo
		TEST_METHOD(Class__Engine__SkyAtmosphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyAtmosphere, SkyAtmosphereComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyAtmosphere, 0x0238);
		}

		// class USkyLightComponent : public ULightComponentBase
		TEST_METHOD(Class__Engine__SkyLightComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_Q520, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, Cubemap, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SourceCubemapAngle, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, CubemapResolution, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, SkyDistanceThreshold, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bCaptureEmissiveOnly, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, bLowerHemisphereIsBlack, 0x0275);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_4G85, 0x0276);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, LowerHemisphereColor, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionMaxDistance, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, contrast, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionExponent, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, MinOcclusion, 0x0294);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionTint, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, OcclusionCombineMode, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_32PI, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, BlendDestinationCubemap, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkyLightComponent, UnknownData_AG9R, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkyLightComponent, 0x0430);
		}

		// class USlateBrushAsset : public UObject
		TEST_METHOD(Class__Engine__SlateBrushAsset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlateBrushAsset, brush, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateBrushAsset, 0x00C0);
		}

		// class USlateTextureAtlasInterface : public UInterface
		TEST_METHOD(Class__Engine__SlateTextureAtlasInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlateTextureAtlasInterface, 0x0030);
		}

		// class USmokeTestCommandlet : public UCommandlet
		TEST_METHOD(Class__Engine__SmokeTestCommandlet)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USmokeTestCommandlet, 0x0088);
		}

		// class USoundAttenuation : public UObject
		TEST_METHOD(Class__Engine__SoundAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundAttenuation, Attenuation, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundAttenuation, 0x03D0);
		}

		// class USoundClass : public UObject
		TEST_METHOD(Class__Engine__SoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Properties, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ChildClasses, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, PassiveSoundMixModifiers, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, Modulation, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundClass, ParentClass, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundClass, 0x00C0);
		}

		// class USoundConcurrency : public UObject
		TEST_METHOD(Class__Engine__SoundConcurrency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundConcurrency, Concurrency, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundConcurrency, 0x0050);
		}

		// class USoundCue : public USoundBase
		TEST_METHOD(Class__Engine__SoundCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_Z99X, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, FirstNode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, VolumeMultiplier, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, PitchMultiplier, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, AttenuationOverrides, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, SubtitlePriority, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_WSA4, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_5SNV, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, CookedQualityIndex, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundCue, UnknownData_QLUO, 0x0531);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundCue, 0x0540);
		}

		// class USoundEffectSourcePresetChain : public UObject
		TEST_METHOD(Class__Engine__SoundEffectSourcePresetChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, chain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundEffectSourcePresetChain, UnknownData_9DHQ, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundEffectSourcePresetChain, 0x0048);
		}

		// class USoundGroups : public UObject
		TEST_METHOD(Class__Engine__SoundGroups)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, SoundGroupProfiles, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundGroups, UnknownData_4AUT, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundGroups, 0x0090);
		}

		// class USoundMix : public UObject
		TEST_METHOD(Class__Engine__SoundMix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, UnknownData_AC2R, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, EQSettings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, SoundClassEffects, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, InitialDelay, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeInTime, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, duration, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundMix, FadeOutTime, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundMix, 0x0098);
		}

		// class USoundNode : public UObject
		TEST_METHOD(Class__Engine__SoundNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, ChildNodes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNode, UnknownData_XMNL, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNode, 0x0050);
		}

		// class USoundNodeAssetReferencer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAssetReferencer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAssetReferencer, 0x0050);
		}

		// class USoundNodeAttenuation : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeAttenuation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationSettings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, AttenuationOverrides, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeAttenuation, UnknownData_R4YA, 0x03F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeAttenuation, 0x0400);
		}

		// class USoundNodeBranch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeBranch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, BoolParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeBranch, UnknownData_DZB1, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeBranch, 0x0060);
		}

		// class USoundNodeConcatenator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeConcatenator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeConcatenator, InputVolume, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeConcatenator, 0x0060);
		}

		// class USoundNodeDelay : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDelay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDelay, DelayMax, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDelay, 0x0058);
		}

		// class USoundNodeDialoguePlayer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDialoguePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, DialogueWaveParameter, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDialoguePlayer, UnknownData_YDYV, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDialoguePlayer, 0x0078);
		}

		// class USoundNodeDistanceCrossFade : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDistanceCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDistanceCrossFade, CrossFadeInput, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDistanceCrossFade, 0x0060);
		}

		// class USoundNodeDoppler : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeDoppler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, DopplerIntensity, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, bUseSmoothing, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_8Q1J, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, SmoothingInterpSpeed, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeDoppler, UnknownData_1JUO, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeDoppler, 0x0060);
		}

		// class USoundNodeEnveloper : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeEnveloper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopStart, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopEnd, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, DurationAfterLoop, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, LoopCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, UnknownData_JAJW, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeInterpCurve, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchInterpCurve, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeCurve, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchCurve, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMin, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, PitchMax, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMin, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeEnveloper, VolumeMax, 0x0194);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeEnveloper, 0x0198);
		}

		// class USoundNodeGroupControl : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeGroupControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeGroupControl, GroupSizes, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeGroupControl, 0x0060);
		}

		// class USoundNodeLooping : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeLooping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, LoopCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeLooping, UnknownData_Z689, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeLooping, 0x0058);
		}

		// class USoundNodeMature : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMature)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMature, 0x0050);
		}

		// class USoundNodeMixer : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeMixer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeMixer, InputVolume, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeMixer, 0x0060);
		}

		// class USoundNodeModulator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, PitchMax, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMin, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulator, VolumeMax, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulator, 0x0060);
		}

		// class USoundNodeModulatorContinuous : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeModulatorContinuous)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, PitchModulationParams, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeModulatorContinuous, VolumeModulationParams, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeModulatorContinuous, 0x0098);
		}

		// class USoundNodeOscillator : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_MTQM, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMin, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, AmplitudeMax, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMin, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, FrequencyMax, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMin, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, OffsetMax, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMin, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, CenterMax, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeOscillator, UnknownData_U978, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeOscillator, 0x0078);
		}

		// class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
		TEST_METHOD(Class__Engine__SoundNodeParamCrossFade)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, ParamName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeParamCrossFade, UnknownData_OB2L, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeParamCrossFade, 0x0070);
		}

		// class USoundNodeQualityLevel : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeQualityLevel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeQualityLevel, 0x0050);
		}

		// class USoundNodeRandom : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeRandom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, Weights, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, HasBeenUsed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, NumRandomUsed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, PreselectAtLevelLoad, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeRandom, UnknownData_KKR9, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeRandom, 0x0080);
		}

		// class USoundNodeSoundClass : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSoundClass)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, SoundClassOverride, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSoundClass, UnknownData_00SH, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSoundClass, 0x0060);
		}

		// class USoundNodeSwitch : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeSwitch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, IntParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeSwitch, UnknownData_2BC2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeSwitch, 0x0060);
		}

		// class USoundNodeWaveParam : public USoundNode
		TEST_METHOD(Class__Engine__SoundNodeWaveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, WaveParameterName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWaveParam, UnknownData_9PY2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWaveParam, 0x0060);
		}

		// class USoundNodeWavePlayer : public USoundNodeAssetReferencer
		TEST_METHOD(Class__Engine__SoundNodeWavePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWaveAssetPtr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, SoundWave, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundNodeWavePlayer, UnknownData_BQW4, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundNodeWavePlayer, 0x0090);
		}

		// class USoundSourceBus : public USoundWave
		TEST_METHOD(Class__Engine__SoundSourceBus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusChannels, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_Q0FN, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, SourceBusDuration, 0x031C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSourceBus, UnknownData_9AGA, 0x0321);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSourceBus, 0x0330);
		}

		// class USoundSubmixBase : public UObject
		TEST_METHOD(Class__Engine__SoundSubmixBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixBase, ChildSubmixes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixBase, 0x0040);
		}

		// class USoundSubmixWithParentBase : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundSubmixWithParentBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmixWithParentBase, ParentSubmix, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmixWithParentBase, 0x0048);
		}

		// class USoundSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_LAZC, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, SubmixEffectChain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, AmbisonicsPluginSettings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerAttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, EnvelopeFollowerReleaseTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OutputVolume, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_9HNS, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, OnSubmixRecordedFileDone, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundSubmix, UnknownData_QWSK, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundSubmix, 0x0090);
		}

		// class USoundfieldSubmix : public USoundSubmixWithParentBase
		TEST_METHOD(Class__Engine__SoundfieldSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEncodingFormat, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, UnknownData_YPOR, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, SoundfieldEffectChain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldSubmix, EncodingSettingsClass, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldSubmix, 0x0078);
		}

		// class UEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__EndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, UnknownData_U1BW, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UEndpointSubmix, EndpointSettings, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UEndpointSubmix, 0x0060);
		}

		// class USoundfieldEndpointSubmix : public USoundSubmixBase
		TEST_METHOD(Class__Engine__SoundfieldEndpointSubmix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEndpointType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, UnknownData_BYNV, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettingsClass, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EndpointSettings, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettingsClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, EncodingSettings, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USoundfieldEndpointSubmix, SoundfieldEffectChain, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USoundfieldEndpointSubmix, 0x0080);
		}

		// class USpectatorPawnMovement : public UFloatingPawnMovement
		TEST_METHOD(Class__Engine__SpectatorPawnMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USpectatorPawnMovement, UnknownData_PKHZ, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USpectatorPawnMovement, 0x0168);
		}

		// class USphereReflectionCapture : public UReflectionCapture
		TEST_METHOD(Class__Engine__SphereReflectionCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCapture, DrawCaptureRadius, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCapture, 0x0240);
		}

		// class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
		TEST_METHOD(Class__Engine__SphereReflectionCaptureComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, CaptureDistanceScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, PreviewInfluenceRadius, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::USphereReflectionCaptureComponent, UnknownData_RPVU, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USphereReflectionCaptureComponent, 0x02A0);
		}

		// class USplineMetadata : public UObject
		TEST_METHOD(Class__Engine__SplineMetadata)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMetadata, 0x0030);
		}

		// class USplineMeshActor : public Uactor
		TEST_METHOD(Class__Engine__SplineMeshActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshActor, SplineMeshComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshActor, 0x0238);
		}

		// class USplineMeshComponent : public UStaticMeshComponent
		TEST_METHOD(Class__Engine__SplineMeshComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_TXLA, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineParams, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineUpDir, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMin, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, CachedMeshBodySetupGuid, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, BodySetup, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, SplineBoundaryMax, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, ForwardAxis, 0x0575);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_FH7B, 0x0576);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, VirtualTextureMainPassMaxDrawDistance, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USplineMeshComponent, UnknownData_HAZZ, 0x057C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USplineMeshComponent, 0x0580);
		}

		// class UStaticMesh : public UStreamableRenderAsset
		TEST_METHOD(Class__Engine__StaticMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_MGRR, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, MinLod, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, bForceShadowLOD, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_Z6AM, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DynamicShadowLOD, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticShadowLOD, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LpvBiasMultiplier, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_W1S3, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, StaticMaterials, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapUVDensity, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapResolution, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightMapCoordinateIndex, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DistanceFieldSelfShadowBias, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, bOverrideComponentDetailMode, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DetailMode, 0x01D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_3PKA, 0x01DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DetailModeBitmask, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LightmapGenerationMode, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_67TP, 0x01E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, DefaultLDMaxDrawDistance, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BodySetup, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, LODForCollision, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BatchingMode, 0x01F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_C9GX, 0x01F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, BatchingDiameter, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_TBWB, 0x01FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, Sockets, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_E010, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, PositiveBoundsExtension, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NegativeBoundsExtension, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ExtendedBounds, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, ElementToIgnoreForTexFactor, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, AssetUserData, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, UnknownData_3KFE, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, EditableMesh, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMesh, NavCollision, 0x0298);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMesh, 0x02A0);
		}

		// class UStaticMeshSocket : public UObject
		TEST_METHOD(Class__Engine__StaticMeshSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeLocation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeRotation, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, RelativeScale, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStaticMeshSocket, tag, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStaticMeshSocket, 0x0070);
		}

		// class UStereoLayerComponent : public USceneComponent
		TEST_METHOD(Class__Engine__StereoLayerComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_4QC3, 0x0211);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, texture, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, LeftTexture, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_XVU2, 0x0229);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, QuadSize, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UVRect, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderRadius, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderOverlayArc, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, CylinderHeight, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, EquirectProps, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerType, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, StereoLayerShape, 0x029D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_NU1V, 0x029E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, Shape, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, priority, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerComponent, UnknownData_TE0W, 0x02AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerComponent, 0x0300);
		}

		// class UStereoLayerShape : public UObject
		TEST_METHOD(Class__Engine__StereoLayerShape)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShape, 0x0030);
		}

		// class UStereoLayerShapeQuad : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeQuad)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeQuad, 0x0030);
		}

		// class UStereoLayerShapeCylinder : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, radius, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, OverlayArc, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, Height, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeCylinder, UnknownData_3I5P, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCylinder, 0x0040);
		}

		// class UStereoLayerShapeCubemap : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeCubemap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeCubemap, 0x0030);
		}

		// class UStereoLayerShapeEquirect : public UStereoLayerShape
		TEST_METHOD(Class__Engine__StereoLayerShapeEquirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftUVRect, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightUVRect, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, LeftBias, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UStereoLayerShapeEquirect, RightBias, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerShapeEquirect, 0x0078);
		}

		// class UStereoLayerFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__StereoLayerFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStereoLayerFunctionLibrary, 0x0030);
		}

		// class UStringTable : public UObject
		TEST_METHOD(Class__Engine__StringTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UStringTable, UnknownData_F0TW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UStringTable, 0x0050);
		}

		// class USubsurfaceProfile : public UObject
		TEST_METHOD(Class__Engine__SubsurfaceProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, settings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubsurfaceProfile, UnknownData_7NA7, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsurfaceProfile, 0x00C0);
		}

		// class USubsystemBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__SubsystemBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubsystemBlueprintLibrary, 0x0030);
		}

		// class USubUVAnimation : public UObject
		TEST_METHOD(Class__Engine__SubUVAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubUVTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Horizontal, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, SubImages_Vertical, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, BoundingMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, OpacitySourceMode, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_8GHZ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, AlphaThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USubUVAnimation, UnknownData_TSJV, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USubUVAnimation, 0x0070);
		}

		// class UTimecodeProvider : public UObject
		TEST_METHOD(Class__Engine__TimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, FrameDelay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimecodeProvider, UnknownData_1CXW, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimecodeProvider, 0x0038);
		}

		// class USystemTimeTimecodeProvider : public UTimecodeProvider
		TEST_METHOD(Class__Engine__SystemTimeTimecodeProvider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, FrameRate, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bGenerateFullFrame, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, bUseHighPerformanceClock, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::USystemTimeTimecodeProvider, UnknownData_U9A8, 0x0042);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USystemTimeTimecodeProvider, 0x0048);
		}

		// class UTargetPoint : public Uactor
		TEST_METHOD(Class__Engine__TargetPoint)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTargetPoint, 0x0230);
		}

		// class UTextPropertyTestObject : public UObject
		TEST_METHOD(Class__Engine__TextPropertyTestObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, DefaultedText, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, UndefaultedText, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextPropertyTestObject, TransientText, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextPropertyTestObject, 0x0078);
		}

		// class UTextRenderActor : public Uactor
		TEST_METHOD(Class__Engine__TextRenderActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderActor, TextRender, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderActor, 0x0238);
		}

		// class UTextRenderComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__TextRenderComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, text, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextMaterial, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, Font, 0x0448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizontalAlignment, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VerticalAlignment, 0x0451);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_P8LA, 0x0452);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, TextRenderColor, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, XScale, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, YScale, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, WorldSize, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, InvDefaultSize, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, HorizSpacingAdjust, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, VertSpacingAdjust, 0x046C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextRenderComponent, UnknownData_UMQW, 0x0471);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextRenderComponent, 0x0480);
		}

		// class UTexture2DArray : public Utexture
		TEST_METHOD(Class__Engine__Texture2DArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DArray, UnknownData_UMBJ, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DArray, 0x0118);
		}

		// class UTexture2DDynamic : public Utexture
		TEST_METHOD(Class__Engine__Texture2DDynamic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_F3ED, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, Format, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTexture2DDynamic, UnknownData_D7CK, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTexture2DDynamic, 0x00D8);
		}

		// class UTextureLightProfile : public UTexture2D
		TEST_METHOD(Class__Engine__TextureLightProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, brightness, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureLightProfile, TextureMultiplier, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureLightProfile, 0x00F8);
		}

		// class UTextureMipDataProviderFactory : public UAssetUserData
		TEST_METHOD(Class__Engine__TextureMipDataProviderFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureMipDataProviderFactory, 0x0030);
		}

		// class UTextureRenderTargetCube : public UTextureRenderTarget
		TEST_METHOD(Class__Engine__TextureRenderTargetCube)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, sizeX, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, ClearColor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, OverrideFormat, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTextureRenderTargetCube, UnknownData_MENR, 0x00DE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTextureRenderTargetCube, 0x00E0);
		}

		// class UThumbnailInfo : public UObject
		TEST_METHOD(Class__Engine__ThumbnailInfo)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UThumbnailInfo, 0x0030);
		}

		// class UTimelineComponent : public UactorComponent
		TEST_METHOD(Class__Engine__TimelineComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, TheTimeline, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineComponent, UnknownData_3YND, 0x0161);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineComponent, 0x0168);
		}

		// class UTimelineTemplate : public UObject
		TEST_METHOD(Class__Engine__TimelineTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineLength, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LengthMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_0PFP, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateInterval, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UnknownData_31G3, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, EventTracks, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FloatTracks, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VectorTracks, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, LinearColorTracks, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, MetaDataArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, TimelineGuid, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, VariableName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, DirectionPropertyName, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, UpdateFunctionName, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimelineTemplate, FinishedFunctionName, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimelineTemplate, 0x00D0);
		}

		// class UTireType : public UDataAsset
		TEST_METHOD(Class__Engine__TireType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, FrictionScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTireType, UnknownData_GOLI, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTireType, 0x0040);
		}

		// class UTouchInterface : public UObject
		TEST_METHOD(Class__Engine__TouchInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, Controls, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActiveOpacity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, InactiveOpacity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilDeactive, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, TimeUntilReset, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, ActivationDelay, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, bPreventRecenter, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_0MZW, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, StartupDelay, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTouchInterface, UnknownData_U3G6, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTouchInterface, 0x0060);
		}

		// class UTriggerBase : public Uactor
		TEST_METHOD(Class__Engine__TriggerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTriggerBase, CollisionComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerBase, 0x0238);
		}

		// class UTriggerBox : public UTriggerBase
		TEST_METHOD(Class__Engine__TriggerBox)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerBox, 0x0238);
		}

		// class UTriggerCapsule : public UTriggerBase
		TEST_METHOD(Class__Engine__TriggerCapsule)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerCapsule, 0x0238);
		}

		// class UTriggerSphere : public UTriggerBase
		TEST_METHOD(Class__Engine__TriggerSphere)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerSphere, 0x0238);
		}

		// class UTriggerVolume : public Uvolume
		TEST_METHOD(Class__Engine__TriggerVolume)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTriggerVolume, 0x0268);
		}

		// class UTwitterIntegrationBase : public UPlatformInterfaceBase
		TEST_METHOD(Class__Engine__TwitterIntegrationBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTwitterIntegrationBase, 0x0040);
		}

		// class UUserDefinedEnum : public UEnum
		TEST_METHOD(Class__Engine__UserDefinedEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedEnum, DisplayNameMap, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedEnum, 0x00B8);
		}

		// class UUserDefinedStruct : public UScriptStruct
		TEST_METHOD(Class__Engine__UserDefinedStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, Status, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_GVQN, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, guid, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserDefinedStruct, UnknownData_XKMP, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserDefinedStruct, 0x0110);
		}

		// class UUserInterfaceSettings : public UDeveloperSettings
		TEST_METHOD(Class__Engine__UserInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, RenderFocusRule, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_0SOO, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HardwareCursors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SoftwareCursors, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, DefaultCursor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, TextEditBeamCursor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CrosshairsCursor, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, HandCursor, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandCursor, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, GrabHandClosedCursor, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, SlashedCircleCursor, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, applicationScale, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleRule, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_X5I7, 0x01D5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClass, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UIScaleCurve, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bAllowHighDPIInGameMode, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, bLoadWidgetsOnDedicatedServer, 0x0281);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_REI3, 0x0282);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CursorClasses, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRuleClassInstance, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, CustomScalingRule, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UUserInterfaceSettings, UnknownData_TGBM, 0x02A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUserInterfaceSettings, 0x02B8);
		}

		// class UVectorField : public UObject
		TEST_METHOD(Class__Engine__VectorField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, Bounds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorField, intensity, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorField, 0x0050);
		}

		// class UVectorFieldAnimated : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldAnimated)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, texture, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, ConstructionOp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_KDB7, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeX, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeY, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, VolumeSizeZ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesX, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, SubImagesY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FrameCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, FramesPerSecond, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, UnknownData_AROX, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseField, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseScale, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldAnimated, NoiseMax, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldAnimated, 0x0090);
		}

		// class UVectorFieldComponent : public UprimitiveComponent
		TEST_METHOD(Class__Engine__VectorFieldComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, VectorField, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, intensity, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, Tightness, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldComponent, UnknownData_HB01, 0x0439);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldComponent, 0x0450);
		}

		// class UVectorFieldStatic : public UVectorField
		TEST_METHOD(Class__Engine__VectorFieldStatic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, sizeX, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, sizeY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, SizeZ, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, bAllowCPUAccess, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, UnknownData_BO81, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldStatic, CPUData, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldStatic, 0x00A0);
		}

		// class UVectorFieldVolume : public Uactor
		TEST_METHOD(Class__Engine__VectorFieldVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVectorFieldVolume, VectorFieldComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVectorFieldVolume, 0x0238);
		}

		// class UVirtualTexture : public UObject
		TEST_METHOD(Class__Engine__VirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexture, 0x0030);
		}

		// class ULightMapVirtualTexture : public UVirtualTexture
		TEST_METHOD(Class__Engine__LightMapVirtualTexture)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture, 0x0030);
		}

		// class ULightMapVirtualTexture2D : public UTexture2D
		TEST_METHOD(Class__Engine__LightMapVirtualTexture2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightMapVirtualTexture2D, TypeToLayer, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightMapVirtualTexture2D, 0x0100);
		}

		// class UVirtualTexturePoolConfig : public UObject
		TEST_METHOD(Class__Engine__VirtualTexturePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, DefaultSizeInMegabyte, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, UnknownData_Z6OV, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVirtualTexturePoolConfig, Pools, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVirtualTexturePoolConfig, 0x0048);
		}

		// class UVisualLoggerAutomationTests : public UObject
		TEST_METHOD(Class__Engine__VisualLoggerAutomationTests)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerAutomationTests, 0x0030);
		}

		// class UVisualLoggerDebugSnapshotInterface : public UInterface
		TEST_METHOD(Class__Engine__VisualLoggerDebugSnapshotInterface)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerDebugSnapshotInterface, 0x0030);
		}

		// class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VisualLoggerKismetLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVisualLoggerKismetLibrary, 0x0030);
		}

		// class UVoiceChannel : public Uchannel
		TEST_METHOD(Class__Engine__VoiceChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVoiceChannel, UnknownData_PN60, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVoiceChannel, 0x0088);
		}

		// class UVOIPTalker : public UactorComponent
		TEST_METHOD(Class__Engine__VOIPTalker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, settings, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UVOIPTalker, UnknownData_CUZQ, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPTalker, 0x00F0);
		}

		// class UVOIPStatics : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__Engine__VOIPStatics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVOIPStatics, 0x0030);
		}

		// class UVolumeTexture : public Utexture
		TEST_METHOD(Class__Engine__VolumeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumeTexture, UnknownData_S1F5, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumeTexture, 0x0118);
		}

		// class UVolumetricLightmapDensityVolume : public Uvolume
		TEST_METHOD(Class__Engine__VolumetricLightmapDensityVolume)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UVolumetricLightmapDensityVolume, AllowedMipLevelRange, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UVolumetricLightmapDensityVolume, 0x0270);
		}

		// class UWindDirectionalSource : public UInfo
		TEST_METHOD(Class__Engine__WindDirectionalSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSource, component, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSource, 0x0238);
		}

		// class UWindDirectionalSourceComponent : public USceneComponent
		TEST_METHOD(Class__Engine__WindDirectionalSourceComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, Strength, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, speed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MinGustAmount, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, MaxGustAmount, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, radius, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWindDirectionalSourceComponent, UnknownData_XBYW, 0x0225);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWindDirectionalSourceComponent, 0x0230);
		}

		// class UWorldComposition : public UObject
		TEST_METHOD(Class__Engine__WorldComposition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_TTDR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreaming, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, TilesStreamingTimeThreshold, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bLoadAllTilesDuringCinematic, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, bRebaseOriginIn3DSpace, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, UnknownData_0063, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldComposition, RebaseOriginDistance, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldComposition, 0x0070);
		}

		// class UHierarchicalLODSetup : public UObject
		TEST_METHOD(Class__Engine__HierarchicalLODSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, HierarchicalLODSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHierarchicalLODSetup, OverrideBaseMaterial, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHierarchicalLODSetup, 0x0070);
		}

		// class UWorldSettings : public UInfo
		TEST_METHOD(Class__Engine__WorldSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, UnknownData_QJZ8, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, VisibilityCellSize, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, VisibilityAggressiveness, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, UnknownData_SOVX, 0x023F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, NavigationSystemConfig, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, NavigationSystemConfigOverride, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, WorldToMeters, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, KillZ, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, KillZDamageType, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, WorldGravityZ, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, GlobalGravityZ, 0x0264);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultPhysicsVolumeClass, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, PhysicsCollisionHandlerClass, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultGameMode, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, GameNetworkManagerClass, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, PackedLightAndShadowMapTextureSize, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultColorScale, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DoAllowBatching, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, UnknownData_ETBS, 0x0299);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultMaxDistanceFieldOcclusionDistance, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, GlobalDistanceFieldViewDistance, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DynamicIndirectShadowsSelfShadowingIntensity, 0x02A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultReverbSettings, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultAmbientZoneSettings, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MonoCullingDistance, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultBaseSoundMix, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, TimeDilation, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MatineeTimeDilation, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DemoPlayTimeDilation, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MinGlobalTimeDilation, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MaxGlobalTimeDilation, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MinUndilatedFrameTime, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MaxUndilatedFrameTime, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, BroadphaseSettings, 0x0314);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, UnknownData_2N33, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, Pauser, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, ReplicationViewers, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, AssetUserData, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, PauserPlayerState, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, MaxNumberOfBookmarks, 0x0388);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, UnknownData_RWJD, 0x038C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, DefaultBookmarkClass, 0x0390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, BookmarkArray, 0x0398);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWorldSettings, LastBookmarkClass, 0x03A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWorldSettings, 0x03B0);
		}

		// class UTileUtilities_C : public UBlueprintFunctionLibrary
		TEST_METHOD(BlueprintGeneratedClass__TileUtilities__TileUtilities_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTileUtilities_C, 0x0030);
		}

		// class UBP_Logo_C : public Uactor
		TEST_METHOD(BlueprintGeneratedClass__BP_Logo__BP_Logo_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, UberGraphFrame, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, MaterialHelper, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Cube, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, DefaultSceneRoot, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Timeline_0_Fade_E88DB81340E64A2D6C8133B1212395F5, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Timeline_0_Timing_E88DB81340E64A2D6C8133B1212395F5, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Timeline_0__Direction_E88DB81340E64A2D6C8133B1212395F5, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, UnknownData_TPJF, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Timeline_1, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Anim_Fade_89F4B59C42CBB8068E84979C128BB364, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Anim_Timing_89F4B59C42CBB8068E84979C128BB364, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Anim__Direction_89F4B59C42CBB8068E84979C128BB364, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, UnknownData_4BF2, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Logo_C, Anim, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Logo_C, 0x0280);
		}

		// class UBP_Menu_CamperFemale04_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale04__BP_Menu_CamperFemale04_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale04_C, 0x0649);
		}

		// class UAB_SK_Hair_ACC01_C : public UOniCustomizationItemAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SK_Hair_ACC01__AB_SK_Hair_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, UberGraphFrame, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_Root, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_TransitionResult, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_7, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_6, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_5, 0x0360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_4, 0x0380);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_7, 0x03A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_8, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_6, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_7, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_21, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_20, 0x08A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_19, 0x0D00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_18, 0x1160);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_17, 0x15C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_16, 0x1A20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_15, 0x1E80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_14, 0x22E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_13, 0x2740);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_12, 0x2BA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_11, 0x3000);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_10, 0x3460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_9, 0x38C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x3D20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_MultiWayBlend_2, 0x4180);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_5, 0x41D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_SequencePlayer_2, 0x41F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ApplyAdditive_2, 0x4268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_6, 0x4338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_BlendListByBool_2, 0x4368);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_28, 0x4408);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_27, 0x4518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_26, 0x4628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_25, 0x4738);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_24, 0x4848);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_23, 0x4958);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_22, 0x4A68);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_21, 0x4B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_20, 0x4C88);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_19, 0x4D98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_18, 0x4EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_17, 0x4FB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_16, 0x50C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_4, 0x51D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_15, 0x51F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_5, 0x5308);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_StateResult_3, 0x5338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_3, 0x5370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x5390);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x53B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_3, 0x53D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_4, 0x53F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x5420);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x5440);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x5470);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x58D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x5D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x6190);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x65F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x6A50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_AnimDynamics, 0x6EB0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_MultiWayBlend, 0x7310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_SequencePlayer, 0x7360);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ApplyAdditive, 0x73D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_BlendListByBool, 0x74A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_14, 0x7548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_13, 0x7658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_12, 0x7768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_11, 0x7878);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_10, 0x7988);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_9, 0x7A98);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_8, 0x7BA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_7, 0x7CB8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_6, 0x7DC8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_5, 0x7ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_4, 0x7FE8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_3, 0x80F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone_2, 0x8208);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x8318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_ModifyBone, 0x8338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x8448);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_StateResult_2, 0x8478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_UseCachedPose, 0x84B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_StateResult, 0x84E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_StateMachine, 0x8518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x85C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, AnimGraphNode_SaveCachedPose, 0x8708);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, Initialized, 0x87C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, UnknownData_NIN9, 0x87C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, OwningCharacterSkeletalMesh, 0x87C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, InMenu, 0x87D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, UnknownData_9YG3, 0x87D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, time, 0x87D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, RotationValue, 0x87D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, RotationValueDemon, 0x87E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Hair_ACC01_C, Toggle, 0x87F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SK_Hair_ACC01_C, 0x87F9);
		}

		// class UBP_AV_Hair_Acc01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_AV_Hair_Acc01__BP_AV_Hair_Acc01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_AV_Hair_Acc01_C, 0x02B8);
		}

		// class UBP_Menu_Slasher06_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher06__BP_Menu_Slasher06_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher06_C, UnknownData_WEFV, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher06_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher06_C, BP_Audio_KLR_06, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher06_C, DBDPlayerPositionOffset, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher06_C, 0x0688);
		}

		// class UBP_Menu_CamperFemale06_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale06__BP_Menu_CamperFemale06_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale06_C, 0x0649);
		}

		// class UAB_Menu_FM_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_FM__AB_Menu_FM_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_FM_C, 0x194C);
		}

		// class UAB_K23_Hair_ACC01_REF_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_K23_Hair_ACC01_REF__AB_K23_Hair_ACC01_REF_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_6, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_5, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_4, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_UseCachedPose_3, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace_2, 0x1060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1080);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_StateResult_3, 0x10A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, UnknownData_TAUN, 0x10D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_3, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics_2, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_AnimDynamics, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_ComponentToLocalSpace, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_UseCachedPose_2, 0x1E20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_LocalToComponentSpace, 0x1E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_StateResult_2, 0x1E70);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_UseCachedPose, 0x1EA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_StateResult, 0x1ED8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_StateMachine, 0x1F10);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_CopyPoseFromMesh, 0x1FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_K23_Hair_ACC01_REF_C, AnimGraphNode_SaveCachedPose, 0x2100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_K23_Hair_ACC01_REF_C, 0x21B8);
		}

		// class UBP_GK_KeyRing_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_GK_KeyRing_ACC01__BP_GK_KeyRing_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_GK_KeyRing_ACC01_C, 0x02B8);
		}

		// class UBP_DBDRegionFinder_C : public URegionFinder
		TEST_METHOD(BlueprintGeneratedClass__BP_DBDRegionFinder__BP_DBDRegionFinder_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DBDRegionFinder_C, 0x00A8);
		}

		// class UBP_Audio_KLR_14_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_15__BP_Audio_KLR_14_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_14_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_14_C, 0x00F8);
		}

		// class UAB_GK_FlowerKeyBow_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_GK_FlowerKeyBow_ACC01__AB_GK_FlowerKeyBow_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_8, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_7, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_6, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_5, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x14C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x14E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_StateResult_3, 0x1500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, UnknownData_C4J6, 0x1538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_AnimDynamics, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x26F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x2710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_StateResult_2, 0x2730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_UseCachedPose, 0x2768);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_StateResult, 0x2798);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_StateMachine, 0x27D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x2880);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_GK_FlowerKeyBow_ACC01_C, AnimGraphNode_SaveCachedPose, 0x29C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_GK_FlowerKeyBow_ACC01_C, 0x2A78);
		}

		// class UBP_SK_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_SK_Hair_ACC01__BP_SK_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SK_Hair_ACC01_C, 0x02B8);
		}

		// class UBP_Audio_KLR_19_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_20__BP_Audio_KLR_19_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_19_C, UberGraphFrame, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_19_C, 0x00F8);
		}

		// class UBP_MT_Hair01_Acc_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_MT_Hair01_Acc__BP_MT_Hair01_Acc_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_MT_Hair01_Acc_C, 0x02B8);
		}

		// class UAB_US_Bag_ACC006_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_US_Bag_ACC006__AB_US_Bag_ACC006_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_10, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_9, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_8, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_7, 0x1030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_6, 0x1490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_UseCachedPose_3, 0x18F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_LocalToComponentSpace_2, 0x1920);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_ComponentToLocalSpace_2, 0x1940);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_StateResult_3, 0x1960);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, UnknownData_Y14Z, 0x1998);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_5, 0x19A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_4, 0x1E00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_3, 0x2260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics_2, 0x26C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_AnimDynamics, 0x2B20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_ComponentToLocalSpace, 0x2F80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_UseCachedPose_2, 0x2FA0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_LocalToComponentSpace, 0x2FD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_StateResult_2, 0x2FF0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_UseCachedPose, 0x3028);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_StateResult, 0x3058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_StateMachine, 0x3090);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_CopyPoseFromMesh, 0x3140);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_US_Bag_ACC006_C, AnimGraphNode_SaveCachedPose, 0x3280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_US_Bag_ACC006_C, 0x3338);
		}

		// class UBP_Menu_CamperMale03_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale03__BP_Menu_CamperMale03_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale03_C, 0x0649);
		}

		// class UAB_SK_Body_T_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_SK_Body_T_ACC01__AB_SK_Body_T_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Body_T_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Body_T_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Body_T_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Body_T_ACC01_C, OwningCharacterSkeletalMesh, 0x03F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_SK_Body_T_ACC01_C, Initialized, 0x03F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_SK_Body_T_ACC01_C, 0x03F9);
		}

		// class UAB_S25_Jabot_ACC01_C : public UDynamicAccessoryAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_S25_Jabot_ACC01__AB_S25_Jabot_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_TransitionResult_2, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_TransitionResult, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_AnimDynamics_4, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_AnimDynamics_3, 0x0770);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_UseCachedPose_3, 0x0BD0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_LocalToComponentSpace_2, 0x0C00);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0C20);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_StateResult_3, 0x0C40);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, UnknownData_B4Y2, 0x0C78);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x0C80);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_AnimDynamics, 0x10E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x1540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_UseCachedPose_2, 0x1560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_LocalToComponentSpace, 0x1590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_StateResult_2, 0x15B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_UseCachedPose, 0x15E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_StateResult, 0x1618);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_StateMachine, 0x1650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_CopyPoseFromMesh, 0x1700);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_S25_Jabot_ACC01_C, AnimGraphNode_SaveCachedPose, 0x1840);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_S25_Jabot_ACC01_C, 0x18F8);
		}

		// class UBP_US_Recorder_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_US_Recorder_ACC01__BP_US_Recorder_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_US_Recorder_ACC01_C, 0x02B8);
		}

		// class UBP_Effect_Killer07Weapon01_C : public UBP_BaseItemVfx_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Effect_Killer07Weapon01__BP_Effect_Killer07Weapon01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Killer07Weapon01_C, UnknownData_NMBH, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Killer07Weapon01_C, UberGraphFrame, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Effect_Killer07Weapon01_C, TotalTime, 0x0268);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Effect_Killer07Weapon01_C, 0x026C);
		}

		// class UBP_Menu_Slasher23_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher23__BP_Menu_Slasher23_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher23_C, UnknownData_QHJN, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher23_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher23_C, BP_Audio_KLR_24, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher23_C, 0x0680);
		}

		// class UBP_SK_Mask_T_ACC000_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_SK_Mask_T_ACC000__BP_SK_Mask_T_ACC000_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Mask_T_ACC000_C, UberGraphFrame, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_SK_Mask_T_ACC000_C, SkeletalMesh, 0x02C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SK_Mask_T_ACC000_C, 0x02C8);
		}

		// class UBP_RedStainComponent_C : public URedStainComponent
		TEST_METHOD(BlueprintGeneratedClass__BP_RedStainComponent__BP_RedStainComponent_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_RedStainComponent_C, 0x03E0);
		}

		// class UBP_SS_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_SS_Hair_ACC01__BP_SS_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_SS_Hair_ACC01_C, 0x02B8);
		}

		// class USlasherAnimSlaveMale_C : public USlaveAnimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__SlasherAnimSlaveMale__SlasherAnimSlaveMale_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveMale_C, UberGraphFrame, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveMale_C, AnimGraphNode_Root, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveMale_C, AnimGraphNode_CopyPoseFromMesh, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USlasherAnimSlaveMale_C, MasterMesh, 0x0400);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlasherAnimSlaveMale_C, 0x0408);
		}

		// class UBP_Menu_CamperMale11_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale11__BP_Menu_CamperMale11_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale11_C, 0x0649);
		}

		// class UAB_Menu_Bill_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Bill__AB_Menu_Bill_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Bill_C, 0x194C);
		}

		// class UBP_Menu_Slasher14_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher14__BP_Menu_Slasher14_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher14_C, UnknownData_V5AB, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher14_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher14_C, BP_Audio_KLR_15, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher14_C, 0x0680);
		}

		// class USteamConfig : public UObject
		TEST_METHOD(Class__OnlinePresence__SteamConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USteamConfig, 0x0030);
		}

		// class UMirrorsConfig : public UObject
		TEST_METHOD(Class__OnlinePresence__MirrorsConfig)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMirrorsConfig, 0x0030);
		}

		// class UOnlinePresenceExternalCommands : public UObject
		TEST_METHOD(Class__OnlinePresence__OnlinePresenceExternalCommands)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOnlinePresenceExternalCommands, UnknownData_BZF6, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOnlinePresenceExternalCommands, 0x0048);
		}

		// class ULightPropagationVolumeBlendable : public UObject
		TEST_METHOD(Class__LightPropagationVolumeRuntime__LightPropagationVolumeBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_CO18, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, settings, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, BlendWeight, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightPropagationVolumeBlendable, UnknownData_O0BS, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightPropagationVolumeBlendable, 0x0080);
		}

		// class USocialChatChannel : public UObject
		TEST_METHOD(Class__Party__SocialChatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatChannel, UnknownData_DV3I, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialChatChannel, 0x00F0);
		}

		// class USocialChatRoom : public USocialChatChannel
		TEST_METHOD(Class__Party__SocialChatRoom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatRoom, UnknownData_QAQR, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialChatRoom, 0x0100);
		}

		// class USocialDebugTools : public UObject
		TEST_METHOD(Class__Party__SocialDebugTools)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialDebugTools, UnknownData_3LAQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialDebugTools, 0x0090);
		}

		// class USocialGroupChannel : public UObject
		TEST_METHOD(Class__Party__SocialGroupChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialGroupChannel, SocialUser, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialGroupChannel, GroupId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialGroupChannel, DisplayName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialGroupChannel, Members, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialGroupChannel, UnknownData_V5BO, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialGroupChannel, 0x0098);
		}

		// class USocialPartyChatRoom : public USocialChatRoom
		TEST_METHOD(Class__Party__SocialPartyChatRoom)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialPartyChatRoom, 0x0100);
		}

		// class USocialPrivateMessageChannel : public USocialChatChannel
		TEST_METHOD(Class__Party__SocialPrivateMessageChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialPrivateMessageChannel, TargetUser, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialPrivateMessageChannel, 0x00F8);
		}

		// class USocialReadOnlyChatChannel : public USocialChatChannel
		TEST_METHOD(Class__Party__SocialReadOnlyChatChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialReadOnlyChatChannel, 0x00F0);
		}

		// class USocialSettings : public UObject
		TEST_METHOD(Class__Party__SocialSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, OssNamesWithEnvironmentIdPrefix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, DefaultMaxPartySize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, bPreferPlatformInvites, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, bMustSendPrimaryInvites, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, bLeavePartyOnDisconnect, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, UnknownData_KTYQ, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, UserListAutoUpdateRate, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, MinNicknameLength, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, MaxNicknameLength, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialSettings, UnknownData_2MC0, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialSettings, 0x0058);
		}

		// class USocialUser : public UObject
		TEST_METHOD(Class__Party__SocialUser)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialUser, UnknownData_LGW9, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialUser, 0x0170);
		}

		// class UChatroom : public UObject
		TEST_METHOD(Class__Party__Chatroom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatroom, CurrentChatRoomId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatroom, MaxChatRoomRetries, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatroom, NumChatRoomRetries, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChatroom, UnknownData_4K5J, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChatroom, 0x0060);
		}

		// class USocialManager : public UObject
		TEST_METHOD(Class__Party__SocialManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialManager, UnknownData_OS5J, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialManager, SocialToolkits, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialManager, SocialDebugTools, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialManager, UnknownData_L2KX, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialManager, 0x01A8);
		}

		// class USocialParty : public UObject
		TEST_METHOD(Class__Party__SocialParty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, UnknownData_MD02, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, ReservationBeaconClientClass, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, SpectatorBeaconClientClass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, UnknownData_L6MC, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, OwningLocalUserId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, CurrentLeaderId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, PartyMembersById, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, bEnableAutomaticPartyRejoin, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, UnknownData_GUVF, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, ReservationBeaconClient, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, UnknownData_DVPV, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, SpectatorBeaconClient, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialParty, UnknownData_2DK0, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialParty, 0x02C0);
		}

		// class UPartyMember : public UObject
		TEST_METHOD(Class__Party__PartyMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMember, UnknownData_8GSC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMember, SocialUser, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPartyMember, UnknownData_0HYC, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPartyMember, 0x00F8);
		}

		// class USocialToolkit : public UObject
		TEST_METHOD(Class__Party__SocialToolkit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, UnknownData_3JOY, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, LocalUser, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, AllUsers, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, UnknownData_JP9O, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, LocalPlayerOwner, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, SocialChatManager, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialToolkit, UnknownData_3U3Y, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialToolkit, 0x01F8);
		}

		// class USocialChatManager : public UObject
		TEST_METHOD(Class__Party__SocialChatManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, UnknownData_VXCD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, DirectChannelsByTargetUser, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, ChatRoomsById, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, ReadOnlyChannelsByDisplayName, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, bEnableChatSlashCommands, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, UnknownData_IKOK, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, GroupChannels, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::USocialChatManager, UnknownData_BGL3, 0x01C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USocialChatManager, 0x0228);
		}

		// class UBP_Menu_CamperMale09_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale09__BP_Menu_CamperMale09_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale09_C, 0x0649);
		}

		// class URemoteSessionMediaOutput : public UMediaOutput
		TEST_METHOD(Class__RemoteSession__RemoteSessionMediaOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteSessionMediaOutput, UnknownData_DJ3B, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoteSessionMediaOutput, 0x0048);
		}

		// class URemoteSessionMediaCapture : public UMediaCapture
		TEST_METHOD(Class__RemoteSession__RemoteSessionMediaCapture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URemoteSessionMediaCapture, UnknownData_98NI, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URemoteSessionMediaCapture, 0x0120);
		}

		// class UAudio_C : public ULevelScriptActor
		TEST_METHOD(BlueprintGeneratedClass__Audio__Audio_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAudio_C, UberGraphFrame, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAudio_C, 0x0240);
		}

		// class UPawnObserver : public UactorComponent
		TEST_METHOD(Class__DBDUIPresenters__PawnObserver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnObserver, UnknownData_THPZ, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPawnObserver, _pawn, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPawnObserver, 0x00E0);
		}

		// class URootContainer : public UactorComponent
		TEST_METHOD(Class__DBDUIPresenters__RootContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URootContainer, RootWidgetClass, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootContainer, UnfocusedOpacity, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootContainer, UnknownData_6906, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::URootContainer, _rootWidget, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URootContainer, 0x00D0);
		}

		// class UBaseHudPresenter : public UactorComponent
		TEST_METHOD(Class__DBDUIPresenters__BaseHudPresenter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, _widget, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, _presentedCharacter, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, _pendingCharacter, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, _spectatorPawn, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, RequestPresentationAtBeginPlay, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, InitialVisibility, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseHudPresenter, UnknownData_3E7S, 0x00DA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseHudPresenter, 0x00F8);
		}

		// class USkillCheckPresenter : public UBaseHudPresenter
		TEST_METHOD(Class__DBDUIPresenters__SkillCheckPresenter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCheckPresenter, SkillCheckWidgetClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USkillCheckPresenter, UnknownData_Z0X1, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCheckPresenter, 0x0130);
		}

		// class UTemplatePresenter : public UBaseHudPresenter
		TEST_METHOD(Class__DBDUIPresenters__TemplatePresenter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplatePresenter, TemplateWidgetClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTemplatePresenter, UnknownData_5ITO, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTemplatePresenter, 0x0118);
		}

		// class UTestPresenter : public UBaseHudPresenter
		TEST_METHOD(Class__DBDUIPresenters__TestPresenter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestPresenter, TestWidgetClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTestPresenter, UnknownData_YZYV, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTestPresenter, 0x0108);
		}

		// class UTweenHandler : public UactorComponent
		TEST_METHOD(Class__DBDUIPresenters__TweenHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTweenHandler, DoUpdate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTweenHandler, UnknownData_YGHK, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTweenHandler, 0x00C0);
		}

		// class UUIConsoleCommands : public UObject
		TEST_METHOD(Class__DBDUIPresenters__UIConsoleCommands)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UUIConsoleCommands, 0x0030);
		}

		// class UContextObserver : public UactorComponent
		TEST_METHOD(Class__DBDUIPresenters__ContextObserver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextObserver, ObservedContextSection, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UContextObserver, UnknownData_CLUJ, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UContextObserver, 0x00E0);
		}

		// class UExamplePresenter : public UBaseHudPresenter
		TEST_METHOD(Class__DBDUIPresenters__ExamplePresenter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamplePresenter, ExampleWidgetClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UExamplePresenter, UnknownData_FZJP, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UExamplePresenter, 0x0138);
		}

		// class UFocusHandler : public UactorComponent
		TEST_METHOD(Class__DBDUIPresenters__FocusHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFocusHandler, UnknownData_4F7K, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFocusHandler, 0x00C8);
		}

		// class UHookCountPresenter : public UBaseHudPresenter
		TEST_METHOD(Class__DBDUIPresenters__HookCountPresenter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookCountPresenter, HookCountWidgetClass, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHookCountPresenter, UnknownData_XBAO, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHookCountPresenter, 0x0140);
		}

		// class UAB_Menu_Zarina_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Zarina__AB_Menu_Zarina_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Zarina_C, 0x194C);
		}

		// class UBP_KS_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_KS_Hair_ACC01__BP_KS_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_KS_Hair_ACC01_C, 0x02B8);
		}

		// class UGeometryCacheTrack : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, duration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack, UnknownData_3EJ5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack, 0x0060);
		}

		// class UGeometryCacheTrackStreamable : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrackStreamable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, Codec, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_VSMN, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, StartSampleTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrackStreamable, UnknownData_EOQ8, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrackStreamable, 0x00D8);
		}

		// class UGeometryCacheTrack_TransformAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformAnimation, UnknownData_1NI2, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformAnimation, 0x0108);
		}

		// class UGeometryCacheTrack_TransformGroupAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_TransformGroupAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_TransformGroupAnimation, UnknownData_YWKN, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_TransformGroupAnimation, 0x0108);
		}

		// class UGeometryCache : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_71QR, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Materials, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, Tracks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, UnknownData_DT0Y, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, StartFrame, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCache, EndFrame, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCache, 0x0070);
		}

		// class UGeometryCacheActor : public Uactor
		TEST_METHOD(Class__GeometryCache__GeometryCacheActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheActor, GeometryCacheComponent, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheActor, 0x0238);
		}

		// class UGeometryCacheCodecBase : public UObject
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecBase, TopologyRanges, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecBase, 0x0040);
		}

		// class UGeometryCacheCodecRaw : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecRaw)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, DummyProperty, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecRaw, UnknownData_XYWZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecRaw, 0x0048);
		}

		// class UGeometryCacheCodecV1 : public UGeometryCacheCodecBase
		TEST_METHOD(Class__GeometryCache__GeometryCacheCodecV1)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheCodecV1, UnknownData_6CZF, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheCodecV1, 0x0048);
		}

		// class UGeometryCacheComponent : public UMeshComponent
		TEST_METHOD(Class__GeometryCache__GeometryCacheComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, GeometryCache, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bRunning, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bLooping, 0x0481);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_NZRX, 0x0482);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, StartTimeOffset, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, PlaybackSpeed, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, NumTracks, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, ElapsedTime, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_ZAP8, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, duration, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, bManualTick, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheComponent, UnknownData_VJRK, 0x04C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheComponent, 0x04D0);
		}

		// class UGeometryCacheTrack_FlipbookAnimation : public UGeometryCacheTrack
		TEST_METHOD(Class__GeometryCache__GeometryCacheTrack_FlipbookAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, NumMeshSamples, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeometryCacheTrack_FlipbookAnimation, UnknownData_QFLI, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeometryCacheTrack_FlipbookAnimation, 0x0088);
		}

		// class UMagicLeapARPinComponent : public USceneComponent
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, ObjectUID, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UserIndex, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, AutoPinType, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, bShouldPinActor, 0x0225);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_JMKU, 0x0226);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinDataClass, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinned, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, OnPersistentEntityPinLost, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedCFUID, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinnedSceneComponent, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, PinData, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinComponent, UnknownData_29G2, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinComponent, 0x0340);
		}

		// class UMagicLeapARPinFunctionLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinFunctionLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinFunctionLibrary, 0x0030);
		}

		// class UMagicLeapARPinSettings : public UObject
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UpdateCheckFrequency, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, OnUpdatedEventTriggerDelta, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSettings, UnknownData_89ZN, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSettings, 0x0048);
		}

		// class UMagicLeapARPinSaveGame : public USaveGame
		TEST_METHOD(Class__MagicLeapARPin__MagicLeapARPinSaveGame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinnedID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, ComponentWorldTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMagicLeapARPinSaveGame, PinTransform, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMagicLeapARPinSaveGame, 0x00A0);
		}

		// class UPlayerAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__PlayerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, UnknownData_QHNI, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _owningPlayer, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _animEffectBlackBoard, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _animEffectHandlerForSFX, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _animEffectHandlerForVFX, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _animEffectHandlerClassForSFX, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _animEffectHandlerClassForVFX, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _taggedAnimCollections, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _animations, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _blendspaces, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _aimoffsets, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _blendspaces1d, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _aimoffsets1d, 0x0410);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _selectors, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _isInParadise, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, UnknownData_4F78, 0x04B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, _activationDefinition, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPlayerAnimInstance, UnknownData_92XB, 0x04E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPlayerAnimInstance, 0x04E8);
		}

		// class UBaseKillerAnimInstance : public UPlayerAnimInstance
		TEST_METHOD(Class__DBDAnimation__BaseKillerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerAnimInstance, _owningKiller, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerAnimInstance, _firstPersonView, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerAnimInstance, UnknownData_HIG9, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseKillerAnimInstance, 0x04F8);
		}

		// class UKillerAnimInstance : public UBaseKillerAnimInstance
		TEST_METHOD(Class__DBDAnimation__KillerAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _leftHandIKLocationFPV, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _rightHandIKLocationFPV, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isAnyMontagePlaying, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isCarrying, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, UnknownData_J9T5, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _firstPersonCarryOffset, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _firstPersonCarryOffsetLookingDown, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isInAir, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isSpectator, 0x052D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isIdle, 0x052E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, UnknownData_I21Q, 0x052F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _animDirection, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _animSpeed, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _animPitch, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _animYaw, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _pelvisHeight, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _idleTime, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _directionSwitch, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isAttacking, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _isPlayingAnyMontage, 0x054D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, UnknownData_Q7B2, 0x054E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _leftClearFrontSpaceVector, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _rightClearFrontSpaceVector, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _velocity, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _rightFootEffectorLocation, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _leftFootEffectorLocation, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _interactionType, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, UnknownData_OKGK, 0x058D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _armIKSensorComponent, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _attackState, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, UnknownData_24PZ, 0x0599);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _forwardVelocity, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, _lateralVelocity, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerAnimInstance, UnknownData_YXS8, 0x05A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerAnimInstance, 0x05A8);
		}

		// class UBasePlayerAttackSubAnimInstance : public UPlayerAnimInstance
		TEST_METHOD(Class__DBDAnimation__BasePlayerAttackSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_B2NK, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _direction, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _strafeAngle, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _isStrafe, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_ZHIG, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackInPlayRate, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_LKBT, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackIn, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackSwingPlayRate, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_3OAJ, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackSwing, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackMissPlayRate, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_2Q2Q, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackMiss, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackHitPlayRate, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_G0UE, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackHit, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackBounceOfWallPlayRate, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_T9ZL, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _attackBounceOfWall, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_VLVH, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, _firstPersonView, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePlayerAttackSubAnimInstance, UnknownData_2APB, 0x05AD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePlayerAttackSubAnimInstance, 0x05B0);
		}

		// class UBaseKillerAttackSubAnimInstance : public UBasePlayerAttackSubAnimInstance
		TEST_METHOD(Class__DBDAnimation__BaseKillerAttackSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerAttackSubAnimInstance, _owningKiller, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerAttackSubAnimInstance, UnknownData_OT0I, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseKillerAttackSubAnimInstance, 0x05C0);
		}

		// class UKillerAttackSubAnimInstance : public UBaseKillerAttackSubAnimInstance
		TEST_METHOD(Class__DBDAnimation__KillerAttackSubAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerAttackSubAnimInstance, 0x05C0);
		}

		// class UKillerLocomotionSubAnimInstance : public UBaseKillerAnimInstance
		TEST_METHOD(Class__DBDAnimation__KillerLocomotionSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _landLightTPV, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _landLightFPV, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _BSLandTPV, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _BSLandFPV, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _walkToFallTPV, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _walkToFallFPV, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _carryIdleTPV, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _carryIdleFPV, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _fallingTPV, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _fallingFPV, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _isFirstPersonView, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, UnknownData_RKRP, 0x0549);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _landLight, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _BSLand, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _walkToFall, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _carryIdle, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _falling, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _isVaultingToFall, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, UnknownData_JRPO, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::UKillerLocomotionSubAnimInstance, _isVaultingToFallState, 0x0580);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UKillerLocomotionSubAnimInstance, 0x05B0);
		}

		// class UBaseSurvivorAnimInstance : public UPlayerAnimInstance
		TEST_METHOD(Class__DBDAnimation__BaseSurvivorAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseSurvivorAnimInstance, _owningSurvivor, 0x04E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseSurvivorAnimInstance, 0x04F0);
		}

		// class ULegIKSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__LegIKSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _leftFootOffset, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _rightFootOffset, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _pelvisOffset, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _isIdle, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _isCrouched, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, UnknownData_PFVB, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _rightFootDeltaRotator, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _leftFootDeltaRotator, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, ANimCollection, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _floorJoint, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _pelvisOffsetTreshold, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _pelvisOffsetRange, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _pelvisOffsetRangeCrouched, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _pelvisOffsetInterpolationSpeed, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _footOffsetRange, 0x056C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _footOffsetRangeCrouched, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _footOffsetInterpolationSpeed, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _footPitchDeltaRange, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _leftFootGroundDetector, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _rightFootGroundDetector, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, maxLocalHeightForPlanting, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, UnknownData_7YFK, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, _locomotionPredictor, 0x05F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegIKSurvivorSubAnimInstance, UnknownData_SZNZ, 0x05F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegIKSurvivorSubAnimInstance, 0x0600);
		}

		// class ULocomotionPredictor : public UObject
		TEST_METHOD(Class__DBDAnimation__LocomotionPredictor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionPredictor, _animFootData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocomotionPredictor, 0x0080);
		}

		// class ULocomotionSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__LocomotionSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isRecoveringWhileCrawling, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isTenacityPerkActive, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_1TND, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasStandingResetTime, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasRunningResetTime, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasCrouchingResetTime, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasMovingResetTime, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isIdle, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_5ORI, 0x0505);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _recentlyIdleCooldownTime, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _recentlyNotIdleCooldownTime, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasIdleRecently, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _idleInterupt, 0x0511);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isAgainstSmallKiller, 0x0512);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isMoving, 0x0513);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasRunning, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isRunning, 0x0515);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasCrouching, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isCrouching, 0x0517);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasStanding, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isStanding, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isCrawling, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isDead, 0x051B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _walkAnimSpeed, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _walkAnimStartOffset, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _walkAnimPlayRateMultiplier, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _wasLastDamageSourceDeepWounds, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isStrafing, 0x0529);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isUsingDeadHard, 0x052A);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_SEMV, 0x052B);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _direction, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isUsingAimItem, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isBeingCarried, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_KS9C, 0x0532);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetPitch, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYaw, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _turn180Active, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _turningRight, 0x053D);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _start180Active, 0x053E);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_1OL4, 0x053F);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawInterpolated, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _allowLookAt, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isInjured, 0x0545);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isDrasticAimOffsetYawChangeDetected, 0x0546);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_B5W2, 0x0547);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawInterpolationSpeed, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawDeadzoneStart, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawClampValue, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawDrasticChangeUpperLimit, 0x0554);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawDrasticChangeLowerLimit, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawDrasticChangeInterpolationSpeed, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawInterpolateEaseIn, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawInterpolateEaseOut, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawInterpolationEaseInLength, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawInterpolationEaseOutDistance, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _isAimOffsetYawInDeadZone, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_T96V, 0x0579);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _currentTargetAimOffsetYaw, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawAcceleration, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _aimOffsetYawAccelerationTime, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _maxParadiseWalkCycleOffSet, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_91L1, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _minParadiseWalkPlayRateMultiplier, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_ITP6, 0x0594);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _turn180DetectionPrecision, 0x0598);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _turn180DetectionDeadZone, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _turn180PrevVelocitiesCacheDuration, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _minDurationBetweenTurn180Detection, 0x05A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _start180DetectionPrecision, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _idleDurationFor180StartDetection, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, _durationBeforeStart180Reset, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULocomotionSurvivorSubAnimInstance, UnknownData_E1LN, 0x05B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULocomotionSurvivorSubAnimInstance, 0x07A0);
		}

		// class ULookAtTargetKillerSubAnimInstance : public UBaseKillerAnimInstance
		TEST_METHOD(Class__DBDAnimation__LookAtTargetKillerSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, UnknownData_1Y9F, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _headSocket, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _rootSocket, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _preferredMinLookAtTime, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _distanceScoreFactor, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _angleScoreFactor, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _sameTargetScoreFactor, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _yawToTarget, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _pitchToTarget, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, _hasVisibleTarget, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtTargetKillerSubAnimInstance, UnknownData_7OLP, 0x052D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULookAtTargetKillerSubAnimInstance, 0x06B0);
		}

		// class ULookAtThreatSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__LookAtThreatSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, _maxDistanceForThreatDetection, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, _headSocket, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, _rootSocket, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, _yawToThreat, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, _pitchToThreat, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, _isVisibleThreat, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULookAtThreatSurvivorSubAnimInstance, UnknownData_1SC7, 0x0515);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULookAtThreatSurvivorSubAnimInstance, 0x0650);
		}

		// class UMeshRotationCorrectionSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__MeshRotationCorrectionSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshRotationCorrectionSubAnimInstance, _rotationInterpSpeed, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshRotationCorrectionSubAnimInstance, _isCrawling, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshRotationCorrectionSubAnimInstance, UnknownData_OHHH, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshRotationCorrectionSubAnimInstance, _toSlopeRotation, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshRotationCorrectionSubAnimInstance, UnknownData_4UOW, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UMeshRotationCorrectionSubAnimInstance, _movementComponent, 0x0508);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMeshRotationCorrectionSubAnimInstance, 0x0510);
		}

		// class UOpenChestSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__OpenChestSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, _isInteractingWithChest, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, UnknownData_8QZR, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, _interactionPhase, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, _isInteractingWithOpenChest, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, UnknownData_OYV8, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, _snapPosition, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, _isVomiting, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UOpenChestSurvivorSubAnimInstance, UnknownData_RVPU, 0x0511);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UOpenChestSurvivorSubAnimInstance, 0x0520);
		}

		// class URBTSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__RBTSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URBTSurvivorSubAnimInstance, UnknownData_NXP2, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URBTSurvivorSubAnimInstance, _isRemovingRBT, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::URBTSurvivorSubAnimInstance, _hasSkillCheckFailed, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::URBTSurvivorSubAnimInstance, UnknownData_EMQQ, 0x0532);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URBTSurvivorSubAnimInstance, 0x0540);
		}

		// class URepairGeneratorSubAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__RepairGeneratorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _owningGenerator, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _isBeingRepaired, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, UnknownData_JWXX, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _repairingSurvivor, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _animSequence, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _interactionTag, 0x0290);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _currentAnimId, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, _taggedAnimSequences, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSubAnimInstance, UnknownData_F99S, 0x02F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URepairGeneratorSubAnimInstance, 0x0300);
		}

		// class URepairGeneratorSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__RepairGeneratorSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, UnknownData_Q6RO, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _snapPosition, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _side, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _repairAnimIndex, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, UnknownData_ZX34, 0x054C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _isRepairingGenerator, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _rightFootDown, 0x0559);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, UnknownData_YHWC, 0x055A);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _animSequenceVariationCount, 0x055C);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _isVomiting, 0x0560);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, _hasSkillCheckFailed, 0x0561);
			CHEAT_GEAR_CHECK_OFFSET(CG::URepairGeneratorSurvivorSubAnimInstance, UnknownData_RSAU, 0x0562);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::URepairGeneratorSurvivorSubAnimInstance, 0x0570);
		}

		// class USabotageSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__SabotageSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USabotageSurvivorSubAnimInstance, UnknownData_E7RW, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USabotageSurvivorSubAnimInstance, _isSabotaging, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USabotageSurvivorSubAnimInstance, _hasSkillCheckFailed, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::USabotageSurvivorSubAnimInstance, UnknownData_B1ZN, 0x0532);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USabotageSurvivorSubAnimInstance, 0x0540);
		}

		// class UScreamSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__ScreamSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreamSurvivorSubAnimInstance, _screamTrigger, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UScreamSurvivorSubAnimInstance, UnknownData_229F, 0x04F1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UScreamSurvivorSubAnimInstance, 0x0500);
		}

		// class USkillCheckFailureTracker : public UInterface
		TEST_METHOD(Class__DBDAnimation__SkillCheckFailureTracker)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USkillCheckFailureTracker, 0x0030);
		}

		// class USurvivorAimableArmSensor : public UArmIKSensorComponent
		TEST_METHOD(Class__DBDAnimation__SurvivorAimableArmSensor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableArmSensor, UnknownData_MBKZ, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableArmSensor, _aimableCollectable, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableArmSensor, _aimable, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableArmSensor, UnknownData_2JDG, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorAimableArmSensor, 0x0160);
		}

		// class USurvivorAimableSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__SurvivorAimableSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, _pitch, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, _isHoldingAimItem, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, _isAiming, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, UnknownData_QR02, 0x04F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, _isAimingAlpha, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, _aimPoint, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, _shoulderToCollisionDistance, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAimableSubAnimInstance, UnknownData_CFSE, 0x050C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorAimableSubAnimInstance, 0x0520);
		}

		// class USurvivorAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__SurvivorAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, camperPlayer, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsHooked, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsSacrificeStruggling, 0x04F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_0KUL, 0x04FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, MontageMadnessTierUp, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, ArrayCarryAttackMontage, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, _isFrightScreaming, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, isBeingCarried, 0x0519);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingPutOnHook, 0x051A);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsCrouched, 0x051B);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, GuidedAction, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsTrapped, 0x051D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsCrawling, 0x051E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, isDead, 0x051F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, MaxSpeed, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsInsideCloset, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_N9BQ, 0x0525);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsPlayingMadnessTierUpWeight, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingKilled, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsCarryAttackSucess, 0x052D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsUsingAimItem, 0x052E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsHoldingAimItem, 0x052F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, AllowLookAt, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_MLWH, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, DropStaggerTimeLeft, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, RightArmIKAlpha, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_O0S9, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, RightHandIKTransform, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, Strafe, 0x0570);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, isInteracting, 0x0571);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, Injured, 0x0572);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, InteractionType, 0x0573);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, PreviousInteractionType, 0x0574);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsSlasherInFPV, 0x0575);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_B307, 0x0576);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, CarriedAlpha, 0x0578);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsHoldingHandleItem, 0x057C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsHoldingSmallItem, 0x057D);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsHoldingFirecracker, 0x057E);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, InAir, 0x057F);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, _walkAnimSpeed, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, direction, 0x0584);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, Pitch, 0x0588);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, Yaw, 0x058C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, RightFootEffectorLocation, 0x0590);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, LeftFootEffectorLocation, 0x059C);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, Idle, 0x05A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_9R6Q, 0x05A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, MyTime, 0x05AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, HasAnyMontagePlaying, 0x05B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_OZJB, 0x05B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, CurrentlyPlayerMontageId, 0x05B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingCarriedByTheSpirit, 0x05C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingCarriedByTheNightmare, 0x05C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingCarriedByThePig, 0x05C2);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingCarriedByTheHag, 0x05C3);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingCarriedByTheLegion, 0x05C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsBeingCarriedByTheGhostFace, 0x05C5);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsUsingDeadHard, 0x05C6);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsPlayingWakeUpOther, 0x05C7);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, IsPlayingFreddyMori, 0x05C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, isHealingKOCamper, 0x05C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, HasLinkInput, 0x05CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::USurvivorAnimInstance, UnknownData_7H3O, 0x05CB);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USurvivorAnimInstance, 0x0600);
		}

		// class UTurn180Component : public UactorComponent
		TEST_METHOD(Class__DBDAnimation__Turn180Component)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurn180Component, UnknownData_OIS9, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurn180Component, _settings, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTurn180Component, UnknownData_O0KS, 0x00E1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTurn180Component, 0x00E8);
		}

		// class UWakerObjectAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__WakerObjectAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _reappearTimerCooldown, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _wakeUpCharge, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _chargeStarted, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _interactionComplete, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _outEnd, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _reset, 0x027B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _inEnd, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _wakerObjectStarted, 0x027D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _respawnEnd, 0x027E);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, _cancelEnd, 0x027F);
			CHEAT_GEAR_CHECK_OFFSET(CG::UWakerObjectAnimInstance, UnknownData_FAAB, 0x0280);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UWakerObjectAnimInstance, 0x02B0);
		}

		// class UAimOffsetSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__AimOffsetSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _pitch, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yaw, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawInterpolated, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _allowLookAt, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _isUsingAimItem, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _isInjured, 0x04FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _isCrawling, 0x04FF);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _isIdle, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _isDrasticYawChangeDetected, 0x0501);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, UnknownData_0T0L, 0x0502);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawInterpolationSpeed, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawDeadzoneStart, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawClampValue, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawDrasticChangeUpperLimit, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawDrasticChangeLowerLimit, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawDrasticChangeInterpolationSpeed, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, UnknownData_JQ56, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawInterpolateEaseIn, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawInterpolateEaseOut, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawInterpolationEaseInLength, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawInterpolationEaseOutDistance, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _isYawInDeadZone, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, UnknownData_OX6C, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _currentTargetYaw, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawAcceleration, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, _yawAccelerationTime, 0x0544);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAimOffsetSurvivorSubAnimInstance, UnknownData_5A03, 0x0548);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAimOffsetSurvivorSubAnimInstance, 0x0550);
		}

		// class UArmIKSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__ArmIKSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _rightWristUpRotation, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _leftWristUpRotation, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _localWristYawRange, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _localWristPitchRange, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _armInterpolationSpeed, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _handInterpolationSpeed, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _alphaLerpTime, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _reachPadding, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _rightArmIKAlpha, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _leftArmIKAlpha, 0x053C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _armIkMode, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, UnknownData_5VE0, 0x0541);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _rightDetectionFan, 0x0548);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _leftDetectionFan, 0x0550);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, _meshComponent, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::UArmIKSurvivorSubAnimInstance, UnknownData_OFCW, 0x0560);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UArmIKSurvivorSubAnimInstance, 0x0570);
		}

		// class UBaseKillerWeaponAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__BaseKillerWeaponAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerWeaponAnimInstance, _attackState, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBaseKillerWeaponAnimInstance, UnknownData_HJ0D, 0x0271);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseKillerWeaponAnimInstance, 0x0280);
		}

		// class UBaseMenuAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__BaseMenuAnimInstance)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBaseMenuAnimInstance, 0x0270);
		}

		// class UBasePowerSubAnimInstance : public UBaseKillerAnimInstance
		TEST_METHOD(Class__DBDAnimation__BasePowerSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBasePowerSubAnimInstance, UnknownData_Q6KI, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBasePowerSubAnimInstance, 0x0500);
		}

		// class UBreathingSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__BreathingSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreathingSurvivorSubAnimInstance, _isDead, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreathingSurvivorSubAnimInstance, UnknownData_8YF8, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBreathingSurvivorSubAnimInstance, _breathing, 0x04F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBreathingSurvivorSubAnimInstance, 0x0500);
		}

		// class UChestAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__ChestAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChestAnimInstance, _owningChest, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChestAnimInstance, _isOpen, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChestAnimInstance, _isBeingPriedOpen, 0x0279);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChestAnimInstance, UnknownData_9J7I, 0x027A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChestAnimInstance, _openChestInteraction, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChestAnimInstance, 0x0290);
		}

		// class UCrowAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__CrowAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowAnimInstance, _shouldTakeOff, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowAnimInstance, UnknownData_ISBA, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UCrowAnimInstance, _crow, 0x0278);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UCrowAnimInstance, 0x0280);
		}

		// class UDynamicAccessoryAnimInstance : public UanimInstance
		TEST_METHOD(Class__DBDAnimation__DynamicAccessoryAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicAccessoryAnimInstance, _isInMenu, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicAccessoryAnimInstance, _isInGame, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicAccessoryAnimInstance, UnknownData_U0T9, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicAccessoryAnimInstance, _masterMesh, 0x0274);
			CHEAT_GEAR_CHECK_OFFSET(CG::UDynamicAccessoryAnimInstance, UnknownData_DTVS, 0x027C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UDynamicAccessoryAnimInstance, 0x0280);
		}

		// class UFaceCorrectionSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__FaceCorrectionSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isIdle, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isFreddyMori, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isInCloset, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isEdgeCase, 0x04F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isInjured, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isHealingOthers, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, _isCrouched, 0x04F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFaceCorrectionSurvivorSubAnimInstance, UnknownData_6UFH, 0x04F7);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFaceCorrectionSurvivorSubAnimInstance, 0x0500);
		}

		// class UGeneratorAnimInstance : public USleepingAnimInstance
		TEST_METHOD(Class__DBDAnimation__GeneratorAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorAnimInstance, _owningGenerator, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorAnimInstance, _rushFailed, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorAnimInstance, _isActivated, 0x0289);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorAnimInstance, UnknownData_7TUB, 0x028A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UGeneratorAnimInstance, _percentComplete, 0x028C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UGeneratorAnimInstance, 0x0290);
		}

		// class UHealSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__HealSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, UnknownData_L1HH, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isHealingACrawlingTarget, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isHealingOtherNoMedkit, 0x0531);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isHealingOtherMedkit, 0x0532);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isHealingSelfNoMedkit, 0x0533);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isHealingSelfMedkit, 0x0534);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isWakingUpOther, 0x0535);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isBeingHealed, 0x0536);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isBeingMended, 0x0537);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isMendingOther, 0x0538);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _hasSkillCheckFailed, 0x0539);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _isCrawling, 0x053A);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, _hasHealerSkillCheckFailed, 0x053B);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHealSurvivorSubAnimInstance, UnknownData_KIGT, 0x053C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHealSurvivorSubAnimInstance, 0x0540);
		}

		// class UInteractionSurvivorSubAnimInstance : public UBaseSurvivorAnimInstance
		TEST_METHOD(Class__DBDAnimation__InteractionSurvivorSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isAgainstSmallKiller, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isInsideCloset, 0x04F1);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isEnteringCloset, 0x04F2);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isBeingCarried, 0x04F3);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isHooked, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isSacrificeStruggling, 0x04F5);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, UnknownData_W34D, 0x04F6);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _sacrificeStrugglePercent, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _selfUnhookFailed, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _interactionAnimation, 0x04FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, UnknownData_ST6Q, 0x04FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _snapPosition, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, _isInteractingWithEscapeDoor, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UInteractionSurvivorSubAnimInstance, UnknownData_8SX5, 0x050D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UInteractionSurvivorSubAnimInstance, 0x0530);
		}

		// class UPounceAttack : public UDBDAttack
		TEST_METHOD(Class__DBDAttack__PounceAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttack, 0x02E0);
		}

		// class UPounceAttackOpenSubstate : public UDBDAttackOpenSubstate
		TEST_METHOD(Class__DBDAttack__PounceAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPounceAttackOpenSubstate, _pounceOpenStateCosmeticBlueprintClass, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPounceAttackOpenSubstate, _pounceOpenStateCosmeticBlueprintObject, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPounceAttackOpenSubstate, UnknownData_5PV6, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttackOpenSubstate, 0x00F0);
		}

		// class UPounceAttackHittingSubstate : public UDBDAttackHittingSubstate
		TEST_METHOD(Class__DBDAttack__PounceAttackHittingSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttackHittingSubstate, 0x0120);
		}

		// class UPounceAttackSuccessSubstate : public UDBDAttackSuccessSubstate
		TEST_METHOD(Class__DBDAttack__PounceAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttackSuccessSubstate, 0x00D8);
		}

		// class UPounceAttackMissSubstate : public UDBDAttackMissSubstate
		TEST_METHOD(Class__DBDAttack__PounceAttackMissSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPounceAttackMissSubstate, UnknownData_Y0A6, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttackMissSubstate, 0x00E0);
		}

		// class UPounceAttackObstructSubstate : public UDBDAttackObstructSubstate
		TEST_METHOD(Class__DBDAttack__PounceAttackObstructSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPounceAttackObstructSubstate, _fullObstructMontage, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UPounceAttackObstructSubstate, UnknownData_CVC4, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttackObstructSubstate, 0x00E8);
		}

		// class UPounceAttackOpenSubstateCosmetic : public UObject
		TEST_METHOD(Class__DBDAttack__PounceAttackOpenSubstateCosmetic)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPounceAttackOpenSubstateCosmetic, 0x0030);
		}

		// class USlashAttack : public UPounceAttack
		TEST_METHOD(Class__DBDAttack__SlashAttack)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::USlashAttack, 0x02E0);
		}

		// class UChainsawAnalyticsBaseComponent : public UactorComponent
		TEST_METHOD(Class__TheHillbilly__ChainsawAnalyticsBaseComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawAnalyticsBaseComponent, UnknownData_LQJC, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawAnalyticsBaseComponent, _maxDistanceFromHookToBeConsideredCamping, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawAnalyticsBaseComponent, UnknownData_ROBI, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainsawAnalyticsBaseComponent, 0x0100);
		}

		// class UHillbillyChainsawAttack : public UPounceAttack
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyChainsawAttack, UnknownData_EGTU, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyChainsawAttack, _chainsawHitGameEventTag, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyChainsawAttack, _chainsawAttemptGameEventTag, 0x0344);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawAttack, 0x0350);
		}

		// class UHillbillyChainsawAttackOpenSubstate : public UPounceAttackOpenSubstate
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawAttackOpenSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyChainsawAttackOpenSubstate, UnknownData_WZ1U, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawAttackOpenSubstate, 0x0128);
		}

		// class UHillbillyChainsawAttackHittingSubstate : public UPounceAttackHittingSubstate
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawAttackHittingSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawAttackHittingSubstate, 0x0120);
		}

		// class UHillbillyChainsawAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawAttackSuccessSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawAttackSuccessSubstate, 0x00D8);
		}

		// class UHillbillyChainsawAttackMissSubstate : public UPounceAttackMissSubstate
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawAttackMissSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawAttackMissSubstate, 0x00E0);
		}

		// class UHillbillyChainsawAttackObstructSubstate : public UPounceAttackObstructSubstate
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawAttackObstructSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawAttackObstructSubstate, 0x00E8);
		}

		// class UChainsawRevInteraction : public UChargeableInteractionDefinition
		TEST_METHOD(Class__TheHillbilly__ChainsawRevInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, UnknownData_3X9M, 0x0628);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, UnknownData_AU3I, 0x0630);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, _soundCueDistanceDataID, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, UnknownData_1VGE, 0x0664);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, _chainsawRevStartAkAudioEvent, 0x0668);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, _chainsawRevEndAkAudioEvent, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, _owningSlasher, 0x0678);
			CHEAT_GEAR_CHECK_OFFSET(CG::UChainsawRevInteraction, UnknownData_82S2, 0x0680);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UChainsawRevInteraction, 0x0690);
		}

		// class UApexMufflerAddon : public USpawnEffectsOnAllSurvivorsBaseAddon
		TEST_METHOD(Class__TheHillbilly__ApexMufflerAddon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UApexMufflerAddon, 0x0220);
		}

		// class UBlackGreaseAddon : public UItemAddon
		TEST_METHOD(Class__TheHillbilly__BlackGreaseAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBlackGreaseAddon, UnknownData_XJOB, 0x0218);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBlackGreaseAddon, 0x0228);
		}

		// class UHillbillyAnalyticsComponent : public UChainsawAnalyticsBaseComponent
		TEST_METHOD(Class__TheHillbilly__HillbillyAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyAnalyticsComponent, UnknownData_NEBA, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyAnalyticsComponent, 0x0180);
		}

		// class UHillbillyAnimInstance : public UKillerAnimInstance
		TEST_METHOD(Class__TheHillbilly__HillbillyAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyAnimInstance, UnknownData_3RME, 0x05A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyAnimInstance, 0x05B0);
		}

		// class UHillbillyChainsawHitEventAddon : public UOnEventBaseAddon
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawHitEventAddon)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawHitEventAddon, 0x0228);
		}

		// class UhillbillyChainsawOverheatComponent : public UactorComponent
		TEST_METHOD(Class__TheHillbilly__hillbillyChainsawOverheatComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, OnHeatChargeUpdateDelegate, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, UnknownData_XZV0, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _isChainsawOverheating, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _chainsawHeatCharge, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _heatMaxCharge, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _heatRevStartAmount, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _heatRevChargeRate, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _heatDashChargeRate, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _heatDischargeRate, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::UhillbillyChainsawOverheatComponent, _overheatDischargeRate, 0x0358);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UhillbillyChainsawOverheatComponent, 0x0398);
		}

		// class UHillbillyChainsawRevInteraction : public UChainsawRevInteraction
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawRevInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyChainsawRevInteraction, UnknownData_5XTZ, 0x0690);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawRevInteraction, 0x06E0);
		}

		// class UHillbillyChainsawSubAnimInstance : public UBaseKillerAttackSubAnimInstance
		TEST_METHOD(Class__TheHillbilly__HillbillyChainsawSubAnimInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyChainsawSubAnimInstance, UnknownData_ED96, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyChainsawSubAnimInstance, 0x05E0);
		}

		// class UHillbillyOverheatPresentationItemProgressComponent : public UPresentationItemProgressComponent
		TEST_METHOD(Class__TheHillbilly__HillbillyOverheatPresentationItemProgressComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UHillbillyOverheatPresentationItemProgressComponent, _hillbillyChainsawOverheatComponent, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHillbillyOverheatPresentationItemProgressComponent, 0x00C0);
		}

		// class UIridescentBrickAddon : public UOnEventBaseAddon
		TEST_METHOD(Class__TheHillbilly__IridescentBrickAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UIridescentBrickAddon, UnknownData_2NHJ, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::UIridescentBrickAddon, _undetectableStatusEffect, 0x0250);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UIridescentBrickAddon, 0x0258);
		}

		// class ULightbornAuraRevealEffect : public UBaseLingeringStatusEffect
		TEST_METHOD(Class__TheHillbilly__LightbornAuraRevealEffect)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightbornAuraRevealEffect, 0x02B0);
		}

		// class ULightbornBlindFailedIndicatorCondition : public UEventDrivenModifierCondition
		TEST_METHOD(Class__TheHillbilly__LightbornBlindFailedIndicatorCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightbornBlindFailedIndicatorCondition, _conditionReevaluationTimerDurationAfterFailedBlind, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightbornBlindFailedIndicatorCondition, _replicatedIsTrue, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULightbornBlindFailedIndicatorCondition, UnknownData_0C8P, 0x00ED);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULightbornBlindFailedIndicatorCondition, 0x0148);
		}

		// class ULoProChainsAddon : public UItemAddon
		TEST_METHOD(Class__TheHillbilly__LoProChainsAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoProChainsAddon, _breakPalletMontage, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoProChainsAddon, _halfDamageDurationAfterBreakable, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoProChainsAddon, _doesAddonIncludeBreakableWalls, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULoProChainsAddon, UnknownData_DI3R, 0x023D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULoProChainsAddon, 0x0270);
		}

		// class ULevelGenerator_C : public UProceduralLevelBuilder
		TEST_METHOD(BlueprintGeneratedClass__LevelGenerator__LevelGenerator_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelGenerator_C, UberGraphFrame, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelGenerator_C, DefaultSceneRoot, 0x0E58);
			CHEAT_GEAR_CHECK_OFFSET(CG::ULevelGenerator_C, initialMistDensity, 0x0E60);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULevelGenerator_C, 0x0E64);
		}

		// class UFrenzyAttack : public UPounceAttack
		TEST_METHOD(Class__TheLegion__FrenzyAttack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttack, UnknownData_GZWR, 0x02E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrenzyAttack, 0x02F0);
		}

		// class UFrenzyAttackHittingSubstate : public UPounceAttackHittingSubstate
		TEST_METHOD(Class__TheLegion__FrenzyAttackHittingSubstate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrenzyAttackHittingSubstate, 0x0120);
		}

		// class UFrenzyAttackSuccessSubstate : public UPounceAttackSuccessSubstate
		TEST_METHOD(Class__TheLegion__FrenzyAttackSuccessSubstate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttackSuccessSubstate, _healthyTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttackSuccessSubstate, _injuredTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttackSuccessSubstate, _bleedoutTime, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttackSuccessSubstate, _healthyCurve, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttackSuccessSubstate, _injuredCurve, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::UFrenzyAttackSuccessSubstate, _bleedoutCurve, 0x01C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFrenzyAttackSuccessSubstate, 0x01C8);
		}

		// class ULegionKillerAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__TheLegion__LegionKillerAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegionKillerAnalyticsComponent, UnknownData_K1FJ, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegionKillerAnalyticsComponent, 0x00F0);
		}

		// class ULegionSurvivorAnalyticsComponent : public UactorComponent
		TEST_METHOD(Class__TheLegion__LegionSurvivorAnalyticsComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::ULegionSurvivorAnalyticsComponent, UnknownData_9GAW, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::ULegionSurvivorAnalyticsComponent, 0x0110);
		}

		// class UMadGrit : public Uperk
		TEST_METHOD(Class__TheLegion__MadGrit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UMadGrit, _slashHittingSpeedCurve, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UMadGrit, 0x0350);
		}

		// class UAB_KS_Beeropener_ACC01_C : public UanimInstance
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_KS_Beeropener_ACC01__AB_KS_Beeropener_ACC01_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, UberGraphFrame, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, AnimGraphNode_Root, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, AnimGraphNode_AnimDynamics_2, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, AnimGraphNode_ComponentToLocalSpace_2, 0x0710);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, AnimGraphNode_BlendListByBool, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, AnimGraphNode_AnimDynamics, 0x07D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, AnimGraphNode_ComponentToLocalSpace, 0x0C30);
			CHEAT_GEAR_CHECK_OFFSET(CG::UAB_KS_Beeropener_ACC01_C, IsInMenu, 0x0C50);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_KS_Beeropener_ACC01_C, 0x0C51);
		}

		// class UFixedFrameRateCustomTimeStep : public UEngineCustomTimeStep
		TEST_METHOD(Class__TimeManagement__FixedFrameRateCustomTimeStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UFixedFrameRateCustomTimeStep, FixedFrameRate, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UFixedFrameRateCustomTimeStep, 0x0038);
		}

		// class UTimeManagementBlueprintLibrary : public UBlueprintFunctionLibrary
		TEST_METHOD(Class__TimeManagement__TimeManagementBlueprintLibrary)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeManagementBlueprintLibrary, 0x0030);
		}

		// class UTimeSynchronizationSource : public UObject
		TEST_METHOD(Class__TimeManagement__TimeSynchronizationSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, bUseForSynchronization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, UnknownData_YJ7I, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::UTimeSynchronizationSource, FrameOffset, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UTimeSynchronizationSource, 0x0038);
		}

		// class UHandlerComponentFactory : public UObject
		TEST_METHOD(Class__PacketHandler__HandlerComponentFactory)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UHandlerComponentFactory, 0x0030);
		}

		// class UPacketHandlerProfileConfig : public UObject
		TEST_METHOD(Class__PacketHandler__PacketHandlerProfileConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UPacketHandlerProfileConfig, Components, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UPacketHandlerProfileConfig, 0x0040);
		}

		// class UBP_DBDDesignTunables_C : public UDBDDesignTunables
		TEST_METHOD(BlueprintGeneratedClass__BP_DBDDesignTunables__BP_DBDDesignTunables_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_DBDDesignTunables_C, 0x0240);
		}

		// class UBP_Menu_Slasher02_C : public UBP_Menu_BaseSlasher_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_Slasher02__BP_Menu_Slasher02_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher02_C, UnknownData_8LK9, 0x066C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher02_C, UberGraphFrame, 0x0670);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_Slasher02_C, BP_Audio_KLR_02, 0x0678);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_Slasher02_C, 0x0680);
		}

		// class UBP_Menu_CamperFemale13_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale13__BP_Menu_CamperFemale13_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale13_C, 0x0649);
		}

		// class UBP_Menu_CamperFemale10_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperFemale10__BP_Menu_CamperFemale10_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperFemale10_C, 0x0649);
		}

		// class UBP_Menu_CamperMale04_C : public UBP_Menu_Base_Camper_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Menu_CamperMale04__BP_Menu_CamperMale04_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale04_C, UnknownData_1CPQ, 0x0649);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale04_C, UberGraphFrame, 0x0650);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale04_C, Cigarette_NewTrack_0_97E71C104E36EF0B3195F484D090F427, 0x0658);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale04_C, Cigarette__Direction_97E71C104E36EF0B3195F484D090F427, 0x065C);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale04_C, UnknownData_TRII, 0x065D);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Menu_CamperMale04_C, Cigarette, 0x0660);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Menu_CamperMale04_C, 0x0668);
		}

		// class UAB_Menu_Yui_C : public UAB_Menu_Camper_C
		TEST_METHOD(AnimBlueprintGeneratedClass__AB_Menu_Yui__AB_Menu_Yui_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UAB_Menu_Yui_C, 0x194C);
		}

		// class UBP_FM_Hair_ACC01_C : public UItemBlueprint
		TEST_METHOD(BlueprintGeneratedClass__BP_FM_Hair_ACC01__BP_FM_Hair_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_FM_Hair_ACC01_C, 0x02B8);
		}

		// class UBP_US_Scarf_ACC01_C : public UBP_US_Necklace_ACC02_C
		TEST_METHOD(BlueprintGeneratedClass__BP_US_Scarf_ACC01__BP_US_Scarf_ACC01_C)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_US_Scarf_ACC01_C, 0x02B8);
		}

		// class UBP_Audio_KLR_23_C : public UBP_Audio_KLR_Base_C
		TEST_METHOD(BlueprintGeneratedClass__BP_Audio_KLR_24__BP_Audio_KLR_23_C)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_23_C, UberGraphFrame, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::UBP_Audio_KLR_23_C, AudioStatusStartMenuEvent, 0x00F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::UBP_Audio_KLR_23_C, 0x0100);
		}

		// struct FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__ElementID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementID, IDValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementID, 0x0004);
		}

		// struct FPolygonGroupID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonGroupID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupID, 0x0004);
		}

		// struct FPolygonID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__PolygonID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonID, 0x0004);
		}

		// struct FVertexID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexID, 0x0004);
		}

		// struct FVertexInstanceID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__VertexInstanceID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceID, 0x0004);
		}

		// struct FEdgeID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__EdgeID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeID, 0x0004);
		}

		// struct FTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__MeshDescription__TriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTriangleID, 0x0004);
		}

		// struct FDestructibleDamageParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDamageParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DamageSpread, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bEnableImpactDamage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_LA2W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactDamage, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, DefaultImpactDamageDepth, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, bCustomImpactResistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, UnknownData_7RGC, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDamageParameters, ImpactResistance, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDamageParameters, 0x001C);
		}

		// struct FDestructibleDebrisParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDebrisParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisLifetimeMax, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, DebrisMaxSeparationMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDebrisParameters, ValidBounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDebrisParameters, 0x002C);
		}

		// struct FDestructibleSpecialHierarchyDepths
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleSpecialHierarchyDepths)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, SupportDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, MinimumFractureDepth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, bEnableDebris, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, UnknownData_SH0M, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, DebrisDepth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleSpecialHierarchyDepths, EssentialDepth, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleSpecialHierarchyDepths, 0x0014);
		}

		// struct FDestructibleDepthParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleDepthParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleDepthParameters, ImpactDamageOverride, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleDepthParameters, 0x0001);
		}

		// struct FDestructibleParametersFlag
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParametersFlag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParametersFlag, UnknownData_QW2X, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParametersFlag, 0x0004);
		}

		// struct FDestructibleAdvancedParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleAdvancedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, DamageCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, ImpactVelocityThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, MaxChunkSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleAdvancedParameters, FractureImpulseScale, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleAdvancedParameters, 0x0010);
		}

		// struct FDestructibleParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DamageParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DebrisParameters, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, AdvancedParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, SpecialHierarchyDepths, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_CENO, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, DepthParameters, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, Flags, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleParameters, UnknownData_YA97, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleParameters, 0x0088);
		}

		// struct FFractureMaterial
		TEST_METHOD(ScriptStruct__ApexDestruction__FractureMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UVOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, Tangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, UAngle, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureMaterial, InteriorElementIndex, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureMaterial, 0x0024);
		}

		// struct FSubmixEffectReverbFastSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbFastSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, bBypass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, UnknownData_WP75, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Density, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Diffusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, Gain, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, GainHF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DecayHFRatio, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsGain, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, ReflectionsDelay, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateGain, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, LateDelay, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, AirAbsorptionGainHF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, WetLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbFastSettings, DryLevel, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbFastSettings, 0x0038);
		}

		// struct FDestructibleChunkParameters
		TEST_METHOD(ScriptStruct__ApexDestruction__DestructibleChunkParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bIsSupportChunk, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotFracture, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotDamage, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDestructibleChunkParameters, bDoNotCrumble, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDestructibleChunkParameters, 0x0004);
		}

		// struct FSubmixEffectDynamicProcessorFilterSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicProcessorFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, UnknownData_M4FD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, Cutoff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicProcessorFilterSettings, GainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicProcessorFilterSettings, 0x000C);
		}

		// struct FSubmixEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LinkMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_5SJT, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, InputGainDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ThresholdDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ratio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, LookAheadMsec, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, ExternalSubmix, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_57A7, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyGainDb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, OutputGainDb, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyHighshelf, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, KeyLowshelf, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDynamicsProcessorSettings, UnknownData_LG6N, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDynamicsProcessorSettings, 0x0050);
		}

		// struct FRankDefinition
		TEST_METHOD(ScriptStruct__DeadByDaylight__RankDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankDefinition, PipsRequired, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankDefinition, 0x0004);
		}

		// struct FSaveDataBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveDataBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataBase, UnknownData_65BC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataBase, versionNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataBase, UnknownData_I6QU, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveDataBase, 0x0010);
		}

		// struct FKeyTupleBool
		TEST_METHOD(ScriptStruct__DeadByDaylight__KeyTupleBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyTupleBool, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyTupleBool, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyTupleBool, UnknownData_E71V, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyTupleBool, 0x0010);
		}

		// struct FLegacySavedBloodwebNodeProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedBloodwebNodeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeProperties, ContentType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeProperties, rarity, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeProperties, UnknownData_LAGH, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeProperties, tags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedBloodwebNodeProperties, 0x0018);
		}

		// struct FLegacySavedBloodwebNodeGate
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedBloodwebNodeGate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeGate, description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeGate, rarity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeGate, role, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeGate, gateType, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeGate, UnknownData_8ETC, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNodeGate, param, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedBloodwebNodeGate, 0x0020);
		}

		// struct FSubmixEffectEQBand
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectEQBand, UnknownData_JH1M, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectEQBand, 0x0010);
		}

		// struct FLegacySavedBloodwebChest
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedBloodwebChest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebChest, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebChest, eventId, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebChest, rarity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebChest, UnknownData_PSQ5, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebChest, GivenItemRarity, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedBloodwebChest, 0x0030);
		}

		// struct FSubmixEffectSubmixEQSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectSubmixEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectSubmixEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectSubmixEQSettings, 0x0010);
		}

		// struct FLegacySavedBloodwebNode
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedBloodwebNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, Properties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, Gates, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, state, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, UnknownData_XPF3, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, NodeID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, ContentId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, UnknownData_IZ0T, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodwebNode, BloodwebChest, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedBloodwebNode, 0x0080);
		}

		// struct FSubmixEffectReverbSettings
		TEST_METHOD(ScriptStruct__AudioMixer__SubmixEffectReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Density, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Diffusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, GainHF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DecayHFRatio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsGain, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, ReflectionsDelay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateGain, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, LateDelay, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, AirAbsorptionGainHF, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, WetLevel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectReverbSettings, DryLevel, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectReverbSettings, 0x0034);
		}

		// struct FLegacySavedBloodWebRingPersistentData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedBloodWebRingPersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebRingPersistentData, NodeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedBloodWebRingPersistentData, 0x0010);
		}

		// struct FLegacySavedBloodWebPersistentData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedBloodWebPersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebPersistentData, versionNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebPersistentData, level, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebPersistentData, RingData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebPersistentData, Paths, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebPersistentData, EntityCurrentNode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedBloodWebPersistentData, GenerationDate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedBloodWebPersistentData, 0x0040);
		}

		// struct FLegacySavedPlayerLoadoutData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedPlayerLoadoutData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, UnknownData_VVZM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, ItemAddOns, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, CamperPerks, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, CamperPerkLevels, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, CamperFavor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, Power, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, PowerAddOns, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, SlasherPerks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, SlasherPerkLevels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, SlasherFavor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedPlayerLoadoutData, UnknownData_991H, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedPlayerLoadoutData, 0x0098);
		}

		// struct FCharacterSavedInventoryDataV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterSavedInventoryDataV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedInventoryDataV7, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedInventoryDataV7, Num, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedInventoryDataV7, I, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSavedInventoryDataV7, 0x0020);
		}

		// struct FAssignedPerkPropertiesV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__AssignedPerkPropertiesV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkPropertiesV7, perkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkPropertiesV7, perkLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkPropertiesV7, IsTeachable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkPropertiesV7, UnknownData_0URB, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssignedPerkPropertiesV7, 0x0014);
		}

		// struct FSavedCharacterLevelDataV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedCharacterLevelDataV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelDataV7, level, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelDataV7, HasPerksBeenSelected, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelDataV7, UnknownData_UYL7, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelDataV7, PerkSelection, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedCharacterLevelDataV7, 0x0018);
		}

		// struct FSavedStatsDataV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedStatsDataV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedStatsDataV7, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedStatsDataV7, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedStatsDataV7, 0x0010);
		}

		// struct FSavedCharmSlotData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedCharmSlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharmSlotData, slotIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharmSlotData, UnknownData_U2JG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharmSlotData, charmId, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedCharmSlotData, 0x0010);
		}

		// struct FCharacterSavedProfileDataV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterSavedProfileDataV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, BloodwebLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, prestigeLevel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, CharacterExperience, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, TimesConfronted, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, PrestigeDates, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, BloodWebData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, CharacterLoadoutData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, Inventory, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, CharacterProgression, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, StatProgression, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, CurrentCustomization, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, CurrentCharmCustomization, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileDataV7, UniquePerksAdded, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSavedProfileDataV7, 0x0158);
		}

		// struct FCharacterKeyTuple
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterKeyTuple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterKeyTuple, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterKeyTuple, UnknownData_PYFU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterKeyTuple, data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterKeyTuple, 0x0160);
		}

		// struct FLegacySavedDailyRitualInstance
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedDailyRitualInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, RitualKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, UnknownData_9N81, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, CharacterIDs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, Roles, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, progress, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, threshold, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, tolerance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, DisplayThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, ExpReward, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, active, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, Rewarded, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, StateChanged, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, UnknownData_YGD8, 0x0047);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, DateAssigned, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, NbGameElapsed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, UnknownData_VP2D, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, TrackedEvents, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualInstance, TrackedGameEvents, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedDailyRitualInstance, 0x0078);
		}

		// struct FSavedDailyRitualContainerV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedDailyRitualContainerV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedDailyRitualContainerV7, LastRitualReceivedDate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedDailyRitualContainerV7, LastRitualPopupDate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedDailyRitualContainerV7, LastRitualDismissedDate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedDailyRitualContainerV7, Rituals, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedDailyRitualContainerV7, 0x0040);
		}

		// struct FLegacySavedFearMarketItemInstance
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedFearMarketItemInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketItemInstance, itemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketItemInstance, Cost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketItemInstance, BloodpointConversion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketItemInstance, Purchased, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketItemInstance, UnknownData_G2TF, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedFearMarketItemInstance, 0x0018);
		}

		// struct FSavedFearMarketOfferingInstanceV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedFearMarketOfferingInstanceV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedFearMarketOfferingInstanceV7, ObjectsForSale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedFearMarketOfferingInstanceV7, startTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedFearMarketOfferingInstanceV7, EndTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedFearMarketOfferingInstanceV7, 0x0030);
		}

		// struct FConsoleUserSettings
		TEST_METHOD(ScriptStruct__DeadByDaylight__ConsoleUserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, ActionMappings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, AxisMappings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, MenuScaleFactor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, HudScaleFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, SkillCheckScaleFactor, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, MainVolume, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, MenuMusicVolume, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, UseHeadphones, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, HideTutorial, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, MuteOnFocusLost, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, UnknownData_HMPA, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, KillerMouseSensitivity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, SurvivorMouseSensitivity, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, KillerControllerSensitivity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, SurvivorControllerSensitivity, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, InvertY, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, UnknownData_N8X2, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, HighestWeightSeenNews, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, HasAcceptedCrossplayPopup, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, HasAcceptedCrossProgressionPopup, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, UnknownData_97O9, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, PartyPrivacyState, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, colorBlindMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConsoleUserSettings, ColorBlindModeIntensity, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConsoleUserSettings, 0x0070);
		}

		// struct FSavedSpecialEventDataV7
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedSpecialEventDataV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedSpecialEventDataV7, eventId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedSpecialEventDataV7, UnknownData_7RTG, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedSpecialEventDataV7, SeenCinematics, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedSpecialEventDataV7, 0x0020);
		}

		// struct FSaveDataV7 : public FSaveDataBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveDataV7)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, PlayerUID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, SelectedCamperIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, SelectedSlasherIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, Offerings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, FirstTimePlaying, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_ACHU, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, ConsecutiveMatchStreak, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, HasBeenGivenKillerTutorialEndReward, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, HasBeenGivenSurvivorTutorialEndReward, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_ZI0E, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, CurrentSeasonTicks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastConnectedCharacterIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_2LF0, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, DisconnectPenaltyTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastMatchEndTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastMatchStartTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastKillerMatchEndTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastSurvivorMatchEndTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, Experience, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, BonusExperience, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, FearTokens, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, FearTokensMigrated, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_F1VH, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, OngoingGameTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, CumulativeMatches, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_5T3S, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, PageVisited, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, ChatVisible, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, CumulativeMatchesAsSurvivor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, CumulativeMatchesAsKiller, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastMatchTimestamp, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastSessionTimestamp, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, CumulativeSessions, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_GND9, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, CumulativePlaytime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, characterData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, OwnedCharms, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, DailyRituals, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, FearMarket, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, LastLoadout, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, ConsoleUserSettings, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, PlayerStatProgression, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, OwnedContent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, SpecialEvent, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, BloodStoreKillers, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, BloodStoreSurvivors, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, OnBoardingCompleted, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, IsCrossplayAllowed, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, AutoDeclineFriendInvites, 0x0379);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV7, UnknownData_Z3XG, 0x037A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveDataV7, 0x0380);
		}

		// struct FSaveDataV8 : public FSaveDataBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveDataV8)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, PlayerUID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, SelectedCamperIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, SelectedSlasherIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, Offerings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, FirstTimePlaying, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, UnknownData_SR3N, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, ConsecutiveMatchStreak, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, HasBeenGivenKillerTutorialEndReward, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, HasBeenGivenSurvivorTutorialEndReward, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, UnknownData_07XQ, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, CurrentSeasonTicks, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastConnectedCharacterIndex, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, UnknownData_2RDK, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, DisconnectPenaltyTime, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastMatchEndTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastMatchStartTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastKillerMatchEndTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastSurvivorMatchEndTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, OngoingGameTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, CumulativeMatches, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, UnknownData_PSZD, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, PageVisited, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, ChatVisible, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, CumulativeMatchesAsSurvivor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, CumulativeMatchesAsKiller, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastMatchTimestamp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastSessionTimestamp, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, CumulativeSessions, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, UnknownData_NQ1P, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, CumulativePlaytime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, characterData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, OwnedCharms, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, DailyRituals, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, FearMarket, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, LastLoadout, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, ConsoleUserSettings, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, PlayerStatProgression, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, OwnedContent, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, SpecialEvent, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, BloodStoreKillers, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, BloodStoreSurvivors, 0x0318);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, OnBoardingCompleted, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, IsCrossplayAllowed, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, AutoDeclineFriendInvites, 0x0369);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveDataV8, UnknownData_AY83, 0x036A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveDataV8, 0x0370);
		}

		// struct FCharacterValidationData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterValidationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterValidationData, prestigeLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterValidationData, BloodwebLevel, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterValidationData, 0x0008);
		}

		// struct FSaveValidationData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveValidationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveValidationData, PlayerUID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveValidationData, characterData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveValidationData, 0x0060);
		}

		// struct FscoreValue : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__scoreValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, category, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, UnknownData_3XW4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, BloodpointValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, MaxBloodpointValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, BloodpointDepreciationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, ongoingWaitTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, UnknownData_EDQ3, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreValue, DisplayName, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FscoreValue, 0x0048);
		}

		// struct FScoreCategoryData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__ScoreCategoryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryData, category, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryData, UnknownData_WHDV, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryData, ScoreCap, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryData, ProgressionCap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryData, AchievementCap, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScoreCategoryData, 0x0018);
		}

		// struct FawardedScore
		TEST_METHOD(ScriptStruct__DeadByDaylight__awardedScore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FawardedScore, ScoreTypeId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FawardedScore, BloodpointsAwarded, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FawardedScore, 0x0010);
		}

		// struct FAwardedScores
		TEST_METHOD(ScriptStruct__DeadByDaylight__AwardedScores)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAwardedScores, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAwardedScores, 0x0010);
		}

		// struct FPlayerstateDataCache
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerstateDataCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerstateDataCache, awardedScoresByType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerstateDataCache, IsDataCacheValid, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerstateDataCache, UnknownData_IY1K, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerstateDataCache, 0x0058);
		}

		// struct FUserGameStats
		TEST_METHOD(ScriptStruct__DeadByDaylight__UserGameStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, Disconnected, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, UnknownData_PQAP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, FearTokens, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, Skulls, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, UnknownData_OLLD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, BonusBloodpoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserGameStats, _bloodpoints, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserGameStats, 0x00B0);
		}

		// struct FOngoingScoreData
		TEST_METHOD(ScriptStruct__DeadByDaylight__OngoingScoreData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, ScoreType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, UnknownData_BA59, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, ScoreTypeTag, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, TimeSinceScore, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, ApplyScoreTimeout, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, AccumulatedPercent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, UnknownData_DVUG, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, target, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOngoingScoreData, customObjectParameter, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOngoingScoreData, 0x0030);
		}

		// struct FPlayerFloatTuple
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerFloatTuple)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerFloatTuple, player, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerFloatTuple, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerFloatTuple, UnknownData_VAL3, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerFloatTuple, 0x0010);
		}

		// struct FSurfaceTypeName : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__SurfaceTypeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurfaceTypeName, name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurfaceTypeName, UnknownData_A44W, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurfaceTypeName, 0x0018);
		}

		// struct FToastButton
		TEST_METHOD(ScriptStruct__DeadByDaylight__ToastButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastButton, buttonText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastButton, IsRegression, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToastButton, UnknownData_PYOS, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToastButton, 0x0020);
		}

		// struct FToast : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__Toast)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, DisplayDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, lifeTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, ToastText, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, ButtonsData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, DelayBeforeInteraction, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, UnknownData_0ZWR, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToast, ToastIcon, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToast, 0x00B0);
		}

		// struct FUniquelyIdentifiedAnalytic : public FBaseSingleStructIndexAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__UniquelyIdentifiedAnalytic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniquelyIdentifiedAnalytic, version, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniquelyIdentifiedAnalytic, mirrorsId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniquelyIdentifiedAnalytic, ClientId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniquelyIdentifiedAnalytic, Platform, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniquelyIdentifiedAnalytic, BackendEnv, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniquelyIdentifiedAnalytic, 0x0068);
		}

		// struct FDedicatedServerStatusAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__DedicatedServerStatusAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, DSSessionProvider, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, ServerStatus, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, GameLiftSessionId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, MatchId, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, SessionEndReason, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, FleetId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, IpAddress, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, Port, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, UnknownData_QMWN, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDedicatedServerStatusAnalytics, DnsName, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDedicatedServerStatusAnalytics, 0x00F0);
		}

		// struct FDetailedScoreEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__DetailedScoreEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, MatchId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, ScorerMirrorsId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, ScorerIsABot, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, UnknownData_UHQQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, TargetMirrorsId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, TargetIsABot, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, UnknownData_9V1F, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, ScoreTypeId, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, ScoreExperience, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, ElapsedMatchTime, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, InstigatorLocation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreEventData, TargetLocation, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetailedScoreEventData, 0x0068);
		}

		// struct FGeneratorQueryHandlePair
		TEST_METHOD(ScriptStruct__DeadByDaylight__GeneratorQueryHandlePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratorQueryHandlePair, generator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratorQueryHandlePair, UnknownData_1H47, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratorQueryHandlePair, 0x0028);
		}

		// struct FdownloadProgression
		TEST_METHOD(ScriptStruct__DeadByDaylight__downloadProgression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, DownloadSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, TotalDownloadedSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, DownloadSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, InstallProgress, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, IsDownloading, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, UnknownData_72LF, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FdownloadProgression, DownloadStatus, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FdownloadProgression, 0x0030);
		}

		// struct FEACAnalyticsController
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACAnalyticsController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEACAnalyticsController, UnknownData_2ODM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACAnalyticsController, 0x0001);
		}

		// struct FEACAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEACAnalytics, LogMessage, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACAnalytics, 0x0078);
		}

		// struct FEACClientViolationAnalytics : public FEACAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACClientViolationAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEACClientViolationAnalytics, ViolationCase, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACClientViolationAnalytics, 0x0088);
		}

		// struct FEACClientInitAnalytics : public FEACAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACClientInitAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEACClientInitAnalytics, ValidationErrorType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEACClientInitAnalytics, UnknownData_QCOA, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACClientInitAnalytics, 0x0080);
		}

		// struct FEACServerValidateAnalytics : public FEACClientInitAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACServerValidateAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACServerValidateAnalytics, 0x0080);
		}

		// struct FEACClientAuthChallengeAnalytics : public FEACClientInitAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACClientAuthChallengeAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACClientAuthChallengeAnalytics, 0x0080);
		}

		// struct FEACClientAuthInitAnalytics : public FEACClientInitAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACClientAuthInitAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACClientAuthInitAnalytics, 0x0080);
		}

		// struct FEffectsLocatorTargets
		TEST_METHOD(ScriptStruct__DeadByDaylight__EffectsLocatorTargets)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectsLocatorTargets, TargetActorClass, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEffectsLocatorTargets, 0x0008);
		}

		// struct FEmblemProgressionData
		TEST_METHOD(ScriptStruct__DeadByDaylight__EmblemProgressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionData, ProgressionText, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionData, ProgressionPercent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionData, UnknownData_0RG8, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmblemProgressionData, 0x0018);
		}

		// struct FEmblemSlotData
		TEST_METHOD(ScriptStruct__DeadByDaylight__EmblemSlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, Quality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, UnknownData_8FEJ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, Score, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, UnknownData_N9YZ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, IconPaths, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, ThresholdPoints, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, CurrentPoints, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, UnknownData_NKU5, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemSlotData, ProgressionData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmblemSlotData, 0x0068);
		}

		// struct FEnvironmentAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__EnvironmentAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, Environment, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, endpoint, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, Language, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, SelectedCountry, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, Timezone, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, DeviceProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, GpuAdapter, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, GpuProviderName, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, GpuDriverVersion, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, Cpu, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, QualitySetting, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, IsFullScreen, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, IsAutomaticResolution, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, UnknownData_7MHI, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, ScreenResolutionSetting, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, EngineResolutionX, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, EngineResolutionY, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, UnknownData_QFOP, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, provider, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, Device, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, OperatingSystem, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, KrakenVersion, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, ContentVersion, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, IsUsingKeyboard, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, UnknownData_TW2R, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvironmentAnalytics, ControllerType, 0x0178);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvironmentAnalytics, 0x0188);
		}

		// struct FErrorAnalyticsController
		TEST_METHOD(ScriptStruct__DeadByDaylight__ErrorAnalyticsController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FErrorAnalyticsController, UnknownData_1I8M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FErrorAnalyticsController, 0x0001);
		}

		// struct FErrorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__ErrorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FErrorAnalytics, ErrorCategory, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FErrorAnalytics, LogMessage, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FErrorAnalytics, 0x0088);
		}

		// struct FElementSubstitutions
		TEST_METHOD(ScriptStruct__DeadByDaylight__ElementSubstitutions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FElementSubstitutions, UnknownData_35G5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FElementSubstitutions, 0x0010);
		}

		// struct FSubstitutionElements
		TEST_METHOD(ScriptStruct__DeadByDaylight__SubstitutionElements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstitutionElements, _elementToReplace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubstitutionElements, _elementToReplaceWith, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubstitutionElements, 0x0060);
		}

		// struct FGameplayElementSubstitutions : public FElementSubstitutions
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameplayElementSubstitutions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementSubstitutions, _replacements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementSubstitutions, _type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementSubstitutions, UnknownData_K498, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayElementSubstitutions, 0x0028);
		}

		// struct FDependencyElementSubstitutions : public FElementSubstitutions
		TEST_METHOD(ScriptStruct__DeadByDaylight__DependencyElementSubstitutions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementSubstitutions, _replacements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementSubstitutions, _type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementSubstitutions, UnknownData_ULOG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDependencyElementSubstitutions, 0x0028);
		}

		// struct FDependencyElementAddition
		TEST_METHOD(ScriptStruct__DeadByDaylight__DependencyElementAddition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementAddition, _object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementAddition, _type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementAddition, UnknownData_ZA8X, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyElementAddition, _numberToAdd, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDependencyElementAddition, 0x0038);
		}

		// struct FGameplayElementAddition
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameplayElementAddition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementAddition, _elementToAdd, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementAddition, _spawnerType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementAddition, UnknownData_33NP, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementAddition, _numberToAdd, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementAddition, _numberToAddAffectedByOffering, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementAddition, UnknownData_QMOZ, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayElementAddition, 0x0040);
		}

		// struct FEventSubstitionData
		TEST_METHOD(ScriptStruct__DeadByDaylight__EventSubstitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _allowSubstitutionInKYF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, UnknownData_AFRX, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _baseNumOfSubstitutionPerGroup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, UnknownData_BIN2, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _gameplaySubstitutionElements, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _dependencySubstitutionElements, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _dependencyElementAdditions, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventSubstitionData, _gameplayElementAdditions, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventSubstitionData, 0x0058);
		}

		// struct FPathPosition
		TEST_METHOD(ScriptStruct__DeadByDaylight__PathPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPosition, UnknownData_WCVE, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathPosition, 0x0018);
		}

		// struct FFilterLoadoutData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__FilterLoadoutData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, UnknownData_YJJW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, icon, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, title, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, role, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, LoadoutType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterLoadoutData, UnknownData_BYBD, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterLoadoutData, 0x0078);
		}

		// struct FFootStep
		TEST_METHOD(ScriptStruct__DeadByDaylight__FootStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootStep, Decal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootStep, UnknownData_VYK9, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFootStep, 0x0028);
		}

		// struct FFreeTrialLoginAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__FreeTrialLoginAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreeTrialLoginAnalytics, 0x0068);
		}

		// struct FGameEventDispatcherHandleBP
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameEventDispatcherHandleBP)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventDispatcherHandleBP, filter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventDispatcherHandleBP, GameEventDelegate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventDispatcherHandleBP, UnknownData_10BB, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventDispatcherHandleBP, 0x0020);
		}

		// struct FGameNotificationData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameNotificationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNotificationData, PromptType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNotificationData, priority, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNotificationData, UnknownData_Y5K4, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNotificationData, content, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNotificationData, 0x0028);
		}

		// struct FNotificationHistoryElement
		TEST_METHOD(ScriptStruct__DeadByDaylight__NotificationHistoryElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotificationHistoryElement, UnknownData_Z909, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNotificationHistoryElement, 0x0018);
		}

		// struct FGameplayNotificationData
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameplayNotificationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, SourceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, SourceType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, UnknownData_A1XU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, SourceIconIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, SourceLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, EffectID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, UnknownData_XGKZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, EffectIconFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, effectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, UnknownData_YIO7, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayNotificationData, EffectDisplayName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayNotificationData, 0x0058);
		}

		// struct FGarantiedRarityRingDistributionValues : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__GarantiedRarityRingDistributionValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingCommonItemProbability, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingCommonItemProbability, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingCommonItemProbability, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingUncommonItemProbability, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingUncommonItemProbability, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingUncommonItemProbability, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingRareItemProbability, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingRareItemProbability, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingRareItemProbability, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingVeryRareItemProbability, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingVeryRareItemProbability, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingVeryRareItemProbability, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingUltraRareItemProbability, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingUltraRareItemProbability, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingUltraRareItemProbability, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingArtifactItemProbability, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingArtifactItemProbability, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingArtifactItemProbability, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingSpectralItemProbability, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingSpectralItemProbability, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingSpectralItemProbability, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingSpecialEventItemProbability, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingSpecialEventItemProbability, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingSpecialEventItemProbability, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, InnerRingLegendaryItemProbability, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, MiddleRingLegendaryItemProbability, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, OuterRingLegendaryItemProbability, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGarantiedRarityRingDistributionValues, UnknownData_PNI4, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGarantiedRarityRingDistributionValues, 0x0078);
		}

		// struct FDamageData
		TEST_METHOD(ScriptStruct__DeadByDaylight__DamageData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageData, _isRegressing, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageData, _isIntense, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageData, UnknownData_XM15, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageData, _lastDamageChangeSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageData, UnknownData_90QH, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageData, 0x0020);
		}

		// struct FHelpCategoryData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__HelpCategoryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpCategoryData, type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpCategoryData, UnknownData_1IYI, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpCategoryData, title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpCategoryData, description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpCategoryData, TopicIds, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHelpCategoryData, 0x0050);
		}

		// struct FHelpContextMappingData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__HelpContextMappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpContextMappingData, ContextName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpContextMappingData, TopicIds, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHelpContextMappingData, 0x0028);
		}

		// struct FHelpTopicData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__HelpTopicData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTopicData, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTopicData, description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTopicData, ImagePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTopicData, iconPath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHelpTopicData, videoID, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHelpTopicData, 0x0068);
		}

		// struct FHintData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__HintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, category, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, UnknownData_BCB1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, iconPath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, levelMin, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, levelMax, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, relevantCharacterID, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHintData, UnknownData_GCF2, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHintData, 0x0060);
		}

		// struct FDetailedHitAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__DetailedHitAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorMirrorsId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, TargetMirrorsId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, Ping, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, HitTimestamp, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, IsValidHit, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, IsValidDistance, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, IsValidCollision, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, UnknownData_TREG, 0x00A3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, RecorderCacheTimespan, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, MaximumDistance, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, CapsuleInflation, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, HitPrimitiveName, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorCoordinateX, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorCoordinateY, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorCoordinateZ, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorRotationX, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorRotationY, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, InstigatorRotationZ, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, TargetLocationInstigatorTimestamp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, TargetCoordinateX, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, TargetCoordinateY, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, TargetCoordinateZ, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, distance, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedHitAnalytics, UnknownData_4F7Z, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetailedHitAnalytics, 0x0100);
		}

		// struct FHookAnalyticsController
		TEST_METHOD(ScriptStruct__DeadByDaylight__HookAnalyticsController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalyticsController, UnknownData_OW4A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHookAnalyticsController, 0x0150);
		}

		// struct FHookAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__HookAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, HookStartTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, UnknownData_CGIY, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, MirrorsIdSurvivor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, SurvivorIsABot, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, UnknownData_Q5ZO, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, MirrorsIdKiller, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, KillerIsABot, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, UnknownData_1PBZ, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, MirrorsIdRescuer, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, RescuerIsABot, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, UnknownData_79AZ, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, TimesOnHook, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, Outcome, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, HookDuration, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, EscapeAttemptStart, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, EscapeAttemptFull, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, SurvivorsRemaining, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, NumberOfActiveSurvivorsStart, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, NumberOfActiveSurvivorsEnd, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, NumberOfActiveSurvivorsTotal, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, DurationCampFace, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, DurationCampHard, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, DurationCampSoft, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, NumberOfRescuers, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, TimeForFirstRescuer, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, MatchId, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, ReverseBearTrapOn, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHookAnalytics, UnknownData_EL01, 0x0109);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHookAnalytics, 0x0110);
		}

		// struct FPlayerInfoCache
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerInfoCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerInfoCache, UnknownData_3DXB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerInfoCache, 0x0038);
		}

		// struct FInteractionProficiencyProperties : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__InteractionProficiencyProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, ProficiencyID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, UnknownData_Y9MB, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, ProficiencyBlueprint, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, BuffLevelThresholds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, DebuffLevelThresholds, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, HasLevels, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, UnknownData_2UBH, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyProperties, IconFilePath, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionProficiencyProperties, 0x0080);
		}

		// struct FInteractionProficiencyData
		TEST_METHOD(ScriptStruct__DeadByDaylight__InteractionProficiencyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyData, isActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyData, UnknownData_FR07, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyData, level, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyData, ProficiencyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyData, UnknownData_62B1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProficiencyData, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionProficiencyData, 0x0010);
		}

		// struct FInteractionRequest
		TEST_METHOD(ScriptStruct__DeadByDaylight__InteractionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionRequest, _interaction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionRequest, UnknownData_XUUK, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionRequest, _requester, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionRequest, 0x0018);
		}

		// struct FInvalidLoadoutAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__InvalidLoadoutAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, SlasherPerkCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, PowerAddonCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, CamperPerkCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, ItemAddonCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, CallingFunctionName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, CharacterId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInvalidLoadoutAnalytics, UnknownData_NNEI, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInvalidLoadoutAnalytics, 0x0090);
		}

		// struct FCustomTransformation
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomTransformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomTransformation, UseCustomTransformation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomTransformation, UnknownData_GJM2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomTransformation, CustomScale, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomTransformation, CustomTranslation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomTransformation, 0x0014);
		}

		// struct FItemUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ItemUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, IconFilePathList, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, IconAssetList, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, CustomTransformation, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, PlatformsForIconUnlicensedFilePathListOverride, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemUIData, IconUnlicensedFilePathListOverride, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemUIData, 0x0078);
		}

		// struct FBaseItemData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BaseItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseItemData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseItemData, type, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseItemData, UnknownData_EZVG, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseItemData, UIData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseItemData, GenericDisplayName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseItemData, ItemBlueprint, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseItemData, 0x00D8);
		}

		// struct FitemAvailability
		TEST_METHOD(ScriptStruct__DeadByDaylight__itemAvailability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemAvailability, itemAvailability, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemAvailability, UnknownData_65AS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemAvailability, dlcId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemAvailability, CloudInventoryId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemAvailability, UnknownData_OROY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemAvailability, CommunityId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FitemAvailability, 0x0030);
		}

		// struct FItemData : public FBaseItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, ItemMesh, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, HandPosition, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, role, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, rarity, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, Inventory, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, Chest, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, RequiredKillerAbility, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_YFGZ, 0x010E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, Availability, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, IsInNonViolentBuild, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, IsAvailableInAtlantaBuild, 0x0141);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, AntiDLC, 0x0142);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, Bloodweb, 0x0143);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, eventId, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, itemType, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_G8VP, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemData, UnknownData_MKQN, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemData, 0x0158);
		}

		// struct FParentItemIDs
		TEST_METHOD(ScriptStruct__DeadByDaylight__ParentItemIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParentItemIDs, MatchAnyItemID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParentItemIDs, UnknownData_7B1Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParentItemIDs, itemIds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParentItemIDs, 0x0018);
		}

		// struct FItemAddonProperties : public FItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ItemAddonProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAddonProperties, ItemAddonBlueprint, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAddonProperties, ParentItem, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemAddonProperties, PreLevelGenerationModifierID, 0x01A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemAddonProperties, 0x01B0);
		}

		// struct FTurn180Settings
		TEST_METHOD(ScriptStruct__DeadByDaylight__Turn180Settings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTurn180Settings, _settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTurn180Settings, 0x0001);
		}

		// struct FKillerSoundCueTracker
		TEST_METHOD(ScriptStruct__DeadByDaylight__KillerSoundCueTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerSoundCueTracker, UnknownData_6B4F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillerSoundCueTracker, 0x001C);
		}

		// struct FLevelLoadingTimeoutAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__LevelLoadingTimeoutAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelLoadingTimeoutAnalytics, TimeElapsed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelLoadingTimeoutAnalytics, UnknownData_1MQ1, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelLoadingTimeoutAnalytics, 0x0070);
		}

		// struct FLevelLoadingStepAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__LevelLoadingStepAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelLoadingStepAnalytics, LoadingStep, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelLoadingStepAnalytics, 0x0078);
		}

		// struct FParadiseData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ParadiseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParadiseData, UnknownData_9N78, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParadiseData, 0x0040);
		}

		// struct FLevelReadyToPlayRequirements
		TEST_METHOD(ScriptStruct__DeadByDaylight__LevelReadyToPlayRequirements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelReadyToPlayRequirements, player, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelReadyToPlayRequirements, perkCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelReadyToPlayRequirements, ItemCount, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelReadyToPlayRequirements, addonCount, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelReadyToPlayRequirements, UnknownData_GA47, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelReadyToPlayRequirements, 0x0010);
		}

		// struct FLightingSpecifics
		TEST_METHOD(ScriptStruct__DeadByDaylight__LightingSpecifics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightingSpecifics, LightBlueprint, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightingSpecifics, 0x0030);
		}

		// struct FSceneLightingDescription
		TEST_METHOD(ScriptStruct__DeadByDaylight__SceneLightingDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneLightingDescription, themeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneLightingDescription, UnknownData_MBDK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneLightingDescription, LightingDetailsLowMedium, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneLightingDescription, LightingDetailsHighUltra, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneLightingDescription, LightingAtlanta, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneLightingDescription, TextureCube, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneLightingDescription, 0x00D0);
		}

		// struct FDirectionalHeightFogInterpolationValues
		TEST_METHOD(ScriptStruct__DeadByDaylight__DirectionalHeightFogInterpolationValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, FogInscatteringColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, DirectionalInscatteringExponent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, DirectionalInscatteringStartDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, DirectionalInscatteringColor, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, FogHeightFalloff, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, FogMaxOpacity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, StartDistance, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, FogGradient, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, DistanceUntilFlatFog, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectionalHeightFogInterpolationValues, DistanceUntilNoFog, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectionalHeightFogInterpolationValues, 0x0050);
		}

		// struct FLoadingTimeoutAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__LoadingTimeoutAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, match_id, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, lobby_id, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, timeout_timestamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, total_load_time, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, UnknownData_FITY, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, current_map_name, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingTimeoutAnalytics, transition_id, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadingTimeoutAnalytics, 0x00C0);
		}

		// struct FLoadingStepAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__LoadingStepAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, match_id, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, lobby_id, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, step_change_timestamp, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, loading_step, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, time_on_prev_step, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, total_load_time, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, current_map_name, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadingStepAnalytics, transition_id, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadingStepAnalytics, 0x00D0);
		}

		// struct FLoadoutSlotUnlockLevelValue : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__LoadoutSlotUnlockLevelValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutSlotUnlockLevelValue, loadoutSlot, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutSlotUnlockLevelValue, UnknownData_8K5S, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutSlotUnlockLevelValue, BloodwebLevel, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadoutSlotUnlockLevelValue, 0x0010);
		}

		// struct FLobbyPlayerData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LobbyPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPlayerData, UnknownData_WRR0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyPlayerData, 0x0058);
		}

		// struct Flock
		TEST_METHOD(ScriptStruct__DeadByDaylight__lock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Flock, _lockingObject, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Flock, 0x0008);
		}

		// struct FKillerClosetActorsTypes : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__KillerClosetActorsTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerClosetActorsTypes, ClosetActorClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillerClosetActorsTypes, 0x0038);
		}

		// struct FGameEventLogAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameEventLogAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventLogAnalytics, EventName, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventLogAnalytics, 0x0078);
		}

		// struct FLogAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__LogAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLogAnalytics, message, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLogAnalytics, 0x0078);
		}

		// struct FLoudNoiseIndicatorData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LoudNoiseIndicatorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoudNoiseIndicatorData, MeshMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoudNoiseIndicatorData, DistortionMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoudNoiseIndicatorData, location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoudNoiseIndicatorData, RemainingTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoudNoiseIndicatorData, 0x0020);
		}

		// struct FMainMenuButtonData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__MainMenuButtonData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, ButtonType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, UnknownData_8TAP, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, Label, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, InfoTitle, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, InfoDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, LockedInfoTitle, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, LockedInfoDescription, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, IsDisabled, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, IsLocked, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, IsHidden, 0x008A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMainMenuButtonData, UnknownData_DF6T, 0x008B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMainMenuButtonData, 0x0090);
		}

		// struct FTileProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__TileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTileProperties, UnknownData_9V5U, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTileProperties, 0x0078);
		}

		// struct FMatchmakingContextData
		TEST_METHOD(ScriptStruct__DeadByDaylight__MatchmakingContextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingContextData, ContextId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingContextData, 0x0004);
		}

		// struct FMatchRatingAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__MatchRatingAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchRatingAnalytics, Rating, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchRatingAnalytics, UnknownData_90MM, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchRatingAnalytics, MatchId, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchRatingAnalytics, 0x0080);
		}

		// struct FMemoryUsageAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__MemoryUsageAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, GameFlowStep, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, TotalPhysical, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, TotalVirtual, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, PeakUsedPhysical, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, PeakUsedVirtual, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, AvailablePhysical, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemoryUsageAnalytics, AvailableVirtual, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemoryUsageAnalytics, 0x00A8);
		}

		// struct FMenuIndexChangeEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__MenuIndexChangeEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuIndexChangeEventData, index, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMenuIndexChangeEventData, 0x0004);
		}

		// struct FMenuRoleChangeEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__MenuRoleChangeEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuRoleChangeEventData, playerRole, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMenuRoleChangeEventData, 0x0001);
		}

		// struct FGameInfoEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameInfoEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInfoEventData, playerRole, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInfoEventData, GameType, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameInfoEventData, 0x0002);
		}

		// struct FMontageInstanceInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__MontageInstanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMontageInstanceInfo, UnknownData_PLC4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMontageInstanceInfo, 0x0030);
		}

		// struct FNamedButton
		TEST_METHOD(ScriptStruct__DeadByDaylight__NamedButton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedButton, ClickCounter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedButton, UnknownData_UIQL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedButton, DisplayName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedButton, 0x0018);
		}

		// struct FNodeContentDistributionValue : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__NodeContentDistributionValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Empty_Weight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Empty_MinCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Empty_MaxCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Perks_Weight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Perks_MinCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Perks_MaxCount, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, PerksPacks_Weight, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, PerksPacks_MinCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, PerksPacks_MaxCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Offerings_Weight, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Offerings_MinCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Offerings_MaxCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Items_Weight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Items_MinCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Items_MaxCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, AddOn_Weight, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, AddOn_MinCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, AddOn_MaxCount, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Chests_Weight, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Chests_MinCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, Chests_MaxCount, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeContentDistributionValue, UnknownData_DA5L, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeContentDistributionValue, 0x0060);
		}

		// struct FOfferingEffect
		TEST_METHOD(ScriptStruct__DeadByDaylight__OfferingEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingEffect, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingEffect, UnknownData_4YTI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingEffect, tags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingEffect, Value, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingEffect, modifier, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOfferingEffect, 0x0028);
		}

		// struct FOfferingProperties : public FItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__OfferingProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingProperties, OfferingType, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingProperties, CanUseAfterEventEnd, 0x0159);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingProperties, UnknownData_69CX, 0x015A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingProperties, tags, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingProperties, Effects, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingProperties, BigIconFilePath, 0x0180);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOfferingProperties, 0x0190);
		}

		// struct FOfferingTypeTexture
		TEST_METHOD(ScriptStruct__DeadByDaylight__OfferingTypeTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingTypeTexture, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingTypeTexture, UnknownData_LBDA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingTypeTexture, TextureBack, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOfferingTypeTexture, 0x0030);
		}

		// struct FRarityTexture
		TEST_METHOD(ScriptStruct__DeadByDaylight__RarityTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityTexture, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityTexture, rarity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityTexture, UnknownData_A8SX, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityTexture, texture, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRarityTexture, 0x0030);
		}

		// struct FOfferingRevealDelays
		TEST_METHOD(ScriptStruct__DeadByDaylight__OfferingRevealDelays)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingRevealDelays, RevealState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingRevealDelays, UnknownData_YLKR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingRevealDelays, delay, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOfferingRevealDelays, 0x0008);
		}

		// struct FOfferingTriggerPositionData
		TEST_METHOD(ScriptStruct__DeadByDaylight__OfferingTriggerPositionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingTriggerPositionData, index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingTriggerPositionData, posX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingTriggerPositionData, PosY, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOfferingTriggerPositionData, 0x000C);
		}

		// struct FDBDQueueTimeInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDQueueTimeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDQueueTimeInfo, UnknownData_T1O1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDQueueTimeInfo, 0x0018);
		}

		// struct FDBDConnectionStatus
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDConnectionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDConnectionStatus, UnknownData_WPML, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDConnectionStatus, _gameInstance, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDConnectionStatus, 0x0010);
		}

		// struct FDBDSearchParams
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDSearchParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDSearchParams, UnknownData_Y9OM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDSearchParams, 0x0080);
		}

		// struct FDBDJoinParams
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDJoinParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDJoinParams, GameType, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDJoinParams, 0x0001);
		}

		// struct FOutfitData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__OutfitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, UnknownData_O6JW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, UIData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, Availability, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, OutfitItems, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, CollectionName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, CollectionDescription, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, IsAvailableInAtlantaBuild, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitData, UnknownData_M6FG, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutfitData, 0x0108);
		}

		// struct FRoleDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__RoleDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleDropdown, ShowRoleSelection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleDropdown, role, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoleDropdown, 0x0002);
		}

		// struct FCharacterDropdown : public FRoleDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDropdown, UnknownData_TBNZ, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDropdown, CharacterId, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterDropdown, 0x0008);
		}

		// struct FOutfitDropdown : public FCharacterDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__OutfitDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitDropdown, outfitId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutfitDropdown, 0x0014);
		}

		// struct FSurvivorInfoData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SurvivorInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorInfoData, UnknownData_OYCV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivorInfoData, 0x0038);
		}

		// struct FPalletPushSettings
		TEST_METHOD(ScriptStruct__DeadByDaylight__PalletPushSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPalletPushSettings, IgnorePlayerExecutingPulldown, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPalletPushSettings, PalletPushSideStrategy, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPalletPushSettings, 0x0002);
		}

		// struct FPartyJoinFailureAnalyticsController
		TEST_METHOD(ScriptStruct__DeadByDaylight__PartyJoinFailureAnalyticsController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyJoinFailureAnalyticsController, UnknownData_P7SL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyJoinFailureAnalyticsController, 0x0001);
		}

		// struct FPartyJoinFailureAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__PartyJoinFailureAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyJoinFailureAnalytics, PartyMembersFriendshipStatus, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyJoinFailureAnalytics, NumKrakenConfirmedFriendsInParty, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyJoinFailureAnalytics, NumPlatformAcceptedFriendsInParty, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyJoinFailureAnalytics, 0x0080);
		}

		// struct FPartyMemberUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PartyMemberUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, _isLocalPlayer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, _isReady, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, UnknownData_MAX2, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, _mirrorId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, _playerName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, _playerId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberUIData, UnknownData_F6HK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyMemberUIData, 0x0030);
		}

		// struct FPerformanceAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerformanceAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageFPS, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MinFPS, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MaxFPS, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageFrameTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MinFrameTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MaxFrameTime, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, StandardDeviationFrameTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow60msFrameTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow47msFrameTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow34msFrameTime, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow17msFrameTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentHitchesFrameTime, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageRenderThreadTime, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MinRenderThreadTime, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MaxRenderThreadTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, StandardDeviationRenderThreadTime, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow60msRenderThreadTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow47msRenderThreadTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow34msRenderThreadTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow17msRenderThreadTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentHitchesRenderThreadTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGameThreadTime, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MinGameThreadTime, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MaxGameThreadTime, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, StandardDeviationGameThreadTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow60msGameThreadTime, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow47msGameThreadTime, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow34msGameThreadTime, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow17msGameThreadTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentHitchesGameThreadTime, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageRhiThreadTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MinRhiThreadTime, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MaxRhiThreadTime, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, StandardDeviationRhiThreadTime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow60msRhiThreadTime, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow47msRhiThreadTime, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow34msRhiThreadTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow17msRhiThreadTime, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentHitchesRhiThreadTime, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTime, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MinGpuTime, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MaxGpuTime, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, StandardDeviationGpuTime, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow60msGpuTime, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow47msGpuTime, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow34msGpuTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentBelow17msGpuTime, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, PercentHitchesGpuTime, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeBasePass, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimePrepass, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimePostProcess, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeTranslucency, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeShadowDepth, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeShadowProjection, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeSSAO, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeTAA, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageGpuTimeLights, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, UnknownData_9Q9W, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AllGpuMarkers, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AllGpuMarkersAverageTime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageSlateTickTime, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageSlateRenderThreadTime, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AverageSlateDrawWindowTime, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, TotalFrames, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, ResolutionQuality, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, ViewDistanceQuality, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, AntiAliasingQuality, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, ShadowQuality, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, TextureQuality, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, EffectsQuality, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, FoliageQuality, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, UnknownData_PROJ, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, scenario, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, theme, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, mapName, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, TileListCount, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, seed, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, CharacterName, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, Cpu, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, GpuAdapter, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceAnalytics, MatchId, 0x0208);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerformanceAnalytics, 0x0218);
		}

		// struct FPerformanceChartingAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerformanceChartingAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, scenario, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, theme, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, map_name, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, tile_spawn_count, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, seed, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, match_id, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, character_name, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, cpu_name, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, gpu_name, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, resolution, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, graphics_quality_level, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, UnknownData_WRNH, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, hitch_times, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, target_30_fps, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, target_60_fps, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, target_120_fps, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, measured_perf_time, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, mvp, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, avg_fps, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, hitches_per_minute, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, avg_hitch, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, frame_time_avg, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, frame_time_max, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, frame_time_min, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, game_thread_avg, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, game_thread_hitches_per_min, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, game_thread_bound_frames, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, render_thread_avg, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, render_thread_hitches_per_min, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, render_thread_bound_frames, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, rhi_thread_avg, 0x014C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, rhi_thread_hitches_per_min, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, rhi_thread_bound_frames, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, gpu_avg, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, gpu_hitches_per_min, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, gpu_bound_frames, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, draw_calls_avg, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, draw_calls_max, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, draw_calls_min, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, drawn_prims_avg, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, drawn_prims_max, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, drawn_prims_min, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, cpu_memory_peak, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, cpu_memory_used, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, streaming_memory_peak, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, streaming_memory_used, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, physical_memory_peak, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, physical_memory_used, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, UnknownData_LDCQ, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerformanceChartingAnalytics, texturegroups_guid, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerformanceChartingAnalytics, 0x01A8);
		}

		// struct FPerkLevelText
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerkLevelText)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkLevelText, tunables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkLevelText, TextOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerkLevelText, 0x0028);
		}

		// struct FPerkProperties : public FItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerkProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, tags, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, Effects, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, AssociatedPlayerIndex, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, MandatoryOnBloodweblevel, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, TeachableOnBloodweblevel, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, AtlantaTeachableLevel, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkCategory, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkBlueprint, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkLevelRarity, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkDefaultDescription, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkLevelTunables, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkLevel1Description, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkLevel2Description, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkLevel3Description, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, AtlantaActivatableInteractionIDs, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PlatformsForPerkUnlicensedDescriptionOverride, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, UnknownData_5GFU, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkProperties, PerkUnlicensedDescriptionOverride, 0x0260);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerkProperties, 0x0278);
		}

		// struct FPerkAcquisitionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerkAcquisitionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkAcquisitionAnalytics, CharacterName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkAcquisitionAnalytics, perkID, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkAcquisitionAnalytics, PerkSource, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkAcquisitionAnalytics, Duplicate, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkAcquisitionAnalytics, perkLevel, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkAcquisitionAnalytics, UnknownData_2MBI, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerkAcquisitionAnalytics, 0x00B0);
		}

		// struct FBasePerkAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__BasePerkAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasePerkAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasePerkAnalytics, ElapsedMatchTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasePerkAnalytics, UnknownData_G3WI, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasePerkAnalytics, 0x0080);
		}

		// struct FFranklinsHitNearDroppedItemAnalytics : public FBasePerkAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__FranklinsHitNearDroppedItemAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFranklinsHitNearDroppedItemAnalytics, HitSurvivorMirrorsId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFranklinsHitNearDroppedItemAnalytics, AttackingSlasherMirrorsId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFranklinsHitNearDroppedItemAnalytics, 0x00A0);
		}

		// struct FFranklinsDemiseConsumedItemAnalytics : public FBasePerkAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__FranklinsDemiseConsumedItemAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFranklinsDemiseConsumedItemAnalytics, PreviousOwnerSurvivorMirrorsId, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFranklinsDemiseConsumedItemAnalytics, 0x0090);
		}

		// struct FKnockoutSurvivorFoundAnalytics : public FBasePerkAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__KnockoutSurvivorFoundAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKnockoutSurvivorFoundAnalytics, RescuingSurvivorMirrorsId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKnockoutSurvivorFoundAnalytics, FoundSurvivorMirrorsId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKnockoutSurvivorFoundAnalytics, 0x00A0);
		}

		// struct FTinkererUndetectableInterruptAnalytics : public FBasePerkAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__TinkererUndetectableInterruptAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTinkererUndetectableInterruptAnalytics, InterruptedSurvivorMirrorsId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTinkererUndetectableInterruptAnalytics, InterruptingSlasherMirrorsId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTinkererUndetectableInterruptAnalytics, 0x00A0);
		}

		// struct FTinkererUndetectableHitNearGeneratorAnalytics : public FBasePerkAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__TinkererUndetectableHitNearGeneratorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTinkererUndetectableHitNearGeneratorAnalytics, HitSurvivorMirrorsId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTinkererUndetectableHitNearGeneratorAnalytics, AttackingSlasherMirrorsId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTinkererUndetectableHitNearGeneratorAnalytics, 0x00A0);
		}

		// struct FLightbornAuraRevealedAnalytics : public FBasePerkAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__LightbornAuraRevealedAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightbornAuraRevealedAnalytics, RevealedSurvivorMirrorsId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightbornAuraRevealedAnalytics, FlashlightedSlasherMirrorsId, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightbornAuraRevealedAnalytics, 0x00A0);
		}

		// struct FPlatformDlcData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlatformDlcData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, UnlockDescription, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, UISortOrder, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, UnknownData_MTLZ, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdSteam, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdDmm, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdPS4, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdXB1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdXSX, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdSwitch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdGRDK, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdPS5, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformDlcData, DlcIdStadia, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformDlcData, 0x00D8);
		}

		// struct FPlayerLevelData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLevelData, LevelValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLevelData, PrestigeValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLevelData, MaxXp, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerLevelData, 0x000C);
		}

		// struct FPlayerReadyStatusData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerReadyStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReadyStatusData, playerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReadyStatusData, isReady, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReadyStatusData, isSlasher, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReadyStatusData, IsLocalPlayer, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReadyStatusData, UnknownData_MUW9, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReadyStatusData, 0x0008);
		}

		// struct FPlayerRankData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerRankData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRankData, mirrorsId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRankData, playerRole, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRankData, UnknownData_UFU1, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRankData, PlayerRankForRole, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerRankData, 0x0018);
		}

		// struct FPlayerRoundStartEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerRoundStartEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, playerRole, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, IsABot, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, BotDifficultyLevel, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, UnknownData_0NSM, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, CharacterId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, PlayerRankForRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, prestigeLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, BloodwebLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, Pips, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerRoundStartEventData, PlayerRankDataArray, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerRoundStartEventData, 0x0028);
		}

		// struct FPreLevelGenerationModifierProperties : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__PreLevelGenerationModifierProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreLevelGenerationModifierProperties, ModifierID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreLevelGenerationModifierProperties, ModifierType, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreLevelGenerationModifierProperties, KillerAbiliy, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreLevelGenerationModifierProperties, UnknownData_TCWA, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreLevelGenerationModifierProperties, modifierValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreLevelGenerationModifierProperties, UnknownData_49AB, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreLevelGenerationModifierProperties, 0x0020);
		}

		// struct FPrestigeIconData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__PrestigeIconData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeIconData, playerRole, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeIconData, UnknownData_OYQ3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeIconData, prestigeLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrestigeIconData, icon, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrestigeIconData, 0x0040);
		}

		// struct FProceduralMap : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__ProceduralMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, mapId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, UnknownData_8K99, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, themeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, description, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, HookMinDistance, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, HookMinCount, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, HookMaxCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, BookShelvesMinDistance, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, BookShelvesMinCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, BookShelvesMaxCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, LivingWorldObjectsMinCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, LivingWorldObjectsMaxCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, ThumbnailPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, SortingIndex, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, UnknownData_KR9U, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, DlcIDString, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, FixedLayoutSeed, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, IsInNonViolentBuild, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralMap, UnknownData_4S74, 0x00B9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralMap, 0x00C0);
		}

		// struct FArrayOfSceneComponent
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArrayOfSceneComponent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArrayOfSceneComponent, SceneComp, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArrayOfSceneComponent, 0x0010);
		}

		// struct FManagedGameplayElementData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ManagedGameplayElementData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, UnknownData_5UBT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, ActivatedSpawners, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, RemovedSpawners, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, PopulationType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, UnknownData_2Y03, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, CurrentPopulationCost, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, MaxPopulationCost, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, MinPopulationCost, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, MapWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, MinProximityBetweenElements, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, MinDistSqrBetweenElements, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, TileWidth, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, FactorToAdjustToWhenOutOfProximity, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementData, UnknownData_PSO0, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FManagedGameplayElementData, 0x0050);
		}

		// struct FForceSpawnTileData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ForceSpawnTileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceSpawnTileData, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceSpawnTileData, matrixX, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceSpawnTileData, matrixY, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceSpawnTileData, rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceSpawnTileData, UnknownData_HTCH, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceSpawnTileData, 0x0020);
		}

		// struct FDependency
		TEST_METHOD(ScriptStruct__DeadByDaylight__Dependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, UnknownData_YRHN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, AssetReference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, Object, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, Unique, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, UnknownData_BPBD, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependency, Count, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDependency, 0x0038);
		}

		// struct FGeneratedLevelData
		TEST_METHOD(ScriptStruct__DeadByDaylight__GeneratedLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, UsedPaperTileMap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, premadeMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, AvailableEscapeCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, AvailableSurvivorItemCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, GroupingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, UnknownData_RYTJ, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, KillerSpawnPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, SurvivorSpawnPoints, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, InteractableElementsSpawnPoints, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, SpecialBehaviourRequestCounts, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, SpecialBehaviourSpawnPoints, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, SearchableSpawners, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, HexSpawners, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, KillerLairSpawners, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, HatchSpawners, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, MainBuildingHatchSpawners, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, ShackHatchSpawners, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, BreakableWallSpawners, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, EscapeSpawners, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, BookshelfManagedGameplayElementData, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, MeatHookManagedGameplayElementData, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, LevelDependencies, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, FixedMapTileIds, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, FixedMapOrphanSpawners, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, specialEventId, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, UseForcedMap, 0x0254);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, UsePremadeMap, 0x0255);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, UnknownData_U2UR, 0x0256);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, GenerationLogs, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, GenerationErrors, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, generationPlayerCount, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, UnknownData_Q439, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, ForceSpawnTileData, 0x0280);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedLevelData, LevelLightings, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedLevelData, 0x02A0);
		}

		// struct FSectionLenghtsProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__SectionLenghtsProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionLenghtsProperties, direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionLenghtsProperties, UnknownData_4UOL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionLenghtsProperties, Lenght, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionLenghtsProperties, 0x0008);
		}

		// struct FQuadrantSpawnTypeProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__QuadrantSpawnTypeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnTypeProperties, QuadrantSpawnType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnTypeProperties, UnknownData_4Q3T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnTypeProperties, SectionLenghts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuadrantSpawnTypeProperties, 0x0018);
		}

		// struct FSurvivorItemProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__SurvivorItemProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorItemProperties, category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorItemProperties, UnknownData_8LTV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorItemProperties, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorItemProperties, MaxPopulation, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivorItemProperties, 0x000C);
		}

		// struct FEscapeTypeObjects
		TEST_METHOD(ScriptStruct__DeadByDaylight__EscapeTypeObjects)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeTypeObjects, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeTypeObjects, UnknownData_W48K, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeTypeObjects, EscapeObjects, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEscapeTypeObjects, 0x0018);
		}

		// struct FKillerItemProperty
		TEST_METHOD(ScriptStruct__DeadByDaylight__KillerItemProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemProperty, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemProperty, Population, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemProperty, _gameplayElementType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemProperty, UnknownData_MWN6, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillerItemProperty, 0x0040);
		}

		// struct FKillerItemDependencies
		TEST_METHOD(ScriptStruct__DeadByDaylight__KillerItemDependencies)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemDependencies, KillerAbility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemDependencies, UnknownData_CU9R, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerItemDependencies, Items, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillerItemDependencies, 0x0018);
		}

		// struct FEscapeStrategyProperty
		TEST_METHOD(ScriptStruct__DeadByDaylight__EscapeStrategyProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeStrategyProperty, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeStrategyProperty, UnknownData_B8M9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeStrategyProperty, Population, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeStrategyProperty, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEscapeStrategyProperty, UnknownData_OFT3, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEscapeStrategyProperty, 0x0018);
		}

		// struct FManagedGameplayElementsPopulation
		TEST_METHOD(ScriptStruct__DeadByDaylight__ManagedGameplayElementsPopulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, UnknownData_2PY2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, GameplayElementBlueprint, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, MinDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, MinPopulation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, MaxPopulation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FManagedGameplayElementsPopulation, UnknownData_W5DP, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FManagedGameplayElementsPopulation, 0x0048);
		}

		// struct FGameplayElementsPopulation
		TEST_METHOD(ScriptStruct__DeadByDaylight__GameplayElementsPopulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, UnknownData_JUMT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, GameplayElementBlueprint, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, MinPopulation, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, MaxPopulation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, MinGuaranteePopulation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayElementsPopulation, SpawnPass, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayElementsPopulation, 0x0048);
		}

		// struct FSurvivorGroupingProbability
		TEST_METHOD(ScriptStruct__DeadByDaylight__SurvivorGroupingProbability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorGroupingProbability, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorGroupingProbability, UnknownData_S7BI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorGroupingProbability, Probability, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivorGroupingProbability, 0x0008);
		}

		// struct FThemeProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__ThemeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, Weather, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, audioStateThemes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, audioStateWeather, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, audioGameStartEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, UnknownData_JWR0, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, TilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, MapPath, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, ThemeNumber, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, UnknownData_4HBR, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, DisplayName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, ThemeColorId, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, ThemeSelectionOfferingEffectType, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, UnknownData_Q944, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, SubstitutionElements, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, DlcIDString, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, Blackboard, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, Gesture, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FThemeProperties, UnknownData_XPFY, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FThemeProperties, 0x00B8);
		}

		// struct FWeightedItem
		TEST_METHOD(ScriptStruct__DeadByDaylight__WeightedItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedItem, Element, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedItem, Weight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedItem, UnknownData_Y3PC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedItem, 0x0038);
		}

		// struct FQuadrantSpawnItem
		TEST_METHOD(ScriptStruct__DeadByDaylight__QuadrantSpawnItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnItem, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnItem, UnknownData_2E63, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnItem, Elements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuadrantSpawnItem, 0x0018);
		}

		// struct FQuadrantSpawnCategories
		TEST_METHOD(ScriptStruct__DeadByDaylight__QuadrantSpawnCategories)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnCategories, QuadrantSpawnTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnCategories, UnknownData_LP51, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantSpawnCategories, Items, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuadrantSpawnCategories, 0x0020);
		}

		// struct FGenerationParams
		TEST_METHOD(ScriptStruct__DeadByDaylight__GenerationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenerationParams, seed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenerationParams, 0x0004);
		}

		// struct FProfileLoadEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ProfileLoadEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfileLoadEventData, FirstTimePlaying, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfileLoadEventData, UnknownData_5CEA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProfileLoadEventData, timestamp, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProfileLoadEventData, 0x0010);
		}

		// struct FRankUIData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__RankUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankUIData, rank, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankUIData, playerRole, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankUIData, UnknownData_85P9, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankUIData, color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankUIData, Frame, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankUIData, 0x0068);
		}

		// struct FRarityDistributionValue : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__RarityDistributionValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityDistributionValue, InnerRing, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityDistributionValue, MiddleRing, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityDistributionValue, OuterRing, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityDistributionValue, UnknownData_53RY, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRarityDistributionValue, 0x0018);
		}

		// struct FReceiverTerrorRadiusOverride
		TEST_METHOD(ScriptStruct__DeadByDaylight__ReceiverTerrorRadiusOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReceiverTerrorRadiusOverride, UnknownData_TTO5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReceiverTerrorRadiusOverride, 0x0010);
		}

		// struct FDBDRecentGameplayEvents
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDRecentGameplayEvents)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDRecentGameplayEvents, _recentGameplayEvents, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDRecentGameplayEvents, 0x0050);
		}

		// struct FRegion
		TEST_METHOD(ScriptStruct__DeadByDaylight__Region)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegion, Region, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegion, UnknownData_BCA0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegion, IP, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegion, 0x0020);
		}

		// struct FRewardItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__RewardItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, iconPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, rarity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, itemType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, IsDuplicate, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, currencyType, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRewardItemData, CurrencyAmount, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRewardItemData, 0x0038);
		}

		// struct FS3CommandErrorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__S3CommandErrorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, Url, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, Verb, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, ResponseCode, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, InvalidRequest, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, InvalidResponse, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, DecryptionFailure, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, BadResponse, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, ContentModifiedError, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandErrorAnalytics, UnknownData_XP11, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS3CommandErrorAnalytics, 0x0098);
		}

		// struct FS3CommandAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__S3CommandAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, RequestContentLength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, UnknownData_MAOO, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, ContentType, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, ElapsedTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, UnknownData_7154, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, Status, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, Url, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, Verb, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, ResponseContentLength, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, ResponseCode, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, Success, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FS3CommandAnalytics, UnknownData_W368, 0x00C1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FS3CommandAnalytics, 0x00C8);
		}

		// struct FSaveGameLoadResultAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveGameLoadResultAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameLoadResultAnalytics, LoadSuccessful, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameLoadResultAnalytics, UnknownData_PEWW, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameLoadResultAnalytics, message, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveGameLoadResultAnalytics, 0x0080);
		}

		// struct FSaveGameSaveResultAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveGameSaveResultAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSaveResultAnalytics, SaveSuccessful, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSaveResultAnalytics, UnknownData_3HL4, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSaveResultAnalytics, ResponseCode, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveGameSaveResultAnalytics, 0x0070);
		}

		// struct FSaveGameErrorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__SaveGameErrorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameErrorAnalytics, errorCode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameErrorAnalytics, UnknownData_FNOA, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameErrorAnalytics, category, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameErrorAnalytics, ErrorDetails, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameErrorAnalytics, KrakenErrorCode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameErrorAnalytics, UnknownData_6G9X, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveGameErrorAnalytics, 0x0098);
		}

		// struct FShopAnalyticsController
		TEST_METHOD(ScriptStruct__DeadByDaylight__ShopAnalyticsController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopAnalyticsController, UnknownData_QBKA, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShopAnalyticsController, 0x0001);
		}

		// struct FShopAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__ShopAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShopAnalytics, LogMessage, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShopAnalytics, 0x0078);
		}

		// struct FSimpleCharacterDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__SimpleCharacterDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCharacterDropdown, CharacterId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCharacterDropdown, 0x0004);
		}

		// struct FCharacterCameraTag
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterCameraTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCameraTag, camera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCameraTag, characters, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterCameraTag, 0x0018);
		}

		// struct FskillCheckResponse
		TEST_METHOD(ScriptStruct__DeadByDaylight__skillCheckResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, chargeChange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, IsTriggeredByInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, IsSuccessful, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, IsBonus, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, IsInsane, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, IsTriggeringLoudNoise, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, UnknownData_EME3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FskillCheckResponse, interaction, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FskillCheckResponse, 0x0018);
		}

		// struct FSkillCheckDefinition
		TEST_METHOD(ScriptStruct__DeadByDaylight__SkillCheckDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, SuccessZoneStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, SuccessZoneEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, BonusZoneLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, ProgressRate, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, warningSoundDelay, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, IsJittering, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckDefinition, UnknownData_P8YO, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillCheckDefinition, 0x0018);
		}

		// struct FOutlineRevealDescription
		TEST_METHOD(ScriptStruct__DeadByDaylight__OutlineRevealDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutlineRevealDescription, UnknownData_0CCF, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutlineRevealDescription, _affectedCharacters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutlineRevealDescription, UnknownData_69K8, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutlineRevealDescription, 0x0070);
		}

		// struct FSpawnPopulationHandler
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpawnPopulationHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPopulationHandler, UnknownData_N0UN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnPopulationHandler, _allAvailableSpawners, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnPopulationHandler, 0x00C8);
		}

		// struct FSpecialBehaviourPopulation
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialBehaviourPopulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourPopulation, _name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourPopulation, UnknownData_QDIJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourPopulation, _spawnerTypes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourPopulation, _spawnPointTypes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourPopulation, _actor, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialBehaviourPopulation, 0x0060);
		}

		// struct FSpecialEventBaseAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialEventBaseAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, role, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, UnknownData_HYL9, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, MatchId, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, EventName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, Challenge, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, Amount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, StartAmount, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, EndAmount, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventBaseAnalytics, UnknownData_L1XG, 0x00A4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventBaseAnalytics, 0x00A8);
		}

		// struct FSpecialEventObjectiveData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialEventObjectiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, objectiveId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, UnknownData_L71W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, iconPath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, ObjectiveFrameLabel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, CompletedTitle, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, CompletedDescription, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, RewardId, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, UnknownData_32UD, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, LockedRewardGenericIconPath, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, UnlockedRewardGenericIconPath, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, playerRole, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, UnknownData_Q906, 0x00C1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, statName, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, Sections, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventObjectiveData, MaxValue, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventObjectiveData, 0x00E0);
		}

		// struct FSpecialEventCinematicData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialEventCinematicData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventCinematicData, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventCinematicData, VideoThumbnailId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventCinematicData, UnknownData_CN20, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventCinematicData, VideoIconPath, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventCinematicData, 0x0028);
		}

		// struct FspecialEventData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__specialEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, eventId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, currencyType, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, UnknownData_CJYO, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, EventName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, EventBannerLabel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, IsTrackedOnline, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, UseSpecialEventLoadingScreen, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, UnknownData_9BN2, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, Objectives, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, ObjectOutlineColour, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, UnknownData_B601, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, LobbyName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, ShopName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, AudioStateSpecialEvent, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, UnknownData_J4FN, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, GameplayComponent, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, cinematics, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, GameMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FspecialEventData, UnknownData_FG4H, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FspecialEventData, 0x00D8);
		}

		// struct FSpecialEventLoadingTextData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialEventLoadingTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventLoadingTextData, eventId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventLoadingTextData, UnknownData_NLJZ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventLoadingTextData, title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventLoadingTextData, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventLoadingTextData, iconPath, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventLoadingTextData, 0x0058);
		}

		// struct FStatusEffectProperties : public FItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__StatusEffectProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectProperties, tags, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectProperties, StatusEffectBlueprint, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectProperties, StatusEffectType, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectProperties, ExternalEffectSource, 0x0199);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectProperties, UnknownData_8X95, 0x019A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectProperties, 0x01A0);
		}

		// struct FStatusEffectSlotData
		TEST_METHOD(ScriptStruct__DeadByDaylight__StatusEffectSlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, IconFilePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, StatusEffectType, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, UnknownData_2TIF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectSlotData, level, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectSlotData, 0x0048);
		}

		// struct FStatusViewProperties : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__StatusViewProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, statusViewID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, UnknownData_XYSC, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, DisplayName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, StatusViewBlueprint, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, StatusType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, UnknownData_J3SS, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, IconFilePath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusViewProperties, IconAsset, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusViewProperties, 0x00C0);
		}

		// struct FstatusViewSource
		TEST_METHOD(ScriptStruct__DeadByDaylight__statusViewSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, SourceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, isActive, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, UnknownData_YQSA, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, _remainingTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, PercentageFill, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, level, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, SourceType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, UnknownData_75GZ, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, SourceIconIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FstatusViewSource, SourceLevel, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FstatusViewSource, 0x0028);
		}

		// struct FStoreFeaturedBannerData
		TEST_METHOD(ScriptStruct__DeadByDaylight__StoreFeaturedBannerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, UnknownData_IIX0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, subtitle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, ImagePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, AssociatedDlcId, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, AssociatedCombinedItemId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, AssociatedCombinedOutfitId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, TextPosition, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerData, UnknownData_5SMP, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreFeaturedBannerData, 0x0080);
		}

		// struct FStoreBannersData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__StoreBannersData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreBannersData, BannerId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreBannersData, UnknownData_GG1Z, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreBannersData, BannerData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreBannersData, UseAsDefault, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreBannersData, DefaultLocation, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreBannersData, UnknownData_HQ51, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreBannersData, 0x00A0);
		}

		// struct FInteractionPlayerProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__InteractionPlayerProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, AverageVelocityAtStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, PlayerPositionAtStart, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, PlayerRotationAtStart, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, requester, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, SnapPositionAtStart, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, SnapRotationAtStart, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, SnapDistanceAtStart, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, SnapTimeAtStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, ShouldSnapPosition, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPlayerProperties, UnknownData_W34B, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionPlayerProperties, 0x0050);
		}

		// struct FStoredInteraction
		TEST_METHOD(ScriptStruct__DeadByDaylight__StoredInteraction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoredInteraction, _interaction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoredInteraction, _inputType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoredInteraction, UnknownData_83EY, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoredInteraction, _playerProperties, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoredInteraction, UnknownData_4R1Y, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoredInteraction, 0x0060);
		}

		// struct FStoreFeaturedBannerUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__StoreFeaturedBannerUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerUIData, BannerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerUIData, UnknownData_UPOO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerUIData, BannerData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerUIData, IsNew, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreFeaturedBannerUIData, UnknownData_1FVZ, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreFeaturedBannerUIData, 0x0098);
		}

		// struct FSurvivorHookTimer
		TEST_METHOD(ScriptStruct__DeadByDaylight__SurvivorHookTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorHookTimer, UnknownData_EAF3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivorHookTimer, 0x0038);
		}

		// struct FSyncLoadAnalytics : public FBaseSingleStructIndexAnalytics
		TEST_METHOD(ScriptStruct__DeadByDaylight__SyncLoadAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, AssetName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, LoadTimeMilliseconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, UnknownData_FHXU, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, DeviceProfileName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, BuildConfiguration, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, ChangelistNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, UnknownData_JU8P, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSyncLoadAnalytics, mapName, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSyncLoadAnalytics, 0x0068);
		}

		// struct FSpecialEventUIInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialEventUIInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventUIInfo, eventId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventUIInfo, EventBannerFrameLabel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventUIInfo, EventName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventUIInfo, IsPastEvent, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventUIInfo, UnknownData_RWR2, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventUIInfo, BloodwebCollectSoundEvent, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventUIInfo, 0x0050);
		}

		// struct FInventorySlotData
		TEST_METHOD(ScriptStruct__DeadByDaylight__InventorySlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, itemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_2HF0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, IconFilePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, ParentDisplayName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, description, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, PerkCategory, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, itemType, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, rarity, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, StatusEffectType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_0ATG, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, level, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, subtitle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, stackCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, Availability, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, IsTeachablePerk, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, IsSlasherPerk, 0x007E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, IsPerkAvailableInFearMarket, 0x007F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, IsPerkAvailableInBloodWeb, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_UQ6A, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, TeachableLevel, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, DlcDisplayName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, IsLocked, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_VAY6, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, EventInfo, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnlockableLevel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInventorySlotData, UnknownData_A7PN, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInventorySlotData, 0x00F8);
		}

		// struct FTallyItemChangedData
		TEST_METHOD(ScriptStruct__DeadByDaylight__TallyItemChangedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyItemChangedData, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyItemChangedData, addon1, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyItemChangedData, addon2, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyItemChangedData, EnergyType, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyItemChangedData, UnknownData_8BFY, 0x02E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyItemChangedData, energyLevel, 0x02EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTallyItemChangedData, 0x02F0);
		}

		// struct FTallyPlayerResultData
		TEST_METHOD(ScriptStruct__DeadByDaylight__TallyPlayerResultData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, CharacterIconPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, UnknownData_FNEZ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, playerId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, PlatformAccountId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, mirrorsId, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, playerName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, PlayerScore, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, playerRank, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, PlayerStatus, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, UnknownData_1VL2, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, OfferingData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, PerksData, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, ItemData, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, AddonsData, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, IsReported, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, isSlasher, 0x0271);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, IsMyScore, 0x0272);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, isOffNetwork, 0x0273);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyPlayerResultData, UnknownData_NQ8R, 0x0274);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTallyPlayerResultData, 0x0278);
		}

		// struct FTallyScorePipsData
		TEST_METHOD(ScriptStruct__DeadByDaylight__TallyScorePipsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, threshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, UnknownData_X9UB, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, PipThresholds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, Scores, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, PipsDelta, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, isSlasher, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyScorePipsData, UnknownData_YE53, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTallyScorePipsData, 0x0030);
		}

		// struct FTexturegroupChartingAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__TexturegroupChartingAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, texturegroup_name, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, texturegroups_guid, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, map_name, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, avg_qty_streaming, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, max_qty_streaming, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, avg_memory_streaming, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, max_memory_streaming, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, avg_qty_non_streaming, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, max_qty_non_streaming, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, avg_memory_non_streaming, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturegroupChartingAnalytics, max_memory_non_streaming, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturegroupChartingAnalytics, 0x00B8);
		}

		// struct FArrayOfATile
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArrayOfATile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArrayOfATile, ArrayOfTiles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArrayOfATile, 0x0010);
		}

		// struct FArrayOfInt32
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArrayOfInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArrayOfInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArrayOfInt32, 0x0010);
		}

		// struct FQuadrantInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__QuadrantInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuadrantInfo, UnknownData_KKVZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuadrantInfo, 0x0020);
		}

		// struct FTransactionAnalyticsController
		TEST_METHOD(ScriptStruct__DeadByDaylight__TransactionAnalyticsController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalyticsController, UnknownData_86D8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransactionAnalyticsController, 0x00F0);
		}

		// struct FTransactionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__TransactionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, TransactionType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, TransactionSource, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, SourceId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, SourceTier, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, UnknownData_GENU, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, currencyType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, CurrencyAmount, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, CurrencyBalance, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, LevelAchieved, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, prestige, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, ItemIDAcquired, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, rank, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, UnknownData_RYJL, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, selectedCharacter, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, TransactionTriggeredLevelUp, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransactionAnalytics, UnknownData_POHF, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransactionAnalytics, 0x00F0);
		}

		// struct FPerPlatformTunable : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerPlatformTunable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformTunable, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformTunable, UnknownData_LM2N, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformTunable, description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformTunable, 0x0020);
		}

		// struct FTunableValue : public FDBDTunableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__TunableValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTunableValue, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTunableValue, AtlantaOverriddenValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTunableValue, description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTunableValue, OverriddenInAtlanta, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTunableValue, UnknownData_3MRG, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTunableValue, 0x0028);
		}

		// struct FTutorialEndReward : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__TutorialEndReward)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialEndReward, BloodpointReward, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialEndReward, UnknownData_8AOA, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialEndReward, 0x0010);
		}

		// struct FTutorialLevelData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__TutorialLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, UnknownData_YI1D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, iconPath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, mapName, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, IsKillerTutorial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialLevelData, UnknownData_ASKK, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialLevelData, 0x0070);
		}

		// struct FTutorialNotificationData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__TutorialNotificationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialNotificationData, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialNotificationData, description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialNotificationData, iconPath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialNotificationData, IsShowAnalyticEnabled, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialNotificationData, UnknownData_B8MU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialNotificationData, 0x0050);
		}

		// struct FTutorialObjective : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__TutorialObjective)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialObjective, description, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialObjective, IsCompletionAnalyticEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialObjective, UnknownData_KXCY, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialObjective, 0x0028);
		}

		// struct FTutorialTallyData
		TEST_METHOD(ScriptStruct__DeadByDaylight__TutorialTallyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialTallyData, isKiller, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialTallyData, FirstTimeCompleted, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialTallyData, UnknownData_N2X4, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTutorialTallyData, BloodpointsScore, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTutorialTallyData, 0x0008);
		}

		// struct FRoleItemCategoryDropdown : public FCharacterDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__RoleItemCategoryDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleItemCategoryDropdown, IncludeOutfits, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleItemCategoryDropdown, IncludeNone, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleItemCategoryDropdown, category, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleItemCategoryDropdown, UnknownData_S60D, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoleItemCategoryDropdown, 0x000C);
		}

		// struct FCharacterAnimationDropdown : public FRoleItemCategoryDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterAnimationDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAnimationDropdown, UnknownData_1THL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAnimationDropdown, animation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAnimationDropdown, AnimationPath, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterAnimationDropdown, 0x0028);
		}

		// struct FCharacterAnimation
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterAnimation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAnimation, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAnimation, UnknownData_HZTY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterAnimation, data, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterAnimation, 0x0038);
		}

		// struct FItemIdDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__ItemIdDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemIdDropdown, itemId, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemIdDropdown, 0x000C);
		}

		// struct FScreenshotViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__ScreenshotViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, distance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, LateralOffset, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, HeightOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, CharacterYaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, CharacterRoll, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, CharacterPitch, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, CameraPitch, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenshotViewSetting, SocketName, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenshotViewSetting, 0x0028);
		}

		// struct FItemViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__ItemViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemViewSetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemViewSetting, Item, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FItemViewSetting, settings, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FItemViewSetting, 0x0040);
		}

		// struct FCharacterItemCategoryViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterItemCategoryViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterItemCategoryViewSetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterItemCategoryViewSetting, CharacterDropdown, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterItemCategoryViewSetting, settings, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterItemCategoryViewSetting, 0x0040);
		}

		// struct FCharmDropdown : public FRoleDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharmDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmDropdown, UnknownData_YHQ8, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmDropdown, charmId, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharmDropdown, 0x0010);
		}

		// struct FCharmViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharmViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmViewSetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmViewSetting, charmId, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmViewSetting, settings, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharmViewSetting, 0x0044);
		}

		// struct FCharmCategorySetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharmCategorySetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmCategorySetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmCategorySetting, CharmCategory, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmCategorySetting, UnknownData_B5PY, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmCategorySetting, settings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharmCategorySetting, 0x0038);
		}

		// struct FOutfitViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__OutfitViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitViewSetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitViewSetting, OutfitDropdown, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutfitViewSetting, settings, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutfitViewSetting, 0x0048);
		}

		// struct FCharacterViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterViewSetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterViewSetting, CharacterDropdown, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterViewSetting, settings, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterViewSetting, 0x003C);
		}

		// struct FGenderViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__GenderViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenderViewSetting, RoleItemCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenderViewSetting, Gender, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenderViewSetting, UnknownData_Q12B, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenderViewSetting, settings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenderViewSetting, 0x0038);
		}

		// struct FRoleGenderViewSetting
		TEST_METHOD(ScriptStruct__DeadByDaylight__RoleGenderViewSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleGenderViewSetting, Label, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleGenderViewSetting, RoleDropdown, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleGenderViewSetting, Gender, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleGenderViewSetting, UnknownData_1QR2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRoleGenderViewSetting, settings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRoleGenderViewSetting, 0x0038);
		}

		// struct FFriendWidgetList
		TEST_METHOD(ScriptStruct__DeadByDaylight__FriendWidgetList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendWidgetList, UnknownData_WS9K, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendWidgetList, 0x0010);
		}

		// struct FWidgetFriendData
		TEST_METHOD(ScriptStruct__DeadByDaylight__WidgetFriendData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetFriendData, UnknownData_LUJ8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetFriendData, correspondingWidget, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetFriendData, 0x0010);
		}

		// struct FAtlantaSettingMenuData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaSettingMenuData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSettingMenuData, OverlayTab, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSettingMenuData, OverlayMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSettingMenuData, UnknownData_XHLK, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSettingMenuData, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSettingMenuData, MenuType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSettingMenuData, UnknownData_D3IV, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaSettingMenuData, 0x0030);
		}

		// struct FHtmlTagConvertRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__HtmlTagConvertRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHtmlTagConvertRow, HtmlTag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHtmlTagConvertRow, RichTextTag, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHtmlTagConvertRow, 0x0028);
		}

		// struct FInteractButtonInfo : public FTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__InteractButtonInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractButtonInfo, InteractButtonID, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractButtonInfo, interactionID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractButtonInfo, playerRole, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractButtonInfo, InteractionInputType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractButtonInfo, UnknownData_M5VI, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractButtonInfo, icon, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractButtonInfo, 0x0058);
		}

		// struct FInboxMessageElapsedTime
		TEST_METHOD(ScriptStruct__DeadByDaylight__InboxMessageElapsedTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageElapsedTime, ElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageElapsedTime, TimeUnit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageElapsedTime, UnknownData_QRK0, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInboxMessageElapsedTime, 0x0008);
		}

		// struct FInboxMessageUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__InboxMessageUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, messageId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, ReceivedTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, messageType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, UnknownData_D7CI, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, MessageTitle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, MessageBody, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, MessageState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, UnknownData_2RE8, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageUIData, AttachedClaimable, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInboxMessageUIData, 0x0060);
		}

		// struct FplayerInfoData
		TEST_METHOD(ScriptStruct__DeadByDaylight__playerInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, CharacterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, CharacterIconPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, playerName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, playerLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, prestigeLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, playerRank, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, ActivePips, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, NumPipsToNextRank, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, ready, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, isSlasher, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, canPrestige, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerInfoData, UnknownData_J0BT, 0x0047);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FplayerInfoData, 0x0048);
		}

		// struct FScoreCategoryUIExtraData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ScoreCategoryUIExtraData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryUIExtraData, ScoreCategoryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryUIExtraData, ScoreCategoryAsset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryUIExtraData, scoreValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreCategoryUIExtraData, UnknownData_F1DK, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScoreCategoryUIExtraData, 0x0028);
		}

		// struct FVariationData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__VariationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariationData, tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariationData, UnknownData_G7YK, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVariationData, name, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVariationData, 0x0030);
		}

		// struct FVideoThumbnailProperties : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__VideoThumbnailProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVideoThumbnailProperties, _id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVideoThumbnailProperties, _hasAudio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVideoThumbnailProperties, UnknownData_S1FE, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVideoThumbnailProperties, _size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVideoThumbnailProperties, _source, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVideoThumbnailProperties, 0x0050);
		}

		// struct FArchivesVignetteEntry : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchivesVignetteEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignetteEntry, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignetteEntry, text, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignetteEntry, HasAudio, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignetteEntry, UnknownData_21M7, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchivesVignetteEntry, 0x0040);
		}

		// struct FArchivesVignettes : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchivesVignettes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignettes, vignetteId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignettes, title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignettes, subtitle, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignettes, Entries, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesVignettes, CinematicPaths, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchivesVignettes, 0x0068);
		}

		// struct FArchivesJournal : public FDBDTableRowBaseWithId
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchivesJournal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesJournal, title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchivesJournal, Vignettes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchivesJournal, 0x0040);
		}

		// struct FWalesCypherAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__WalesCypherAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, EnteredSequence, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, ExpectedSequence, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, TimeoutThreshold, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, Success, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, TimeOut, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, CharmGranted, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, UnknownData_HRPE, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, ValidCharacterSelcted, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalesCypherAnalytics, UnknownData_OP8Q, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalesCypherAnalytics, 0x0098);
		}

		// struct FWalletUpdateTracker
		TEST_METHOD(ScriptStruct__DeadByDaylight__WalletUpdateTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalletUpdateTracker, _walletChangeMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalletUpdateTracker, 0x0050);
		}

		// struct FNativeBlockIndicatorData
		TEST_METHOD(ScriptStruct__DeadByDaylight__NativeBlockIndicatorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNativeBlockIndicatorData, IsBlockActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNativeBlockIndicatorData, IsBlockUpdating, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNativeBlockIndicatorData, UnknownData_25K8, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNativeBlockIndicatorData, CurrentBlockFade, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNativeBlockIndicatorData, FadeCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNativeBlockIndicatorData, BlockIndicator, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNativeBlockIndicatorData, 0x0018);
		}

		// struct FVaultData
		TEST_METHOD(ScriptStruct__DeadByDaylight__VaultData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVaultData, UnknownData_CGZC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVaultData, 0x0038);
		}

		// struct FXpBonusData
		TEST_METHOD(ScriptStruct__DeadByDaylight__XpBonusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXpBonusData, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXpBonusData, XpValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXpBonusData, UnknownData_4IQV, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXpBonusData, 0x0018);
		}

		// struct FEffectCameraTypeSettings
		TEST_METHOD(ScriptStruct__DeadByDaylight__EffectCameraTypeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectCameraTypeSettings, category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectCameraTypeSettings, VisibilityInFirstPerson, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEffectCameraTypeSettings, VisibilityInThirdPerson, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEffectCameraTypeSettings, 0x0003);
		}

		// struct Foffering
		TEST_METHOD(ScriptStruct__DeadByDaylight__offering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Foffering, UnknownData_5AUD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Foffering, 0x0190);
		}

		// struct FselectedOffering
		TEST_METHOD(ScriptStruct__DeadByDaylight__selectedOffering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FselectedOffering, ownerId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FselectedOffering, OfferingName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FselectedOffering, 0x0010);
		}

		// struct FBuiltLevelData
		TEST_METHOD(ScriptStruct__DeadByDaylight__BuiltLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, themeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, themeWeather, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, audioStateThemes, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, audioStateWeather, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, audioGameStartEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, UnknownData_CVE1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, mapName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, tileCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, UnknownData_X4EE, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, Dependencies, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, specialEventId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuiltLevelData, UnknownData_I2NE, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuiltLevelData, 0x0078);
		}

		// struct FgamePresetData
		TEST_METHOD(ScriptStruct__DeadByDaylight__gamePresetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _mapAvailabilities, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _perkAvailabilities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _offeringAvailabilities, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _itemAvailabilities, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _itemAddonAvailabilities, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _customizationItemAvailabilities, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _characterAvailabilities, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _allowDlcContent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _privateMatch, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, _isTrainingMatch, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgamePresetData, UnknownData_M0HE, 0x0073);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FgamePresetData, 0x0078);
		}

		// struct FOfferingData
		TEST_METHOD(ScriptStruct__DeadByDaylight__OfferingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingData, OfferingReady, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingData, UnknownData_0NUK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOfferingData, Offerings, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOfferingData, 0x0018);
		}

		// struct FCamperHealResult
		TEST_METHOD(ScriptStruct__DeadByDaylight__CamperHealResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperHealResult, PreviousDamageState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperHealResult, currentDamageState, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperHealResult, UnknownData_ALP5, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperHealResult, healAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperHealResult, healers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCamperHealResult, 0x0018);
		}

		// struct FDBDTimer
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, UnknownData_SU24, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, _startTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, _startTimeDirty, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, UnknownData_IQVI, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, _timeLeft, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, _replicateTimeLeft, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, UnknownData_2A73, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTimer, _interpSpeed, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDTimer, 0x0028);
		}

		// struct FAttackDelegatePair
		TEST_METHOD(ScriptStruct__DeadByDaylight__AttackDelegatePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackDelegatePair, _attack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackDelegatePair, UnknownData_3QXW, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackDelegatePair, 0x0010);
		}

		// struct FTargetFocusTimer
		TEST_METHOD(ScriptStruct__DeadByDaylight__TargetFocusTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetFocusTimer, _camper, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetFocusTimer, _cooldownTimer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetFocusTimer, _totalTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetFocusTimer, UnknownData_6AI8, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTargetFocusTimer, 0x0038);
		}

		// struct FtooltipPressedData
		TEST_METHOD(ScriptStruct__DeadByDaylight__tooltipPressedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FtooltipPressedData, touchPosition, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FtooltipPressedData, 0x0008);
		}

		// struct FPurchaseCurrencyData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PurchaseCurrencyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, UnknownData_B6H3, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, currencyType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, UnknownData_4R2W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, Price, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, DiscountPercentage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, IsAffordable, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseCurrencyData, UnknownData_2CBV, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseCurrencyData, 0x0018);
		}

		// struct FStoreItemSlotData
		TEST_METHOD(ScriptStruct__DeadByDaylight__StoreItemSlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, UnknownData_S3NK, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, itemId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, category, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, UnknownData_G1S9, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, mirrorsId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, UnknownData_Z90G, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, iconPath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, DisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, DisplayCollectionName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, RoleCategoryInfo, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, RarityPartInfo, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, rarity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, UnknownData_BJOU, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, EventInfo, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, PurchaseDataList, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, CustomTransformation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, IsOwned, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, IsBuyable, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, IsEquipped, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, IsNewInStore, 0x0107);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, IsLocked, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, IsInStore, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, AssociatedRole, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, UnknownData_I2I7, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, ReleaseDate, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreItemSlotData, UnknownData_M0JB, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreItemSlotData, 0x0160);
		}

		// struct FFirecrackerEffectData
		TEST_METHOD(ScriptStruct__DeadByDaylight__FirecrackerEffectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirecrackerEffectData, FireCracker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirecrackerEffectData, IsInRange, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirecrackerEffectData, isFirstTime, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFirecrackerEffectData, UnknownData_S94O, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFirecrackerEffectData, 0x0010);
		}

		// struct FphaseWalkInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__phaseWalkInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, IsActivePhaseWalking, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, IsPassivePhaseWalking, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, IsInteractionPhaseWalking, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, UnknownData_GCXW, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, HuskLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, HuskRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, teleportToHusk, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FphaseWalkInfo, UnknownData_N68B, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FphaseWalkInfo, 0x0020);
		}

		// struct FPortalRestrictedLocation
		TEST_METHOD(ScriptStruct__DeadByDaylight__PortalRestrictedLocation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPortalRestrictedLocation, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPortalRestrictedLocation, DistanceSquared, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPortalRestrictedLocation, 0x0010);
		}

		// struct FAIDetectedStimulus
		TEST_METHOD(ScriptStruct__DeadByDaylight__AIDetectedStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDetectedStimulus, instigator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDetectedStimulus, location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDetectedStimulus, rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDetectedStimulus, Velocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDetectedStimulus, AtTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDetectedStimulus, UnknownData_7XIW, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDetectedStimulus, 0x005C);
		}

		// struct FAITunableParameter
		TEST_METHOD(ScriptStruct__DeadByDaylight__AITunableParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITunableParameter, DefaultValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITunableParameter, TunableName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITunableParameter, 0x0010);
		}

		// struct FDataTableDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__DataTableDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDropdown, RowValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDropdown, UnknownData_60HW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDropdown, DataTableName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDropdown, ColumnName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableDropdown, UnknownData_UUG2, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableDropdown, 0x0030);
		}

		// struct FAkObservedPlayerSoundLoop : public FAkSoundLoop
		TEST_METHOD(ScriptStruct__DeadByDaylight__AkObservedPlayerSoundLoop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkObservedPlayerSoundLoop, UnknownData_5U2V, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkObservedPlayerSoundLoop, _perspectiveComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkObservedPlayerSoundLoop, 0x0040);
		}

		// struct FAimAssistInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__AimAssistInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimAssistInfo, UnknownData_XSZC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimAssistInfo, 0x0018);
		}

		// struct FAnimationMapping : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AnimationMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMapping, MontageAsset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMapping, tags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMapping, _montage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMapping, _loadAttempted, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMapping, UnknownData_CMFF, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationMapping, 0x0058);
		}

		// struct FAnimationMappingRow : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AnimationMappingRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMappingRow, Mappings, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationMappingRow, 0x0018);
		}

		// struct FArchiveQuestSpecialBehaviour : public FDBDTableRowBaseWithId
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchiveQuestSpecialBehaviour)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, UnknownData_0M4V, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, SpawnObjectId, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, AdditiveBehaviour, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, StackableBehaviour, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, OwnershipBehaviour, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, UnknownData_TNUT, 0x0043);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestSpecialBehaviour, SpawnQuantity, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchiveQuestSpecialBehaviour, 0x0048);
		}

		// struct FArchiveDefinition : public FDBDTableRowBaseWithId
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchiveDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveDefinition, title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveDefinition, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveDefinition, HiddenImages, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveDefinition, PurchasePassPicturePath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveDefinition, PurchaseTierPicturePath, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveDefinition, StyleFrameLabel, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchiveDefinition, 0x0088);
		}

		// struct FQuestEventDefinition : public FDBDTableRowBaseWithId
		TEST_METHOD(ScriptStruct__DeadByDaylight__QuestEventDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestEventDefinition, TrackedGameEvents, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuestEventDefinition, QuestEventEvaluator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuestEventDefinition, 0x0058);
		}

		// struct FArchiveQuestObjectiveDefinition : public FDBDTableRowBaseWithId
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchiveQuestObjectiveDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestObjectiveDefinition, description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestObjectiveDefinition, RulesDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestObjectiveDefinition, DescriptionParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestObjectiveDefinition, IsProgressionPercentage, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveQuestObjectiveDefinition, UnknownData_JMNZ, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchiveQuestObjectiveDefinition, 0x0060);
		}

		// struct FArchiveNodeDefinition : public FDBDTableRowBaseWithId
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArchiveNodeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveNodeDefinition, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveNodeDefinition, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveNodeDefinition, iconPath, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveNodeDefinition, playerRole, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveNodeDefinition, UnknownData_PJZD, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveNodeDefinition, CinematicId, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchiveNodeDefinition, 0x0068);
		}

		// struct FPlayerDataForQuestConditions
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerDataForQuestConditions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerDataForQuestConditions, UnknownData_TWUI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerDataForQuestConditions, 0x0078);
		}

		// struct FAssignedPerkProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__AssignedPerkProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkProperties, perkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkProperties, perkLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkProperties, IsTeachable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssignedPerkProperties, UnknownData_8NI0, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssignedPerkProperties, 0x0014);
		}

		// struct FAtlantaKillerSoundDistanceData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaKillerSoundDistanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaKillerSoundDistanceData, MinRadiusSoundDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaKillerSoundDistanceData, MaxRadiusSoundDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaKillerSoundDistanceData, MinRangeSoundHeard, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaKillerSoundDistanceData, UnknownData_TCN0, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaKillerSoundDistanceData, 0x0018);
		}

		// struct FAtlantaOnBoardingData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaOnBoardingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaOnBoardingData, OnBoardingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaOnBoardingData, UnknownData_2P74, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaOnBoardingData, title, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaOnBoardingData, description, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaOnBoardingData, 0x0048);
		}

		// struct FAtlantaRitualRewardUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaRitualRewardUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualRewardUIData, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualRewardUIData, UnknownData_N1EL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualRewardUIData, Quantity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualRewardUIData, IconFilePath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualRewardUIData, rarity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualRewardUIData, UnknownData_A5DA, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaRitualRewardUIData, 0x0020);
		}

		// struct FAtlantaSubRitualUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaSubRitualUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSubRitualUIData, description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSubRitualUIData, TargetNumber, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaSubRitualUIData, CurrentNumber, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaSubRitualUIData, 0x0018);
		}

		// struct FAtlantaRitualUIData
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaRitualUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, type, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, UnknownData_GH87, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, description, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, IconFilePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, IsNew, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, IsClaimed, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, UnknownData_ZPUU, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, ProgressPercentage, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, RefreshPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, UnknownData_1C63, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, rewards, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualUIData, SubRituals, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaRitualUIData, 0x0068);
		}

		// struct FAtlantaRitualsUIScreenData
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlantaRitualsUIScreenData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualsUIScreenData, DailyRefreshTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualsUIScreenData, WeeklyRefreshTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualsUIScreenData, DailyRituals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaRitualsUIScreenData, WeeklyRituals, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaRitualsUIScreenData, 0x0030);
		}

		// struct FAttackEventTypeDetails : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AttackEventTypeDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, gameplayTag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, AttackEventType, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, CanBeProtective, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, UnknownData_4LLL, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, AssociatedCharacter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, UnknownData_KGZ8, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackEventTypeDetails, description, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackEventTypeDetails, 0x0030);
		}

		// struct FAttackHitResult
		TEST_METHOD(ScriptStruct__DeadByDaylight__AttackHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackHitResult, attacker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackHitResult, target, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackHitResult, Attack, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackHitResult, IsBasicAttack, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackHitResult, CosmeticOnly, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackHitResult, UnknownData_RL6V, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackHitResult, 0x0080);
		}

		// struct FDBDBidirectionalTimer : public FDBDTimer
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDBidirectionalTimer)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDBidirectionalTimer, 0x0028);
		}

		// struct FBlindPackData : public FBaseItemData
		TEST_METHOD(ScriptStruct__DeadByDaylight__BlindPackData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlindPackData, 0x00D8);
		}

		// struct FBloodstoreRowUnlockThreshold : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodstoreRowUnlockThreshold)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodstoreRowUnlockThreshold, PreviousRowPurchasedItemsCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodstoreRowUnlockThreshold, UnknownData_O48T, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodstoreRowUnlockThreshold, 0x0010);
		}

		// struct FBloodwebChest : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebChest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebChest, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebChest, eventId, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebChest, rarity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebChest, UnknownData_0MTJ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebChest, GivenItemRarity, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebChest, 0x0038);
		}

		// struct FBloodwebContentTypePerRingDistribution : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebContentTypePerRingDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, PerkPerRingMinCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, PerkPerRingMaxCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, PerkPerRingWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, OfferingPerRingMinCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, OfferingPerRingMaxCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, OfferingPerRingWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, ItemPerRingMinCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, ItemPerRingMaxCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, ItemPerRingWeight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, AddOnPerRingMinCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, AddOnPerRingMaxCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, AddOnPerRingWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, ChestPerRingMinCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, ChestPerRingMaxCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, ChestPerRingWeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, PerksPackPerRingMinCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, PerksPackPerRingMaxCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, PerksPackPerRingWeight, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, IridiscentShardsPackPerRingMinCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, IridiscentShardsPackPerRingMaxCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, IridiscentShardsPackPerRingWeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebContentTypePerRingDistribution, UnknownData_N40B, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebContentTypePerRingDistribution, 0x0060);
		}

		// struct FBloodwebCostModifier : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebCostModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebCostModifier, type, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebCostModifier, UnknownData_V0O3, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebCostModifier, CostModifier, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebCostModifier, 0x0010);
		}

		// struct FBlockingNode
		TEST_METHOD(ScriptStruct__DeadByDaylight__BlockingNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockingNode, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockingNode, BlockingCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockingNode, UnknownData_NE0K, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlockingNode, 0x0018);
		}

		// struct FBloodwebMandatoryContentByLevel : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebMandatoryContentByLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebMandatoryContentByLevel, level, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebMandatoryContentByLevel, ForcedItem01, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebMandatoryContentByLevel, ForcedItem02, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebMandatoryContentByLevel, ForcedItem03, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebMandatoryContentByLevel, 0x0030);
		}

		// struct FBloodwebNodeProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebNodeProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeProperties, ContentType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeProperties, rarity, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeProperties, UnknownData_3YQH, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeProperties, tags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebNodeProperties, 0x0018);
		}

		// struct FBloodwebNodeGate : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebNodeGate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebNodeGate, 0x0008);
		}

		// struct FBloodwebNode
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, Properties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, Gates, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, state, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, UnknownData_7M3V, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, NodeID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, ContentId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, UnknownData_0WBO, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNode, BloodwebChest, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebNode, 0x0088);
		}

		// struct FContentPerWebDistribution
		TEST_METHOD(ScriptStruct__DeadByDaylight__ContentPerWebDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentPerWebDistribution, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentPerWebDistribution, MinCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentPerWebDistribution, MaxCount, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContentPerWebDistribution, 0x000C);
		}

		// struct FContentPerRingDistribution
		TEST_METHOD(ScriptStruct__DeadByDaylight__ContentPerRingDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentPerRingDistribution, WeightList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentPerRingDistribution, MinCountList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContentPerRingDistribution, MaxCountList, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContentPerRingDistribution, 0x0030);
		}

		// struct FRarityPerWebDistribution
		TEST_METHOD(ScriptStruct__DeadByDaylight__RarityPerWebDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityPerWebDistribution, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityPerWebDistribution, MinCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityPerWebDistribution, MaxCount, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRarityPerWebDistribution, 0x000C);
		}

		// struct FRarityPerRingDistribution
		TEST_METHOD(ScriptStruct__DeadByDaylight__RarityPerRingDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityPerRingDistribution, WeightList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityPerRingDistribution, MinCountList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityPerRingDistribution, MaxCountList, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRarityPerRingDistribution, 0x0030);
		}

		// struct FAccessNode
		TEST_METHOD(ScriptStruct__DeadByDaylight__AccessNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccessNode, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccessNode, AccessCost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccessNode, UnknownData_VR8G, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccessNode, 0x0018);
		}

		// struct FBloodwebNodeCost : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebNodeCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeCost, rarity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeCost, UnknownData_6CY5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeCost, Cost, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebNodeCost, 0x0010);
		}

		// struct FBloodwebNodeRarityCost : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebNodeRarityCost)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeRarityCost, rarity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeRarityCost, UnknownData_RR3A, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodeRarityCost, Cost, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebNodeRarityCost, 0x0010);
		}

		// struct FBloodwebNodesPerRingDistribution : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebNodesPerRingDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodesPerRingDistribution, MinCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebNodesPerRingDistribution, MaxCount, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebNodesPerRingDistribution, 0x0010);
		}

		// struct FBloodWebRingPersistentData
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodWebRingPersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebRingPersistentData, NodeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodWebRingPersistentData, 0x0010);
		}

		// struct FBloodWebPersistentData
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodWebPersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebPersistentData, versionNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebPersistentData, level, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebPersistentData, RingData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebPersistentData, Paths, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebPersistentData, EntityCurrentNode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodWebPersistentData, GenerationDate, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodWebPersistentData, 0x0040);
		}

		// struct FBloodwebPrestigeModifiers : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebPrestigeModifiers)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, CommonItemProbabilityModifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, UncommonItemProbabilityModifier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, RareItemProbabilityModifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, VeryRareItemProbabilityModifier, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, UltraRareItemProbabilityModifier, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, ArtifactItemProbabilityModifier, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, SpectralItemProbabilityModifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebPrestigeModifiers, LegendaryItemProbabilityModifier, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebPrestigeModifiers, 0x0028);
		}

		// struct FBloodwebProgressionValue : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebProgressionValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingNodeCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingNodeCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingNodeCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Common_MinCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Common_MaxCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Uncommon_MinCount, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Uncommon_MaxCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Rare_MinCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Rare_MaxCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, VeryRare_MinCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, VeryRare_MaxCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, UltraRare_MinCount, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, UltraRare_MaxCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Artifact_MinCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Artifact_MaxCount, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Spectral_MinCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Spectral_MaxCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, SpecialEvent_MinCount, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, SpecialEvent_MaxCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Legendary_MinCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, Legendary_MaxCount, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingCommonItemProbability, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingCommonItemProbability, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingCommonItemProbability, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingUncommonItemProbability, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingUncommonItemProbability, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingUncommonItemProbability, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingRareItemProbability, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingRareItemProbability, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingRareItemProbability, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingVeryRareItemProbability, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingVeryRareItemProbability, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingVeryRareItemProbability, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingUltraRareItemProbability, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingUltraRareItemProbability, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingUltraRareItemProbability, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingArtifactItemProbability, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingArtifactItemProbability, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingArtifactItemProbability, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingSpectralItemProbability, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingSpectralItemProbability, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingSpectralItemProbability, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingSpecialEventItemProbability, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingSpecialEventItemProbability, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingSpecialEventItemProbability, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, InnerRingLegendaryItemProbability, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, MiddleRingLegendaryItemProbability, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, OuterRingLegendaryItemProbability, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, EntityStartingRound, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebProgressionValue, UnknownData_0PMS, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebProgressionValue, 0x00D0);
		}

		// struct FBloodwebRarityPerRingDistribution : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__BloodwebRarityPerRingDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, CommonMinCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, CommonMaxCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, CommonWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UncommonMinCount, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UncommonMaxCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UncommonWeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, RareMinCount, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, RareMaxCount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, RareWeight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, VeryRareMinCount, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, VeryRareMaxCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, VeryRareWeight, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UltraRareMinCount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UltraRareMaxCount, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UltraRareWeight, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, ArtefactMinCount, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, ArtefactMaxCount, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, ArtefactWeight, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, SpectralMinCount, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, SpectralMaxCount, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, SpectralWeight, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, SpecialEventMinCount, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, SpecialEventMaxCount, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, SpecialEventWeight, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, LegendaryMinCount, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, LegendaryMaxCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, LegendaryWeight, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodwebRarityPerRingDistribution, UnknownData_14ZS, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodwebRarityPerRingDistribution, 0x0078);
		}

		// struct FDBDPerPlatformFloat
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDPerPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDPerPlatformFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDPerPlatformFloat, 0x0004);
		}

		// struct FDBDPerPlatformInt
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDPerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDPerPlatformInt, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDPerPlatformInt, 0x0004);
		}

		// struct FBundleData
		TEST_METHOD(ScriptStruct__DeadByDaylight__BundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBundleData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBundleData, UnknownData_WKX9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBundleData, UIData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBundleData, 0x0088);
		}

		// struct FCamperDamageResult
		TEST_METHOD(ScriptStruct__DeadByDaylight__CamperDamageResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperDamageResult, UnknownData_4M6S, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperDamageResult, DamageSource, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperDamageResult, UnknownData_ODAG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperDamageResult, KOPreventedSource, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperDamageResult, UnknownData_NZ65, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCamperDamageResult, 0x0058);
		}

		// struct FCharacterCustomizationDataTable : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterCustomizationDataTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDataTable, characterIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDataTable, UnknownData_SSZW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDataTable, CustomizationStoreDB, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterCustomizationDataTable, 0x0040);
		}

		// struct FCharacterCustomizationDropdown : public FCharacterDropdown
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterCustomizationDropdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, outfitId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, SurvivorHead, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, SurvivorTorso, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, SurvivorLegs, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, KillerHead, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, KillerBody, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterCustomizationDropdown, KillerWeapon, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterCustomizationDropdown, 0x005C);
		}

		// struct FSlideShowDescription
		TEST_METHOD(ScriptStruct__DeadByDaylight__SlideShowDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideShowDescription, Overview, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideShowDescription, Playstyle, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideShowDescription, ImageFilePath, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlideShowDescription, PerkCategory, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlideShowDescription, 0x0050);
		}

		// struct FCustomizedMeshPart
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomizedMeshPart)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedMeshPart, category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedMeshPart, UnknownData_7XHK, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedMeshPart, DefaultItemId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedMeshPart, SocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedMeshPart, UnknownData_BOU6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedMeshPart, 0x0048);
		}

		// struct FCharacterDescription : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, characterIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, role, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, Difficulty, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, UnknownData_MEQQ, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, BackStory, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, Biography, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, IconFilePath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, UnknownData_3YNX, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, HudIcon, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, BackgroundImagePath, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, UnknownData_2VZZ, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, CustomizationDescription, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, RequiredDlcIDString, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, IdName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, DebugName, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, IsInChunk0, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, IsAvailableInNonViolentBuild, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, IsAvailableInAtlantaBuild, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, UnknownData_V2C5, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, PlatformExclusiveFlag, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, GamePawn, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, MenuPawn, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, DefaultItem, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, Gender, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, UnknownData_2LMG, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, KillerAbilities, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, TunableDB, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, KillerHeight, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, UnknownData_X4LT, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, SlideShowDescriptions, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterDescription, CustomizationCategories, 0x01D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterDescription, 0x01E8);
		}

		// struct FCharacterSlotData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterSlotData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, UnknownData_L87K, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, characterIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, IconFilePath, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, BackgroundImagePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, DisplayName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, Biography, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, dlcId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, DLCTitle, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, level, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, prestige, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, Difficulty, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, IsUnlocked, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, IsDLCPurchasable, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, UnknownData_K6TN, 0x0083);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, PurchaseDataList, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, ItemsOwned, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, TotalItems, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, ShowNew, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, IsDlcLockedKiller, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, UnknownData_V4A4, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlotData, EventInfo, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSlotData, 0x00F8);
		}

		// struct FTeachableData
		TEST_METHOD(ScriptStruct__DeadByDaylight__TeachableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeachableData, InventorySlotData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeachableData, Status, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeachableData, UnknownData_36TV, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeachableData, UnlockLevel, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTeachableData, message, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTeachableData, 0x0110);
		}

		// struct FkillerAttributesData
		TEST_METHOD(ScriptStruct__DeadByDaylight__killerAttributesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FkillerAttributesData, speed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FkillerAttributesData, TerrorRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FkillerAttributesData, Height, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FkillerAttributesData, UnknownData_K78D, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FkillerAttributesData, 0x000C);
		}

		// struct FCharacterInfoData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, slotData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, description, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, TeachablePerksData, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, PowerData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, killerAttributesData, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, isKiller, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterInfoData, UnknownData_PLS8, 0x021D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterInfoData, 0x0220);
		}

		// struct FCharacterLevelData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLevelData, level, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLevelData, ExperienceToNextLevel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLevelData, isComplete, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLevelData, HasPerksBeenSelected, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLevelData, UnknownData_D5YV, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterLevelData, PerkSelection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterLevelData, 0x0020);
		}

		// struct FCharacterSlideData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterSlideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, Overview, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, Playstyle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, role, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, UnknownData_VLVG, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, ImageFilePath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, SurvivorPerkCategories, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, KillerPowerIconPath, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSlideData, UnknownData_XV3E, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSlideData, 0x0070);
		}

		// struct FSnappingData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SnappingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, DoSnapPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, DoSnapRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, DoSnapRoll, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, UseZCoord, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, SweepOnFinalSnap, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, UnknownData_ZXEN, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, TargetPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, TargetRotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSnappingData, duration, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSnappingData, 0x0024);
		}

		// struct FMaterialMapForClip : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__MaterialMapForClip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialMapForClip, SrcMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialMapForClip, DstMaterial, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialMapForClip, 0x0018);
		}

		// struct FCombinedPartyFriendData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CombinedPartyFriendData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombinedPartyFriendData, UnknownData_Y5UO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombinedPartyFriendData, 0x0120);
		}

		// struct FCombinedSpecialEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CombinedSpecialEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCombinedSpecialEventData, UnknownData_H8JW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCombinedSpecialEventData, 0x0100);
		}

		// struct FContextEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ContextEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, ContextGroupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, contextGroupUId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, UnknownData_BO5C, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, PreviousContextName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, CurrentContextName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, CurrentContextUid, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, UnknownData_GNG0, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, NextContextName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FContextEventData, timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FContextEventData, 0x0058);
		}

		// struct FCurrencyPurchaseData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CurrencyPurchaseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, UnknownData_B013, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, iconPath, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, currencyName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, CurrencyIcon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, CurrencyAmount, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, UnknownData_COYF, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, DisplayedPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, BonusPercentage, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyPurchaseData, UnknownData_ZJQX, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurrencyPurchaseData, 0x0058);
		}

		// struct FCustomerSupportClientLoginAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomerSupportClientLoginAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomerSupportClientLoginAnalytics, playerName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomerSupportClientLoginAnalytics, provider, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomerSupportClientLoginAnalytics, 0x0088);
		}

		// struct FCustomerSupportAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomerSupportAnalytics)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomerSupportAnalytics, 0x0068);
		}

		// struct FCustomizationCategoryData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomizationCategoryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, category, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, UnknownData_1IYT, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, iconPath, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, DisplayName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, role, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationCategoryData, UnknownData_F89T, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizationCategoryData, 0x0048);
		}

		// struct FCustomizationData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomizationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, AssociatedCharacter, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, AssociatedRole, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, rarity, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, UnknownData_MN67, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, UIData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationData, Availability, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizationData, 0x00C8);
		}

		// struct FMaterialReplacerData
		TEST_METHOD(ScriptStruct__DeadByDaylight__MaterialReplacerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialReplacerData, From, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialReplacerData, To, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialReplacerData, 0x0060);
		}

		// struct FMaterialReplacerArray
		TEST_METHOD(ScriptStruct__DeadByDaylight__MaterialReplacerArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialReplacerArray, MaterialsMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialReplacerArray, 0x0010);
		}

		// struct FConditionalMaterialReplacer
		TEST_METHOD(ScriptStruct__DeadByDaylight__ConditionalMaterialReplacer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalMaterialReplacer, ItemTag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalMaterialReplacer, UnknownData_3YGW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConditionalMaterialReplacer, ConditionalMaterials, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConditionalMaterialReplacer, 0x0060);
		}

		// struct FBPAttachementSocketData
		TEST_METHOD(ScriptStruct__DeadByDaylight__BPAttachementSocketData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPAttachementSocketData, AttachementBlueprint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPAttachementSocketData, SkeletalMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPAttachementSocketData, SocketName, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPAttachementSocketData, UnknownData_BR3K, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPAttachementSocketData, MaterialsMap, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPAttachementSocketData, ConditionalMaterialReplacer, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPAttachementSocketData, 0x00E0);
		}

		// struct FUnlockSaveStatCondition
		TEST_METHOD(ScriptStruct__DeadByDaylight__UnlockSaveStatCondition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockSaveStatCondition, statName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockSaveStatCondition, ValueRequired, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockSaveStatCondition, isCharacterSpecific, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUnlockSaveStatCondition, UnknownData_YMCY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUnlockSaveStatCondition, 0x0014);
		}

		// struct FCustomSoundFXData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomSoundFXData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomSoundFXData, AudioCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomSoundFXData, UnknownData_HS2T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomSoundFXData, SwitchState, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomSoundFXData, 0x0018);
		}

		// struct FCustomAnimData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomAnimData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAnimData, MenuAnimationBlueprint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomAnimData, InGameAnimationBlueprint, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomAnimData, 0x0060);
		}

		// struct FCustomizationItemData : public FCustomizationData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CustomizationItemData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, category, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, UnknownData_UVFH, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, ItemMesh, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, AnimClass, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, ItemBlueprint, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, MaterialsMap, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, ConditionalMaterialReplacer, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, SkeletalComponentTags, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, CollectionName, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, CollectionDescription, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, PrestigeUlockLevel, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, UnknownData_U7FM, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, PrestigeUnlockDate, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, eventId, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, CharmCategory, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, UnknownData_DYAC, 0x0235);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, SocketAttachements, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, UnlockingConditions, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, IsInStore, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, IsInNonViolentBuild, 0x0259);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, IsAvailableInAtlantaBuild, 0x025A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, UnknownData_0FU0, 0x025B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, PlatformExclusiveFlag, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, CustomSFXs, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationItemData, AnimationData, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizationItemData, 0x02D0);
		}

		// struct FDailyRitualAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DeadByDaylight__DailyRitualAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, Status, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, RitualId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, HoursElapsed, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, NbGameElapsed, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, progress, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, threshold, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, PendingRituals, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualAnalytics, SpecificCharacter, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDailyRitualAnalytics, 0x00A0);
		}

		// struct FAIRoll
		TEST_METHOD(ScriptStruct__DeadByDaylight__AIRoll)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRoll, Random, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRoll, OnFailCooldown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRoll, UnknownData_YYXR, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRoll, 0x0024);
		}

		// struct FAIDifficultyTunableRowData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AIDifficultyTunableRowData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDifficultyTunableRowData, Easy, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDifficultyTunableRowData, Medium, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDifficultyTunableRowData, Hard, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDifficultyTunableRowData, UnknownData_D9PS, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDifficultyTunableRowData, 0x0018);
		}

		// struct FWebPath
		TEST_METHOD(ScriptStruct__DeadByDaylight__WebPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWebPath, UnknownData_Z6E0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebPath, 0x0028);
		}

		// struct FWebNode
		TEST_METHOD(ScriptStruct__DeadByDaylight__WebNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWebNode, UnknownData_6JYG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebNode, 0x0028);
		}

		// struct FPlayerLoadoutData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerLoadoutData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, UnknownData_BD7F, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, ItemAddOns, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, CamperPerks, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, CamperPerkLevels, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, CamperFavor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, Power, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, PowerAddOns, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, SlasherPerks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, SlasherPerkLevels, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, SlasherFavor, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerLoadoutData, UnknownData_KOPW, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerLoadoutData, 0x0098);
		}

		// struct FCharacterSavedInventoryData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterSavedInventoryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedInventoryData, version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedInventoryData, name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSavedInventoryData, 0x0010);
		}

		// struct FSavedCharacterLevelData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedCharacterLevelData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelData, level, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelData, HasPerksBeenSelected, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelData, UnknownData_WE19, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedCharacterLevelData, PerkSelection, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedCharacterLevelData, 0x0018);
		}

		// struct FSavedStatsData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SavedStatsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedStatsData, version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedStatsData, name, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSavedStatsData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSavedStatsData, 0x0014);
		}

		// struct FCharacterSavedProfileData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterSavedProfileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, BloodwebLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, TimesConfronted, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, PrestigeEarnedDates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, BloodWebData, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, CharacterLoadoutData, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, CurrentCustomization, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, CurrentCharmCustomization, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, UniquePerksAdded, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, inventoryData, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, CharacterLevelData, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, StatProgression, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, prestigeLevel, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSavedProfileData, CharacterExperience, 0x0154);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSavedProfileData, 0x0158);
		}

		// struct FDBDCustomizationToolData
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDCustomizationToolData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, Head, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, Torso, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, Leg, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, Bodies, 0x0870);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, CharacterName, 0x0B40);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, RoleName, 0x0B50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, BaseSkeleton, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, MaskTexture, 0x0B68);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, AnimationToPlay, 0x0B70);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, StrHeadDLC, 0x0B78);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, StrTorsoDLC, 0x0B88);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, StrLegDLC, 0x0B98);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCustomizationToolData, StrBodiesDLC, 0x0BA8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDCustomizationToolData, 0x0BB8);
		}

		// struct FDailyRitualInstance
		TEST_METHOD(ScriptStruct__DeadByDaylight__DailyRitualInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, RitualKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, DifficultyTier, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, TrackedEvents, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, TrackedGameEvents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, CharacterIDs, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, Roles, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, progress, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, threshold, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, tolerance, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, DisplayThreshold, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, ExpReward, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, active, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, IsNew, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, UnknownData_A2UQ, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, DateAssigned, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, NbGameElapsed, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualInstance, UnknownData_MEAF, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDailyRitualInstance, 0x0078);
		}

		// struct FDailyRitualContainer
		TEST_METHOD(ScriptStruct__DeadByDaylight__DailyRitualContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualContainer, LastRitualReceivedDate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualContainer, LastRitualPopupDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualContainer, LastRitualDismissedDate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualContainer, Rituals, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDailyRitualContainer, 0x0028);
		}

		// struct FDailyRitualPossibleCharacters
		TEST_METHOD(ScriptStruct__DeadByDaylight__DailyRitualPossibleCharacters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualPossibleCharacters, CharacterIDs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualPossibleCharacters, Roles, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualPossibleCharacters, SelectOneCharacterFromRoles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDailyRitualPossibleCharacters, 0x0030);
		}

		// struct FDailyRitualLevel
		TEST_METHOD(ScriptStruct__DeadByDaylight__DailyRitualLevel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualLevel, threshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualLevel, tolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualLevel, DisplayTotal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualLevel, BloodpointsReward, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDailyRitualLevel, 0x0010);
		}

		// struct FDailyRitualDefinition : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__DailyRitualDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, description, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, iconPath, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, PossibleCharacters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, TrackedEvents, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, TrackedGameEvents, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, DifficultyLevels, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDailyRitualDefinition, Evaluator, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDailyRitualDefinition, 0x00D8);
		}

		// struct FritualEvent
		TEST_METHOD(ScriptStruct__DeadByDaylight__ritualEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, ScoreType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, UnknownData_T2GU, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, GameEventType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, Amount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, UnknownData_I9RU, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, InstigatorPlayerState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FritualEvent, target, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FritualEvent, 0x0030);
		}

		// struct FAttackTypeDetails : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__AttackTypeDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTypeDetails, AttackType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTypeDetails, IsBasicAttack, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTypeDetails, UnknownData_34YL, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTypeDetails, AssociatedCharacter, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackTypeDetails, description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackTypeDetails, 0x0028);
		}

		// struct FLevelUpDetails : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__LevelUpDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, level, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, prestige, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, itemId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, itemType, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, UnknownData_8DRU, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, AssociatedCharacter, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelUpDetails, UnknownData_S4UG, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelUpDetails, 0x0058);
		}

		// struct FEACClientInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__EACClientInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEACClientInfo, UnknownData_E0PM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEACClientInfo, 0x0028);
		}

		// struct FEmblemProgressionDescriptionByQuality
		TEST_METHOD(ScriptStruct__DeadByDaylight__EmblemProgressionDescriptionByQuality)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionDescriptionByQuality, EmblemQuality, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionDescriptionByQuality, UnknownData_R6WO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionDescriptionByQuality, description, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmblemProgressionDescriptionByQuality, 0x0020);
		}

		// struct FEmblemProgressionID
		TEST_METHOD(ScriptStruct__DeadByDaylight__EmblemProgressionID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionID, EmblemProgressionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionID, UnknownData_61N2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionID, DefaultDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionID, DescriptionsByQuality, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmblemProgressionID, 0x0030);
		}

		// struct FDBDEmblemDefinition : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDEmblemDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, UnknownData_QMHT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, name, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, description, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, Roles, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, CustomEmblem, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, IconFilePaths, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, EmblemEvaluation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, enabled, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, UnknownData_LINT, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDEmblemDefinition, EmblemProgressionData, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDEmblemDefinition, 0x00B0);
		}

		// struct FSharedAuthenticationTokenInformation
		TEST_METHOD(ScriptStruct__DeadByDaylight__SharedAuthenticationTokenInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharedAuthenticationTokenInformation, LoginProvider, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSharedAuthenticationTokenInformation, AuthToken, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSharedAuthenticationTokenInformation, 0x0020);
		}

		// struct FKeyDisplayInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__KeyDisplayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyDisplayInfo, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyDisplayInfo, KeyDisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyDisplayInfo, PromptType, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyDisplayInfo, 0x0040);
		}

		// struct FLegacyPlayerSavedProfileDataShared
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacyPlayerSavedProfileDataShared)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, UnknownData_Q0D0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, playerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, SelectedCamperIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, SelectedSlasherIndex, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, SelectedCharacterCustomization, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, SlasherSkulls, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, CamperSkulls, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, CamperStreak, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataShared, UnknownData_S3E9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacyPlayerSavedProfileDataShared, 0x0040);
		}

		// struct FLegacyCharacterSavedInventoryData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacyCharacterSavedInventoryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedInventoryData, version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedInventoryData, name, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedInventoryData, TimeObtainedSinceEpoch, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacyCharacterSavedInventoryData, 0x0018);
		}

		// struct FLegacyCharacterSavedProfileData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacyCharacterSavedProfileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, versionNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, bloodPoints, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, BloodwebLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, prestigeLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, TimesConfronted, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, UnknownData_Q50T, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, PrestigeDates, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, BloodWebData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, CharacterLoadoutData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, Inventory, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, inventoryData, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyCharacterSavedProfileData, CurrentCustomization, 0x0120);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacyCharacterSavedProfileData, 0x0130);
		}

		// struct FLegacySavedDailyRitualContainer
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedDailyRitualContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualContainer, LastRitualReceivedDate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedDailyRitualContainer, Rituals, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedDailyRitualContainer, 0x0018);
		}

		// struct FLegacySavedFearMarketOfferingInstance
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacySavedFearMarketOfferingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketOfferingInstance, ObjectsForSale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketOfferingInstance, startTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacySavedFearMarketOfferingInstance, EndTime, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacySavedFearMarketOfferingInstance, 0x0020);
		}

		// struct FLegacyPlayerSavedProfileDataLocal
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacyPlayerSavedProfileDataLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, Tokens, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, UnknownData_XVFJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, Offerings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, FirstTimePlaying, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, HasBeenGivenKillerTutorialEndReward, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, HasBeenGivenSurvivorTutorialEndReward, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, UnknownData_OWYE, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, Wins, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, Losses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, UnknownData_NS64, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, characterData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, CurrentSeasonTicks, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, DailyRituals, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, FearMarket, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, LastConnectedLoadout, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, LastConnectedCharacterIndex, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, UnknownData_CHWM, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, DisconnectPenaltyTime, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, _bloodpoints, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, _bonusBloodpoints, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, _unclampedBloodpoints, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, _fearTokens, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, _ongoingGameTime, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, _fearTokensMigrated, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileDataLocal, UnknownData_2GP2, 0x0179);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacyPlayerSavedProfileDataLocal, 0x0180);
		}

		// struct FLegacyPlayerSavedProfileData : public FSaveDataBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__LegacyPlayerSavedProfileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileData, PlayerUID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileData, SharedData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegacyPlayerSavedProfileData, LocalData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegacyPlayerSavedProfileData, 0x01E0);
		}

		// struct FOutlineConfiguration
		TEST_METHOD(ScriptStruct__DeadByDaylight__OutlineConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutlineConfiguration, TranslucencyMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutlineConfiguration, LocallyControlledTranslucencyMaterials, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutlineConfiguration, 0x0020);
		}

		// struct FOutlineColourConfiguration
		TEST_METHOD(ScriptStruct__DeadByDaylight__OutlineColourConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOutlineColourConfiguration, ColourValue, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOutlineColourConfiguration, 0x0010);
		}

		// struct FDBDOutlineRenderStrategySelector
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDOutlineRenderStrategySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDOutlineRenderStrategySelector, _actorForStrategy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDOutlineRenderStrategySelector, UnknownData_AAUS, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDOutlineRenderStrategySelector, 0x0010);
		}

		// struct FPlayerSavedProfileDataShared
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerSavedProfileDataShared)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, playerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, SelectedCamperIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, SelectedSlasherIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, SelectedCharacterCustomization, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, SelectedCharacterCharms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, CamperStreak, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, UnknownData_D3DG, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, platformId, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, _slasherPips, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataShared, _camperPips, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerSavedProfileDataShared, 0x0058);
		}

		// struct FFearMarketItemInstance
		TEST_METHOD(ScriptStruct__DeadByDaylight__FearMarketItemInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketItemInstance, itemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketItemInstance, Cost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketItemInstance, BloodpointConversion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketItemInstance, Purchased, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketItemInstance, UnknownData_NBQX, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFearMarketItemInstance, 0x0018);
		}

		// struct FFearMarketOfferingInstance
		TEST_METHOD(ScriptStruct__DeadByDaylight__FearMarketOfferingInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketOfferingInstance, ObjectsForSale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketOfferingInstance, startTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFearMarketOfferingInstance, EndTime, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFearMarketOfferingInstance, 0x0020);
		}

		// struct FPlayerSavedProfileCumulativeData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerSavedProfileCumulativeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, FirstTimePlaying, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, UnknownData_PX77, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativeMatches, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativeMatchesAsSurvivor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativeMatchesAsKiller, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativeMatchesAsSurvivorNoFriends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativeMatchesAsKillerNoFriends, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, LastMatchTimestamp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, LastSessionTimestamp, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativeSessions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, UnknownData_VO53, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileCumulativeData, CumulativePlaytime, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerSavedProfileCumulativeData, 0x0038);
		}

		// struct FSpecialEventSavedData
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialEventSavedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventSavedData, SeenCinematics, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventSavedData, 0x0010);
		}

		// struct FPlayerSavedProfileDataLocal
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerSavedProfileDataLocal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, Tokens, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, UnknownData_PNXD, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, Offerings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, PageVisited, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, ChatVisible, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, OnBoardingCompleted, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, ConsecutiveMatchStreak, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, Wins, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, Losses, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, UnknownData_PTIE, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, CurrentSeasonTicks, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, DailyRituals, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, FearMarket, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, LastConnectedLoadout, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, LastConnectedCharacterIndex, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, UnknownData_SEER, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, DisconnectPenaltyTime, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, LastMatchEndTime, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, LastMatchStartTime, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, LastKillerMatchEndTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, LastSurvivorMatchEndTime, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, BloodStoreKillers, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, BloodStoreSurvivors, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, CrossplayAllowed, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, AutoDeclineFriendInvites, 0x02B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, UnknownData_E5LC, 0x02B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _ongoingGameTime, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _cumulativeData, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _savedPlayerStats, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _hasBeenGivenKillerTutorialEndReward, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _hasBeenGivenSurvivorTutorialEndReward, 0x0309);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, UnknownData_SNRD, 0x030A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _characterData, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileDataLocal, _specialEvent, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerSavedProfileDataLocal, 0x03B0);
		}

		// struct FPlayerSavedProfileData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerSavedProfileData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileData, PlayerUID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileData, SharedData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileData, LocalData, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerSavedProfileData, ConsoleUserSettings, 0x0418);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerSavedProfileData, 0x0488);
		}

		// struct FPlayerPersistentData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerPersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, GameRole, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, UnknownData_26NO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, StartingLoadout, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, CurrentLoadout, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, UnknownData_NU43, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, CachedAvailableRitual, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, SavedData, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, PlayerPlatform, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, UnknownData_71TJ, 0x06D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, PlayerProvider, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, UnknownData_88WA, 0x06D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, PreviousSlasherPips, 0x06D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, PreviousCamperPips, 0x06DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, _playerId, 0x06E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, UnknownData_0B6C, 0x06E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, _contentVersion, 0x06F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerPersistentData, _startSessionTime, 0x0708);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerPersistentData, 0x0710);
		}

		// struct FSessionInfos
		TEST_METHOD(ScriptStruct__DeadByDaylight__SessionInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionInfos, UnknownData_X1O6, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionInfos, 0x0048);
		}

		// struct FLookInputScalingData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LookInputScalingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLookInputScalingData, UnknownData_OP2J, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLookInputScalingData, 0x0080);
		}

		// struct FLookInputAxisScalingData
		TEST_METHOD(ScriptStruct__DeadByDaylight__LookInputAxisScalingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLookInputAxisScalingData, ScalingTimer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLookInputAxisScalingData, UnknownData_GDE6, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLookInputAxisScalingData, 0x0040);
		}

		// struct FCharacterStateData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStateData, _pips, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStateData, _powerId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterStateData, _addonIds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterStateData, 0x0020);
		}

		// struct FPlayerStateData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, characterLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, EquipedFavorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, EquipedPerkIds, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, EquipedPerkLevels, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, IsLeavingMatch, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, _playerGameState, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, _isEscapeHatch, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, UnknownData_HD6W, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStateData, _prestigeLevel, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerStateData, 0x0038);
		}

		// struct FplayerDataSync
		TEST_METHOD(ScriptStruct__DeadByDaylight__playerDataSync)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerDataSync, playerData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerDataSync, CustomizationMesh, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerDataSync, CustomizationCharms, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerDataSync, EquipedItemId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerDataSync, UnknownData_0B6D, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FplayerDataSync, EquipedItemAddonIds, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FplayerDataSync, 0x0078);
		}

		// struct FPlayerHUDInfos : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DeadByDaylight__PlayerHUDInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerHUDInfos, role, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerHUDInfos, UnknownData_3ODH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerHUDInfos, HUDClass, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerHUDInfos, TouchInterfaceName, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerHUDInfos, 0x0060);
		}

		// struct FAttackSubstateRequestResult
		TEST_METHOD(ScriptStruct__DeadByDaylight__AttackSubstateRequestResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackSubstateRequestResult, isValid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackSubstateRequestResult, RequestedNextSubstate, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttackSubstateRequestResult, ServerNextSubstate, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttackSubstateRequestResult, 0x0003);
		}

		// struct FRankResetStartingPips
		TEST_METHOD(ScriptStruct__DeadByDaylight__RankResetStartingPips)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankResetStartingPips, NewPipAmount, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankResetStartingPips, 0x0004);
		}

		// struct FRankGroupDefinition
		TEST_METHOD(ScriptStruct__DeadByDaylight__RankGroupDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankGroupDefinition, RankThreshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankGroupDefinition, UnknownData_2TTR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRankGroupDefinition, PipThresholds, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRankGroupDefinition, 0x0018);
		}

		// struct FInteractionArray
		TEST_METHOD(ScriptStruct__DeadByDaylight__InteractionArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionArray, _interactions, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionArray, 0x0010);
		}

		// struct FSecondaryInteractionProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__SecondaryInteractionProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSecondaryInteractionProperties, SecondaryInteractionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSecondaryInteractionProperties, SecondaryInteractionInputType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSecondaryInteractionProperties, UnknownData_54B8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSecondaryInteractionProperties, SecondaryInteractionDescriptionText, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSecondaryInteractionProperties, 0x0030);
		}

		// struct FArmIKSensorDatum
		TEST_METHOD(ScriptStruct__DeadByDaylight__ArmIKSensorDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArmIKSensorDatum, ShoulderBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArmIKSensorDatum, UnknownData_9OT7, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArmIKSensorDatum, 0x0030);
		}

		// struct FDBDAttackTargetTracker
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBDAttackTargetTracker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, _useTargetTracking, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, UnknownData_3EAG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, _targetSnapDistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, _ownerEyeSocketName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, _targetBoneName, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, _trackedTarget, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDAttackTargetTracker, _owningPlayer, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDAttackTargetTracker, 0x0078);
		}

		// struct FprogressionPoints
		TEST_METHOD(ScriptStruct__DeadByDaylight__progressionPoints)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FprogressionPoints, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FprogressionPoints, UnknownData_HE8A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FprogressionPoints, points, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FprogressionPoints, 0x0008);
		}

		// struct FClippedActor
		TEST_METHOD(ScriptStruct__DeadByDaylight__ClippedActor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClippedActor, DisplayComponents, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClippedActor, CollidingPrimitives, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClippedActor, 0x0060);
		}

		// struct FActorSpawnerProperties
		TEST_METHOD(ScriptStruct__DeadByDaylight__ActorSpawnerProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSpawnerProperties, SceneElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSpawnerProperties, Weight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSpawnerProperties, UnknownData_CSGA, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSpawnerProperties, 0x0038);
		}

		// struct FSpawnerElement
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpawnerElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnerElement, ObjectsToBeSpawned, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnerElement, 0x0010);
		}

		// struct FActorVariationElements
		TEST_METHOD(ScriptStruct__DeadByDaylight__ActorVariationElements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorVariationElements, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorVariationElements, UnknownData_NCSI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorVariationElements, Element, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorVariationElements, 0x0038);
		}

		// struct FAITerrorEvent
		TEST_METHOD(ScriptStruct__DeadByDaylight__AITerrorEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITerrorEvent, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITerrorEvent, UnknownData_4MAI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITerrorEvent, instigator, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITerrorEvent, terrorEmitter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITerrorEvent, TeamIdentifier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITerrorEvent, UnknownData_BINW, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITerrorEvent, 0x0028);
		}

		// struct FAITrailEvent
		TEST_METHOD(ScriptStruct__DeadByDaylight__AITrailEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, startTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, EndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, UnknownData_LMQT, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, ignoreOnPerkTag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, TeamIdentifier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITrailEvent, UnknownData_3NC9, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITrailEvent, 0x0030);
		}

		// struct FAssetLibraryLoader
		TEST_METHOD(ScriptStruct__DeadByDaylight__AssetLibraryLoader)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLibraryLoader, AssetLibrary, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetLibraryLoader, UnknownData_59QP, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetLibraryLoader, 0x0028);
		}

		// struct FAtlCookedMapDescription
		TEST_METHOD(ScriptStruct__DeadByDaylight__AtlCookedMapDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlCookedMapDescription, themeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlCookedMapDescription, UnknownData_UE0J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlCookedMapDescription, MapAsset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlCookedMapDescription, 0x0040);
		}

		// struct FBlockableReplicatedDatum
		TEST_METHOD(ScriptStruct__DeadByDaylight__BlockableReplicatedDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockableReplicatedDatum, Sources, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlockableReplicatedDatum, BlockedPlayers, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlockableReplicatedDatum, 0x0020);
		}

		// struct FBorderElements
		TEST_METHOD(ScriptStruct__DeadByDaylight__BorderElements)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBorderElements, direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBorderElements, UnknownData_KFL5, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBorderElements, Elements, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBorderElements, 0x0018);
		}

		// struct FCameraAttachment
		TEST_METHOD(ScriptStruct__DeadByDaylight__CameraAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraAttachment, Parent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraAttachment, UnknownData_TG94, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraAttachment, 0x0018);
		}

		// struct FSurvivorSleepiness
		TEST_METHOD(ScriptStruct__DeadByDaylight__SurvivorSleepiness)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorSleepiness, _sleepiness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorSleepiness, _sleepThreshold, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivorSleepiness, 0x0008);
		}

		// struct FCharacterToolData
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharacterToolData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, role, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, UnknownData_TDFB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, CharacterId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, outfitId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, charmId, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, SurvivorHead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, SurvivorTorso, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, SurvivorLegs, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, KillerHead, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, KillerBody, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, KillerWeapon, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterToolData, AnimationToPlay, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterToolData, 0x0070);
		}

		// struct FChargeData
		TEST_METHOD(ScriptStruct__DeadByDaylight__ChargeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeData, instigator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeData, chargeAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeData, bypassSkillCheckFail, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChargeData, UnknownData_JEYD, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChargeData, 0x0010);
		}

		// struct FCharmAttacherAnimationTweak
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharmAttacherAnimationTweak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmAttacherAnimationTweak, AttachPointTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmAttacherAnimationTweak, AttachPointRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmAttacherAnimationTweak, ConstraintType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmAttacherAnimationTweak, MagicTweakingFloat, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharmAttacherAnimationTweak, 0x0020);
		}

		// struct FCharmSlot
		TEST_METHOD(ScriptStruct__DeadByDaylight__CharmSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmSlot, slotIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmSlot, UnknownData_BZBJ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmSlot, CharmAttacherClass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmSlot, DefaultAnimationTweak, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmSlot, AnimationTweakByTag, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmSlot, CharmAttacherSpawned, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharmSlot, 0x00B0);
		}

		// struct FchaseUpdateInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__chaseUpdateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FchaseUpdateInfo, chaseTimer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FchaseUpdateInfo, SurvivorTravelDistance, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FchaseUpdateInfo, KillerTravelDistance, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FchaseUpdateInfo, 0x0040);
		}

		// struct Fcinematic
		TEST_METHOD(ScriptStruct__DeadByDaylight__cinematic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcinematic, source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcinematic, SourceSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcinematic, SourceHasAudio, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcinematic, UnknownData_GDSC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fcinematic, 0x0058);
		}

		// struct FMaterialOriginalState
		TEST_METHOD(ScriptStruct__DeadByDaylight__MaterialOriginalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOriginalState, MeshWithChangedMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialOriginalState, OriginalMaterial, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialOriginalState, 0x0018);
		}

		// struct FSpecialBehaviourObjectsInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpecialBehaviourObjectsInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourObjectsInfo, specialBehaviourId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourObjectsInfo, AmountRequired, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialBehaviourObjectsInfo, TimesInteractedWith, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialBehaviourObjectsInfo, 0x0014);
		}

		// struct FMapMeshToAkAudioEvent
		TEST_METHOD(ScriptStruct__DeadByDaylight__MapMeshToAkAudioEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMeshToAkAudioEvent, mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMeshToAkAudioEvent, soundEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMeshToAkAudioEvent, MinDelayBetweenEvents, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapMeshToAkAudioEvent, MinDelayBetweenObject, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapMeshToAkAudioEvent, 0x0040);
		}

		// struct FMapSoundsToAvoid
		TEST_METHOD(ScriptStruct__DeadByDaylight__MapSoundsToAvoid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapSoundsToAvoid, component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapSoundsToAvoid, UnknownData_OB60, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapSoundsToAvoid, 0x0010);
		}

		// struct FDBD_SoundSpawnerData
		TEST_METHOD(ScriptStruct__DeadByDaylight__DBD_SoundSpawnerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBD_SoundSpawnerData, TriggerObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBD_SoundSpawnerData, TriggerVisualForCamper, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBD_SoundSpawnerData, TriggerVisualForSlasher, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBD_SoundSpawnerData, UnknownData_YCMX, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBD_SoundSpawnerData, ActorToSpawnVisual, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBD_SoundSpawnerData, 0x0028);
		}

		// struct FAuthenticationInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__AuthenticationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationInfo, UnknownData_SCBF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationInfo, 0x0018);
		}

		// struct FPerMeshInstancingData
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerMeshInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerMeshInstancingData, hashToInstancedMeshes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerMeshInstancingData, UnknownData_NT77, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerMeshInstancingData, 0x00A0);
		}

		// struct FSpawnInfo
		TEST_METHOD(ScriptStruct__DeadByDaylight__SpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnInfo, ActorClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnInfo, UnknownData_IX17, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnInfo, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnInfo, 0x0040);
		}

		// struct FAffectedMaterialAndVariant
		TEST_METHOD(ScriptStruct__DeadByDaylight__AffectedMaterialAndVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffectedMaterialAndVariant, AffectedMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAffectedMaterialAndVariant, MaterialVariant, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAffectedMaterialAndVariant, 0x0010);
		}

		// struct FDebugLoadoutAddon
		TEST_METHOD(ScriptStruct__DeadByDaylight__DebugLoadoutAddon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugLoadoutAddon, addonID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugLoadoutAddon, 0x0030);
		}

		// struct FDebugLoadoutPerk
		TEST_METHOD(ScriptStruct__DeadByDaylight__DebugLoadoutPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugLoadoutPerk, perkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugLoadoutPerk, perkLevel, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugLoadoutPerk, UnknownData_BW03, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugLoadoutPerk, 0x0038);
		}

		// struct FCamperLoadout
		TEST_METHOD(ScriptStruct__DeadByDaylight__CamperLoadout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, Camper, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, Slot0_CharmID, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, Slot1_CharmID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, Slot2_CharmID, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, UnknownData_U6CT, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, itemId, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, AddonIDs, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCamperLoadout, perks, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCamperLoadout, 0x00E0);
		}

		// struct FSlasherLoadout
		TEST_METHOD(ScriptStruct__DeadByDaylight__SlasherLoadout)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlasherLoadout, slasher, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlasherLoadout, UnknownData_I64Z, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlasherLoadout, PowerAddonIDs, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlasherLoadout, perks, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlasherLoadout, 0x0080);
		}

		// struct FPerkLevelDefinition
		TEST_METHOD(ScriptStruct__DeadByDaylight__PerkLevelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerkLevelDefinition, CountRequired, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerkLevelDefinition, 0x0004);
		}

		// struct FTypeFoliageToAutomateDensity
		TEST_METHOD(ScriptStruct__DeadByDaylight__TypeFoliageToAutomateDensity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, SourceMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, ReplacementMesh, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, bGenerateOverlaps, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, bReceiveDecals, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, bCanCharacterStepOn, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, DetailMode, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeFoliageToAutomateDensity, MinimumFoliageRadius, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeFoliageToAutomateDensity, 0x0068);
		}

		// struct FGamePersistentData
		TEST_METHOD(ScriptStruct__DeadByDaylight__GamePersistentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePersistentData, playerCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePersistentData, SpectatorCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePersistentData, gamePresetData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGamePersistentData, UnknownData_WF12, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGamePersistentData, 0x00F0);
		}

		// struct FCloudInventoryItem
		TEST_METHOD(ScriptStruct__DeadByDaylight__CloudInventoryItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudInventoryItem, DefinitionId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudInventoryItem, UnknownData_8IHT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCloudInventoryItem, InstanceId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCloudInventoryItem, 0x0010);
		}

		// struct FgameEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__gameEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, instigator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, target, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, customValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, UnknownData_PNIS, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, customObjectParameter, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, customIntValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameEventData, UnknownData_KN7Z, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FgameEventData, 0x0028);
		}

		// struct FscoreEventData
		TEST_METHOD(ScriptStruct__DeadByDaylight__scoreEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreEventData, target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreEventData, percentToAward, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreEventData, UnknownData_80EH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FscoreEventData, customObjectParameter, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FscoreEventData, 0x0018);
		}

		// struct FAnimData
		TEST_METHOD(ScriptStruct__DeadByDaylight__AnimData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimData, Stance, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimData, 0x0001);
		}

		// struct FAutoCompleteCommand
		TEST_METHOD(ScriptStruct__EngineSettings__AutoCompleteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, Desc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteCommand, UnknownData_CHLM, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteCommand, 0x0028);
		}

		// struct FPathPak
		TEST_METHOD(ScriptStruct__EngineSettings__PathPak)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPak, path, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPak, PakId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPak, BringDependencies, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPathPak, UnknownData_BMHJ, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPathPak, 0x0018);
		}

		// struct FGameModeName
		TEST_METHOD(ScriptStruct__EngineSettings__GameModeName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameModeName, GameMode, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameModeName, 0x0030);
		}

		// struct FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFEntry, values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFEntry, 0x0010);
		}

		// struct FRBFTarget : public FRBFEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, scaleFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, bApplyCustomCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_R9DV, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, CustomCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, DistanceMethod, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, FunctionType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFTarget, UnknownData_2E7E, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFTarget, 0x00A0);
		}

		// struct FAngularRangeLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AngularRangeLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, LimitMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularRangeLimit, Bone, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularRangeLimit, 0x002C);
		}

		// struct FBlendBoneByChannelEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BlendBoneByChannelEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, SourceBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, TargetBone, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendTranslation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendRotation, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, bBlendScale, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendBoneByChannelEntry, UnknownData_V1O4, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendBoneByChannelEntry, 0x002C);
		}

		// struct FAnimNode_BlendBoneByChannel : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendBoneByChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, BoneDefinitions, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_RIDS, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_9FCC, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, AlphaScaleBias, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, TransformsSpace, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendBoneByChannel, UnknownData_BP9W, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendBoneByChannel, 0x0068);
		}

		// struct FAnimNode_BlendListBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, TransitionType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendType, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, bResetChildOnActivation, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_X9SK, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, CustomBlendCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, BlendProfile, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListBase, UnknownData_FMS5, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListBase, 0x0098);
		}

		// struct FAnimNode_BlendListByBool : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, bActiveValue, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByBool, UnknownData_N8P8, 0x0099);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByBool, 0x00A0);
		}

		// struct FAnimNode_BlendListByEnum : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByEnum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, EnumToPoseIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, ActiveEnumValue, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByEnum, UnknownData_5X55, 0x00A9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByEnum, 0x00B0);
		}

		// struct FAnimNode_BlendListByInt : public FAnimNode_BlendListBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendListByInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, ActiveChildIndex, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendListByInt, UnknownData_JWZO, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendListByInt, 0x00A0);
		}

		// struct FAnimNode_BlendSpacePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpacePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, x, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, y, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, z, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, playRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bLoop, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, bResetPlayTimeWhenBlendSpaceChanges, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_L2NV, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, StartPosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, Blendspace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, UnknownData_2M0O, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpacePlayer, PreviousBlendSpace, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpacePlayer, 0x00E0);
		}

		// struct FAnimNode_BlendSpaceEvaluator : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BlendSpaceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, NormalizedTime, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BlendSpaceEvaluator, UnknownData_7Q4M, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BlendSpaceEvaluator, 0x00E8);
		}

		// struct FAnimNode_SkeletalControlBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SkeletalControlBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ComponentPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, LODThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, ActualAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaInputType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, bAlphaBoolEnabled, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_HNG4, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBias, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaBoolBlend, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaCurveName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, AlphaScaleBiasClamp, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SkeletalControlBase, UnknownData_XIZ9, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SkeletalControlBase, 0x00D0);
		}

		// struct FAnimNode_BoneDrivenController : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_BoneDrivenController)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_WD34, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DrivingCurve, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, multiplier, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMin, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RangeMax, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMin, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, RemappedMax, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, parameterName, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, TargetBone, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, DestinationMode, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, ModificationMode, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, SourceComponent, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_BoneDrivenController, UnknownData_HBFW, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_BoneDrivenController, 0x0130);
		}

		// struct FSocketReference
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SocketReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_X11Y, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketReference, UnknownData_DPQT, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketReference, 0x0050);
		}

		// struct FBoneSocketTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__BoneSocketTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, bUseSocket, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_7N3I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, BoneReference, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, UnknownData_YKCZ, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneSocketTarget, SocketReference, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneSocketTarget, 0x0070);
		}

		// struct FAnimNode_CCDIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CCDIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocation, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorLocationSpace, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_R9WY, 0x00DD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, EffectorTarget, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, TipBone, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, rootBone, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, Precision, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, MaxIterations, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bStartFromTail, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, bEnableRotationLimit, 0x0181);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_Y253, 0x0182);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, RotationLimitPerJoints, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CCDIK, UnknownData_6U7H, 0x0198);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CCDIK, 0x01A0);
		}

		// struct FConstraint
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TargetBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, OffsetOption, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, TransformType, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, PerAxis, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraint, UnknownData_IVWA, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraint, 0x0020);
		}

		// struct FAnimNode_Constraint : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Constraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, BoneToModify, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_HL5I, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintSetup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, ConstraintWeights, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Constraint, UnknownData_SOKZ, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Constraint, 0x0118);
		}

		// struct FAnimNode_CopyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, SourceBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, TargetBone, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyTranslation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyRotation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, bCopyScale, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, ControlSpace, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBone, UnknownData_MC0U, 0x00FC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBone, 0x0100);
		}

		// struct FAnimNode_CopyBoneDelta : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyBoneDelta)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, SourceBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TargetBone, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyTranslation, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyRotation, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, bCopyScale, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, CopyMode, 0x00FB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, TranslationMultiplier, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, RotationMultiplier, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyBoneDelta, ScaleMultiplier, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyBoneDelta, 0x0108);
		}

		// struct FAnimNode_CopyPoseFromMesh : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CopyPoseFromMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, SourceMeshComponent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bUseAttachedParent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, bCopyCurves, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CopyPoseFromMesh, UnknownData_IO60, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CopyPoseFromMesh, 0x0140);
		}

		// struct FAnimNode_CurveSource : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_CurveSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, SourceBinding, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, Alpha, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CurveSource, CurveSource, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CurveSource, 0x0040);
		}

		// struct FAnimNode_Fabrik : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Fabrik)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransform, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, TipBone, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, rootBone, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, Precision, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, MaxIterations, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorTransformSpace, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, EffectorRotationSource, 0x01A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Fabrik, UnknownData_UKFE, 0x01A2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Fabrik, 0x01B0);
		}

		// struct FAnimNode_HandIKRetargeting : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_HandIKRetargeting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandFK, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandFK, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, RightHandIK, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, LeftHandIK, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, IKBonesToMove, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, HandFKWeight, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_HandIKRetargeting, UnknownData_PWKF, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_HandIKRetargeting, 0x0138);
		}

		// struct FAnimNode_LayeredBoneBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LayeredBoneBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendPoses, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LayerSetup, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, BlendWeights, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceRotationBlend, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bMeshSpaceScaleBlend, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, CurveBlendOption, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, bBlendRootMotionBasedOnRootBone, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_23MW, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, LODThreshold, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_T43I, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, PerBoneBlendWeights, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, SkeletonGuid, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, VirtualBoneGuid, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LayeredBoneBlend, UnknownData_VUWZ, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LayeredBoneBlend, 0x00C0);
		}

		// struct FAnimLegIKDefinition
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, IKFootBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FKFootBone, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, NumBonesInLimb, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, MinRotationAngle, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, FootBoneForwardAxis, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, HingeRotationAxis, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableRotationLimit, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKDefinition, bEnableKneeTwistCorrection, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKDefinition, 0x0034);
		}

		// struct FAnimNode_LegIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LegIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, ReachPrecision, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, MaxIterations, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, LegsDefinition, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LegIK, UnknownData_XWHS, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LegIK, 0x0100);
		}

		// struct FAnimLegIKData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimLegIKData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLegIKData, UnknownData_ONMH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLegIKData, 0x00A0);
		}

		// struct FIKChain
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChain, UnknownData_5O58, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChain, 0x0038);
		}

		// struct FIKChainLink
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__IKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIKChainLink, UnknownData_KE4I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIKChainLink, 0x0040);
		}

		// struct FAnimNode_LookAt : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_LookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, BoneToModify, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_027D, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtTarget, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtLocation, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAt_Axis, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, bUseLookUpAxis, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationType, 0x017D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_JS75, 0x017E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookUp_Axis, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, LookAtClamp, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTime, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, InterpolationTriggerThreashold, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LookAt, UnknownData_XLKT, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LookAt, 0x01D0);
		}

		// struct FAnimNode_MakeDynamicAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MakeDynamicAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, bMeshSpaceAdditive, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MakeDynamicAdditive, UnknownData_M5ZX, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MakeDynamicAdditive, 0x0038);
		}

		// struct FAnimNode_ModifyBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, BoneToModify, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, Translation, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, rotation, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, scale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationMode, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationMode, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleMode, 0x010A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, TranslationSpace, 0x010B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, RotationSpace, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, ScaleSpace, 0x010D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyBone, UnknownData_R5PR, 0x010E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyBone, 0x0110);
		}

		// struct FAnimNode_ModifyCurve : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ModifyCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveValues, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, CurveNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_CJ1X, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, Alpha, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, ApplyMode, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ModifyCurve, UnknownData_ZC3S, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ModifyCurve, 0x0058);
		}

		// struct FAnimNode_MultiWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MultiWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, Poses, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, DesiredAlphas, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_OGWC, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, AlphaScaleBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bAdditiveNode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, bNormalizeAlpha, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_MultiWayBlend, UnknownData_GW17, 0x004A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MultiWayBlend, 0x0050);
		}

		// struct FAnimNode_ObserveBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ObserveBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, BoneToObserve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, DisplaySpace, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, bRelativeToRefPose, 0x00E5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_JEE4, 0x00E6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, Translation, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, rotation, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, scale, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ObserveBone, UnknownData_X2D3, 0x010C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ObserveBone, 0x0110);
		}

		// struct FAnimNode_PoseHandler : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, PoseAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseHandler, UnknownData_40N3, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseHandler, 0x0078);
		}

		// struct FAnimNode_PoseBlendNode : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseBlendNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, BlendOption, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, UnknownData_QFM1, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseBlendNode, CustomCurve, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseBlendNode, 0x0098);
		}

		// struct FAnimNode_PoseByName : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseByName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, PoseWeight, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseByName, UnknownData_OD2C, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseByName, 0x0098);
		}

		// struct FPoseDriverTransform
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTransform, TargetRotation, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTransform, 0x0018);
		}

		// struct FPoseDriverTarget
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PoseDriverTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, BoneTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, TargetScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DistanceMethod, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, FunctionType, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bApplyCustomCurve, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_RHUS, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, DrivenName, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_OYKX, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, bIsHidden, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDriverTarget, UnknownData_ZDQ4, 0x00BD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDriverTarget, 0x00C0);
		}

		// struct FRBFParams
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RBFParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TargetDimensions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, SolverType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_OR1R, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, radius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, Function, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, DistanceMethod, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, TwistAxis, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_JXIY, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, WeightThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, NormalizeMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, UnknownData_2ZIF, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianReference, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRBFParams, MedianMax, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRBFParams, 0x002C);
		}

		// struct FAnimNode_PoseDriver : public FAnimNode_PoseHandler
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourcePose, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, SourceBones, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, OnlyDriveBones, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, PoseTargets, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_UPZ6, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, EvalSpaceBone, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, RBFParams, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveSource, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, DriveOutput, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseDriver, UnknownData_6DN2, 0x012B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseDriver, 0x0130);
		}

		// struct FAnimNode_PoseSnapshot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, SnapshotName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_9VK3, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, Snapshot, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, mode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_PoseSnapshot, UnknownData_PK1G, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_PoseSnapshot, 0x00B0);
		}

		// struct FRandomPlayerSequenceEntry
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RandomPlayerSequenceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, ChanceToPlay, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinLoopCount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxLoopCount, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MinPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, MaxPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, UnknownData_VDSV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomPlayerSequenceEntry, BlendIn, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomPlayerSequenceEntry, 0x0050);
		}

		// struct FAnimNode_RandomPlayer : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RandomPlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_ICWU, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, bShuffleMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RandomPlayer, UnknownData_6RG3, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RandomPlayer, 0x0078);
		}

		// struct FAnimNode_MeshSpaceRefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_MeshSpaceRefPose)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_MeshSpaceRefPose, 0x0010);
		}

		// struct FAnimNode_RefPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RefPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, RefPoseType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RefPose, UnknownData_6F97, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RefPose, 0x0018);
		}

		// struct FAnimNode_ResetRoot : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ResetRoot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ResetRoot, UnknownData_X6CT, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ResetRoot, 0x00E0);
		}

		// struct FAnimNode_RigidBody : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverridePhysicsAsset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_0W33, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideWorldGravity, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ExternalForce, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearAccScale, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentLinearVelScale, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, ComponentAppliedLinearAccClamp, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, CachedBoundsScale, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, BaseBoneRef, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverlapChannel, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, SimulationSpace, 0x01CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, bForceDisableCollisionBetweenConstraintBodies, 0x01CE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_LXPJ, 0x01CF);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_2WZV, 0x01D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, OverrideSolverIterations, 0x01D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody, UnknownData_5AGB, 0x01EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody, 0x05B0);
		}

		// struct FAnimNode_RigidBody_Chaos : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RigidBody_Chaos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverridePhysicsAsset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideWorldGravity, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ExternalForce, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearAccScale, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentLinearVelScale, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, ComponentAppliedLinearAccClamp, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, CachedBoundsScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, BaseBoneRef, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverlapChannel, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, SimulationSpace, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, bForceDisableCollisionBetweenConstraintBodies, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, OverrideSolverIterations, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RigidBody_Chaos, UnknownData_OK57, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RigidBody_Chaos, 0x05A0);
		}

		// struct FAnimNode_RotateRootBone : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotateRootBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, BasePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Pitch, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, Yaw, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, PitchScaleBiasClamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, YawScaleBiasClamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, MeshToComponent, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotateRootBone, UnknownData_Q2SS, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotateRootBone, 0x00A0);
		}

		// struct FAnimNode_RotationMultiplier : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationMultiplier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, TargetBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, SourceBone, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, multiplier, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, RotationAxisToRefer, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, bIsAdditive, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationMultiplier, UnknownData_WPLH, 0x00FE);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationMultiplier, 0x0100);
		}

		// struct FAnimNode_RotationOffsetBlendSpace : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_RotationOffsetBlendSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, BasePose, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, LODThreshold, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, Alpha, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBias, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaBoolBlend, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaCurveName, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaScaleBiasClamp, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_85JT, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, AlphaInputType, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, bAlphaBoolEnabled, 0x0189);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_RotationOffsetBlendSpace, UnknownData_ETFI, 0x018A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_RotationOffsetBlendSpace, 0x0190);
		}

		// struct FBrushStampData
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BrushStampData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBrushStampData, UnknownData_L8O8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBrushStampData, 0x00B0);
		}

		// struct FAnimNode_ScaleChainLength : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ScaleChainLength)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, InputPose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, DefaultChainLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainStartBone, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainEndBone, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, TargetLocation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, Alpha, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_CS1N, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, AlphaScaleBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, ChainInitialLength, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ScaleChainLength, UnknownData_3JHX, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ScaleChainLength, 0x0080);
		}

		// struct FBehaviorInfo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__BehaviorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, Behavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorInfo, UnknownData_GCE0, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorInfo, 0x0020);
		}

		// struct FActiveGizmo
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__ActiveGizmo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveGizmo, UnknownData_7Z06, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveGizmo, 0x0030);
		}

		// struct FGizmoFloatParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoFloatParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoFloatParameterChange, currentValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoFloatParameterChange, 0x0008);
		}

		// struct FGizmoVec2ParameterChange
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__GizmoVec2ParameterChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, InitialValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoVec2ParameterChange, currentValue, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoVec2ParameterChange, 0x0010);
		}

		// struct FAnimNode_SequenceEvaluator : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SequenceEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ExplicitTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bShouldLoop, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, bTeleportToExplicitTime, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, ReinitializationBehavior, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_WFTE, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, StartPosition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequenceEvaluator, UnknownData_3KAS, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequenceEvaluator, 0x0048);
		}

		// struct FInputRayHit
		TEST_METHOD(ScriptStruct__InteractiveToolsFramework__InputRayHit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRayHit, UnknownData_LKCG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRayHit, 0x0028);
		}

		// struct FAnimNode_Slot : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Slot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, SlotName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, bAlwaysUpdateSourcePose, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Slot, UnknownData_QHC8, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Slot, 0x0050);
		}

		// struct FAnimNode_SplineIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SplineIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, StartBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, EndBone, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, BoneAxis, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, bAutoCalculateSpline, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_A5X3, 0x00FA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, PointCount, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, ControlPoints, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Roll, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistStart, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistEnd, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_W9FK, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, TwistBlend, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Stretch, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, Offset, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SplineIK, UnknownData_KDYJ, 0x0158);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SplineIK, 0x0270);
		}

		// struct FSplineIKCachedBoneData
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__SplineIKCachedBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineIKCachedBoneData, RefSkeletonIndex, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineIKCachedBoneData, 0x0018);
		}

		// struct FAnimNode_SpringBone : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_SpringBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, MaxDisplacement, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringStiffness, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, SpringDamping, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, ErrorResetThresh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_KR6N, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SpringBone, UnknownData_NU8V, 0x0131);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SpringBone, 0x0138);
		}

		// struct FAnimNode_StateResult : public FAnimNode_Root
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_StateResult)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateResult, 0x0038);
		}

		// struct FRotationLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationLimit, LimitMax, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationLimit, 0x0018);
		}

		// struct FAnimPhysPlanarLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysPlanarLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, UnknownData_HGXF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysPlanarLimit, PlaneTransform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysPlanarLimit, 0x0050);
		}

		// struct FAnimNode_Trail : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_Trail)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_VZUU, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailBone, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainLength, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, ChainBoneAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_2FD5, 0x011A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, MaxDeltaTime, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScale, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_4P96, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, TrailRelaxationSpeed, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RelaxationSpeedScaleInputProcessor, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationLimits, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, RotationOffsets, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, PlanarLimits, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, StretchLimit, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, FakeVelocity, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, BaseJoint, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, LastBoneRotationAnimAlphaBlend, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Trail, UnknownData_PJGO, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Trail, 0x0270);
		}

		// struct FReferenceBoneFrame
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__ReferenceBoneFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Bone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferenceBoneFrame, Axis, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferenceBoneFrame, 0x0024);
		}

		// struct FAnimNode_TwistCorrectiveNode : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwistCorrectiveNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, BaseFrame, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistFrame, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, TwistPlaneNormalAxis, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RangeMax, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMin, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, RemappedMax, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, curve, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwistCorrectiveNode, UnknownData_TSC1, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwistCorrectiveNode, 0x0150);
		}

		// struct FAnimNode_TwoBoneIK : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoBoneIK)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, IKBone, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, StartStretchRatio, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, MaxStretchScale, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_ARX4, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorTarget, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocation, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_XIYN, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTarget, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, TwistAxis, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, EffectorLocationSpace, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, JointTargetLocationSpace, 0x0201);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoBoneIK, UnknownData_A9B5, 0x0203);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoBoneIK, 0x0210);
		}

		// struct FAnimNode_TwoWayBlend : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_TwoWayBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, A, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, B, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_U0RT, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, AlphaScaleBiasClamp, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TwoWayBlend, UnknownData_BW0U, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TwoWayBlend, 0x00C8);
		}

		// struct FAnimSequencerInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimSequencerInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequencerInstanceProxy, UnknownData_L6RQ, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequencerInstanceProxy, 0x0950);
		}

		// struct FPositionHistory
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__PositionHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, Positions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, range, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPositionHistory, UnknownData_65CL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPositionHistory, 0x0030);
		}

		// struct FAnimNode_AimOffsetLookAt : public FAnimNode_BlendSpacePlayer
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AimOffsetLookAt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_2AOJ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, BasePose, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LODThreshold, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SourceSocketName, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, PivotSocketName, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, LookAtLocation, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, SocketAxis, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, Alpha, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AimOffsetLookAt, UnknownData_MP0E, 0x0188);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AimOffsetLookAt, 0x01C0);
		}

		// struct FAnimPhysConstraintSetup
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysConstraintSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearXLimitType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearYLimitType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearZLimitType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_2RAW, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMin, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, LinearAxesMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularConstraintType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, TwistAxis, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTargetAxis, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, UnknownData_S5PA, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, ConeAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularLimitsMax, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysConstraintSetup, AngularTarget, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysConstraintSetup, 0x0048);
		}

		// struct FAnimPhysSphericalLimit
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimPhysSphericalLimit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, DrivingBone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, SphereLocalOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, LimitType, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimPhysSphericalLimit, UnknownData_IHA3, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimPhysSphericalLimit, 0x0028);
		}

		// struct FRotationRetargetingInfo
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__RotationRetargetingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_T4QF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, target, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, RotationComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_VK1N, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TwistAxis, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bUseAbsoluteAngle, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_CTS3, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMinimum, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, SourceMaximum, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMinimum, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, TargetMaximum, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingType, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_K7I7, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, CustomCurve, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bFlipEasing, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_JV0C, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, EasingWeight, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, bClamp, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationRetargetingInfo, UnknownData_C2K7, 0x0129);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationRetargetingInfo, 0x0130);
		}

		// struct FAnimNode_AnimDynamics : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_AnimDynamics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearDampingOverride, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularDampingOverride, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_C3FH, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RelativeSpaceBone, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, bHardLinkChain, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_88MD, 0x0155);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoundBone, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ChainEnd, 0x016C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, BoxExtents, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LocalJointOffset, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityScale, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, GravityOverride, 0x019C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, LinearSpringConstant, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularSpringConstant, 0x01AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, WindScale, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearAccScale, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentLinearVelScale, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ComponentAppliedLinearAccClamp, 0x01CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, AngularBiasOverride, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPreUpdate, 0x01DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, NumSolverIterationsPostUpdate, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ConstraintSetup, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_JP8R, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphericalLimits, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SphereCollisionRadius, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, ExternalForce, 0x0244);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, PlanarLimits, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, CollisionType, 0x0260);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, SimulationSpace, 0x0261);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_NZ2L, 0x0262);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_BIE3, 0x0266);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, RetargetingSettings, 0x0270);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AnimDynamics, UnknownData_N090, 0x03A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AnimDynamics, 0x0460);
		}

		// struct FAnimNode_ApplyAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, Alpha, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, LODThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaScaleBiasClamp, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_FUOE, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, AlphaInputType, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, bAlphaBoolEnabled, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyAdditive, UnknownData_GPV5, 0x00CA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyAdditive, 0x00D0);
		}

		// struct FAnimNode_ApplyLimits : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__AnimGraphRuntime__AnimNode_ApplyLimits)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularRangeLimits, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyLimits, AngularOffsets, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyLimits, 0x00F0);
		}

		// struct FEyeTrackerGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, GazeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, FixationPoint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerGazeData, ConfidenceValue, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerGazeData, 0x0028);
		}

		// struct FEyeTrackerStereoGazeData
		TEST_METHOD(ScriptStruct__EyeTracker__EyeTrackerStereoGazeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeOrigin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, LeftEyeDirection, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeOrigin, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, RightEyeDirection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, FixationPoint, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEyeTrackerStereoGazeData, ConfidenceValue, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEyeTrackerStereoGazeData, 0x0040);
		}

		// struct FBaseSingleStructIndexAnalytics
		TEST_METHOD(ScriptStruct__BHVRAnalytics__BaseSingleStructIndexAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseSingleStructIndexAnalytics, UnknownData_B7EO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseSingleStructIndexAnalytics, SessionGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseSingleStructIndexAnalytics, 0x0018);
		}

		// struct FGFxWidgetBinding
		TEST_METHOD(ScriptStruct__ScaleformUI__GFxWidgetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGFxWidgetBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGFxWidgetBinding, UnknownData_PQBV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGFxWidgetBinding, WidgetClass, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGFxWidgetBinding, 0x0018);
		}

		// struct FExternalTexture
		TEST_METHOD(ScriptStruct__ScaleformUI__ExternalTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalTexture, Resource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalTexture, texture, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalTexture, 0x0018);
		}

		// struct FASPerspectiveTransform
		TEST_METHOD(ScriptStruct__ScaleformUI__ASPerspectiveTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FASPerspectiveTransform, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASPerspectiveTransform, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASPerspectiveTransform, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASPerspectiveTransform, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FASPerspectiveTransform, 0x0040);
		}

		// struct FASColorTransform
		TEST_METHOD(ScriptStruct__ScaleformUI__ASColorTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FASColorTransform, Multiply, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASColorTransform, Add, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FASColorTransform, 0x0020);
		}

		// struct FASDisplayInfo
		TEST_METHOD(ScriptStruct__ScaleformUI__ASDisplayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, scale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, XRotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, YRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, Alpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, Visible, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASDisplayInfo, UnknownData_TP2T, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FASDisplayInfo, 0x002C);
		}

		// struct FASValue
		TEST_METHOD(ScriptStruct__ScaleformUI__ASValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, ASType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, ASBoolean, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, UnknownData_WG54, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, ASInt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, ASNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, UnknownData_NUZJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, ASString, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, UnknownData_KBH8, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FASValue, ASObject, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FASValue, 0x0038);
		}

		// struct FGCReference
		TEST_METHOD(ScriptStruct__ScaleformUI__GCReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGCReference, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGCReference, RefCount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGCReference, UnknownData_Q7YM, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGCReference, 0x0010);
		}

		// struct FClaimableInboxMessageData
		TEST_METHOD(ScriptStruct__OnlineMessagesUtilities__ClaimableInboxMessageData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessageData, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessageData, UnknownData_RZ4E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessageData, Amount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessageData, Id, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClaimableInboxMessageData, 0x0018);
		}

		// struct FInboxMessageData
		TEST_METHOD(ScriptStruct__OnlineMessagesUtilities__InboxMessageData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, origin, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, RecipientId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, ReceivedTimestamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, subject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, Body, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, Claimable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, AreRewardsClaimed, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, IsRead, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, UnknownData_JU2G, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInboxMessageData, ExpireTimestamp, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInboxMessageData, 0x0070);
		}

		// struct FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiEventBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiEventBase, Chan, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiEventBase, 0x0002);
		}

		// struct FAkMidiCc : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiCc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Cc, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiCc, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiCc, 0x0004);
		}

		// struct FAkMidiNoteOnOff : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteOnOff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteOnOff, Velocity, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteOnOff, 0x0004);
		}

		// struct FAkMidiGeneric : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiGeneric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiGeneric, Param2, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiGeneric, 0x0004);
		}

		// struct FAkChannelMask
		TEST_METHOD(ScriptStruct__AkAudio__AkChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkChannelMask, ChannelMask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkChannelMask, 0x0004);
		}

		// struct FAkGeometrySurfaceOverride
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometrySurfaceOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, AcousticTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, UnknownData_RQAC, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfaceOverride, OcclusionValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometrySurfaceOverride, 0x0010);
		}

		// struct FAkAcousticSurface
		TEST_METHOD(ScriptStruct__AkAudio__AkAcousticSurface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, Occlusion, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAcousticSurface, name, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAcousticSurface, 0x0018);
		}

		// struct FAkTriangle
		TEST_METHOD(ScriptStruct__AkAudio__AkTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point1, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Point2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkTriangle, Surface, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkTriangle, 0x0008);
		}

		// struct FAkGeometryData
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometryData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Surfaces, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, Triangles, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, ToOverrideAcousticTexture, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometryData, ToOverrideOcclusion, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometryData, 0x0050);
		}

		// struct FAkAdvancedSpatialAudioSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedSpatialAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedSpatialAudioSettings, DiffractionShadowAttenuationFactor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedSpatialAudioSettings, DiffractionShadowDegrees, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedSpatialAudioSettings, 0x0008);
		}

		// struct FClaimableInboxMessage
		TEST_METHOD(ScriptStruct__OnlineMessagesUtilities__ClaimableInboxMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessage, data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessage, state, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClaimableInboxMessage, UnknownData_SBPR, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClaimableInboxMessage, 0x0018);
		}

		// struct FAkAdvancedInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, IO_MemorySize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, IO_Granularity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, TargetAutoStreamBufferLength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UseStreamCache, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_020Q, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MaximumPinnedBytesInCache, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, EnableGameSyncPreparation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_Y7U7, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, ContinuousPlaybackLookAhead, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MonitorQueuePoolSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, MaximumHardwareTimeoutMs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, DebugOutOfRangeCheckEnabled, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, UnknownData_3I30, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, DebugOutOfRangeLimit, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettings, SpatialAudioSettings, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedInitializationSettings, 0x0034);
		}

		// struct FAkAdvancedInitializationSettingsWithMultiCoreRendering : public FAkAdvancedInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkAdvancedInitializationSettingsWithMultiCoreRendering)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, EnableMultiCoreRendering, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, UnknownData_O70N, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAdvancedInitializationSettingsWithMultiCoreRendering, 0x0038);
		}

		// struct FAkHololensAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkHololensAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, GlobalFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkHololensAdvancedInitializationSettings, UnknownData_R7A9, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkHololensAdvancedInitializationSettings, 0x0040);
		}

		// struct FAkPluginInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkPluginInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, PluginID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, UnknownData_HOYX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPluginInfo, DLL, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPluginInfo, 0x0028);
		}

		// struct FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, poolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, DiscoveryBroadcastPort, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, CommandPort, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, NotificationPort, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, UnknownData_JBUB, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettings, NetworkName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettings, 0x0020);
		}

		// struct FAkCommunicationSettingsWithCommSelection : public FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettingsWithCommSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, CommunicationSystem, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, UnknownData_KVRF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithCommSelection, UnknownData_BQC4, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettingsWithCommSelection, 0x0028);
		}

		// struct FAkBoolPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkBoolPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkBoolPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkBoolPropertyToControl, 0x0010);
		}

		// struct FAkPropertyToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkPropertyToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPropertyToControl, ItemProperty, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPropertyToControl, 0x0010);
		}

		// struct FAkPS4AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkPS4AdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, ACPBatchBufferSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS4AdvancedInitializationSettings, UnknownData_SLC5, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPS4AdvancedInitializationSettings, 0x0040);
		}

		// struct FAkPS5AdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkPS5AdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPS5AdvancedInitializationSettings, UnknownData_LBCC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPS5AdvancedInitializationSettings, 0x003C);
		}

		// struct FAkGeometrySurfacePropertiesToMap
		TEST_METHOD(ScriptStruct__AkAudio__AkGeometrySurfacePropertiesToMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, AcousticTexture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, OcclusionValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkGeometrySurfacePropertiesToMap, UnknownData_9DMG, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkGeometrySurfacePropertiesToMap, 0x0038);
		}

		// struct FAkPoly
		TEST_METHOD(ScriptStruct__AkAudio__AkPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, Occlusion, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, EnableSurface, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkPoly, UnknownData_0KM6, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkPoly, 0x0010);
		}

		// struct FAkWaapiFieldNames
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiFieldNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiFieldNames, FieldName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiFieldNames, 0x0010);
		}

		// struct FAkWaapiUri
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiUri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiUri, Uri, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiUri, 0x0010);
		}

		// struct FAkWindowsAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkWindowsAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, GlobalFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWindowsAdvancedInitializationSettings, UnknownData_S0P7, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWindowsAdvancedInitializationSettings, 0x0040);
		}

		// struct FMovieSceneAkAudioEventTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioEventTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioEventTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioEventTemplate, 0x0028);
		}

		// struct FMovieSceneAkAudioRTPCTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneAkAudioRTPCTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAkAudioRTPCTemplate, Section, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAkAudioRTPCTemplate, 0x0028);
		}

		// struct FAkMainOutputSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkMainOutputSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, AudioDeviceShareset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, DeviceId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, PanningRule, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_VBC7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, ChannelConfigType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_2U05, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, ChannelMask, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, NumberOfChannels, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMainOutputSettings, UnknownData_KE8O, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMainOutputSettings, 0x0028);
		}

		// struct FAkSpatialAudioSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkSpatialAudioSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MaxSoundPropagationDepth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, DiffractionFlags, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MovementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, NumberOfPrimaryRays, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, ReflectionOrder, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableDiffractionOnReflections, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableDirectPathDiffraction, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UnknownData_3WQG, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, MaximumPathLength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, EnableTransmission, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSpatialAudioSettings, UnknownData_9ETG, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSpatialAudioSettings, 0x0020);
		}

		// struct FAkCommonInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommonInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MaximumNumberOfMemoryPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MaximumNumberOfPositioningPaths, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, CommandQueueSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, SamplesPerFrame, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, MainOutputSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, StreamingLookAheadRatio, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, NumberOfRefillsInVoice, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, UnknownData_K1ES, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettings, SpatialAudioSettings, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommonInitializationSettings, 0x0060);
		}

		// struct FAkCommonInitializationSettingsWithSampleRate : public FAkCommonInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommonInitializationSettingsWithSampleRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettingsWithSampleRate, SampleRate, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommonInitializationSettingsWithSampleRate, UnknownData_L6ZE, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommonInitializationSettingsWithSampleRate, 0x0068);
		}

		// struct FAkWinGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkWinGDKAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, GlobalFocus, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, UseHeadMountedDisplayAudioDevice, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWinGDKAdvancedInitializationSettings, UnknownData_0LCP, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWinGDKAdvancedInitializationSettings, 0x0040);
		}

		// struct FAkXboxOneGDKApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneGDKApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneGDKApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXboxOneGDKAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneGDKAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneGDKAdvancedInitializationSettings, UnknownData_6YQR, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneGDKAdvancedInitializationSettings, 0x003C);
		}

		// struct FAkXboxOneApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXboxOneAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXboxOneAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXboxOneAdvancedInitializationSettings, UnknownData_MCN1, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXboxOneAdvancedInitializationSettings, 0x003C);
		}

		// struct FAkXSXApuHeapInitializationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkXSXApuHeapInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXApuHeapInitializationSettings, CachedSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXApuHeapInitializationSettings, NonCachedSize, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXSXApuHeapInitializationSettings, 0x0008);
		}

		// struct FAkXSXAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkXSXAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, MaximumNumberOfXMAVoices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UseHardwareCodecLowLatencyMode, 0x003A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkXSXAdvancedInitializationSettings, UnknownData_GTV0, 0x003B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkXSXAdvancedInitializationSettings, 0x003C);
		}

		// struct FAkAudioEventTrackKey
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioEventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, UnknownData_XIOT, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, AkAudioEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioEventTrackKey, EventName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioEventTrackKey, 0x0020);
		}

		// struct FMovieSceneTangentDataSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneTangentDataSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, TangentWeightMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, UnknownData_WHQ8, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, ArriveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentDataSerializationHelper, LeaveTangentWeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentDataSerializationHelper, 0x0014);
		}

		// struct FMovieSceneFloatValueSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatValueSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, InterpMode, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, TangentMode, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, UnknownData_OP3N, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValueSerializationHelper, Tangent, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValueSerializationHelper, 0x001C);
		}

		// struct FMovieSceneFloatChannelSerializationHelper
		TEST_METHOD(ScriptStruct__AkAudio__MovieSceneFloatChannelSerializationHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PreInfinityExtrap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, PostInfinityExtrap, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_OTQX, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, bHasDefaultValue, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannelSerializationHelper, UnknownData_YV8Y, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannelSerializationHelper, 0x0030);
		}

		// struct FAKWaapiJsonObject
		TEST_METHOD(ScriptStruct__AkAudio__AKWaapiJsonObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAKWaapiJsonObject, UnknownData_SB43, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAKWaapiJsonObject, 0x0010);
		}

		// struct FAkWaapiSubscriptionId
		TEST_METHOD(ScriptStruct__AkAudio__AkWaapiSubscriptionId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWaapiSubscriptionId, UnknownData_NIDF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWaapiSubscriptionId, 0x0008);
		}

		// struct FAkAmbSoundCheckpointRecord
		TEST_METHOD(ScriptStruct__AkAudio__AkAmbSoundCheckpointRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAmbSoundCheckpointRecord, bCurrentlyPlaying, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAmbSoundCheckpointRecord, 0x0001);
		}

		// struct FAkAudioSession
		TEST_METHOD(ScriptStruct__AkAudio__AkAudioSession)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, UnknownData_F6VA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionCategoryOptions, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, AudioSessionMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAudioSession, UnknownData_TT7Q, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAudioSession, 0x000C);
		}

		// struct FAkExternalSourceInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkExternalSourceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, ExternalSrcName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, CodecID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, UnknownData_XVFH, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, FileName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, ExternalSourceAsset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, IsStreamed, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkExternalSourceInfo, UnknownData_RASA, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkExternalSourceInfo, 0x0038);
		}

		// struct FAkMidiProgramChange : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiProgramChange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiProgramChange, ProgramNum, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiProgramChange, 0x0003);
		}

		// struct FAkMidiChannelAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiChannelAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiChannelAftertouch, Value, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiChannelAftertouch, 0x0003);
		}

		// struct FAkMidiNoteAftertouch : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiNoteAftertouch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Note, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiNoteAftertouch, Value, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiNoteAftertouch, 0x0004);
		}

		// struct FAkMidiPitchBend : public FAkMidiEventBase
		TEST_METHOD(ScriptStruct__AkAudio__AkMidiPitchBend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueLsb, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, ValueMsb, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkMidiPitchBend, FullValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkMidiPitchBend, 0x0008);
		}

		// struct FAkCommunicationSettingsWithSystemInitialization : public FAkCommunicationSettings
		TEST_METHOD(ScriptStruct__AkAudio__AkCommunicationSettingsWithSystemInitialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithSystemInitialization, InitializeSystemComms, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkCommunicationSettingsWithSystemInitialization, UnknownData_008L, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkCommunicationSettingsWithSystemInitialization, 0x0028);
		}

		// struct FAkAndroidAdvancedInitializationSettings : public FAkAdvancedInitializationSettingsWithMultiCoreRendering
		TEST_METHOD(ScriptStruct__AkAudio__AkAndroidAdvancedInitializationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, AudioAPI, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, RoundFrameSizeToHardwareSize, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkAndroidAdvancedInitializationSettings, UnknownData_W0U1, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkAndroidAdvancedInitializationSettings, 0x0040);
		}

		// struct FAkWwiseObjectDetails
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseObjectDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, itemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, ItemPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseObjectDetails, itemId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseObjectDetails, 0x0030);
		}

		// struct FAkWwiseItemToControl
		TEST_METHOD(ScriptStruct__AkAudio__AkWwiseItemToControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPicked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkWwiseItemToControl, ItemPath, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkWwiseItemToControl, 0x0040);
		}

		// struct FAkSegmentInfo
		TEST_METHOD(ScriptStruct__AkAudio__AkSegmentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, CurrentPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PreEntryDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, ActiveDuration, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, PostExitDuration, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, RemainingLookAheadTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BeatDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, BarDuration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSegmentInfo, GridOffset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSegmentInfo, 0x0024);
		}

		// struct FComponentSweepInfo
		TEST_METHOD(ScriptStruct__Projectile__ComponentSweepInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSweepInfo, UnknownData_FH9Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSweepInfo, 0x0014);
		}

		// struct FimpactInfo
		TEST_METHOD(ScriptStruct__Projectile__impactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, UnknownData_2WHI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, actor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, component, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, surfaceType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, UnknownData_VOQO, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FimpactInfo, impactNormal, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FimpactInfo, 0x0030);
		}

		// struct FlaunchInfo
		TEST_METHOD(ScriptStruct__Projectile__launchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FlaunchInfo, StartPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FlaunchInfo, direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FlaunchInfo, speed, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FlaunchInfo, 0x001C);
		}

		// struct FMovieSceneSectionEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, bCanEditCompletionMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionEvalOptions, CompletionMode, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionEvalOptions, 0x0002);
		}

		// struct FMovieSceneEasingSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEasingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseInDuration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, AutoEaseOutDuration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseIn, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseIn, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_038A, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseInDuration, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, EaseOut, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, bManualEaseOut, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, UnknownData_52N6, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEasingSettings, ManualEaseOutDuration, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEasingSettings, 0x0038);
		}

		// struct FOptionalMovieSceneBlendType
		TEST_METHOD(ScriptStruct__MovieScene__OptionalMovieSceneBlendType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, BlendType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOptionalMovieSceneBlendType, bIsValid, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOptionalMovieSceneBlendType, 0x0002);
		}

		// struct FMovieSceneSequenceLoopCount
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceLoopCount)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceLoopCount, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceLoopCount, 0x0004);
		}

		// struct FMovieSceneSequencePlaybackSettings
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequencePlaybackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_T2Q2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, LoopCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, playRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, startTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequencePlaybackSettings, UnknownData_1QGC, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequencePlaybackSettings, 0x0014);
		}

		// struct FMovieSceneSequenceID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceID, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceID, 0x0004);
		}

		// struct FMovieSceneRootEvaluationTemplateInstance
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneRootEvaluationTemplateInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_2YQT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, DirectorInstances, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneRootEvaluationTemplateInstance, UnknownData_L6XW, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneRootEvaluationTemplateInstance, 0x0320);
		}

		// struct FMovieSceneSectionParameters
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartFrameOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, bCanLoop, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, UnknownData_KHGJ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, EndFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, FirstLoopStartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, TimeScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, HierarchicalBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, StartOffset, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PreRollTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionParameters, PostRollTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionParameters, 0x0024);
		}

		// struct FMovieScenePossessable
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePossessable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, tags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, guid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, PossessedObjectClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePossessable, ParentGuid, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePossessable, 0x0048);
		}

		// struct FMovieSceneBinding
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, ObjectGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, BindingName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBinding, Tracks, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBinding, 0x0030);
		}

		// struct FMovieSceneMarkedFrame
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneMarkedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, UnknownData_CDIP, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarkedFrame, Label, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarkedFrame, 0x0018);
		}

		// struct FMovieSceneObjectBindingID
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, SequenceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, Space, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, UnknownData_3DWW, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingID, guid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingID, 0x0018);
		}

		// struct FMovieSceneBindingOverrideData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, Object, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, bOverridesDefault, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBindingOverrideData, UnknownData_R8LB, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBindingOverrideData, 0x0024);
		}

		// struct FMovieSceneTrackIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackIdentifier, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldTrackPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, SequenceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldTrackPtr, TrackIdentifier, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldTrackPtr, 0x0008);
		}

		// struct FMovieSceneSegmentIdentifier
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegmentIdentifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegmentIdentifier, IdentifierIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegmentIdentifier, 0x0004);
		}

		// struct FMovieSceneEvaluationFieldSegmentPtr : public FMovieSceneEvaluationFieldTrackPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationFieldSegmentPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationFieldSegmentPtr, SegmentID, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationFieldSegmentPtr, 0x000C);
		}

		// struct FMovieSceneEvaluationGroupLUTIndex
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroupLUTIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, LUTOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumInitPtrs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroupLUTIndex, NumEvalPtrs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroupLUTIndex, 0x000C);
		}

		// struct FMovieSceneFrameRange
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFrameRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFrameRange, UnknownData_YGEO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFrameRange, 0x0010);
		}

		// struct FMovieSceneSegment
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSegment, UnknownData_0CS7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSegment, 0x0058);
		}

		// struct FMovieSceneEvaluationTrackSegments
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrackSegments)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SegmentIdentifierToIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrackSegments, SortedSegments, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrackSegments, 0x0020);
		}

		// struct FSectionEvaluationDataTree
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationDataTree)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationDataTree, UnknownData_Q2OG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationDataTree, 0x0060);
		}

		// struct FMovieSceneEvalTemplatePtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplatePtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplatePtr, UnknownData_Z01Q, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplatePtr, 0x0088);
		}

		// struct FMovieSceneTrackImplementationPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementationPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackImplementationPtr, UnknownData_6NNG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementationPtr, 0x0038);
		}

		// struct FMovieSceneEvaluationTrack
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationMethod, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_MFA6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, Segments, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, SourceTrack, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationTree, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, ChildTemplates, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, TrackTemplate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, EvaluationGroup, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTrack, UnknownData_MHQW, 0x00F5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTrack, 0x00F8);
		}

		// struct FMovieSceneEvaluationGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, LUTIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationGroup, SegmentPtrLUT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationGroup, 0x0020);
		}

		// struct FMovieSceneEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SequenceId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, TrackIdentifier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationKey, SectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationKey, 0x000C);
		}

		// struct FMovieSceneOrderedEvaluationKey
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneOrderedEvaluationKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, SetupIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneOrderedEvaluationKey, TearDownIndex, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneOrderedEvaluationKey, 0x0010);
		}

		// struct FMovieSceneEvaluationMetaData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, ActiveEntities, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationMetaData, SubTemplateSerialNumbers, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationMetaData, 0x0070);
		}

		// struct FMovieSceneEvaluationField
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Ranges, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Groups, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationField, Metadata, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationField, 0x0030);
		}

		// struct FMovieSceneTimeTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeTransform, Offset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeTransform, 0x000C);
		}

		// struct FMovieSceneTimeWarping
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimeWarping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimeWarping, end, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimeWarping, 0x0008);
		}

		// struct FMovieSceneNestedSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneNestedSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNestedSequenceTransform, Warping, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNestedSequenceTransform, 0x0014);
		}

		// struct FMovieSceneSequenceTransform
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, LinearTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, UnknownData_329A, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceTransform, NestedTransforms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceTransform, 0x0020);
		}

		// struct FMovieSceneSequenceInstanceDataPtr
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceDataPtr)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceDataPtr, UnknownData_7DSP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceDataPtr, 0x0018);
		}

		// struct FMovieSceneSubSequenceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, RootToSequenceTransform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, TickResolution, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, DeterministicSequenceID, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PlayRange, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, FullPlayRange, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnwarpedPlayRange, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PreRollRange, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, PostRollRange, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, HierarchicalBias, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, InstanceData, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, UnknownData_3RD2, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, SubSectionSignature, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSequenceData, OuterToInnerTransform, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSequenceData, 0x00F0);
		}

		// struct FMovieSceneSequenceHierarchyNode
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchyNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, ParentID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, UnknownData_5R39, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchyNode, Children, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchyNode, 0x0018);
		}

		// struct FMovieSceneSequenceHierarchy
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceHierarchy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, SubSequences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceHierarchy, Hierarchy, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceHierarchy, 0x00A0);
		}

		// struct FMovieSceneEvaluationTemplateSerialNumber
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplateSerialNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplateSerialNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplateSerialNumber, 0x0004);
		}

		// struct FMovieSceneTemplateGenerationLedger
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTemplateGenerationLedger)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, LastTrackIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, UnknownData_IN1Q, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, TrackSignatureToTrackIdentifier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTemplateGenerationLedger, SubSectionRanges, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTemplateGenerationLedger, 0x00A8);
		}

		// struct FMovieSceneTrackFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackFieldData, UnknownData_AUWX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackFieldData, 0x0060);
		}

		// struct FMovieSceneSubSectionFieldData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionFieldData, UnknownData_KQ9L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionFieldData, 0x0060);
		}

		// struct FMovieSceneEvaluationTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_6VQC, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, EvaluationField, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, Hierarchy, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SequenceSignature, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateSerialNumber, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, UnknownData_2ZJ4, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TemplateLedger, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, TrackFieldData, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationTemplate, SubSectionFieldData, 0x0290);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationTemplate, 0x02F0);
		}

		// struct FMovieSceneSubSectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSubSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Section, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, ObjectBindingId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, Flags, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSubSectionData, UnknownData_933F, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSubSectionData, 0x001C);
		}

		// struct FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyStruct, UnknownData_AP5N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyStruct, 0x0008);
		}

		// struct FMovieSceneKeyTimeStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyTimeStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneKeyTimeStruct, UnknownData_FG1J, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyTimeStruct, 0x0028);
		}

		// struct FGeneratedMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieScene__GeneratedMovieSceneKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeneratedMovieSceneKeyStruct, UnknownData_T4DL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeneratedMovieSceneKeyStruct, 0x0050);
		}

		// struct FMovieSceneObjectPathChannelKeyValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannelKeyValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, SoftPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannelKeyValue, HardPtr, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannelKeyValue, 0x0038);
		}

		// struct FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneChannel, UnknownData_HF2A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneChannel, 0x0008);
		}

		// struct FMovieSceneObjectPathChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectPathChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, PropertyClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPathChannel, UnknownData_AVUL, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPathChannel, 0x00C8);
		}

		// struct FSectionEvaluationData
		TEST_METHOD(ScriptStruct__MovieScene__SectionEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ImplIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, ForcedTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, Flags, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSectionEvaluationData, UnknownData_5E28, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSectionEvaluationData, 0x000C);
		}

		// struct FMovieSceneSequenceReplProperties
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceReplProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, UnknownData_3061, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceReplProperties, LastKnownNumLoops, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceReplProperties, 0x0010);
		}

		// struct FMovieSceneWarpCounter
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneWarpCounter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWarpCounter, WarpCounts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWarpCounter, 0x0010);
		}

		// struct FMovieSceneSpawnable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSpawnable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, SpawnTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, tags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, bContinuouslyRespawn, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_OIFF, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, guid, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_FADY, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, name, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ObjectTemplate, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, ChildPossessables, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, Ownership, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, UnknownData_1F5E, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnable, levelName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnable, 0x0090);
		}

		// struct FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplateBase, UnknownData_CUW1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplateBase, 0x0010);
		}

		// struct FMovieSceneEvalTemplate : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvalTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, CompletionMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_O9TV, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, SourceSectionPtr, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvalTemplate, UnknownData_9JTQ, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvalTemplate, 0x0020);
		}

		// struct FTestMovieSceneEvalTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__TestMovieSceneEvalTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestMovieSceneEvalTemplate, 0x0020);
		}

		// struct FMovieSceneTrackDisplayOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackDisplayOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackDisplayOptions, UnknownData_9B3Z, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackDisplayOptions, 0x0004);
		}

		// struct FMovieSceneTrackEvalOptions
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackEvalOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackEvalOptions, UnknownData_PTZA, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackEvalOptions, 0x0004);
		}

		// struct FMovieSceneBoolChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneBoolChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_7WWR, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolChannel, UnknownData_DUNO, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolChannel, 0x0090);
		}

		// struct FMovieSceneTangentData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTangentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, ArriveTangentWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, LeaveTangentWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, TangentWeightMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTangentData, UnknownData_L4GT, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTangentData, 0x0014);
		}

		// struct FMovieSceneFloatValue
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, Tangent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, InterpMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, TangentMode, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, PaddingByte, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatValue, UnknownData_PZRQ, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatValue, 0x001C);
		}

		// struct FMovieSceneKeyHandleMap : public FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneKeyHandleMap)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneKeyHandleMap, 0x0060);
		}

		// struct FMovieSceneFloatChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneFloatChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PreInfinityExtrap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, PostInfinityExtrap, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_C4LI, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, DefaultValue, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, bHasDefaultValue, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, UnknownData_REH4, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, KeyHandles, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatChannel, TickResolution, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatChannel, 0x00A0);
		}

		// struct FMovieSceneIntegerChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneIntegerChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, bHasDefaultValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_9L61, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerChannel, UnknownData_WLD4, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerChannel, 0x0090);
		}

		// struct FMovieSceneTrackImplementation : public FMovieSceneEvalTemplateBase
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackImplementation)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackImplementation, 0x0010);
		}

		// struct FMovieScenePropertySectionData
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, propertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, UnknownData_3VVJ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, PropertyPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, FunctionName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionData, NotifyFunctionName, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionData, 0x0038);
		}

		// struct FMovieScenePropertySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieScene__MovieScenePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePropertySectionTemplate, PropertyData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePropertySectionTemplate, 0x0058);
		}

		// struct FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSequenceInstanceData, UnknownData_XVFK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSequenceInstanceData, 0x0008);
		}

		// struct FMovieSceneEvaluationOperand
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEvaluationOperand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, ObjectBindingId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvaluationOperand, SequenceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvaluationOperand, 0x0014);
		}

		// struct FMovieSceneSectionGroup
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneSectionGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSectionGroup, Sections, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSectionGroup, 0x0010);
		}

		// struct FMovieSceneObjectBindingIDs
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneObjectBindingIDs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectBindingIDs, IDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectBindingIDs, 0x0010);
		}

		// struct FMovieSceneTrackLabels
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTrackLabels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTrackLabels, Strings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTrackLabels, 0x0010);
		}

		// struct FMovieSceneExpansionState
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneExpansionState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneExpansionState, bExpanded, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneExpansionState, 0x0001);
		}

		// struct FMovieSceneEditorData
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ExpansionStates, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, PinnedNodes, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewStart, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewEnd, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkStart, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkEnd, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, MarkedFrames, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, WorkingRange, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEditorData, ViewRange, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEditorData, 0x00F0);
		}

		// struct FMovieSceneTimecodeSource
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneTimecodeSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, Timecode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTimecodeSource, DeltaFrame, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTimecodeSource, 0x0018);
		}

		// struct FMovieSceneByteChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneByteChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, DefaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, bHasDefaultValue, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_BB8K, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, values, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, Enum, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneByteChannel, UnknownData_KLIW, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneByteChannel, 0x0098);
		}

		// struct FMovieSceneEmptyStruct
		TEST_METHOD(ScriptStruct__MovieScene__MovieSceneEmptyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEmptyStruct, UnknownData_4RNJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEmptyStruct, 0x0001);
		}

		// struct FEditPivotTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__EditPivotTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditPivotTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditPivotTarget, 0x0010);
		}

		// struct FTransformMeshesTarget
		TEST_METHOD(ScriptStruct__MeshModelingTools__TransformMeshesTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformProxy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformMeshesTarget, TransformGizmo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformMeshesTarget, 0x0010);
		}

		// struct FClothVertBoneData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothVertBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, NumInfluences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneIndices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothVertBoneData, BoneWeights, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothVertBoneData, 0x004C);
		}

		// struct FClothCollisionPrim_Box
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, UnknownData_OK8H, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, LocalRotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, HalfExtents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Box, BoneIndex, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Box, 0x0030);
		}

		// struct FClothCollisionPrim_Convex
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Convex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, Planes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, SurfacePoints, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, BoneIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Convex, UnknownData_D4J7, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Convex, 0x0028);
		}

		// struct FClothCollisionPrim_SphereConnection
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_SphereConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_SphereConnection, SphereIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_SphereConnection, 0x0008);
		}

		// struct FClothCollisionPrim_Sphere
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionPrim_Sphere)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, BoneIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, radius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionPrim_Sphere, LocalPosition, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionPrim_Sphere, 0x0014);
		}

		// struct FClothCollisionData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeInterface__ClothCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Spheres, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, SphereConnections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Convexes, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothCollisionData, Boxes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothCollisionData, 0x0040);
		}

		// struct FMagicLeapTouchpadGesture
		TEST_METHOD(ScriptStruct__MagicLeapController__MagicLeapTouchpadGesture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, Hand, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_SPGI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, MotionSource, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, direction, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, UnknownData_X7WB, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, PositionAndForce, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, speed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, distance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, FingerGap, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, radius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTouchpadGesture, angle, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTouchpadGesture, 0x0034);
		}

		// struct FMagicLeapSharedWorldAlignmentTransforms
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldAlignmentTransforms)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldAlignmentTransforms, AlignmentTransforms, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldAlignmentTransforms, 0x0010);
		}

		// struct FMagicLeapSharedWorldSharedData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldSharedData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldSharedData, PinIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldSharedData, 0x0010);
		}

		// struct FMagicLeapSharedWorldPinData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldPinData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldPinData, PinState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldPinData, 0x0020);
		}

		// struct FMagicLeapSharedWorldLocalData
		TEST_METHOD(ScriptStruct__MagicLeapSharedWorld__MagicLeapSharedWorldLocalData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapSharedWorldLocalData, LocalPins, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapSharedWorldLocalData, 0x0010);
		}

		// struct FGameConsoleLogAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__GameConsoleLogAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameConsoleLogAnalytics, GameConsoleLog, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameConsoleLogAnalytics, 0x0078);
		}

		// struct FGameInitAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__GameInitAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, InitGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, ProgressionName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, Success, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, UnknownData_D37F, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, LoadCompleteState, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, ElapsedTime, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, FailureCount, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameInitAnalytics, additionalInfo, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameInitAnalytics, 0x00B8);
		}

		// struct FGameplay_PigKillerAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__Gameplay_PigKillerAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, AmbushHitCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, RbtKilledCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, Rbt1GeneratorCount, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, Rbt2GeneratorCount, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, Rbt3GeneratorCount, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, Rbt4GeneratorCount, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, Rbt5GeneratorCount, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, CrouchDuration, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, RbtExitKill, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigKillerAnalytics, RbtHookKill, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplay_PigKillerAnalytics, 0x00A0);
		}

		// struct FGameplay_KillerAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__Gameplay_KillerAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, speed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustTier1Count, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustTier2Count, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustTier3Count, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustTier1Duration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustTier2Duration, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustTier3Duration, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BloodlustSpeed, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountFail, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountSuccess, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountTier1Fail, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountTier1Success, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountTier2Fail, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountTier2Success, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountTier3Fail, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ChaseCountTier3Success, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HookCount, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, MurderCount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, PalletSpawned, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, PalletProcedural, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, PalletProceduralSetCount, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, PalletGenerationId, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, PalletGeneric, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, PalletDestroyed, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BreakableWallSpawned, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, BreakableWallDestroyed, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, dropCount, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HitCloseCount, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HitCloseCountSuccess, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HitFarCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HitFarCountSuccess, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HitSpecialCount, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, HitSpecialCountSuccess, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ClosetOpen, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, ClosetOpenSuccess, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, EscapeesHatchCount, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, SecondesAtLeastOneSurvivorHooked, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, AmountTilesVisited, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, StartX, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, StartY, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_KillerAnalytics, StartZ, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplay_KillerAnalytics, 0x0120);
		}

		// struct FGameplay_PigSurvivorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__Gameplay_PigSurvivorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtAttachedCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, ActivatedRbtTimerCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtSuccessSearchCount, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtFailedSearchCount, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtDisabledPreActivation, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtDisabledPostActivation, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtChaseDuration, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtAverageTimeLeftBeforeDisable, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, RbtDuration, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_PigSurvivorAnalytics, UnknownData_TF99, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplay_PigSurvivorAnalytics, 0x00A0);
		}

		// struct FGameplay_SurvivorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__Gameplay_SurvivorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, speed, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, InjuredSpeed, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, InjuredDuration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, HealthyDuration, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, KODuration, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletSpawned, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletProcedural, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletProceduralSetCount, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletGenerationId, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletGeneric, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletDrop, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, PalletStun, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, UnhookCount, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, HealCount, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, HealCountSuccess, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, ClosetEnter, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, Hatch, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, SkillCheckCount, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, SkillCheckCountGood, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, SkillCheckCountGreat, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, ChaseDuration, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, NumChases, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, HitBySlasherCount, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, AmountTilesVisited, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, StartX, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, StartY, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, StartZ, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, EmotePoint, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, EmoteCome, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, CrouchingDuration, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, CrouchingCount, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_SurvivorAnalytics, UnknownData_CCXK, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplay_SurvivorAnalytics, 0x00F8);
		}

		// struct FHeartbeatAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__HeartbeatAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeartbeatAnalytics, BeatTime, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeartbeatAnalytics, 0x0078);
		}

		// struct FInteractionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__InteractionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, role, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, UnknownData_4OOT, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InterruptionSuccessCount, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InterruptionFailureCount, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InteractionPredictedCount, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InteractionAuthorizedCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InteractionDeniedByRaceConditionCount, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InteractionDeniedByTimeoutCount, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionAnalytics, InteractionDeniedByErrorCount, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionAnalytics, 0x0088);
		}

		// struct FKillerTutorialAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__KillerTutorialAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerTutorialAnalytics, SecondsSpentInTutorial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerTutorialAnalytics, SecondsSpentInIntroSection, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerTutorialAnalytics, SecondsSpentInChaseSection, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerTutorialAnalytics, SecondsSpentInEscapeSection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerTutorialAnalytics, WasLungeAttackObjectiveCompleted, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKillerTutorialAnalytics, UnknownData_8PI0, 0x0079);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKillerTutorialAnalytics, 0x0080);
		}

		// struct FKrakenRequestAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__KrakenRequestAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, KrakenUrl, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, Method, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, Route, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, Status, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, ResponseCode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, ProviderError, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, AttemptCount, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, Success, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, CanRetry, 0x00B5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, WillRetry, 0x00B6);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, UnknownData_6YB0, 0x00B7);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, Country, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, AttemptElapsedTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, TotalElapsedTime, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, TotalElapsedTimeCapped, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKrakenRequestAnalytics, UnknownData_5K3X, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKrakenRequestAnalytics, 0x00D8);
		}

		// struct FLoadoutBaseAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__LoadoutBaseAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutItem, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutItemAddOn1, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutItemAddOn2, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutPerk1, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutPerk2, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutPerk3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutPerk4, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, LoadoutOffering, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, role, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, UnknownData_JJXJ, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadoutBaseAnalytics, rank, 0x00EC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadoutBaseAnalytics, 0x00F0);
		}

		// struct FLoadOutLobbyAnalytics : public FLoadoutBaseAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__LoadOutLobbyAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadOutLobbyAnalytics, level, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadOutLobbyAnalytics, prestige, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadOutLobbyAnalytics, CharacterName, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadOutLobbyAnalytics, LobbyId, 0x0108);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadOutLobbyAnalytics, 0x0118);
		}

		// struct FLoadOutAnalytics : public FLoadoutBaseAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__LoadOutAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLoadOutAnalytics, MatchId, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLoadOutAnalytics, 0x0100);
		}

		// struct FLogMirrorsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__LogMirrorsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLogMirrorsAnalytics, LogMirrors, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLogMirrorsAnalytics, 0x0078);
		}

		// struct FLogPresencePluginAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__LogPresencePluginAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLogPresencePluginAnalytics, Context, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLogPresencePluginAnalytics, message, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLogPresencePluginAnalytics, 0x0088);
		}

		// struct FMapCoordData
		TEST_METHOD(ScriptStruct__DBDAnalytics__MapCoordData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordData, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordData, actor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordData, x, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordData, y, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordData, z, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordData, UnknownData_GDN6, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapCoordData, 0x0030);
		}

		// struct FMapCoordAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MapCoordAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMapCoordAnalytics, MapItem, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMapCoordAnalytics, 0x0088);
		}

		// struct FMatchInfoAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchInfoAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, GameMode, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, role, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, IsABot, 0x006A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, BotDifficultyLevel, 0x006B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, PartySize, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, CharacterName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, rank, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, level, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, prestige, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, Pips, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, PipsTotal, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, MapSeed, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, mapName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, PartyHostMirrorsId, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, LobbyId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, MatchId, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, KrakenMatchId, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, playerName, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, SelectedCountry, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, FirstTimePlaying, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, UnknownData_F7DF, 0x0109);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, CumulativeMatches, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, CumulativeMatchesAsSurvivor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, CumulativeMatchesAsKiller, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, LastMatchTimestamp, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, ExactPing, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, hasAnActiveArchiveQuest, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, archiveQuestCanProgress, 0x012D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, IsUsingKeyboard, 0x012E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, UnknownData_X8BD, 0x012F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchInfoAnalytics, ControllerType, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchInfoAnalytics, 0x0140);
		}

		// struct FMatchmakingAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingAnalytics, MatchmakingSessionGuid, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingAnalytics, playerRole, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingAnalytics, GameType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingAnalytics, UnknownData_ZETU, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingAnalytics, PartySize, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingAnalytics, 0x0080);
		}

		// struct FMatchmakingLobbyAnalytics : public FMatchmakingAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingLobbyAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingLobbyAnalytics, LobbyStartTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingLobbyAnalytics, LobbyEndTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingLobbyAnalytics, LobbyResult, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingLobbyAnalytics, KrakenMatchId, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingLobbyAnalytics, rank, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingLobbyAnalytics, UnknownData_X7CM, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingLobbyAnalytics, 0x00C8);
		}

		// struct FChatAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__ChatAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, SenderMirrorsId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, SenderPlayerName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, MatchId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, ChatContent, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, OriginalChatContent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, ChatContext, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChatAnalytics, InGameTimestamp, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChatAnalytics, 0x00D8);
		}

		// struct FCrossfriendsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CrossfriendsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrossfriendsAnalytics, Action, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrossfriendsAnalytics, TargetKrakenUserId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrossfriendsAnalytics, 0x0088);
		}

		// struct FCrowdChoiceVoteResultAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CrowdChoiceVoteResultAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceVoteResultAnalytics, PollId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceVoteResultAnalytics, VoteOption, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceVoteResultAnalytics, VoteCount, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceVoteResultAnalytics, UnknownData_W731, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdChoiceVoteResultAnalytics, 0x0090);
		}

		// struct FCrowdChoiceSummaryResultAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CrowdChoiceSummaryResultAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, PollId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, PollType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, Status, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, PollDuration, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, UnknownData_BE3B, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, VoteTimestamps, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceSummaryResultAnalytics, NewVotesPerTimestampInterval, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdChoiceSummaryResultAnalytics, 0x00C0);
		}

		// struct FCrowdChoiceOnGameRoundStartedAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CrowdChoiceOnGameRoundStartedAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceOnGameRoundStartedAnalytics, PollId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdChoiceOnGameRoundStartedAnalytics, MatchId, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdChoiceOnGameRoundStartedAnalytics, 0x0088);
		}

		// struct FCrowdPlayLobbyEventsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CrowdPlayLobbyEventsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyEventsAnalytics, CrowdPlayId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyEventsAnalytics, LobbyEventName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyEventsAnalytics, InviteId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyEventsAnalytics, playerId, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdPlayLobbyEventsAnalytics, 0x00A8);
		}

		// struct FCrowdPlayLobbyResultsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CrowdPlayLobbyResultsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyResultsAnalytics, CrowdPlayId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyResultsAnalytics, MatchId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyResultsAnalytics, PartySize, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyResultsAnalytics, NbrQueueToPlayMembers, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyResultsAnalytics, NbrGamesInSameSession, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdPlayLobbyResultsAnalytics, UnknownData_YC66, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdPlayLobbyResultsAnalytics, 0x0098);
		}

		// struct FCurrencyBalanceAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CurrencyBalanceAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyBalanceAnalytics, currencyName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyBalanceAnalytics, CurrencyBalance, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurrencyBalanceAnalytics, UnknownData_UJ22, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurrencyBalanceAnalytics, 0x0080);
		}

		// struct FCustomizationBaseAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__CustomizationBaseAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, CustomizationSlot1, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, CustomizationSlot2, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, CustomizationSlot3, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, Charm1, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, Charm2, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, Charm3, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, role, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationBaseAnalytics, UnknownData_QXIK, 0x00C9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizationBaseAnalytics, 0x00D0);
		}

		// struct FCustomizationLobbyAnalytics : public FCustomizationBaseAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__CustomizationLobbyAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationLobbyAnalytics, LobbyId, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizationLobbyAnalytics, 0x00E0);
		}

		// struct FCustomizationAnalytics : public FCustomizationBaseAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__CustomizationAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizationAnalytics, MatchId, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizationAnalytics, 0x00E0);
		}

		// struct FDDoSDetectionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__DDoSDetectionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, severity, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, MatchId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, NonConnPacketCounter, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, NetConnPacketCounter, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, DisconnPacketCounter, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, BadPacketCounter, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, ErrorPacketCounter, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDDoSDetectionAnalytics, DroppedPacketCounter, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDDoSDetectionAnalytics, 0x00A0);
		}

		// struct FDisconnectionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__DisconnectionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, TimeSinceLastPacket, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, UnknownData_LQB2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, GameFlowStep, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, UnrealMapName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, mapName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, themeName, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, FailureType, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, ErrorString, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionAnalytics, MatchId, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDisconnectionAnalytics, 0x00E0);
		}

		// struct FDisconnectionDetailsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__DisconnectionDetailsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, PlayerPlatform, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, MatchId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, InGameTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, role, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, UnknownData_1NX5, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, Reason, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, Health, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, UnknownData_BA8I, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, CharacterStatus, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, GeneratorActivated, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, HatchStatus, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, DoorStatus, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, DisconnectionType, 0x00BE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDisconnectionDetailsAnalytics, UnknownData_VEIL, 0x00BF);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDisconnectionDetailsAnalytics, 0x00C0);
		}

		// struct FEmblemProgressionDetailsAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__EmblemProgressionDetailsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionDetailsAnalytics, ProgressionType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionDetailsAnalytics, ProgressionPoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionDetailsAnalytics, UnknownData_O8UK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmblemProgressionDetailsAnalytics, 0x0018);
		}

		// struct FEmblemProgressionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__EmblemProgressionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionAnalytics, emblemId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionAnalytics, EmblemValue, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionAnalytics, UnknownData_261J, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionAnalytics, EmblemQuality, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmblemProgressionAnalytics, ProgressionDetails, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmblemProgressionAnalytics, 0x00B0);
		}

		// struct FEndpointLatencyData
		TEST_METHOD(ScriptStruct__DBDAnalytics__EndpointLatencyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndpointLatencyData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndpointLatencyData, Latency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndpointLatencyData, UnknownData_21OK, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndpointLatencyData, 0x0018);
		}

		// struct FEndpointLatencyAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__EndpointLatencyAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndpointLatencyAnalytics, Endpoints, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndpointLatencyAnalytics, 0x0078);
		}

		// struct FFallOutOfWorldAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__FallOutOfWorldAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, FallOutMirrorsId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, x, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, y, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, z, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, UnknownData_XGFK, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, TileName, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, ElapsedMatchTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallOutOfWorldAnalytics, UnknownData_WY5X, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallOutOfWorldAnalytics, 0x00B0);
		}

		// struct FFrameHikeAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__FrameHikeAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, FrameDeltaTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, TimeSinceApplicationStarted, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, CurrentTimeoutThreshold, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, IsOverConnectionTimeLimit, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, UnknownData_ZP2H, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, CurrentMap, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, GameFlowStep, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, CurrentGameFlowContext, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, PreviousGameFlowContext, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, NavigationContext, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, PreviousNavigationContext, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, RecentLogs, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, KrakenMatchId, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, FlushAsyncLoadingTime, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, FlushAsyncLoadingCount, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, SyncLoadCount, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameHikeAnalytics, UnknownData_O4UP, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameHikeAnalytics, 0x0108);
		}

		// struct FSaveGameSummaryPlayerStatsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__SaveGameSummaryPlayerStatsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSummaryPlayerStatsAnalytics, OwnedPerks, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSummaryPlayerStatsAnalytics, PlayerStatsProgression, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSummaryPlayerStatsAnalytics, BloodwebPoints, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSummaryPlayerStatsAnalytics, UnknownData_8U2D, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSummaryPlayerStatsAnalytics, CumulativePlaytime, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveGameSummaryPlayerStatsAnalytics, 0x0098);
		}

		// struct FStatsProgressionData
		TEST_METHOD(ScriptStruct__DBDAnalytics__StatsProgressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatsProgressionData, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatsProgressionData, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatsProgressionData, 0x0010);
		}

		// struct FSerializablePlayerStatsProgression
		TEST_METHOD(ScriptStruct__DBDAnalytics__SerializablePlayerStatsProgression)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSerializablePlayerStatsProgression, StatsProgression, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSerializablePlayerStatsProgression, 0x0010);
		}

		// struct FSerializablePlayerPerks
		TEST_METHOD(ScriptStruct__DBDAnalytics__SerializablePlayerPerks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSerializablePlayerPerks, perks, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSerializablePlayerPerks, 0x0050);
		}

		// struct FDetailedScoreAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__DetailedScoreAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, ScorerMirrorsId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, TargetMirrorsId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, MatchId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, ScoreTypeId, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, ScoreExperience, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, ElapsedMatchTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, InstigatorCoordinateX, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, InstigatorCoordinateY, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, InstigatorCoordinateZ, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, TargetCoordinateX, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, TargetCoordinateY, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, TargetCoordinateZ, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDetailedScoreAnalytics, UnknownData_QDD9, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDetailedScoreAnalytics, 0x00C8);
		}

		// struct FScoreAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__ScoreAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAnalytics, ScoreTypeId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAnalytics, ScoreCount, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAnalytics, ScoreBloodwebPoints, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAnalytics, UnknownData_53Y1, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScoreAnalytics, 0x0090);
		}

		// struct FSpecialEventAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__SpecialEventAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, role, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, UnknownData_1DAR, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, MatchId, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, EventName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, Challenge, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, Amount, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpecialEventAnalytics, CummulativeAmount, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpecialEventAnalytics, 0x00A0);
		}

		// struct FStadiaLivestreamAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__StadiaLivestreamAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaLivestreamAnalytics, StreamStartTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaLivestreamAnalytics, userId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaLivestreamAnalytics, CrowdPlayEnabled, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaLivestreamAnalytics, CrowdChoiceEnabled, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaLivestreamAnalytics, UnknownData_7C4Z, 0x008A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStadiaLivestreamAnalytics, 0x0090);
		}

		// struct FFrameTravelTimeAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__FrameTravelTimeAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, DynamicRange, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, PixelDensity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, RenderResolution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, FrameIssuedToClientArrivalTotalTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, FrameIssuedToBeginRenderingTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, FrameRenderingTime, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, FrameEncodingTime, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, FrameFinishedEncodingToClientArrivalTime, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTravelTimeAnalytics, UnknownData_MAXP, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTravelTimeAnalytics, 0x00C0);
		}

		// struct FStadiaStreamAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__StadiaStreamAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, DynamicRange, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, PixelDensity, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, RenderResolution, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, NetworkDelayForInputTime, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, NetworkDelayForVideoTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, PercentFramesAbove60FPS, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, PercentFramesBelow60FPS, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, PercentFramesBelow45FPS, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, PercentFramesBelow30FPS, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, PercentFramesBelow20FPS, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStreamAnalytics, UnknownData_MW4P, 0x00C4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStadiaStreamAnalytics, 0x00C8);
		}

		// struct FSurvivorTutorialAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__SurvivorTutorialAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInTutorial, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInIntroSection, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInSkillchecksSection, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInKillerSection, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInStealthSection, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInHookSection, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInHealthSection, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInRescueSection, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, SecondsSpentInEscapeSection, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, WasScratchMarksAndWildlifeEventTriggered, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, WasRushedActionEventTriggered, 0x008D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, WasSuccessfulStealthEventTriggered, 0x008E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, WasStealthObjectiveCompleted, 0x008F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, WasHatchEscapeObjectiveCompleted, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSurvivorTutorialAnalytics, UnknownData_MN6P, 0x0091);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSurvivorTutorialAnalytics, 0x0098);
		}

		// struct FMatchmakingQueueAnalytics : public FMatchmakingAnalytics
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingQueueAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingQueueAnalytics, QueueStartTime, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingQueueAnalytics, QueueEndTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingQueueAnalytics, QueueResult, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingQueueAnalytics, rank, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingQueueAnalytics, CrossPlayEnabled, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingQueueAnalytics, UnknownData_IVHD, 0x00B5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingQueueAnalytics, 0x00B8);
		}

		// struct FMatchmakingSearchCompleteAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingSearchCompleteAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, Success, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, UnknownData_4ZBB, 0x0069);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, NumMatches, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, UsedFallback, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, UnknownData_EJFV, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, ConnectingToUser, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, SearchParams, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, SearchResultSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingSearchCompleteAnalytics, UnknownData_1439, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingSearchCompleteAnalytics, 0x0148);
		}

		// struct FMatchmakingHostCreatedAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingHostCreatedAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, NumPublicConnections, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, NumPrivateConnections, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, ShouldAdvertise, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, IsLANMatch, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, AllowInvites, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, UsesPresence, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, AllowJoinViaPresenceFriendsOnly, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, AllowJoinInProgress, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, AllowJoinViaPresence, 0x0076);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, Success, 0x0077);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, HostSettings, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingHostCreatedAnalytics, UnknownData_SQ2O, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingHostCreatedAnalytics, 0x00D8);
		}

		// struct FMatchmakingJoinCompleteAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingJoinCompleteAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingJoinCompleteAnalytics, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingJoinCompleteAnalytics, result, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingJoinCompleteAnalytics, UnknownData_Y7PX, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingJoinCompleteAnalytics, 0x0080);
		}

		// struct FMatchmakingJoinSessionAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingJoinSessionAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingJoinSessionAnalytics, log, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingJoinSessionAnalytics, 0x0078);
		}

		// struct FMatchmakingApproveLoginAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MatchmakingApproveLoginAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingApproveLoginAnalytics, CurrentPlayers, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingApproveLoginAnalytics, Success, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingApproveLoginAnalytics, UnknownData_FTU7, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingApproveLoginAnalytics, Error, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchmakingApproveLoginAnalytics, JoiningUserID, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchmakingApproveLoginAnalytics, 0x0090);
		}

		// struct FWaitTimeAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__WaitTimeAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, EnterLobbyWaitTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, EnterMatchWaitTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, MatchWaitStartUtc, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, MatchWaitStopUtc, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, LobbyWaitStartUtc, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, LobbyWaitStopUtc, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, LobbyWaitStopReason, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, MatchId, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, GameMode, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, role, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, UnknownData_2AJ4, 0x00D2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, PartySize, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, rank, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, RankDifference, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, DaysSinceReset, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWaitTimeAnalytics, UnknownData_QQ9R, 0x00E4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWaitTimeAnalytics, 0x00E8);
		}

		// struct FQueueAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__QueueAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimesQueuedSurvivor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimesQueuedKiller, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, MatchesAsSurvivor, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, MatchesAsKiller, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, SelectedCountry, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, playerName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, FirstTimePlaying, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, UnknownData_HVFP, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, CumulativeMatches, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, CumulativeMatchesAsSurvivor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, CumulativeMatchesAsKiller, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, LastMatchTimestamp, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, SessionStartTimestamp, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, SessionEndTimestamp, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, LastSessionTimestamp, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, CumulativeSessions, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, CumulativePlaytime, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInCharacterMenu, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInBloodwebMenu, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInLoadoutMenu, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInCustomizationMenu, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInFearMarket, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInTallyScreen, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInGameMatch, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInHelpMenu, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInOfflineLobby, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInOfflineLobbySurvivorGroup, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInOnlineLobby, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueueAnalytics, TimeInOnlineLobbySurvivorGroup, 0x011C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueueAnalytics, 0x0120);
		}

		// struct FMenuFlowAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__MenuFlowAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, CurrentContext, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, PreviousContext, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, TimeOnPreviousContext, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, UnknownData_PBWH, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, ContextChangeTimetamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, MatchId, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMenuFlowAnalytics, LobbyId, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMenuFlowAnalytics, 0x00C0);
		}

		// struct FStoreMenuFlowAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__StoreMenuFlowAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreMenuFlowAnalytics, EventTimestamp, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreMenuFlowAnalytics, EventName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStoreMenuFlowAnalytics, data, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStoreMenuFlowAnalytics, 0x0098);
		}

		// struct FPlayerStatusEffectUpdateAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__PlayerStatusEffectUpdateAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusEffectUpdateAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusEffectUpdateAnalytics, ElapsedMatchTime, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusEffectUpdateAnalytics, NbOfConcurrentStatusEffects, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusEffectUpdateAnalytics, StatusEffects, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerStatusEffectUpdateAnalytics, 0x0090);
		}

		// struct FPostGameAnalyticsBase : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__PostGameAnalyticsBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, BloodwebPoints, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, GameDuration, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, CharacterName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, rank, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, PipsGainedOrLost, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGameAnalyticsBase, MatchEndReason, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostGameAnalyticsBase, 0x00A8);
		}

		// struct FPostGame_KillerAnalytics : public FPostGameAnalyticsBase
		TEST_METHOD(ScriptStruct__DBDAnalytics__PostGame_KillerAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, Brutality, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, Deviousness, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, hunter, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, Sacrifice, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, EscapeesCount, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, SacrificedCount, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, KilledCount, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, DisconnectCount, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, BotCount, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, TimeOpenGate, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, SurvivorSpawningPosition, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, GeneratorsDone, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, UnknownData_HLW3, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, EGS_starter, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, EGS_time, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, EGS_duration, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, EGS_sacrifice, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, EGS_reachEnd, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, UsedController, 0x0105);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, UsedKeyboard, 0x0106);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_KillerAnalytics, UnknownData_IY3S, 0x0107);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostGame_KillerAnalytics, 0x0108);
		}

		// struct FPostGame_SurvivorAnalytics : public FPostGameAnalyticsBase
		TEST_METHOD(ScriptStruct__DBDAnalytics__PostGame_SurvivorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, Objectives, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, Survival, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, Altruism, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, Boldness, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, Outcome, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, DamageState, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, UnknownData_7RPL, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, HookedCount, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, UsedController, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, UsedKeyboard, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostGame_SurvivorAnalytics, UnknownData_ELYI, 0x00D2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostGame_SurvivorAnalytics, 0x00D8);
		}

		// struct FProceduralGenerationAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__ProceduralGenerationAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, GenerationSeed, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, MapSeed, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, mapName, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_MeatLocker_Small, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_MeatLocker_Big, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_Searchable, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_EdgeObjects, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_LivingWorldObjects, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_Hatch, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_BookShelves, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_BreakableWalls, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_Totems, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, Procedural_QuadrantSpawn, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletSpawned, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletProceduralMin, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletProceduralMax, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletProcedural, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletProceduralSetCount, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletGenerationId, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, PalletGeneric, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, UnknownData_IYBM, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, KillerSpawn, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, SurvivorSpawn, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, MatchId, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, HookSpawned, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, UseFixedMaps, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, UnknownData_RAIU, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, NavmeshGenerationTime, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralGenerationAnalytics, UnknownData_LRQK, 0x017C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralGenerationAnalytics, 0x0180);
		}

		// struct FReportAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__ReportAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, ClientIdTransmitter, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, ClientIdReceiver, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, MirrorsIdTransmitter, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, MirrorsIdReceiver, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, RoleTransmitter, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, RoleReceiver, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, UnknownData_CWQ4, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, MatchId, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, GameMode, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, ReportType, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, ReportCategory, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReportAnalytics, Comments, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReportAnalytics, 0x0100);
		}

		// struct FRTMAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__RTMAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRTMAnalytics, RTMType, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRTMAnalytics, RTMSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRTMAnalytics, UnknownData_7BHT, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRTMAnalytics, CurrentGameFlowStep, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRTMAnalytics, 0x0090);
		}

		// struct FSaveGameSummaryCharacterStatsAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__SaveGameSummaryCharacterStatsAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSaveGameSummaryCharacterStatsAnalytics, SavedCharacterStats, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSaveGameSummaryCharacterStatsAnalytics, 0x0078);
		}

		// struct FCharacterSpecificData
		TEST_METHOD(ScriptStruct__DBDAnalytics__CharacterSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpecificData, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpecificData, level, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterSpecificData, prestigeLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterSpecificData, 0x0014);
		}

		// struct FSerializableSaveGameSummaryCharacterData
		TEST_METHOD(ScriptStruct__DBDAnalytics__SerializableSaveGameSummaryCharacterData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSerializableSaveGameSummaryCharacterData, CharacterStats, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSerializableSaveGameSummaryCharacterData, 0x0010);
		}

		// struct FArchiveVignetteVideoAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__ArchiveVignetteVideoAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, archiveId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, vignetteId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, videoID, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, StartVideoTimestamp, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, VideoTimeSpent, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, WasVideoWatchUntilEnd, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteVideoAnalytics, UnknownData_FQIU, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchiveVignetteVideoAnalytics, 0x00B8);
		}

		// struct FArchiveVignetteEntryAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__ArchiveVignetteEntryAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, archiveId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, vignetteId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, EntryId, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, UnknownData_4CQ8, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, SelectEntryTimestamp, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, EntryTimeSpent, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, IsTaggedAsNew, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, HasVoiceOver, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, StartWithAutoplayEnable, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, IsAutoplayEnableWhenDeselectingEntry, 0x00AB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, UnknownData_KHOY, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, StartVoiceoverTimestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FArchiveVignetteEntryAnalytics, VoiceoverLongestTimeSpent, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FArchiveVignetteEntryAnalytics, 0x00C8);
		}

		// struct FBotReplacementAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__BotReplacementAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, KrakenMatchId, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, role, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, UnknownData_VYOH, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, matchTime, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, CharacterName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, ReplacedCharacterMirrorsId, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, BotDifficultyLevel, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBotReplacementAnalytics, UnknownData_S471, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBotReplacementAnalytics, 0x00B8);
		}

		// struct FGameplay_ChaseAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__DBDAnalytics__Gameplay_ChaseAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, IsABot, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, UnknownData_H0H8, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, MirrorsIdSurvivor, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordXStartKiller, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordYStartKiller, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordZStartKiller, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordXEndKiller, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordYEndKiller, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordZEndKiller, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, PalletsDestroyedByKiller, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, WindowsVaultedByKiller, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, PalletsVaultedByKiller, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, BasicAttackSwingsByKiller, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, BasicAttackHitsByKiller, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, SpecialAttackAttemptsByKiller, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, SpecialAttackHitsByKiller, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, DistanceCoveredKiller, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordXStartSurvivor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordYStartSurvivor, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordZStartSurvivor, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordXEndSurvivor, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordYEndSurvivor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, CoordZEndSurvivor, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, PalletsDroppedBySurvivor, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, PalletsStunnedBySurvivor, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, WindowsVaultedBySurvivor, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, PalletsVaultedBySurvivor, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, StartingHealthOfSurvivor, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, EndingHealthOfSurvivor, 0x00F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, AmountHealedOfSurvivor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, UnknownData_I8S8, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, StartingTileSurvivor, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, EndingTileSurvivor, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, AmountOfTilesVisitedSurvivor, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, UnknownData_5CJU, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, TilesVisitedSurvivor, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, DistanceCoveredSurvivor, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, DisplacementSurvivor, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, ChaseStartTimeInSecond, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplay_ChaseAnalytics, ChaseEndTimeInSecond, 0x0144);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplay_ChaseAnalytics, 0x0148);
		}

		// struct FVertexPair
		TEST_METHOD(ScriptStruct__EditableMesh__VertexPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexPair, VertexID1, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexPair, 0x0008);
		}

		// struct FMeshElementAttributeValue
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeValue, UnknownData_83YO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeValue, 0x0050);
		}

		// struct FMeshElementAttributeData
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeData, AttributeValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeData, 0x0060);
		}

		// struct FMeshElementAttributeList
		TEST_METHOD(ScriptStruct__EditableMesh__MeshElementAttributeList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshElementAttributeList, Attributes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshElementAttributeList, 0x0010);
		}

		// struct FVertexAndAttributes
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAndAttributes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, VertexID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAndAttributes, PolygonVertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAndAttributes, 0x0018);
		}

		// struct FPolygonToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_KW94, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PerimeterVertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, OriginalPolygonID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, PolygonEdgeHardness, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToCreate, UnknownData_ALRA, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToCreate, 0x0020);
		}

		// struct FEdgeToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__EdgeToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, VertexID1, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, EdgeAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, OriginalEdgeID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdgeToCreate, UnknownData_SSII, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdgeToCreate, 0x0020);
		}

		// struct FDelegateHandleWrapper
		TEST_METHOD(ScriptStruct__GameplayUtilities__DelegateHandleWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateHandleWrapper, UnknownData_TLER, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateHandleWrapper, 0x0008);
		}

		// struct FAuthorityDiscernedCharacter
		TEST_METHOD(ScriptStruct__GameplayUtilities__AuthorityDiscernedCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthorityDiscernedCharacter, _character, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthorityDiscernedCharacter, _isSighted, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthorityDiscernedCharacter, UnknownData_F0NC, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthorityDiscernedCharacter, 0x0010);
		}

		// struct FVertexInstanceToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstanceToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_6FRA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, VertexInstanceAttributes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, OriginalVertexInstanceID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstanceToCreate, UnknownData_5Q0Z, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstanceToCreate, 0x0020);
		}

		// struct FDiscernibleCharacter
		TEST_METHOD(ScriptStruct__GameplayUtilities__DiscernibleCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscernibleCharacter, _character, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDiscernibleCharacter, UnknownData_L2ZD, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDiscernibleCharacter, 0x0018);
		}

		// struct FVertexToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, VertexAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, OriginalVertexID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToCreate, UnknownData_AM2S, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToCreate, 0x0018);
		}

		// struct FHitValidatorInstigatorParams
		TEST_METHOD(ScriptStruct__GameplayUtilities__HitValidatorInstigatorParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorInstigatorParams, instigator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorInstigatorParams, UnknownData_VPCL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorInstigatorParams, HitPrimitive, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorInstigatorParams, UnknownData_E379, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitValidatorInstigatorParams, 0x0060);
		}

		// struct FSubdividedQuadVertex
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuadVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexPositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, TextureCoordinate1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexNormal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuadVertex, VertexBinormalSign, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuadVertex, 0x0034);
		}

		// struct FHitValidatorTargetParams
		TEST_METHOD(ScriptStruct__GameplayUtilities__HitValidatorTargetParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorTargetParams, target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorTargetParams, HittableCapsule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorTargetParams, targetLocationTimestamp, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidatorTargetParams, UnknownData_VTRF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitValidatorTargetParams, 0x0018);
		}

		// struct FSubdividedQuad
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedQuad)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex2, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedQuad, QuadVertex3, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedQuad, 0x00D0);
		}

		// struct FHitValidationReport
		TEST_METHOD(ScriptStruct__GameplayUtilities__HitValidationReport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, InstigatorParams, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, TargetParams, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, ValidationTimestamp, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, TargetRecorderTimeRange, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, UnknownData_UC2O, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, InstigatorOwningCharacter, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, MaximumDistance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, CapsuleInflation, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, IsValidHit, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, IsValidDistance, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, UnknownData_IH3D, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, InstigatorTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, RewindedTargetLocation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, TargetLocation, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, SquareDistance, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, HasPerformCollisionCheck, 0x00FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, IsValidCollision, 0x00FD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, UnknownData_CWF5, 0x00FE);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, HitPrimitiveTransform, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHitValidationReport, HittablePrimitiveTransform, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHitValidationReport, 0x0160);
		}

		// struct FSubdivisionLimitSection
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitSection, SubdividedQuads, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitSection, 0x0010);
		}

		// struct FSubdividedWireEdge
		TEST_METHOD(ScriptStruct__EditableMesh__SubdividedWireEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex0PositionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, EdgeVertex1PositionIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdividedWireEdge, UnknownData_YXB2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdividedWireEdge, 0x000C);
		}

		// struct FSubdivisionLimitData
		TEST_METHOD(ScriptStruct__EditableMesh__SubdivisionLimitData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, VertexPositions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, Sections, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubdivisionLimitData, SubdividedWireEdges, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubdivisionLimitData, 0x0030);
		}

		// struct FRenderingPolygonGroup
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygonGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygonGroup, UnknownData_C7RC, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygonGroup, 0x0048);
		}

		// struct FRenderingPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__RenderingPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, UnknownData_7162, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRenderingPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRenderingPolygon, 0x0018);
		}

		// struct FAdaptorPolygon2Group
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon2Group)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, RenderingSectionIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaterialIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, MaxTriangles, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon2Group, UnknownData_XC3Y, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon2Group, 0x0048);
		}

		// struct FAdaptorTriangleID : public FElementID
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorTriangleID)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorTriangleID, 0x0004);
		}

		// struct FAdaptorPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__AdaptorPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, PolygonGroupID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, UnknownData_TX1S, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAdaptorPolygon, TriangulatedPolygonTriangleIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAdaptorPolygon, 0x0018);
		}

		// struct FPolygonGroupForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupForPolygon, PolygonGroupID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupForPolygon, 0x0008);
		}

		// struct FPolygonGroupToCreate
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonGroupToCreate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, PolygonGroupAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, OriginalPolygonGroupID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonGroupToCreate, UnknownData_MWU8, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonGroupToCreate, 0x0018);
		}

		// struct FVertexToMove
		TEST_METHOD(ScriptStruct__EditableMesh__VertexToMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexToMove, NewVertexPosition, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexToMove, 0x0010);
		}

		// struct FVertexIndexAndInstanceID
		TEST_METHOD(ScriptStruct__EditableMesh__VertexIndexAndInstanceID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, ContourIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexIndexAndInstanceID, VertexInstanceID, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexIndexAndInstanceID, 0x0008);
		}

		// struct FVertexInstancesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexInstancesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexInstancesForPolygonHole, VertexIndicesAndInstanceIDs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexInstancesForPolygonHole, 0x0010);
		}

		// struct FChangeVertexInstancesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__ChangeVertexInstancesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, UnknownData_6AUL, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, PerimeterVertexIndicesAndInstanceIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChangeVertexInstancesForPolygon, VertexIndicesAndInstanceIDsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChangeVertexInstancesForPolygon, 0x0028);
		}

		// struct FVertexAttributesForPolygonHole
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygonHole)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygonHole, VertexAttributeList, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygonHole, 0x0010);
		}

		// struct FVertexAttributesForPolygon
		TEST_METHOD(ScriptStruct__EditableMesh__VertexAttributesForPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, UnknownData_KPWI, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, PerimeterVertexAttributeLists, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVertexAttributesForPolygon, VertexAttributeListsForEachHole, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVertexAttributesForPolygon, 0x0028);
		}

		// struct FAttributesForEdge
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, UnknownData_XZGA, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForEdge, EdgeAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForEdge, 0x0018);
		}

		// struct FAttributesForVertexInstance
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertexInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, UnknownData_EGQZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertexInstance, VertexInstanceAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertexInstance, 0x0018);
		}

		// struct FAttributesForVertex
		TEST_METHOD(ScriptStruct__EditableMesh__AttributesForVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, UnknownData_QWKV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttributesForVertex, VertexAttributes, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttributesForVertex, 0x0018);
		}

		// struct FPolygonToSplit
		TEST_METHOD(ScriptStruct__EditableMesh__PolygonToSplit)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, PolygonID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, UnknownData_EO59, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolygonToSplit, VertexPairsToSplitAt, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolygonToSplit, 0x0018);
		}

		// struct FMagicLeapImageTrackerTarget
		TEST_METHOD(ScriptStruct__MagicLeapImageTracker__MagicLeapImageTrackerTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapImageTrackerTarget, UnknownData_LGPX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapImageTrackerTarget, 0x00B0);
		}

		// struct FLobbyPlayerStateActorInfo : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Lobby__LobbyPlayerStateActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPlayerStateActorInfo, UnknownData_ADZW, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPlayerStateActorInfo, LobbyPlayerState, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyPlayerStateActorInfo, 0x0018);
		}

		// struct FLobbyPlayerStateInfoArray : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__Lobby__LobbyPlayerStateInfoArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPlayerStateInfoArray, players, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLobbyPlayerStateInfoArray, ParentState, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLobbyPlayerStateInfoArray, 0x0120);
		}

		// struct FNamedInterface
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, UnknownData_4NCV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterface, InterfaceObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterface, 0x0018);
		}

		// struct FInAppPurchaseProductRequest
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest, UnknownData_2MIM, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest, 0x0018);
		}

		// struct FInAppPurchaseRestoreInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseRestoreInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, ReceiptData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo, TransactionIdentifier, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo, 0x0030);
		}

		// struct FNamedInterfaceDef
		TEST_METHOD(ScriptStruct__OnlineSubsystem__NamedInterfaceDef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, UnknownData_V0BH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedInterfaceDef, InterfaceClassName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedInterfaceDef, 0x0020);
		}

		// struct FInAppPurchaseProductInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystem__InAppPurchaseProductInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, UnknownData_G2JO, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo, ReceiptData, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo, 0x00A8);
		}

		// struct FVirtualKeyboardOptions
		TEST_METHOD(ScriptStruct__Slate__VirtualKeyboardOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualKeyboardOptions, bEnableAutocorrect, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualKeyboardOptions, 0x0001);
		}

		// struct FInputChord
		TEST_METHOD(ScriptStruct__Slate__InputChord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputChord, UnknownData_JSGR, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputChord, 0x0028);
		}

		// struct FAnchors
		TEST_METHOD(ScriptStruct__Slate__Anchors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Minimum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchors, Maximum, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchors, 0x0010);
		}

		// struct FCustomizedToolMenuNameArray
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuNameArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuNameArray, Names, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuNameArray, 0x0010);
		}

		// struct FCustomizedToolMenuSection
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuSection, UnknownData_FXPH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuSection, 0x0004);
		}

		// struct FCustomizedToolMenuEntry
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenuEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, visibility, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenuEntry, UnknownData_7DCR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenuEntry, 0x0004);
		}

		// struct FCustomizedToolMenu
		TEST_METHOD(ScriptStruct__Slate__CustomizedToolMenu)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_91X0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Entries, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, Sections, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, EntryOrder, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, SectionOrder, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomizedToolMenu, UnknownData_B56G, 0x0110);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomizedToolMenu, 0x01F0);
		}

		// struct FCrowdAvoidanceConfig
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, VelocityBias, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, DesiredVelocityWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CurrentVelocityWeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, SideBiasWeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, ImpactTimeRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, CustomPatternIdx, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDivisions, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveRings, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceConfig, AdaptiveDepth, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceConfig, 0x001C);
		}

		// struct FCrowdAvoidanceSamplingPattern
		TEST_METHOD(ScriptStruct__AIModule__CrowdAvoidanceSamplingPattern)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Angles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCrowdAvoidanceSamplingPattern, Radii, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCrowdAvoidanceSamplingPattern, 0x0020);
		}

		// struct FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_7ZZA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataBinding, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, DataField, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderValue, UnknownData_BSRZ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderValue, 0x0028);
		}

		// struct FAIDataProviderTypedValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderTypedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, PropertyType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderTypedValue, UnknownData_9DM7, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderTypedValue, 0x0038);
		}

		// struct FAIDataProviderBoolValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderBoolValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, DefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderBoolValue, UnknownData_3PAA, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderBoolValue, 0x0040);
		}

		// struct FEnvTraceData
		TEST_METHOD(ScriptStruct__AIModule__EnvTraceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, VersionNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_0IK8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, NavigationFilter, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectDown, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ProjectUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentY, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, ExtentZ, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, PostProjectionVerticalOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceChannel, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, SerializedChannel, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceShape, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, TraceMode, 0x002B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvTraceData, UnknownData_YSMD, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvTraceData, 0x0030);
		}

		// struct FEnvDirection
		TEST_METHOD(ScriptStruct__AIModule__EnvDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineFrom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, LineTo, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, DirMode, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvDirection, UnknownData_UL9S, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvDirection, 0x0020);
		}

		// struct FEnvQueryInstanceCache
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryInstanceCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, Template, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryInstanceCache, UnknownData_T29E, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryInstanceCache, 0x0188);
		}

		// struct FEnvOverlapData
		TEST_METHOD(ScriptStruct__AIModule__EnvOverlapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ExtentZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, ShapeOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapChannel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, OverlapShape, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_CV0W, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvOverlapData, UnknownData_X5DQ, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvOverlapData, 0x0020);
		}

		// struct FAIRequestID
		TEST_METHOD(ScriptStruct__AIModule__AIRequestID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRequestID, RequestID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRequestID, 0x0004);
		}

		// struct FBlackboardKeySelector
		TEST_METHOD(ScriptStruct__AIModule__BlackboardKeySelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, AllowedTypes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_BWO4, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, SelectedKeyID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_BAQB, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardKeySelector, UnknownData_RV93, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardKeySelector, 0x0030);
		}

		// struct FAIDynamicParam
		TEST_METHOD(ScriptStruct__AIModule__AIDynamicParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, ParamType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_I6TO, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, Value, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, UnknownData_OXIA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDynamicParam, BBKey, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDynamicParam, 0x0048);
		}

		// struct FEQSParametrizedQueryExecutionRequest
		TEST_METHOD(ScriptStruct__AIModule__EQSParametrizedQueryExecutionRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, QueryConfig, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, EQSQueryBlackboardKey, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, RunMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_XG22, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEQSParametrizedQueryExecutionRequest, UnknownData_SG84, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEQSParametrizedQueryExecutionRequest, 0x0050);
		}

		// struct FGenericTeamId
		TEST_METHOD(ScriptStruct__AIModule__GenericTeamId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericTeamId, TeamID, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericTeamId, 0x0001);
		}

		// struct FAIDataProviderFloatValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderFloatValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, DefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderFloatValue, UnknownData_NYBN, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderFloatValue, 0x0040);
		}

		// struct FAIDataProviderIntValue : public FAIDataProviderTypedValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderIntValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, DefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderIntValue, UnknownData_N5WF, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderIntValue, 0x0040);
		}

		// struct FAIDataProviderStructValue : public FAIDataProviderValue
		TEST_METHOD(ScriptStruct__AIModule__AIDataProviderStructValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDataProviderStructValue, UnknownData_6B63, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDataProviderStructValue, 0x0038);
		}

		// struct FAIStimulus
		TEST_METHOD(ScriptStruct__AIModule__AIStimulus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Age, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ExpirationAge, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, Strength, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, StimulusLocation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, ReceiverLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, tag, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_M1GW, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIStimulus, UnknownData_7EO7, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIStimulus, 0x0044);
		}

		// struct FActorPerceptionBlueprintInfo
		TEST_METHOD(ScriptStruct__AIModule__ActorPerceptionBlueprintInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, LastSensedStimuli, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPerceptionBlueprintInfo, UnknownData_LVW1, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPerceptionBlueprintInfo, 0x0020);
		}

		// struct FAISenseAffiliationFilter
		TEST_METHOD(ScriptStruct__AIModule__AISenseAffiliationFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISenseAffiliationFilter, UnknownData_6RSQ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISenseAffiliationFilter, 0x0004);
		}

		// struct FAIDamageEvent
		TEST_METHOD(ScriptStruct__AIModule__AIDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, location, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, HitLocation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, UnknownData_922G, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, DamagedActor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIDamageEvent, instigator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIDamageEvent, 0x0030);
		}

		// struct FAINoiseEvent
		TEST_METHOD(ScriptStruct__AIModule__AINoiseEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_PFCO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, NoiseLocation, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, Loudness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, MaxRange, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, instigator, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, tag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAINoiseEvent, UnknownData_8IJ0, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAINoiseEvent, 0x0030);
		}

		// struct FAIPredictionEvent
		TEST_METHOD(ScriptStruct__AIModule__AIPredictionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, Requestor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, PredictedActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIPredictionEvent, UnknownData_83KM, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIPredictionEvent, 0x0018);
		}

		// struct FAISightEvent
		TEST_METHOD(ScriptStruct__AIModule__AISightEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, UnknownData_4QVJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, SeenActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISightEvent, Observer, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISightEvent, 0x0018);
		}

		// struct FAITeamStimulusEvent
		TEST_METHOD(ScriptStruct__AIModule__AITeamStimulusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, UnknownData_7TXO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Broadcaster, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITeamStimulusEvent, Enemy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITeamStimulusEvent, 0x0038);
		}

		// struct FAITouchEvent
		TEST_METHOD(ScriptStruct__AIModule__AITouchEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, UnknownData_BPQ4, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, TouchReceiver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAITouchEvent, otherActor, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAITouchEvent, 0x0020);
		}

		// struct FIntervalCountdown
		TEST_METHOD(ScriptStruct__AIModule__IntervalCountdown)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, Interval, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntervalCountdown, UnknownData_24CN, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntervalCountdown, 0x0008);
		}

		// struct FAIMoveRequest
		TEST_METHOD(ScriptStruct__AIModule__AIMoveRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, goalActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIMoveRequest, UnknownData_8JSZ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIMoveRequest, 0x0040);
		}

		// struct FBehaviorTreeTemplateInfo
		TEST_METHOD(ScriptStruct__AIModule__BehaviorTreeTemplateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, asset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, Template, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBehaviorTreeTemplateInfo, UnknownData_AUTA, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBehaviorTreeTemplateInfo, 0x0018);
		}

		// struct FBlackboardEntry
		TEST_METHOD(ScriptStruct__AIModule__BlackboardEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, EntryName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_VJH9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, KeyType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlackboardEntry, UnknownData_46OB, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlackboardEntry, 0x0020);
		}

		// struct FBTDecoratorLogic
		TEST_METHOD(ScriptStruct__AIModule__BTDecoratorLogic)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Operation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, UnknownData_QHTO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTDecoratorLogic, Number, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTDecoratorLogic, 0x0004);
		}

		// struct FBTCompositeChild
		TEST_METHOD(ScriptStruct__AIModule__BTCompositeChild)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildComposite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, ChildTask, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, Decorators, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBTCompositeChild, DecoratorOps, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBTCompositeChild, 0x0030);
		}

		// struct FEnvQueryRequest
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, QueryTemplate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, world, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryRequest, UnknownData_OW3N, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryRequest, 0x0068);
		}

		// struct FEnvQueryResult
		TEST_METHOD(ScriptStruct__AIModule__EnvQueryResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_M9L0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, itemType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_S3G0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, OptionIndex, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, QueryID, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvQueryResult, UnknownData_Y2CP, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvQueryResult, 0x0040);
		}

		// struct FEnvNamedValue
		TEST_METHOD(ScriptStruct__AIModule__EnvNamedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, ParamType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, UnknownData_7IDW, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEnvNamedValue, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEnvNamedValue, 0x0014);
		}

		// struct FPawnActionStack
		TEST_METHOD(ScriptStruct__AIModule__PawnActionStack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionStack, TopAction, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionStack, 0x0008);
		}

		// struct FPawnActionEvent
		TEST_METHOD(ScriptStruct__AIModule__PawnActionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPawnActionEvent, UnknownData_WISE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPawnActionEvent, 0x0018);
		}

		// struct FGameplayTagTableRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, UnknownData_8NYJ, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagTableRow, DevComment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagTableRow, 0x0028);
		}

		// struct FRestrictedGameplayTagTableRow : public FGameplayTagTableRow
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedGameplayTagTableRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, bAllowNonRestrictedChildren, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedGameplayTagTableRow, UnknownData_OQDQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedGameplayTagTableRow, 0x0030);
		}

		// struct FRestrictedConfigInfo
		TEST_METHOD(ScriptStruct__GameplayTags__RestrictedConfigInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, RestrictedConfigName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRestrictedConfigInfo, Owners, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRestrictedConfigInfo, 0x0020);
		}

		// struct FGameplayTagRedirect
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, OldTagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagRedirect, NewTagName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagRedirect, 0x0018);
		}

		// struct FGameplayTagCategoryRemap
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCategoryRemap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, BaseCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCategoryRemap, RemapCategories, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCategoryRemap, 0x0020);
		}

		// struct FGameplayTagCreationWidgetHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagCreationWidgetHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagCreationWidgetHelper, UnknownData_PETP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagCreationWidgetHelper, 0x0001);
		}

		// struct FGameplayTagReferenceHelper
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagReferenceHelper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagReferenceHelper, UnknownData_WF2T, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagReferenceHelper, 0x0010);
		}

		// struct FGameplayTagNode
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagNode, UnknownData_3BJP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagNode, 0x0058);
		}

		// struct FgameplayTag
		TEST_METHOD(ScriptStruct__GameplayTags__gameplayTag)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FgameplayTag, tagName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FgameplayTag, 0x000C);
		}

		// struct FGameplayTagQuery
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TokenStreamVersion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UnknownData_0HXM, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, TagDictionary, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, QueryTokenStream, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, UserDescription, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagQuery, AutoDescription, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagQuery, 0x0048);
		}

		// struct FGameplayTagContainer
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, GameplayTags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagContainer, ParentTags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagContainer, 0x0020);
		}

		// struct FGameplayTagSource
		TEST_METHOD(ScriptStruct__GameplayTags__GameplayTagSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, UnknownData_CITI, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceTagList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayTagSource, SourceRestrictedTagList, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayTagSource, 0x0020);
		}

		// struct FCapturedPropSegment
		TEST_METHOD(ScriptStruct__VariantManagerContent__CapturedPropSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, propertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, PropertyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, UnknownData_0IQW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPropSegment, ComponentName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPropSegment, 0x0028);
		}

		// struct FFunctionCaller
		TEST_METHOD(ScriptStruct__VariantManagerContent__FunctionCaller)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionCaller, FunctionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionCaller, 0x000C);
		}

		// struct FLightMaterialUpdate
		TEST_METHOD(ScriptStruct__GFXUtilities__LightMaterialUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMaterialUpdate, MATERIAL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMaterialUpdate, propertyName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightMaterialUpdate, multiplier, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightMaterialUpdate, 0x0018);
		}

		// struct FLightUpdate
		TEST_METHOD(ScriptStruct__GFXUtilities__LightUpdate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightUpdate, light, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightUpdate, multiplier, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightUpdate, UnknownData_6AEB, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightUpdate, 0x0010);
		}

		// struct FDBDCullDistanceSizePair
		TEST_METHOD(ScriptStruct__GFXUtilities__DBDCullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDCullDistanceSizePair, 0x0008);
		}

		// struct FMaterialMap
		TEST_METHOD(ScriptStruct__GFXUtilities__MaterialMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialMap, SrcMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialMap, DstMaterial, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialMap, 0x0010);
		}

		// struct FMaterialNamedGroup
		TEST_METHOD(ScriptStruct__GFXUtilities__MaterialNamedGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialNamedGroup, groupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialNamedGroup, Maps, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialNamedGroup, 0x0020);
		}

		// struct FMaterialHelperOriginalMeshState
		TEST_METHOD(ScriptStruct__GFXUtilities__MaterialHelperOriginalMeshState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialHelperOriginalMeshState, UnknownData_4DLM, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialHelperOriginalMeshState, _originalMaterials, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialHelperOriginalMeshState, _originalDynamicMaterials, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialHelperOriginalMeshState, UnknownData_JYMK, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialHelperOriginalMeshState, 0x0048);
		}

		// struct FWidgetTransform
		TEST_METHOD(ScriptStruct__UMG__WidgetTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, Shear, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetTransform, angle, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetTransform, 0x001C);
		}

		// struct FPaintContext
		TEST_METHOD(ScriptStruct__UMG__PaintContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintContext, UnknownData_W6AH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintContext, 0x0030);
		}

		// struct FShapedTextOptions
		TEST_METHOD(ScriptStruct__UMG__ShapedTextOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextShapingMethod, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FShapedTextOptions, TextFlowDirection, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShapedTextOptions, 0x0003);
		}

		// struct FAnimationEventBinding
		TEST_METHOD(ScriptStruct__UMG__AnimationEventBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, Delegate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_UL2M, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, AnimationEvent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_SHOZ, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UserTag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationEventBinding, UnknownData_IQWM, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationEventBinding, 0x0030);
		}

		// struct FNamedSlotBinding
		TEST_METHOD(ScriptStruct__UMG__NamedSlotBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, UnknownData_LYF2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedSlotBinding, content, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedSlotBinding, 0x0018);
		}

		// struct FAnchorData
		TEST_METHOD(ScriptStruct__UMG__AnchorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Offsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Anchors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnchorData, Alignment, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnchorData, 0x0028);
		}

		// struct FDynamicPropertyPath : public FCachedPropertyPath
		TEST_METHOD(ScriptStruct__UMG__DynamicPropertyPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicPropertyPath, 0x0028);
		}

		// struct FMovieScene2DTransformMask
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformMask, 0x0004);
		}

		// struct FMovieScene2DTransformSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieScene2DTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Translation, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, rotation, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, scale, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Shear, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, BlendType, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, UnknownData_1VRV, 0x04B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene2DTransformSectionTemplate, Mask, 0x04BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene2DTransformSectionTemplate, 0x04C0);
		}

		// struct FMovieSceneMarginSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneMarginSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, TopCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, LeftCurve, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, RightCurve, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BottomCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, BlendType, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMarginSectionTemplate, UnknownData_O6WH, 0x02D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMarginSectionTemplate, 0x02E0);
		}

		// struct FMovieSceneWidgetMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__UMG__MovieSceneWidgetMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneWidgetMaterialSectionTemplate, BrushPropertyNamePath, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneWidgetMaterialSectionTemplate, 0x0090);
		}

		// struct FRichTextStyleRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichTextStyleRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichTextStyleRow, TextStyle, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichTextStyleRow, 0x0290);
		}

		// struct FRichImageRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__UMG__RichImageRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichImageRow, brush, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichImageRow, 0x0098);
		}

		// struct FSlateMeshVertex
		TEST_METHOD(ScriptStruct__UMG__SlateMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV1, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV2, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV4, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateMeshVertex, UV5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateMeshVertex, 0x003C);
		}

		// struct FSlateChildSize
		TEST_METHOD(ScriptStruct__UMG__SlateChildSize)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, SizeRule, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateChildSize, UnknownData_7EZ5, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateChildSize, 0x0008);
		}

		// struct FUserWidgetPool
		TEST_METHOD(ScriptStruct__UMG__UserWidgetPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, ActiveWidgets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, InactiveWidgets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserWidgetPool, UnknownData_05JL, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserWidgetPool, 0x0080);
		}

		// struct FWidgetAnimationBinding
		TEST_METHOD(ScriptStruct__UMG__WidgetAnimationBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, WidgetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, SlotWidgetName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, AnimationGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, bIsRootWidget, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetAnimationBinding, UnknownData_FR4V, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetAnimationBinding, 0x002C);
		}

		// struct FBlueprintWidgetAnimationDelegateBinding
		TEST_METHOD(ScriptStruct__UMG__BlueprintWidgetAnimationDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, Action, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UnknownData_2KLB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, AnimationToBind, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, FunctionNameToBind, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintWidgetAnimationDelegateBinding, UserTag, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintWidgetAnimationDelegateBinding, 0x0028);
		}

		// struct FDelegateRuntimeBinding
		TEST_METHOD(ScriptStruct__UMG__DelegateRuntimeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, propertyName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, FunctionName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, SourcePath, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, Kind, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateRuntimeBinding, UnknownData_AEIM, 0x0051);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateRuntimeBinding, 0x0058);
		}

		// struct FWidgetComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__UMG__WidgetComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetComponentInstanceData, UnknownData_LEYP, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetComponentInstanceData, 0x00B8);
		}

		// struct FWidgetNavigationData
		TEST_METHOD(ScriptStruct__UMG__WidgetNavigationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Rule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_CZ75, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, WidgetToFocus, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, Widget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, CustomDelegate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWidgetNavigationData, UnknownData_XP2P, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWidgetNavigationData, 0x002C);
		}

		// struct FEventReply
		TEST_METHOD(ScriptStruct__UMG__EventReply)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventReply, UnknownData_5VB0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventReply, 0x00C0);
		}

		// struct FGhostStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__GhostStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostStatusData, IsExposed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostStatusData, UnknownData_Q2UE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostStatusData, StalkingProgress, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGhostStatusData, 0x0008);
		}

		// struct FExecutionerStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__ExecutionerStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExecutionerStatusData, AgonyProgress, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExecutionerStatusData, 0x0004);
		}

		// struct FDoctorStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__DoctorStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDoctorStatusData, AfflictionLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDoctorStatusData, 0x0001);
		}

		// struct FbaseLoadoutPartViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__baseLoadoutPartViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FbaseLoadoutPartViewData, itemId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FbaseLoadoutPartViewData, UnknownData_HLZ8, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FbaseLoadoutPartViewData, IconTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FbaseLoadoutPartViewData, DisplayName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FbaseLoadoutPartViewData, rarity, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FbaseLoadoutPartViewData, UnknownData_10IB, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FbaseLoadoutPartViewData, 0x0030);
		}

		// struct FpowerViewData : public FbaseLoadoutPartViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__powerViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, inputKey, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, IsRechargeable, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, isActivated, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, UnknownData_3903, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, Count, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, ProgressValue, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, ShowKeyPrompt, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, IsCountDisplayForced, 0x005D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerViewData, UnknownData_9F0N, 0x005E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FpowerViewData, 0x0060);
		}

		// struct FaddonViewData : public FbaseLoadoutPartViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__addonViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FaddonViewData, Cooldown, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FaddonViewData, StatusEffectType, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FaddonViewData, UnknownData_X1B1, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FaddonViewData, 0x0038);
		}

		// struct FpowerBundleViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__powerBundleViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerBundleViewData, Power, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerBundleViewData, addon1, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FpowerBundleViewData, addon2, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FpowerBundleViewData, 0x00D0);
		}

		// struct FScreenIndicatorViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__ScreenIndicatorViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, IsInFront, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, UnknownData_12HC, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, ScreenPosition, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, distance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, IndicatorType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenIndicatorViewData, UnknownData_KW74, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenIndicatorViewData, 0x0028);
		}

		// struct FSkillCheckViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__SkillCheckViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, inputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, HitAreaStart, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, HitAreaLength, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, BonusAreaLength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, IsHexed, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, IsSpectating, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkillCheckViewData, UnknownData_H4GB, 0x002E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkillCheckViewData, 0x0030);
		}

		// struct FStartSequenceViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__StartSequenceViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartSequenceViewData, themeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartSequenceViewData, mapName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartSequenceViewData, ThemeColorId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartSequenceViewData, UnknownData_U2GO, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartSequenceViewData, 0x0028);
		}

		// struct FTallyTutorialPopupViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__TallyTutorialPopupViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyTutorialPopupViewData, isKiller, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyTutorialPopupViewData, FirstTimeCompleted, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyTutorialPopupViewData, UnknownData_12N7, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTallyTutorialPopupViewData, BloodpointsScore, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTallyTutorialPopupViewData, 0x0008);
		}

		// struct FTemplateViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__TemplateViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateViewData, UnknownData_7I5S, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateViewData, 0x0001);
		}

		// struct FperkViewData : public FbaseLoadoutPartViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__perkViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FperkViewData, level, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FperkViewData, Cooldown, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FperkViewData, StatusEffectType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FperkViewData, UnknownData_Z22Z, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FperkViewData, stackCount, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FperkViewData, 0x0040);
		}

		// struct FitemViewData : public FbaseLoadoutPartViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__itemViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, IsEnergyTypeValid, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, UnknownData_ZH02, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, energyLevel, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, Count, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, UnknownData_CJ9P, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, inputKey, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, ShowKeyPrompt, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemViewData, UnknownData_J8H9, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FitemViewData, 0x0068);
		}

		// struct FStatusEffectAlertViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__StatusEffectAlertViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, StatusEffectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, StatusEffectIcon, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, StatusEffectType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, SourceViewType, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, UnknownData_TF1N, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, perkViewData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, itemViewData, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectAlertViewData, addonViewData, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectAlertViewData, 0x0100);
		}

		// struct FScoreAlertViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__ScoreAlertViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAlertViewData, ScoreType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAlertViewData, UnknownData_NA3F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAlertViewData, title, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAlertViewData, scoreValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScoreAlertViewData, progress, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScoreAlertViewData, 0x0020);
		}

		// struct FhudObjectiveViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__hudObjectiveViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FhudObjectiveViewData, playerTeam, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhudObjectiveViewData, isHatchOpen, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhudObjectiveViewData, UnknownData_WCT6, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhudObjectiveViewData, nbGeneratorsLeft, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FhudObjectiveViewData, 0x0008);
		}

		// struct FStatusEffectViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__StatusEffectViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, UnknownData_VFMC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, IconTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, StatusEffectType, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, UnknownData_5E2T, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, level, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, percentage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatusEffectViewData, UnknownData_6NJ1, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatusEffectViewData, 0x0028);
		}

		// struct FInteractionProgressViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__InteractionProgressViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, message, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, SecondaryMessage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, barColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, ChargeBarColor, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, ShowIcon, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, ShowIconCharge, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, UnknownData_P32G, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, ItemIcon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionProgressViewData, Proficiencies, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionProgressViewData, 0x0040);
		}

		// struct FInteractionPromptViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__InteractionPromptViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, UnknownData_OKNN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, message, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, UnknownData_3YRQ, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, InputKey1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, inputKey2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, PlaceInCenter, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteractionPromptViewData, UnknownData_RNC2, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteractionPromptViewData, 0x0070);
		}

		// struct FitemBundleViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__itemBundleViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemBundleViewData, Item, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemBundleViewData, addon1, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FitemBundleViewData, addon2, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FitemBundleViewData, 0x00D8);
		}

		// struct FMatchResultViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__MatchResultViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchResultViewData, isSlasher, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchResultViewData, SurvivorResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchResultViewData, KillerResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchResultViewData, UnknownData_ZW9M, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatchResultViewData, duration, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatchResultViewData, 0x0008);
		}

		// struct FNotifTutorialPopupViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__NotifTutorialPopupViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotifTutorialPopupViewData, title, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotifTutorialPopupViewData, description, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNotifTutorialPopupViewData, IconTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNotifTutorialPopupViewData, 0x0028);
		}

		// struct FofferingViewData : public FbaseLoadoutPartViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__offeringViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FofferingViewData, stackCount, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FofferingViewData, Availability, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FofferingViewData, UnknownData_VDMJ, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FofferingViewData, 0x0038);
		}

		// struct FNightmareStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__NightmareStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNightmareStatusData, SleepingState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNightmareStatusData, UnknownData_GCU0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNightmareStatusData, SleepingProgress, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNightmareStatusData, 0x0008);
		}

		// struct FPigStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__PigStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPigStatusData, ReverseBearTrapState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPigStatusData, UnknownData_P8R1, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPigStatusData, TimerProgress, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPigStatusData, 0x0008);
		}

		// struct FPlagueStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__PlagueStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueStatusData, SicknessLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueStatusData, UnknownData_ANFA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueStatusData, SicknessProgress, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlagueStatusData, 0x0008);
		}

		// struct FTwinsStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__TwinsStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwinsStatusData, TwinsActive, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwinsStatusData, 0x0001);
		}

		// struct FTricksterStatusData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__TricksterStatusData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTricksterStatusData, CurrentLacerationLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTricksterStatusData, MaximumLacerationLevel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTricksterStatusData, IsDangerousLacerationLevel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTricksterStatusData, WasRecentlyDamagedByLaceration, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTricksterStatusData, UnknownData_HOFH, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTricksterStatusData, 0x000C);
		}

		// struct FPlayerStatusViewData
		TEST_METHOD(ScriptStruct__DBDUIViewInterfaces__PlayerStatusViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, playerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, PlayerPortraitIcon, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, PlayerStatusState, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, UnknownData_JJQ4, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, TimerProgress, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, isDeepWound, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, isBroken, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, IsLocalPlayerAKiller, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, ObsessionState, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, drainStage, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, DoctorStatusData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, UnknownData_WV8N, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, ExecutionerStatusData, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, GhostStatusData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, NightmareStatusData, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, PigStatusData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, PlagueStatusData, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, TwinsStatusData, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, UnknownData_ZVOG, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerStatusViewData, TricksterStatusData, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerStatusViewData, 0x0060);
		}

		// struct FNiagaraCompileHash
		TEST_METHOD(ScriptStruct__NiagaraCore__NiagaraCompileHash)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHash, DataHash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHash, 0x0010);
		}

		// struct FFriendData
		TEST_METHOD(ScriptStruct__DBDSharedTypes__FriendData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendData, UnknownData_YSL0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendData, 0x0060);
		}

		// struct FRarityMaterialData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DBDSharedTypes__RarityMaterialData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityMaterialData, rarity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityMaterialData, UnknownData_26F1, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRarityMaterialData, MATERIAL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRarityMaterialData, 0x0018);
		}

		// struct FAgonyDisplayFxEvent
		TEST_METHOD(ScriptStruct__TheExecutioner__AgonyDisplayFxEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAgonyDisplayFxEvent, gameEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAgonyDisplayFxEvent, Protagonist, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAgonyDisplayFxEvent, UnknownData_4HL3, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAgonyDisplayFxEvent, 0x0010);
		}

		// struct FTormentTrailPointInfo
		TEST_METHOD(ScriptStruct__TheExecutioner__TormentTrailPointInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTormentTrailPointInfo, UnknownData_1CLH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTormentTrailPointInfo, 0x0060);
		}

		// struct FReplicatedTrailItem : public FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__TheExecutioner__ReplicatedTrailItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, UnknownData_6BPE, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, trailPoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, OrderInTrail, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, UnknownData_LU0U, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, PointRelativeLocation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, PointRotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailItem, UnknownData_U9E7, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedTrailItem, 0x0040);
		}

		// struct FReplicatedTrailPointList : public FFastArraySerializer
		TEST_METHOD(ScriptStruct__TheExecutioner__ReplicatedTrailPointList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailPointList, Items, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedTrailPointList, TormentTrailController, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedTrailPointList, 0x0120);
		}

		// struct FSpawnedAttackPoint
		TEST_METHOD(ScriptStruct__TheExecutioner__SpawnedAttackPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedAttackPoint, AttackTrailPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedAttackPoint, UnknownData_OYQO, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnedAttackPoint, 0x0010);
		}

		// struct FSpawnedTormentTrailPoint
		TEST_METHOD(ScriptStruct__TheExecutioner__SpawnedTormentTrailPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedTormentTrailPoint, trailPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpawnedTormentTrailPoint, UnknownData_JDJE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpawnedTormentTrailPoint, 0x0010);
		}

		// struct FCCDIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__CCDIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCCDIKChainLink, UnknownData_L8TW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCCDIKChainLink, 0x0080);
		}

		// struct FAxis
		TEST_METHOD(ScriptStruct__AnimationCore__Axis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, Axis, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, bInLocalSpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAxis, UnknownData_LCO9, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAxis, 0x0010);
		}

		// struct FConstraintDescriptor
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptor, UnknownData_BJS1, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptor, 0x0010);
		}

		// struct FConstraintData
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Constraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Weight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, bMaintainOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, UnknownData_YJKV, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintData, CurrentTransform, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintData, 0x0080);
		}

		// struct FFilterOptionPerAxis
		TEST_METHOD(ScriptStruct__AnimationCore__FilterOptionPerAxis)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilterOptionPerAxis, bZ, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilterOptionPerAxis, 0x0003);
		}

		// struct FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescriptionEx)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_QF1H, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, AxesFilterOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescriptionEx, UnknownData_T78N, 0x000B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescriptionEx, 0x0010);
		}

		// struct FAimConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__AimConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookAt_Axis, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUp_Axis, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, bUseLookUp, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, UnknownData_UIT5, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimConstraintDescription, LookUpTarget, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimConstraintDescription, 0x0040);
		}

		// struct FTransformConstraintDescription : public FConstraintDescriptionEx
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, TransformType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraintDescription, UnknownData_GELJ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraintDescription, 0x0018);
		}

		// struct FEulerTransform
		TEST_METHOD(ScriptStruct__AnimationCore__EulerTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEulerTransform, scale, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEulerTransform, 0x0024);
		}

		// struct FFABRIKChainLink
		TEST_METHOD(ScriptStruct__AnimationCore__FABRIKChainLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFABRIKChainLink, UnknownData_3WOX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFABRIKChainLink, 0x0038);
		}

		// struct FNodeChain
		TEST_METHOD(ScriptStruct__AnimationCore__NodeChain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeChain, Nodes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeChain, 0x0010);
		}

		// struct FNodeObject
		TEST_METHOD(ScriptStruct__AnimationCore__NodeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeObject, ParentName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeObject, 0x0018);
		}

		// struct FNodeHierarchyData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Nodes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, Transforms, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyData, NodeNameToIndexMapping, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyData, 0x0070);
		}

		// struct FNodeHierarchyWithUserData
		TEST_METHOD(ScriptStruct__AnimationCore__NodeHierarchyWithUserData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, UnknownData_11TP, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeHierarchyWithUserData, Hierarchy, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeHierarchyWithUserData, 0x0078);
		}

		// struct FConstraintDescription
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bTranslation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bRotation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bScale, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, bParent, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, TranslationAxes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, RotationAxes, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDescription, ScaleAxes, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDescription, 0x000D);
		}

		// struct FTransformConstraint
		TEST_METHOD(ScriptStruct__AnimationCore__TransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Operator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_9LL1, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, SourceNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, TargetNode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, bMaintainOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformConstraint, UnknownData_MQJK, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformConstraint, 0x0030);
		}

		// struct FConstraintOffset
		TEST_METHOD(ScriptStruct__AnimationCore__ConstraintOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Translation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_MA8X, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, UnknownData_5KFH, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintOffset, Parent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintOffset, 0x0060);
		}

		// struct FTransformFilter
		TEST_METHOD(ScriptStruct__AnimationCore__TransformFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, TranslationFilter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, RotationFilter, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformFilter, ScaleFilter, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformFilter, 0x0009);
		}

		// struct FTransformNoScale
		TEST_METHOD(ScriptStruct__AnimationCore__TransformNoScale)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, UnknownData_E8IC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformNoScale, rotation, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformNoScale, 0x0020);
		}

		// struct FLiveLinkSubjectName
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectName, name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectName, 0x000C);
		}

		// struct FLiveLinkSourceHandle
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceHandle, UnknownData_E038, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceHandle, 0x0018);
		}

		// struct FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseBlueprintData, UnknownData_F4DF, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseBlueprintData, 0x0008);
		}

		// struct FSubjectFrameHandle : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectFrameHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectFrameHandle, UnknownData_K9A6, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectFrameHandle, 0x0018);
		}

		// struct FLiveLinkTransform
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransform, UnknownData_KLWS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransform, 0x0020);
		}

		// struct FCachedSubjectFrame
		TEST_METHOD(ScriptStruct__LiveLinkInterface__CachedSubjectFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedSubjectFrame, UnknownData_CDTJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedSubjectFrame, 0x0160);
		}

		// struct FSubjectMetadata
		TEST_METHOD(ScriptStruct__LiveLinkInterface__SubjectMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, StringMetaData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneTimecode, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, SceneFramerate, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubjectMetadata, UnknownData_QWD7, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubjectMetadata, 0x0070);
		}

		// struct FLiveLinkWorldTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkWorldTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkWorldTime, Offset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkWorldTime, 0x0010);
		}

		// struct FLiveLinkMetaData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, StringMetaData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkMetaData, SceneTime, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkMetaData, 0x0060);
		}

		// struct FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, Metadata, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, PropertyValues, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseFrameData, UnknownData_MYZL, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseFrameData, 0x00A0);
		}

		// struct FLiveLinkAnimationFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkAnimationFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkAnimationFrameData, Transforms, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkAnimationFrameData, 0x00B0);
		}

		// struct FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBaseStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBaseStaticData, PropertyNames, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBaseStaticData, 0x0010);
		}

		// struct FLiveLinkSkeletonStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSkeletonStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSkeletonStaticData, BoneParents, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSkeletonStaticData, 0x0030);
		}

		// struct FLiveLinkBasicBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkBasicBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkBasicBlueprintData, FrameData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkBasicBlueprintData, 0x00B8);
		}

		// struct FLiveLinkTransformStaticData : public FLiveLinkBaseStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformStaticData)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformStaticData, 0x0010);
		}

		// struct FLiveLinkCameraStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFieldOfViewSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsAspectRatioSupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocalLengthSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsProjectionModeSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, FilmBackHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsApertureSupported, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, bIsFocusDistanceSupported, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraStaticData, UnknownData_Y2AG, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraStaticData, 0x0020);
		}

		// struct FLiveLinkTransformFrameData : public FLiveLinkBaseFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformFrameData, Transform, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformFrameData, 0x00D0);
		}

		// struct FLiveLinkCameraFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FieldOfView, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, AspectRatio, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocalLength, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, Aperture, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, FocusDistance, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, ProjectionMode, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraFrameData, UnknownData_C0YG, 0x00E5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraFrameData, 0x00F0);
		}

		// struct FLiveLinkCameraBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCameraBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, UnknownData_A8P1, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCameraBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCameraBlueprintData, 0x0120);
		}

		// struct FLiveLinkCurveConversionSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveConversionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveConversionSettings, CurveConversionAssetMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveConversionSettings, 0x0050);
		}

		// struct FLiveLinkLightStaticData : public FLiveLinkTransformStaticData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightStaticData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsTemperatureSupported, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsIntensitySupported, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsLightColorSupported, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsInnerConeAngleSupported, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsOuterConeAngleSupported, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsAttenuationRadiusSupported, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceLenghtSupported, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSourceRadiusSupported, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, bIsSoftSourceRadiusSupported, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightStaticData, UnknownData_YHMC, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightStaticData, 0x0020);
		}

		// struct FLiveLinkLightFrameData : public FLiveLinkTransformFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, Temperature, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, intensity, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, LightColor, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, InnerConeAngle, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, OuterConeAngle, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, AttenuationRadius, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceRadius, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SoftSourceRadius, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, SourceLength, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightFrameData, UnknownData_JGU5, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightFrameData, 0x0100);
		}

		// struct FLiveLinkLightBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkLightBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, UnknownData_CTIC, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkLightBlueprintData, FrameData, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkLightBlueprintData, 0x0130);
		}

		// struct FLiveLinkSubjectKey
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectKey, SubjectName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectKey, 0x001C);
		}

		// struct FLiveLinkSubjectPreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_N321, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, role, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, settings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, VirtualSubject, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, bEnabled, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectPreset, UnknownData_GYT3, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectPreset, 0x0040);
		}

		// struct FLiveLinkSourcePreset
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourcePreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, settings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourcePreset, SourceType, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourcePreset, 0x0030);
		}

		// struct FLiveLinkRefSkeleton
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkRefSkeleton)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkRefSkeleton, BoneParents, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkRefSkeleton, 0x0020);
		}

		// struct FLiveLinkSubjectRepresentation
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSubjectRepresentation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, subject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, UnknownData_IKQ9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSubjectRepresentation, role, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSubjectRepresentation, 0x0018);
		}

		// struct FLiveLinkInterpolationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkInterpolationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, bUseInterpolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, UnknownData_1NUX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkInterpolationSettings, InterpolationOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkInterpolationSettings, 0x0008);
		}

		// struct FLiveLinkTimeSynchronizationSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeSynchronizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeSynchronizationSettings, FrameOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeSynchronizationSettings, 0x000C);
		}

		// struct FLiveLinkSourceDebugInfo
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SubjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, SnapshotIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceDebugInfo, NumberOfBufferAtSnapshot, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceDebugInfo, 0x0014);
		}

		// struct FLiveLinkTransformBlueprintData : public FLiveLinkBaseBlueprintData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTransformBlueprintData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, StaticData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, UnknownData_6DFD, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTransformBlueprintData, FrameData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTransformBlueprintData, 0x00F0);
		}

		// struct FLiveLinkCurveElement
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkCurveElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkCurveElement, CurveValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkCurveElement, 0x0010);
		}

		// struct FLiveLinkFrameData
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, CurveElements, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, WorldTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkFrameData, Metadata, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameData, 0x0090);
		}

		// struct FLiveLinkFrameRate : public FFrameRate
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkFrameRate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkFrameRate, 0x0008);
		}

		// struct FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode_Base_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, seconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, Frames, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTimeCode_Base_DEPRECATED, FrameRate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode_Base_DEPRECATED, 0x0010);
		}

		// struct FLiveLinkTimeCode : public FLiveLinkTimeCode_Base_DEPRECATED
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTimeCode)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTimeCode, 0x0010);
		}

		// struct FLiveLinkTime
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, WorldTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkTime, SceneTime, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkTime, 0x0018);
		}

		// struct FLiveLinkSourceBufferManagementSettings
		TEST_METHOD(ScriptStruct__LiveLinkInterface__LiveLinkSourceBufferManagementSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidEngineTimeEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_XQDB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidEngineTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_ACOO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, EngineTimeClockOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bGenerateSubFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bUseTimecodeSmoothLatest, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_82BU, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, SourceTimecodeFrameRate, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bValidTimecodeFrameEnabled, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_BV64, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, ValidTimecodeFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeFrameOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, TimecodeClockOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, LatestOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, MaxNumberOfFrameToBuffered, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, bKeepAtLeastOneFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLiveLinkSourceBufferManagementSettings, UnknownData_BEBT, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLiveLinkSourceBufferManagementSettings, 0x0050);
		}

		// struct FStatModifier
		TEST_METHOD(ScriptStruct__StatSystem__StatModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatModifier, OperationStrategy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatModifier, UnknownData_FSFM, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatModifier, ModifierTag, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatModifier, CompoundStrategy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatModifier, UnknownData_GJKY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatModifier, 0x0028);
		}

		// struct FBaseStat
		TEST_METHOD(ScriptStruct__StatSystem__BaseStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseStat, UnknownData_U71G, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseStat, _statModifiers, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseStat, 0x0018);
		}

		// struct FNonTunableStat : public FBaseStat
		TEST_METHOD(ScriptStruct__StatSystem__NonTunableStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNonTunableStat, _baseValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNonTunableStat, UnknownData_CPG0, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNonTunableStat, 0x0020);
		}

		// struct FStatProperty : public FBaseStat
		TEST_METHOD(ScriptStruct__StatSystem__StatProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatProperty, _useTunable, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatProperty, UnknownData_N71S, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatProperty, _nonTunableValue, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatProperty, _tunableValue, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatProperty, 0x0048);
		}

		// struct FTunableStat : public FBaseStat
		TEST_METHOD(ScriptStruct__StatSystem__TunableStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTunableStat, _baseValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTunableStat, 0x0040);
		}

		// struct FClothConstraintSetupNv
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeNv__ClothConstraintSetupNv)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetupNv, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetupNv, 0x0010);
		}

		// struct FSessionServiceLog
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLog)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_E8VI, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, data, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, InstanceId, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, TimeSeconds, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, Verbosity, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLog, UnknownData_GDWW, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLog, 0x0040);
		}

		// struct FSessionServicePing
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePing, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePing, 0x0010);
		}

		// struct FSessionServicePong
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Authorized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_43AS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, BuildDate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, DeviceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, InstanceName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, PlatformName, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionName, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, SessionOwner, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, Standalone, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServicePong, UnknownData_6O5W, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServicePong, 0x0090);
		}

		// struct FSessionServiceLogUnsubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogUnsubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogUnsubscribe, UnknownData_8F6G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogUnsubscribe, 0x0001);
		}

		// struct FSessionServiceLogSubscribe
		TEST_METHOD(ScriptStruct__SessionMessages__SessionServiceLogSubscribe)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSessionServiceLogSubscribe, UnknownData_8F1G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSessionServiceLogSubscribe, 0x0001);
		}

		// struct FMediaPlayerTrackOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerTrackOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Audio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Caption, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Metadata, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Script, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, subtitle, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, text, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerTrackOptions, Video, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerTrackOptions, 0x001C);
		}

		// struct FMediaPlayerOptions
		TEST_METHOD(ScriptStruct__MediaUtils__MediaPlayerOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Tracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_HI79, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, SeekTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, PlayOnOpen, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, Loop, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaPlayerOptions, UnknownData_BXSR, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaPlayerOptions, 0x0030);
		}

		// struct FMagicLeapAudioDummyStruct
		TEST_METHOD(ScriptStruct__MagicLeapAudio__MagicLeapAudioDummyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapAudioDummyStruct, UnknownData_5SWJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapAudioDummyStruct, 0x0001);
		}

		// struct FGameplayResourceSet
		TEST_METHOD(ScriptStruct__GameplayTasks__GameplayResourceSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayResourceSet, UnknownData_0RQR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayResourceSet, 0x0002);
		}

		// struct FMagicLeapEyeBlinkState
		TEST_METHOD(ScriptStruct__MagicLeapEyeTracker__MagicLeapEyeBlinkState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, LeftEyeBlinked, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapEyeBlinkState, RightEyeBlinked, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapEyeBlinkState, 0x0002);
		}

		// struct FMagicLeapLightEstimationAmbientGlobalState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationAmbientGlobalState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, AmbientIntensityNits, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationAmbientGlobalState, timestamp, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationAmbientGlobalState, 0x0018);
		}

		// struct FMagicLeapLightEstimationColorTemperatureState
		TEST_METHOD(ScriptStruct__MagicLeapLightEstimation__MagicLeapLightEstimationColorTemperatureState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, ColorTemperatureKelvin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, AmbientColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, UnknownData_Y6I5, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapLightEstimationColorTemperatureState, timestamp, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapLightEstimationColorTemperatureState, 0x0020);
		}

		// struct FUdpMockMessage
		TEST_METHOD(ScriptStruct__UdpMessaging__UdpMockMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUdpMockMessage, data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUdpMockMessage, 0x0010);
		}

		// struct FJoinabilitySettings
		TEST_METHOD(ScriptStruct__CoreUObject__JoinabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, SessionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bPublicSearchable, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bAllowInvites, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresence, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, bJoinViaPresenceFriendsOnly, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPlayers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJoinabilitySettings, MaxPartySize, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJoinabilitySettings, 0x0018);
		}

		// struct FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__CoreUObject__UniqueNetIdWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdWrapper, UnknownData_Q5QI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdWrapper, 0x0001);
		}

		// struct Fguid
		TEST_METHOD(ScriptStruct__CoreUObject__guid)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fguid, A, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fguid, B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fguid, C, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fguid, D, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fguid, 0x0010);
		}

		// struct Fvector
		TEST_METHOD(ScriptStruct__CoreUObject__vector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fvector, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fvector, y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fvector, z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fvector, 0x000C);
		}

		// struct FVector4
		TEST_METHOD(ScriptStruct__CoreUObject__Vector4)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4, 0x0010);
		}

		// struct FVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__Vector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2D, y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2D, 0x0008);
		}

		// struct FTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__TwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, V1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwoVectors, V2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwoVectors, 0x0018);
		}

		// struct Fplane : public Fvector
		TEST_METHOD(ScriptStruct__CoreUObject__plane)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fplane, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fplane, 0x0010);
		}

		// struct FRotator
		TEST_METHOD(ScriptStruct__CoreUObject__Rotator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Yaw, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotator, Roll, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotator, 0x000C);
		}

		// struct FPackedNormal
		TEST_METHOD(ScriptStruct__CoreUObject__PackedNormal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, z, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedNormal, W, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedNormal, 0x0004);
		}

		// struct FPackedRGB10A2N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGB10A2N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGB10A2N, Packed, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGB10A2N, 0x0004);
		}

		// struct FPackedRGBA16N
		TEST_METHOD(ScriptStruct__CoreUObject__PackedRGBA16N)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, XY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPackedRGBA16N, ZW, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPackedRGBA16N, 0x0008);
		}

		// struct FIntPoint
		TEST_METHOD(ScriptStruct__CoreUObject__IntPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntPoint, y, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntPoint, 0x0008);
		}

		// struct FIntVector
		TEST_METHOD(ScriptStruct__CoreUObject__IntVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntVector, z, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntVector, 0x000C);
		}

		// struct Fcolor
		TEST_METHOD(ScriptStruct__CoreUObject__color)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcolor, B, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcolor, G, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcolor, R, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fcolor, A, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fcolor, 0x0004);
		}

		// struct Fbox
		TEST_METHOD(ScriptStruct__CoreUObject__box)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fbox, min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fbox, max, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fbox, isValid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fbox, UnknownData_I9L2, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fbox, 0x001C);
		}

		// struct FBox2D
		TEST_METHOD(ScriptStruct__CoreUObject__Box2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, max, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, bIsValid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBox2D, UnknownData_BW3T, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBox2D, 0x0014);
		}

		// struct FBoxSphereBounds
		TEST_METHOD(ScriptStruct__CoreUObject__BoxSphereBounds)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, origin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, BoxExtent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoxSphereBounds, SphereRadius, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoxSphereBounds, 0x001C);
		}

		// struct FOrientedBox
		TEST_METHOD(ScriptStruct__CoreUObject__OrientedBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, AxisZ, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentX, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentY, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrientedBox, ExtentZ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrientedBox, 0x003C);
		}

		// struct FMatrix
		TEST_METHOD(ScriptStruct__CoreUObject__Matrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, XPlane, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, YPlane, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, ZPlane, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMatrix, WPlane, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMatrix, 0x0040);
		}

		// struct FInterpCurvePointFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, ArriveTangent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, LeaveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, InterpMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointFloat, UnknownData_EP2D, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointFloat, 0x0014);
		}

		// struct FInterpCurveFloat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, UnknownData_O9RY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveFloat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveFloat, 0x0018);
		}

		// struct FInterpCurvePointVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, InterpMode, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector2D, UnknownData_8Q3N, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector2D, 0x0020);
		}

		// struct FInterpCurveVector2D
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, UnknownData_SGH5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector2D, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector2D, 0x0018);
		}

		// struct FInterpCurvePointVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, InterpMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointVector, UnknownData_R104, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointVector, 0x002C);
		}

		// struct FInterpCurveVector
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, UnknownData_2K4Z, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveVector, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveVector, 0x0018);
		}

		// struct FQuat
		TEST_METHOD(ScriptStruct__CoreUObject__Quat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, y, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, z, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQuat, W, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQuat, 0x0010);
		}

		// struct FInterpCurvePointQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_ACKS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, OutVal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, ArriveTangent, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, LeaveTangent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, InterpMode, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointQuat, UnknownData_DZPU, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointQuat, 0x0050);
		}

		// struct FInterpCurveQuat
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveQuat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, UnknownData_I0AB, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveQuat, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveQuat, 0x0018);
		}

		// struct FInterpCurvePointTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, ArriveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, LeaveTangent, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, InterpMode, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointTwoVectors, UnknownData_FI6R, 0x004D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointTwoVectors, 0x0050);
		}

		// struct FInterpCurveTwoVectors
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveTwoVectors)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, UnknownData_AROJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveTwoVectors, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveTwoVectors, 0x0018);
		}

		// struct FLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__LinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, G, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearColor, A, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearColor, 0x0010);
		}

		// struct FInterpCurvePointLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurvePointLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InVal, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, OutVal, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, ArriveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, LeaveTangent, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, InterpMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurvePointLinearColor, UnknownData_M9QY, 0x0035);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurvePointLinearColor, 0x0038);
		}

		// struct FInterpCurveLinearColor
		TEST_METHOD(ScriptStruct__CoreUObject__InterpCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, points, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, bIsLooped, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, UnknownData_2Q98, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpCurveLinearColor, LoopKeyOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpCurveLinearColor, 0x0018);
		}

		// struct FTransform
		TEST_METHOD(ScriptStruct__CoreUObject__Transform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, rotation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_9R64, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, Scale3D, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransform, UnknownData_3SE7, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransform, 0x0030);
		}

		// struct FRandomStream
		TEST_METHOD(ScriptStruct__CoreUObject__RandomStream)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, InitialSeed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRandomStream, seed, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRandomStream, 0x0008);
		}

		// struct FFrameNumber
		TEST_METHOD(ScriptStruct__CoreUObject__FrameNumber)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameNumber, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameNumber, 0x0004);
		}

		// struct FFrameRate
		TEST_METHOD(ScriptStruct__CoreUObject__FrameRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Numerator, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameRate, Denominator, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameRate, 0x0008);
		}

		// struct FFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__FrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, FrameNumber, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameTime, SubFrame, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameTime, 0x0008);
		}

		// struct FQualifiedFrameTime
		TEST_METHOD(ScriptStruct__CoreUObject__QualifiedFrameTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQualifiedFrameTime, rate, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQualifiedFrameTime, 0x0010);
		}

		// struct FTimecode
		TEST_METHOD(ScriptStruct__CoreUObject__Timecode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Hours, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Minutes, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, seconds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, Frames, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, bDropFrameFormat, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimecode, UnknownData_2H0N, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimecode, 0x0014);
		}

		// struct FTimespan
		TEST_METHOD(ScriptStruct__CoreUObject__Timespan)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimespan, UnknownData_AGE5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimespan, 0x0008);
		}

		// struct FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftObjectPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, AssetPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, UnknownData_ER2D, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoftObjectPath, SubPathString, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftObjectPath, 0x0020);
		}

		// struct FSoftClassPath : public FSoftObjectPath
		TEST_METHOD(ScriptStruct__CoreUObject__SoftClassPath)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoftClassPath, 0x0020);
		}

		// struct FPrimaryAssetType
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetType, name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetType, 0x000C);
		}

		// struct FPrimaryAssetId
		TEST_METHOD(ScriptStruct__CoreUObject__PrimaryAssetId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetId, PrimaryAssetName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetId, 0x0018);
		}

		// struct FFallbackStruct
		TEST_METHOD(ScriptStruct__CoreUObject__FallbackStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFallbackStruct, UnknownData_LHDQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFallbackStruct, 0x0001);
		}

		// struct FFloatRangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, UnknownData_PLHL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRangeBound, 0x0008);
		}

		// struct FFloatRange
		TEST_METHOD(ScriptStruct__CoreUObject__FloatRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRange, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRange, 0x0010);
		}

		// struct FInt32RangeBound
		TEST_METHOD(ScriptStruct__CoreUObject__Int32RangeBound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, UnknownData_3PJ7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32RangeBound, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32RangeBound, 0x0008);
		}

		// struct FInt32Range
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Range)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, LowerBound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Range, UpperBound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Range, 0x0010);
		}

		// struct FFloatInterval
		TEST_METHOD(ScriptStruct__CoreUObject__FloatInterval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatInterval, max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatInterval, 0x0008);
		}

		// struct FInt32Interval
		TEST_METHOD(ScriptStruct__CoreUObject__Int32Interval)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInt32Interval, max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInt32Interval, 0x0008);
		}

		// struct FPolyglotTextData
		TEST_METHOD(ScriptStruct__CoreUObject__PolyglotTextData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_AWDR, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeCulture, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, Namespace, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, NativeString, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, LocalizedStrings, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, bIsMinimalPatch, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, UnknownData_0ZU5, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPolyglotTextData, CachedText, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPolyglotTextData, 0x00B8);
		}

		// struct FAutomationEvent
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, UnknownData_3XAI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Context, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationEvent, Artifact, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationEvent, 0x0038);
		}

		// struct FDateTime
		TEST_METHOD(ScriptStruct__CoreUObject__DateTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTime, UnknownData_HEZD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTime, 0x0008);
		}

		// struct FAutomationExecutionEntry
		TEST_METHOD(ScriptStruct__CoreUObject__AutomationExecutionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, event, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, FileName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, LineNumber, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, UnknownData_LCW1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutomationExecutionEntry, timestamp, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutomationExecutionEntry, 0x0058);
		}

		// struct FAnimNode_WheelHandler : public FAnimNode_SkeletalControlBase
		TEST_METHOD(ScriptStruct__PhysXVehicles__AnimNode_WheelHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_WheelHandler, UnknownData_0LNE, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_WheelHandler, 0x00E8);
		}

		// struct FTireConfigMaterialFriction
		TEST_METHOD(ScriptStruct__PhysXVehicles__TireConfigMaterialFriction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, physicalMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireConfigMaterialFriction, UnknownData_JOZD, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireConfigMaterialFriction, 0x0010);
		}

		// struct FVehicleAnimInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleAnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleAnimInstanceProxy, UnknownData_UTRI, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleAnimInstanceProxy, 0x06F0);
		}

		// struct FVehicleInputRate
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleInputRate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, RiseRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleInputRate, FallRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleInputRate, 0x0008);
		}

		// struct FVehicleGearData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleGearData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, ratio, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, DownRatio, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleGearData, UpRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleGearData, 0x000C);
		}

		// struct FVehicleTransmissionData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleTransmissionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, bUseGearAutoBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_SG7F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearSwitchTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, GearAutoBoxLatency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, FinalRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ForwardGears, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ReverseGearRatio, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, NeutralGearUpRatio, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, ClutchStrength, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleTransmissionData, UnknownData_U26B, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleTransmissionData, 0x0030);
		}

		// struct FVehicleEngineData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleEngineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, TorqueCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MaxRPM, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, MOI, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateFullThrottle, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchEngaged, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, DampingRateZeroThrottleClutchDisengaged, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleEngineData, UnknownData_GHYY, 0x009C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleEngineData, 0x00A0);
		}

		// struct FVehicleDifferential4WData
		TEST_METHOD(ScriptStruct__PhysXVehicles__VehicleDifferential4WData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, DifferentialType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, UnknownData_EBV2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontRearSplit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontLeftRightSplit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearLeftRightSplit, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, CentreBias, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, FrontBias, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVehicleDifferential4WData, RearBias, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVehicleDifferential4WData, 0x001C);
		}

		// struct FWheelSetup
		TEST_METHOD(ScriptStruct__PhysXVehicles__WheelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, WheelClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, AdditionalOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, bDisableSteering, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWheelSetup, UnknownData_7TFW, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWheelSetup, 0x0028);
		}

		// struct FReplicatedVehicleState
		TEST_METHOD(ScriptStruct__PhysXVehicles__ReplicatedVehicleState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, SteeringInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, ThrottleInput, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, BrakeInput, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, HandbrakeInput, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedVehicleState, CurrentGear, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedVehicleState, 0x0014);
		}

		// struct FLocationServicesData
		TEST_METHOD(ScriptStruct__LocationServicesBPLibrary__LocationServicesData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Longitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Latitude, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, HorizontalAccuracy, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, VerticalAccuracy, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationServicesData, Altitude, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationServicesData, 0x0018);
		}

		// struct FSocketOrBoneCache
		TEST_METHOD(ScriptStruct__AnimationUtilities__SocketOrBoneCache)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketOrBoneCache, _sourceAnimation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketOrBoneCache, _socketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketOrBoneCache, _notifyName, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketOrBoneCache, _location, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocketOrBoneCache, _rotation, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocketOrBoneCache, 0x0060);
		}

		// struct FEditorCollectionMetadata
		TEST_METHOD(ScriptStruct__AnimationUtilities__EditorCollectionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorCollectionMetadata, UnknownData_4RO8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorCollectionMetadata, 0x0001);
		}

		// struct FEditorAnimCollectionDisplay
		TEST_METHOD(ScriptStruct__AnimationUtilities__EditorAnimCollectionDisplay)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorAnimCollectionDisplay, _taggedAnimSequencesMetadata, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorAnimCollectionDisplay, _taggedAnimBlendspacesMetadata, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorAnimCollectionDisplay, _taggedAnimSelectorsMetadata, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorAnimCollectionDisplay, 0x00F0);
		}

		// struct FAnimationMontageDescriptor
		TEST_METHOD(ScriptStruct__AnimationUtilities__AnimationMontageDescriptor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMontageDescriptor, montageID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMontageDescriptor, UnknownData_R1ZC, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationMontageDescriptor, tags, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationMontageDescriptor, 0x0020);
		}

		// struct FmontageStopDefinition
		TEST_METHOD(ScriptStruct__AnimationUtilities__montageStopDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontageStopDefinition, Descriptor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontageStopDefinition, blendOutTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontageStopDefinition, UnknownData_0CO8, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FmontageStopDefinition, 0x0028);
		}

		// struct FTaggedAnimCollection
		TEST_METHOD(ScriptStruct__AnimationUtilities__TaggedAnimCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedAnimCollection, tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedAnimCollection, UnknownData_VDU4, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedAnimCollection, ANimCollection, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTaggedAnimCollection, 0x0040);
		}

		// struct FmontagePlaybackDefinition
		TEST_METHOD(ScriptStruct__AnimationUtilities__montagePlaybackDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontagePlaybackDefinition, Descriptor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontagePlaybackDefinition, playRate, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontagePlaybackDefinition, follower, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FmontagePlaybackDefinition, UnknownData_IYXY, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FmontagePlaybackDefinition, 0x0028);
		}

		// struct FTaggedAnimSequence
		TEST_METHOD(ScriptStruct__AnimationUtilities__TaggedAnimSequence)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedAnimSequence, sequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTaggedAnimSequence, tags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTaggedAnimSequence, 0x0028);
		}

		// struct FAnimSequenceSelector
		TEST_METHOD(ScriptStruct__AnimationUtilities__AnimSequenceSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceSelector, _selected, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceSelector, _taggedSequences, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceSelector, 0x0018);
		}

		// struct FDateTimer
		TEST_METHOD(ScriptStruct__SystemUtilities__DateTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTimer, UnknownData_MGTZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTimer, 0x0028);
		}

		// struct FDateTimerHandle
		TEST_METHOD(ScriptStruct__SystemUtilities__DateTimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTimerHandle, UnknownData_C6LL, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTimerHandle, 0x0008);
		}

		// struct FFastTimer
		TEST_METHOD(ScriptStruct__SystemUtilities__FastTimer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastTimer, UnknownData_ZBIG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastTimer, 0x0030);
		}

		// struct FDateTimerArray
		TEST_METHOD(ScriptStruct__SystemUtilities__DateTimerArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDateTimerArray, UnknownData_L32L, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDateTimerArray, 0x0010);
		}

		// struct FLocalizedAppName
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedAppName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedAppName, AppName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedAppName, 0x0020);
		}

		// struct FLuminComponentSubElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentSubElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, ElementType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, UnknownData_TYND, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentSubElement, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentSubElement, 0x0018);
		}

		// struct FLuminComponentElement
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LuminComponentElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, VisibleName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExecutableName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ComponentType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, UnknownData_R7PZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLuminComponentElement, ExtraComponentSubElements, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLuminComponentElement, 0x0048);
		}

		// struct FLocalizedIconInfo
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, LanguageCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconModelPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfo, IconPortalPath, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfo, 0x0030);
		}

		// struct FLocalizedIconInfos
		TEST_METHOD(ScriptStruct__LuminRuntimeSettings__LocalizedIconInfos)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalizedIconInfos, IconData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalizedIconInfos, 0x0010);
		}

		// struct Fkey
		TEST_METHOD(ScriptStruct__InputCore__key)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::Fkey, KeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::Fkey, UnknownData_GS9R, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::Fkey, 0x0020);
		}

		// struct FBeMaterialVector
		TEST_METHOD(ScriptStruct__BeUtil__BeMaterialVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialVector, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialVector, vector, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeMaterialVector, 0x001C);
		}

		// struct FBeMaterialTexture
		TEST_METHOD(ScriptStruct__BeUtil__BeMaterialTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialTexture, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialTexture, UnknownData_GHY9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialTexture, texture, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeMaterialTexture, 0x0018);
		}

		// struct FBeMaterialScalar
		TEST_METHOD(ScriptStruct__BeUtil__BeMaterialScalar)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialScalar, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeMaterialScalar, Scalar, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeMaterialScalar, 0x0010);
		}

		// struct FGameplayModifier
		TEST_METHOD(ScriptStruct__Competence__GameplayModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifier, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifier, modifierValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModifier, 0x0010);
		}

		// struct FGameplayModifierData
		TEST_METHOD(ScriptStruct__Competence__GameplayModifierData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierData, Conditions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierData, Modifiers, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameplayModifierData, TaggedFlags, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameplayModifierData, 0x0030);
		}

		// struct FSynth1PatchCable
		TEST_METHOD(ScriptStruct__Synthesis__Synth1PatchCable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, Destination, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth1PatchCable, UnknownData_OCF3, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth1PatchCable, 0x0008);
		}

		// struct FEpicSynth1Patch
		TEST_METHOD(ScriptStruct__Synthesis__EpicSynth1Patch)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, UnknownData_TNK2, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEpicSynth1Patch, PatchCables, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEpicSynth1Patch, 0x0018);
		}

		// struct FModularSynthPreset : public FTableRowBase
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_14SX, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_EYT3, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Gain, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Octave, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Semitones, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1Cents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc1PulseWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Type, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_UUNS, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Gain, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Octave, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Semitones, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2Cents, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Osc2PulseWidth, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Portamento, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_B39O, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Spread, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Pan, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Frequency, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Gain, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Type, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1Mode, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO1PatchType, 0x0056);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_X7V1, 0x0057);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Frequency, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Gain, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Type, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2Mode, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, LFO2PatchType, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_GCIM, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, GainDb, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, AttackTime, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, DecayTime, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, SustainGain, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ReleaseTime, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvPatchType, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModEnvBiasPatchType, 0x0079);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_C5AE, 0x007A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_OQS3, 0x007D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDepth, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeAttackTime, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeDecayTime, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeSustainGain, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ModulationEnvelopeReleaseTime, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_76HW, 0x0095);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterFrequency, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterQ, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, FilterAlgorithm, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_KUS2, 0x00A2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_MJBY, 0x00A5);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_HR7V, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayTime, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayFeedback, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayWetlevel, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, StereoDelayRatio, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_D1GV, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusDepth, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFeedback, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, ChorusFrequency, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, UnknownData_2TWZ, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPreset, Patches, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPreset, 0x00E0);
		}

		// struct FFloat_NetQuantize8
		TEST_METHOD(ScriptStruct__NetworkUtilities__Float_NetQuantize8)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloat_NetQuantize8, _value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloat_NetQuantize8, UnknownData_96AV, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloat_NetQuantize8, 0x0008);
		}

		// struct FAssetNetIdRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__NetworkUtilities__AssetNetIdRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetNetIdRow, NetId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetNetIdRow, UnknownData_FSSF, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetNetIdRow, 0x0010);
		}

		// struct FSpeedBasedNetSyncedValue
		TEST_METHOD(ScriptStruct__NetworkUtilities__SpeedBasedNetSyncedValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, UnknownData_SRUT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, _replicatedValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, UnknownData_3C5U, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, _replicatedSpeed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, UnknownData_960Z, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, _replicatedLastUpdateTimestamp, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpeedBasedNetSyncedValue, UnknownData_J0SK, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpeedBasedNetSyncedValue, 0x0038);
		}

		// struct FYawAndPitchRotator_NetQuantize32
		TEST_METHOD(ScriptStruct__NetworkUtilities__YawAndPitchRotator_NetQuantize32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FYawAndPitchRotator_NetQuantize32, _value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FYawAndPitchRotator_NetQuantize32, 0x000C);
		}

		// struct FReplicationTimerData
		TEST_METHOD(ScriptStruct__NetworkUtilities__ReplicationTimerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicationTimerData, timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicationTimerData, duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicationTimerData, RemainingTimePercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicationTimerData, state, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicationTimerData, UnknownData_WO0S, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicationTimerData, 0x0014);
		}

		// struct FYawAndPitchRotator_NetQuantize16
		TEST_METHOD(ScriptStruct__NetworkUtilities__YawAndPitchRotator_NetQuantize16)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FYawAndPitchRotator_NetQuantize16, _value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FYawAndPitchRotator_NetQuantize16, 0x000C);
		}

		// struct FAssetData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, ObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackageName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, PackagePath, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetName, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, AssetClass, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetData, UnknownData_ONO9, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetData, 0x0068);
		}

		// struct FTagAndValue
		TEST_METHOD(ScriptStruct__AssetRegistry__TagAndValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, UnknownData_M5QY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagAndValue, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagAndValue, 0x0020);
		}

		// struct FAssetRegistryDependencyOptions
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetRegistryDependencyOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftPackageReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardPackageReferences, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSearchableNames, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeSoftManagementReferences, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetRegistryDependencyOptions, bIncludeHardManagementReferences, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetRegistryDependencyOptions, 0x0005);
		}

		// struct FARFilter
		TEST_METHOD(ScriptStruct__AssetRegistry__ARFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackageNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, PackagePaths, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ObjectPaths, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, ClassNames, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_UWTU, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, RecursiveClassesExclusionSet, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursivePaths, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bRecursiveClasses, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, bIncludeOnlyOnDiskAssets, 0x00E2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARFilter, UnknownData_0ZTK, 0x00E3);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARFilter, 0x00E8);
		}

		// struct FAssetBundleEntry
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleScope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, UnknownData_SNU3, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleEntry, BundleAssets, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleEntry, 0x0038);
		}

		// struct FAssetBundleData
		TEST_METHOD(ScriptStruct__AssetRegistry__AssetBundleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetBundleData, Bundles, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetBundleData, 0x0010);
		}

		// struct FAkSoundLoop
		TEST_METHOD(ScriptStruct__DBDAudio__AkSoundLoop)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSoundLoop, UnknownData_MXTZ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSoundLoop, _startEvent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSoundLoop, _endEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSoundLoop, UnknownData_15JG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAkSoundLoop, _akComponent, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAkSoundLoop, 0x0028);
		}

		// struct FWindowBlockableList
		TEST_METHOD(ScriptStruct__DBDCompetence__WindowBlockableList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowBlockableList, Blockables, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowBlockableList, 0x0010);
		}

		// struct FSimpleSpawnEffectsOnAllSurvivorsAddonParams
		TEST_METHOD(ScriptStruct__DBDCompetence__SimpleSpawnEffectsOnAllSurvivorsAddonParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleSpawnEffectsOnAllSurvivorsAddonParams, _statusEffectID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleSpawnEffectsOnAllSurvivorsAddonParams, _customParam, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleSpawnEffectsOnAllSurvivorsAddonParams, 0x0010);
		}

		// struct FModularSynthPresetBankEntry
		TEST_METHOD(ScriptStruct__Synthesis__ModularSynthPresetBankEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, PresetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModularSynthPresetBankEntry, Preset, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModularSynthPresetBankEntry, 0x00F0);
		}

		// struct FSourceEffectPhaserSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPhaserSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, WetLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, LFOType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UseQuadraturePhase, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPhaserSettings, UnknownData_9DIY, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPhaserSettings, 0x0010);
		}

		// struct FSubmixEffectConvolutionReverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectConvolutionReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, NormalizationVolumeDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bInvertRearChannelBleedPhase, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, bSurroundRearChannelFlip, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_3TX9, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, SurroundRearChannelBleedAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, ImpulseResponse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, AllowHardwareAcceleration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectConvolutionReverbSettings, UnknownData_BQHQ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectConvolutionReverbSettings, 0x0020);
		}

		// struct FSubmixEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterAlgorithm, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, UnknownData_3OUF, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFilterSettings, 0x000C);
		}

		// struct FPatchId
		TEST_METHOD(ScriptStruct__Synthesis__PatchId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPatchId, Id, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPatchId, 0x0004);
		}

		// struct FSourceEffectBitCrusherSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectBitCrusherSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedSampleRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectBitCrusherSettings, CrushedBits, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectBitCrusherSettings, 0x0008);
		}

		// struct FSourceEffectChorusSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectChorusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Depth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, WetLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, DryLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChorusSettings, Spread, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChorusSettings, 0x0018);
		}

		// struct FSourceEffectDynamicsProcessorSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectDynamicsProcessorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, DynamicsProcessorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, PeakMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_8PBW, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, LookAheadMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, AttackTimeMsec, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ReleaseTimeMsec, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ThresholdDb, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, ratio, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, KneeBandwidthDb, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, InputGainDb, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, OutputGainDb, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectDynamicsProcessorSettings, UnknownData_J6AO, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectDynamicsProcessorSettings, 0x0028);
		}

		// struct FSourceEffectEnvelopeFollowerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEnvelopeFollowerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, AttackTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, ReleaseTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, PeakMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, bIsAnalogMode, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEnvelopeFollowerSettings, UnknownData_37WX, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEnvelopeFollowerSettings, 0x000C);
		}

		// struct FSourceEffectEQBand
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQBand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, Bandwidth, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, GainDb, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQBand, UnknownData_EZYB, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQBand, 0x0010);
		}

		// struct FSourceEffectEQSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectEQSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectEQSettings, EQBands, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectEQSettings, 0x0010);
		}

		// struct FSourceEffectFilterSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterCircuit, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterType, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, UnknownData_N9DD, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, CutoffFrequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFilterSettings, FilterQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFilterSettings, 0x000C);
		}

		// struct FSourceEffectFoldbackDistortionSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectFoldbackDistortionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, InputGainDb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, ThresholdDb, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectFoldbackDistortionSettings, OutputGainDb, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectFoldbackDistortionSettings, 0x000C);
		}

		// struct FSourceEffectMidSideSpreaderSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectMidSideSpreaderSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, InputMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_38C9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, SpreadAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, OutputMode, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, bEqualPower, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectMidSideSpreaderSettings, UnknownData_B4TA, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectMidSideSpreaderSettings, 0x000C);
		}

		// struct FSourceEffectPannerSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectPannerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Spread, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectPannerSettings, Pan, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectPannerSettings, 0x0008);
		}

		// struct FSourceEffectRingModulationSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectRingModulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, ModulatorType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, UnknownData_MC3C, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, Depth, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, DryLevel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectRingModulationSettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectRingModulationSettings, 0x0014);
		}

		// struct FSourceEffectSimpleDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectSimpleDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, SpeedOfSound, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DelayAmount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, DryAmount, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, WetAmount, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, Feedback, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectSimpleDelaySettings, UnknownData_6LJO, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectSimpleDelaySettings, 0x0018);
		}

		// struct FSourceEffectStereoDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectStereoDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, UnknownData_N5LS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayTimeMsec, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, Feedback, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, DelayRatio, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectStereoDelaySettings, WetLevel, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectStereoDelaySettings, 0x0014);
		}

		// struct FSourceEffectWaveShaperSettings
		TEST_METHOD(ScriptStruct__Synthesis__SourceEffectWaveShaperSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, Amount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectWaveShaperSettings, OutputGainDb, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectWaveShaperSettings, 0x0008);
		}

		// struct FSubmixEffectDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectDelaySettings, DelayLength, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectDelaySettings, 0x000C);
		}

		// struct FSubmixEffectFlexiverbSettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectFlexiverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, PreDelay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, DecayTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, RoomDampening, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectFlexiverbSettings, Complexity, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectFlexiverbSettings, 0x0010);
		}

		// struct FTapDelayInfo
		TEST_METHOD(ScriptStruct__Synthesis__TapDelayInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapLineMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, UnknownData_4DDE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, DelayLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, Gain, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, OutputChannel, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, PanInDegrees, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTapDelayInfo, TapId, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTapDelayInfo, 0x0018);
		}

		// struct FSubmixEffectTapDelaySettings
		TEST_METHOD(ScriptStruct__Synthesis__SubmixEffectTapDelaySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, MaximumDelayLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, InterpolationTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubmixEffectTapDelaySettings, Taps, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubmixEffectTapDelaySettings, 0x0018);
		}

		// struct FSynth2DSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__Synth2DSliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalThumbImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledThumbImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, NormalBarImage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, DisabledBarImage, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BackgroundImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, BarThickness, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynth2DSliderStyle, UnknownData_1JKK, 0x02DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynth2DSliderStyle, 0x02E0);
		}

		// struct FSynthKnobStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthKnobStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnob, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, LargeKnobOverlay, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnob, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MediumKnobOverlay, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MinValueAngle, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, MaxValueAngle, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, KnobSize, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthKnobStyle, UnknownData_IUV6, 0x0251);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthKnobStyle, 0x0258);
		}

		// struct FSynthSlateStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__Synthesis__SynthSlateStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, SizeType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, ColorStyle, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSynthSlateStyle, UnknownData_32M0, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSynthSlateStyle, 0x0010);
		}

		// struct FClothConstraintSetup_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConstraintSetup_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StiffnessMultiplier, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, StretchLimit, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConstraintSetup_Legacy, CompressionLimit, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConstraintSetup_Legacy, 0x0010);
		}

		// struct FClothConfig_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothConfig_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_41Q9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, VerticalConstraintConfig, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, HorizontalConstraintConfig, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, BendConstraintConfig, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, ShearConstraintConfig, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionRadius, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionStiffness, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SelfCollisionCullScale, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Damping, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, Friction, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindDragCoefficient, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, WindLiftCoefficient, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearDrag, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularDrag, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, LinearInertiaScale, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AngularInertiaScale, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CentrifugalInertiaScale, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, SolverFrequency, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, StiffnessFrequency, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityScale, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, GravityOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, bUseGravityOverride, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, UnknownData_25UU, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherStiffness, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, TetherLimit, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, CollisionThickness, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveSpringStiffness, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothConfig_Legacy, AnimDriveDamperStiffness, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothConfig_Legacy, 0x00D4);
		}

		// struct FPointWeightMap
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__PointWeightMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointWeightMap, values, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointWeightMap, 0x0010);
		}

		// struct FClothPhysicalMeshData
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothPhysicalMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Vertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Normals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, Indices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, WeightMaps, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, InverseMasses, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BoneData, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxBoneWeights, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, NumFixedVerts, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, SelfCollisionIndices, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, MaxDistances, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopDistances, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, BackstopRadiuses, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicalMeshData, AnimDriveMultipliers, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicalMeshData, 0x00F8);
		}

		// struct FClothLODDataCommon
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothLODDataCommon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, PhysicalMeshData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, CollisionData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothLODDataCommon, UnknownData_J7WL, 0x0138);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothLODDataCommon, 0x0158);
		}

		// struct FClothParameterMask_Legacy
		TEST_METHOD(ScriptStruct__ClothingSystemRuntimeCommon__ClothParameterMask_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaskName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, CurrentTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_0CY5, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MaxValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothParameterMask_Legacy, UnknownData_DVDQ, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothParameterMask_Legacy, 0x0030);
		}

		// struct FAccessKey
		TEST_METHOD(ScriptStruct__S3Command__AccessKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccessKey, keyId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccessKey, key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccessKey, 0x0020);
		}

		// struct FPropertyPathSegment
		TEST_METHOD(ScriptStruct__PropertyPath__PropertyPathSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, ArrayIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, Struct, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPropertyPathSegment, UnknownData_Q85Z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPropertyPathSegment, 0x0028);
		}

		// struct FCachedPropertyPath
		TEST_METHOD(ScriptStruct__PropertyPath__CachedPropertyPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, Segments, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_HPP8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, CachedFunction, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPropertyPath, UnknownData_LQ4D, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPropertyPath, 0x0028);
		}

		// struct FChainsawHitWithPowerCharge : public FChainsawEvent
		TEST_METHOD(ScriptStruct__TheCannibal__ChainsawHitWithPowerCharge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChainsawHitWithPowerCharge, NumPowerCharges, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChainsawHitWithPowerCharge, 0x0008);
		}

		// struct FCannibalAnalytics : public FChainsawAnalytics
		TEST_METHOD(ScriptStruct__TheCannibal__CannibalAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCannibalAnalytics, HitWithPowerChargeEvents, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCannibalAnalytics, RevToTantrumEvents, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCannibalAnalytics, 0x00A8);
		}

		// struct FSolverTrailingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverTrailingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, UnknownData_KKN0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingFilterSettings, 0x0010);
		}

		// struct FSolverCollisionFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverCollisionFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, UnknownData_BN59, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionFilterSettings, MinImpulse, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionFilterSettings, 0x0010);
		}

		// struct FSolverBreakingFilterSettings
		TEST_METHOD(ScriptStruct__ChaosSolvers__SolverBreakingFilterSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, FilterEnabled, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, UnknownData_IGFA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingFilterSettings, MinVolume, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingFilterSettings, 0x0010);
		}

		// struct FSoundModulationParameter
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Control, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, Value, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulationParameter, UnknownData_7Y00, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulationParameter, 0x0018);
		}

		// struct FSoundModulation
		TEST_METHOD(ScriptStruct__AudioExtensions__SoundModulation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundModulation, settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundModulation, 0x0010);
		}

		// struct FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SlateWidgetStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateWidgetStyle, UnknownData_QJJC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateWidgetStyle, 0x0008);
		}

		// struct FSlateSound
		TEST_METHOD(ScriptStruct__SlateCore__SlateSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, ResourceObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateSound, UnknownData_NHV1, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateSound, 0x0020);
		}

		// struct FMargin
		TEST_METHOD(ScriptStruct__SlateCore__Margin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMargin, 0x0010);
		}

		// struct FSlateColor
		TEST_METHOD(ScriptStruct__SlateCore__SlateColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, SpecifiedColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, ColorUseRule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateColor, UnknownData_3SQ3, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateColor, 0x0028);
		}

		// struct FSlateBrush
		TEST_METHOD(ScriptStruct__SlateCore__SlateBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_JEXJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Margin, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, TintColor, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ResourceName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UVRegion, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, DrawAs, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Tiling, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, Mirroring, 0x0072);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, ImageType, 0x0073);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_XSIM, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateBrush, UnknownData_GGMO, 0x0089);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateBrush, 0x0090);
		}

		// struct FButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, normal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, Hovered, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, pressed, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, DISABLED, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, NormalPadding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedPadding, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, PressedSlateSound, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonStyle, HoveredSlateSound, 0x0288);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonStyle, 0x02A8);
		}

		// struct FComboButtonStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboButtonStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, DownArrowImage, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowOffset, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, ShadowColorAndOpacity, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderBrush, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboButtonStyle, MenuBorderPadding, 0x03E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboButtonStyle, 0x03F8);
		}

		// struct FComboBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ComboBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, ComboButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, PressedSlateSound, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComboBoxStyle, SelectionChangeSlateSound, 0x0420);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComboBoxStyle, 0x0440);
		}

		// struct FFontOutlineSettings
		TEST_METHOD(ScriptStruct__SlateCore__FontOutlineSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bSeparateFillAlpha, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, bApplyOutlineToDropShadows, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, UnknownData_VX2K, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontOutlineSettings, OutlineColor, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontOutlineSettings, 0x0020);
		}

		// struct FSlateFontInfo
		TEST_METHOD(ScriptStruct__SlateCore__SlateFontInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, FontMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, OutlineSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_E21T, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, TypefaceFontName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, Size, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlateFontInfo, UnknownData_HDFF, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlateFontInfo, 0x0058);
		}

		// struct FEditableTextStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageSelected, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, BackgroundImageComposing, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextStyle, CaretImage, 0x01A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextStyle, 0x0238);
		}

		// struct FScrollBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBackgroundImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalTopSlotImage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalTopSlotImage, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, VerticalBottomSlotImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HorizontalBottomSlotImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, NormalThumbImage, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, HoveredThumbImage, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBarStyle, DraggedThumbImage, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBarStyle, 0x0518);
		}

		// struct FEditableTextBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__EditableTextBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageHovered, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageFocused, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundImageReadOnly, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Padding, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, Font, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ForegroundColor, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, BackgroundColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ReadOnlyForegroundColor, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, HScrollBarPadding, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, VScrollBarPadding, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditableTextBoxStyle, ScrollBarStyle, 0x0348);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditableTextBoxStyle, 0x0860);
		}

		// struct FTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, Font, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ColorAndOpacity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowOffset, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, ShadowColorAndOpacity, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, SelectedBackgroundColor, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, highlightColor, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, HighlightShape, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, StrikeBrush, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextBlockStyle, UnderlineBrush, 0x01F8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextBlockStyle, 0x0288);
		}

		// struct FSpinBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SpinBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, BackgroundBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, HoveredBackgroundBrush, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ActiveFillBrush, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, InactiveFillBrush, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ArrowsImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, ForegroundColor, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpinBoxStyle, TextPadding, 0x0300);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpinBoxStyle, 0x0310);
		}

		// struct FFocusEvent
		TEST_METHOD(ScriptStruct__SlateCore__FocusEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFocusEvent, UnknownData_XDWY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFocusEvent, 0x0008);
		}

		// struct FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__InputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputEvent, UnknownData_TTKH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputEvent, 0x0018);
		}

		// struct FMotionEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__MotionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMotionEvent, UnknownData_4DRM, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMotionEvent, 0x0048);
		}

		// struct FInlineTextImageStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineTextImageStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, image, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, Baseline, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineTextImageStyle, UnknownData_ZS1M, 0x009A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineTextImageStyle, 0x00A0);
		}

		// struct FSliderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SliderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalBarImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredBarImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledBarImage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, NormalThumbImage, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, HoveredThumbImage, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, DisabledThumbImage, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, BarThickness, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSliderStyle, UnknownData_UB6R, 0x036C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSliderStyle, 0x0370);
		}

		// struct FVolumeControlStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__VolumeControlStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, SliderStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, HighVolumeImage, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MidVolumeImage, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, LowVolumeImage, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, NoVolumeImage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVolumeControlStyle, MutedImage, 0x05B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVolumeControlStyle, 0x0648);
		}

		// struct FSearchBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SearchBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, TextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ActiveFontInfo, 0x0868);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UpArrowImage, 0x08C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, DownArrowImage, 0x0950);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, GlassImage, 0x09E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ClearImage, 0x0A70);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, ImagePadding, 0x0B00);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, bLeftAlignButtons, 0x0B10);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSearchBoxStyle, UnknownData_L1NG, 0x0B11);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSearchBoxStyle, 0x0B18);
		}

		// struct FExpandableAreaStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ExpandableAreaStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, CollapsedImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, ExpandedImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, RolloutAnimationSeconds, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpandableAreaStyle, UnknownData_8RTF, 0x012C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpandableAreaStyle, 0x0130);
		}

		// struct FProgressBarStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ProgressBarStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, BackgroundImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, FillImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProgressBarStyle, MarqueeImage, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProgressBarStyle, 0x01B8);
		}

		// struct FInlineEditableTextBlockStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__InlineEditableTextBlockStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, EditableTextBoxStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInlineEditableTextBlockStyle, TextStyle, 0x0868);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInlineEditableTextBlockStyle, 0x0AF0);
		}

		// struct FHyperlinkStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HyperlinkStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, UnderlineStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, TextStyle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHyperlinkStyle, Padding, 0x0538);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHyperlinkStyle, 0x0548);
		}

		// struct FCheckBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__CheckBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckBoxType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UnknownData_J5F5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedImage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedHoveredImage, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedPressedImage, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedImage, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedHoveredImage, 0x0250);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedPressedImage, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedImage, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedHoveredImage, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UndeterminedPressedImage, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, Padding, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, ForegroundColor, 0x0530);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, BorderBackgroundColor, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, CheckedSlateSound, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, UncheckedSlateSound, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCheckBoxStyle, HoveredSlateSound, 0x05C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCheckBoxStyle, 0x05E0);
		}

		// struct FGeometry
		TEST_METHOD(ScriptStruct__SlateCore__Geometry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometry, UnknownData_PX6A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometry, 0x0038);
		}

		// struct FPointerEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__PointerEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerEvent, UnknownData_O20G, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerEvent, 0x0078);
		}

		// struct FCharacterEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__CharacterEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterEvent, UnknownData_G6Q3, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterEvent, 0x0020);
		}

		// struct FKeyEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__KeyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyEvent, UnknownData_5HSC, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyEvent, 0x0040);
		}

		// struct FNavigationEvent : public FInputEvent
		TEST_METHOD(ScriptStruct__SlateCore__NavigationEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationEvent, UnknownData_9R8P, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationEvent, 0x0020);
		}

		// struct FAnalogInputEvent : public FKeyEvent
		TEST_METHOD(ScriptStruct__SlateCore__AnalogInputEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnalogInputEvent, UnknownData_6CKU, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnalogInputEvent, 0x0048);
		}

		// struct FTableRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectorFocusedBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHoveredBrush, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveBrush, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHoveredBrush, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveBrush, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundHoveredBrush, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, EvenRowBackgroundBrush, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundHoveredBrush, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, OddRowBackgroundBrush, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, TextColor, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, SelectedTextColor, 0x0540);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Above, 0x0568);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Onto, 0x05F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, DropIndicator_Below, 0x0688);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, ActiveHighlightedBrush, 0x0718);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowStyle, InactiveHighlightedBrush, 0x07A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowStyle, 0x0838);
		}

		// struct FFontData
		TEST_METHOD(ScriptStruct__SlateCore__FontData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFilename, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, Hinting, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, LoadingPolicy, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, UnknownData_I07K, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, SubFaceIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontData, FontFaceAsset, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontData, 0x0020);
		}

		// struct FTypefaceEntry
		TEST_METHOD(ScriptStruct__SlateCore__TypefaceEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, UnknownData_FRSY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypefaceEntry, Font, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypefaceEntry, 0x0030);
		}

		// struct FTypeface
		TEST_METHOD(ScriptStruct__SlateCore__Typeface)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTypeface, Fonts, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTypeface, 0x0010);
		}

		// struct FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFallbackFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, Typeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, ScalingFactor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFallbackFont, UnknownData_YYKD, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFallbackFont, 0x0018);
		}

		// struct FUITweenInstance
		TEST_METHOD(ScriptStruct__UITween__UITweenInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUITweenInstance, UnknownData_LII7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUITweenInstance, 0x00C8);
		}

		// struct FCompositeSubFont : public FCompositeFallbackFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeSubFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, CharacterRanges, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSubFont, Cultures, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSubFont, 0x0038);
		}

		// struct FCompositeFont
		TEST_METHOD(ScriptStruct__SlateCore__CompositeFont)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, DefaultTypeface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, FallbackTypeface, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeFont, SubTypefaces, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeFont, 0x0038);
		}

		// struct FCaptureLostEvent
		TEST_METHOD(ScriptStruct__SlateCore__CaptureLostEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureLostEvent, UnknownData_062F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureLostEvent, 0x0008);
		}

		// struct FWindowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__WindowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MinimizeButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, MaximizeButtonStyle, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, RestoreButtonStyle, 0x0558);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, CloseButtonStyle, 0x0800);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, TitleTextStyle, 0x0AA8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ActiveTitleBrush, 0x0D30);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, InactiveTitleBrush, 0x0DC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, FlashTitleBrush, 0x0E50);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundColor, 0x0EE0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineBrush, 0x0F08);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, OutlineColor, 0x0F98);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BorderBrush, 0x0FC0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, BackgroundBrush, 0x1050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWindowStyle, ChildBackgroundBrush, 0x10E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWindowStyle, 0x1170);
		}

		// struct FScrollBorderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBorderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBorderStyle, BottomShadowBrush, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBorderStyle, 0x0128);
		}

		// struct FScrollBoxStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__ScrollBoxStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, TopShadowBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, BottomShadowBrush, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, LeftShadowBrush, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScrollBoxStyle, RightShadowBrush, 0x01B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScrollBoxStyle, 0x0248);
		}

		// struct FDockTabStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__DockTabStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, CloseButtonStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, NormalBrush, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ActiveBrush, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayTabBrush, 0x03D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ColorOverlayIconBrush, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ForegroundBrush, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, HoveredBrush, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, ContentAreaBrush, 0x0610);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabWellBrush, 0x06A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, TabPadding, 0x0730);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, OverlapWidth, 0x0740);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, UnknownData_ZSEX, 0x0744);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDockTabStyle, FlashColor, 0x0748);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDockTabStyle, 0x0770);
		}

		// struct FTableColumnHeaderStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__TableColumnHeaderStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryAscendingImage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortPrimaryDescendingImage, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryAscendingImage, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, SortSecondaryDescendingImage, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, NormalBrush, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, HoveredBrush, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownImage, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownNormalBorderBrush, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableColumnHeaderStyle, MenuDropdownHoveredBorderBrush, 0x0488);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableColumnHeaderStyle, 0x0518);
		}

		// struct FSplitterStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__SplitterStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleNormalBrush, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplitterStyle, HandleHighlightBrush, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplitterStyle, 0x0128);
		}

		// struct FHeaderRowStyle : public FSlateWidgetStyle
		TEST_METHOD(ScriptStruct__SlateCore__HeaderRowStyle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnStyle, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, LastColumnStyle, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ColumnSplitterStyle, 0x0A38);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, BackgroundBrush, 0x0B60);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeaderRowStyle, ForegroundColor, 0x0BF0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeaderRowStyle, 0x0C18);
		}

		// struct FForeignControlPointData
		TEST_METHOD(ScriptStruct__Landscape__ForeignControlPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignControlPointData, UnknownData_NW2O, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignControlPointData, 0x0001);
		}

		// struct FLandscapeSplineMeshEntry
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineMeshEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, mesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, MaterialOverrides, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_X9G2, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, CenterAdjust, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_7KLH, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, scale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, Orientation, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, ForwardAxis, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UpAxis, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineMeshEntry, UnknownData_9MGI, 0x0037);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineMeshEntry, 0x0038);
		}

		// struct FLandscapeSplineInterpPoint
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineInterpPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, center, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, left, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, Right, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffLeft, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, FalloffRight, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerLeft, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerRight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffLeft, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, LayerFalloffRight, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineInterpPoint, StartEndFalloff, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineInterpPoint, 0x0070);
		}

		// struct FLayerBlendInput
		TEST_METHOD(ScriptStruct__Landscape__LayerBlendInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, BlendType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_RGXU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, LayerInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_06DA, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, HeightInput, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, UnknownData_2RYY, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, PreviewWeight, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstLayerInput, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerBlendInput, ConstHeightInput, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerBlendInput, 0x005C);
		}

		// struct FLandscapeSplineSegmentConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineSegmentConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, ControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, TangentLen, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineSegmentConnection, SocketName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineSegmentConnection, 0x0018);
		}

		// struct FGrassInput
		TEST_METHOD(ScriptStruct__Landscape__GrassInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_TFQR, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, GrassType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassInput, UnknownData_LRFZ, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassInput, 0x0038);
		}

		// struct FLandscapeProxyMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeProxyMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, LodIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, UnknownData_PE3K, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeProxyMaterialOverride, MATERIAL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeProxyMaterialOverride, 0x0010);
		}

		// struct FLandscapeComponentMaterialOverride
		TEST_METHOD(ScriptStruct__Landscape__LandscapeComponentMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, LodIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, UnknownData_DJPE, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeComponentMaterialOverride, MATERIAL, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeComponentMaterialOverride, 0x0010);
		}

		// struct FLandscapeSplineConnection
		TEST_METHOD(ScriptStruct__Landscape__LandscapeSplineConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, Segment, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeSplineConnection, UnknownData_7V6T, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeSplineConnection, 0x0010);
		}

		// struct FLandscapeLayerBrush
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerBrush)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerBrush, UnknownData_X5H1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerBrush, 0x0001);
		}

		// struct FLandscapeLayer
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bVisible, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, bLocked, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_24B2, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, HeightmapAlpha, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapAlpha, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, BlendMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, UnknownData_B48O, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, Brushes, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayer, WeightmapLayerAllocationBlend, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayer, 0x0090);
		}

		// struct FHeightmapData
		TEST_METHOD(ScriptStruct__Landscape__HeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightmapData, texture, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightmapData, 0x0008);
		}

		// struct FWeightmapLayerAllocationInfo
		TEST_METHOD(ScriptStruct__Landscape__WeightmapLayerAllocationInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, LayerInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, WeightmapTextureChannel, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapLayerAllocationInfo, UnknownData_5O3A, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapLayerAllocationInfo, 0x0010);
		}

		// struct FWeightmapData
		TEST_METHOD(ScriptStruct__Landscape__WeightmapData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, Textures, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, LayerAllocations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightmapData, TextureUsages, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightmapData, 0x0030);
		}

		// struct FLandscapeLayerComponentData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerComponentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, HeightmapData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerComponentData, WeightmapData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerComponentData, 0x0038);
		}

		// struct FLandscapeEditToolRenderData
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditToolRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, ToolMaterial, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, GizmoMaterial, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, SelectedType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelR, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DebugChannelB, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DataTexture, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, LayerContributionTexture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditToolRenderData, DirtyTexture, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditToolRenderData, 0x0038);
		}

		// struct FGizmoSelectData
		TEST_METHOD(ScriptStruct__Landscape__GizmoSelectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGizmoSelectData, UnknownData_DDDH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGizmoSelectData, 0x0050);
		}

		// struct FChaosDestructionEvent
		TEST_METHOD(ScriptStruct__ChaosNiagara__ChaosDestructionEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, Velocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, AngularVelocity, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ExtentMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, ParticleID, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, time, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDestructionEvent, type, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDestructionEvent, 0x0044);
		}

		// struct FGrassVariety
		TEST_METHOD(ScriptStruct__Landscape__GrassVariety)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassMesh, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, GrassDensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseGrid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_8PYU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, PlacementJitter, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, StartCullDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, EndCullDistance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, MinLod, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, Scaling, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_AWLL, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleX, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleY, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, ScaleZ, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, RandomRotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, AlignToSurface, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bUseLandscapeLightmap, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, lightingChannels, 0x003F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bReceivesDecals, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bCastDynamicShadow, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, bKeepInstanceBufferCPUCopy, 0x0042);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGrassVariety, UnknownData_7D7W, 0x0043);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGrassVariety, 0x0048);
		}

		// struct FLandscapeInfoLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeInfoLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerInfoObj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, LayerName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeInfoLayerSettings, UnknownData_MLGC, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeInfoLayerSettings, 0x0018);
		}

		// struct FLandscapeMaterialTextureStreamingInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeMaterialTextureStreamingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TextureName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeMaterialTextureStreamingInfo, TexelFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeMaterialTextureStreamingInfo, 0x0010);
		}

		// struct FLandscapeImportLayerInfo
		TEST_METHOD(ScriptStruct__Landscape__LandscapeImportLayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeImportLayerInfo, UnknownData_D88G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeImportLayerInfo, 0x0001);
		}

		// struct FLandscapeLayerStruct
		TEST_METHOD(ScriptStruct__Landscape__LandscapeLayerStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeLayerStruct, LayerInfoObj, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeLayerStruct, 0x0008);
		}

		// struct FLandscapeEditorLayerSettings
		TEST_METHOD(ScriptStruct__Landscape__LandscapeEditorLayerSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLandscapeEditorLayerSettings, UnknownData_1J3M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLandscapeEditorLayerSettings, 0x0001);
		}

		// struct FForeignWorldSplineData
		TEST_METHOD(ScriptStruct__Landscape__ForeignWorldSplineData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignWorldSplineData, UnknownData_L3H9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignWorldSplineData, 0x0001);
		}

		// struct FForeignSplineSegmentData
		TEST_METHOD(ScriptStruct__Landscape__ForeignSplineSegmentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForeignSplineSegmentData, UnknownData_ON6P, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForeignSplineSegmentData, 0x0001);
		}

		// struct FCharmIdSlot
		TEST_METHOD(ScriptStruct__Customization__CharmIdSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmIdSlot, slotIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmIdSlot, UnknownData_XJF0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharmIdSlot, charmId, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharmIdSlot, 0x0010);
		}

		// struct FPlayerCustomization
		TEST_METHOD(ScriptStruct__Customization__PlayerCustomization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCustomization, _customizationMeshes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerCustomization, _customizationCharms, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerCustomization, 0x0020);
		}

		// struct FMediaCaptureDevice
		TEST_METHOD(ScriptStruct__MediaAssets__MediaCaptureDevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureDevice, Url, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureDevice, 0x0028);
		}

		// struct FMediaSoundComponentSpectralData
		TEST_METHOD(ScriptStruct__MediaAssets__MediaSoundComponentSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaSoundComponentSpectralData, Magnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaSoundComponentSpectralData, 0x0008);
		}

		// struct FARVideoFormat
		TEST_METHOD(ScriptStruct__AugmentedReality__ARVideoFormat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, FPS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Width, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARVideoFormat, Height, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARVideoFormat, 0x000C);
		}

		// struct FARSharedWorldReplicationState
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSharedWorldReplicationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, PreviewImageOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSharedWorldReplicationState, ARWorldOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSharedWorldReplicationState, 0x0008);
		}

		// struct FARTraceResult
		TEST_METHOD(ScriptStruct__AugmentedReality__ARTraceResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, DistanceFromCamera, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TraceChannel, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_GXYO, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, LocalToTrackingTransform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, TrackedGeometry, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARTraceResult, UnknownData_VRDW, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARTraceResult, 0x0060);
		}

		// struct FARSkeletonDefinition
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSkeletonDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, NumJoints, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, UnknownData_6NWO, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, JointNames, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSkeletonDefinition, ParentIndices, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSkeletonDefinition, 0x0028);
		}

		// struct FARPose3D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose3D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransforms, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, IsJointTracked, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, JointTransformSpace, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose3D, UnknownData_J0CY, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose3D, 0x0050);
		}

		// struct FARPose2D
		TEST_METHOD(ScriptStruct__AugmentedReality__ARPose2D)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, SkeletonDefinition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, JointLocations, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARPose2D, IsJointTracked, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARPose2D, 0x0048);
		}

		// struct FARSessionStatus
		TEST_METHOD(ScriptStruct__AugmentedReality__ARSessionStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, additionalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, Status, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FARSessionStatus, UnknownData_Z96J, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FARSessionStatus, 0x0018);
		}

		// struct FUVMapSettings
		TEST_METHOD(ScriptStruct__StaticMeshDescription__UVMapSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, UVTile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, position, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUVMapSettings, scale, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUVMapSettings, 0x0038);
		}

		// struct FMaterialQualityOverrides
		TEST_METHOD(ScriptStruct__MaterialShaderQualitySettings__MaterialQualityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDiscardQualityDuringCook, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bEnableOverride, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceFullyRough, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceNonMetal, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisableLMDirectionality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceLQReflections, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bForceDisablePreintegratedGF, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, bDisableMaterialNormalCalculation, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialQualityOverrides, MobileCSMQuality, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialQualityOverrides, 0x0009);
		}

		// struct FMovieSceneEventPtrs
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPtrs)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, Function, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPtrs, BoundObjectProperty, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPtrs, 0x0028);
		}

		// struct FMovieSceneEvent
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEvent, Ptrs, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEvent, 0x0028);
		}

		// struct FMovieSceneEventChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventChannel, UnknownData_6TES, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventChannel, 0x0088);
		}

		// struct FMovieSceneEventParameters
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventParameters, UnknownData_00Z3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventParameters, 0x0030);
		}

		// struct FEventPayload
		TEST_METHOD(ScriptStruct__MovieSceneTracks__EventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, EventName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, UnknownData_Y401, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventPayload, Parameters, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventPayload, 0x0040);
		}

		// struct FMovieSceneEventSectionData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, KeyValues, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionData, UnknownData_NI8I, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionData, 0x0088);
		}

		// struct FMovieSceneEventTemplateBase : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTemplateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, EventReceivers, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTemplateBase, UnknownData_Z2DU, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTemplateBase, 0x0038);
		}

		// struct FMovieSceneEventRepeaterTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventRepeaterTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventRepeaterTemplate, EventToTrigger, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventRepeaterTemplate, 0x0060);
		}

		// struct FMovieSceneEventTriggerTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventTriggerTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, EventTimes, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventTriggerTemplate, Events, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventTriggerTemplate, 0x0058);
		}

		// struct FMovieSceneEventSectionTemplate : public FMovieSceneEventTemplateBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventSectionTemplate, EventData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneFadeSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFadeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, FadeColor, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFadeSectionTemplate, UnknownData_2JLQ, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFadeSectionTemplate, 0x00D8);
		}

		// struct FMovieSceneLevelVisibilitySectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneLevelVisibilitySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, visibility, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, UnknownData_5BCF, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneLevelVisibilitySectionTemplate, LevelNames, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneLevelVisibilitySectionTemplate, 0x0038);
		}

		// struct FScalarParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ScalarParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, UnknownData_DUAD, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterNameAndCurve, ParameterCurve, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterNameAndCurve, 0x00B0);
		}

		// struct FBoolParameterNameAndCurve
		TEST_METHOD(ScriptStruct__MovieSceneTracks__BoolParameterNameAndCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, UnknownData_5QRP, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolParameterNameAndCurve, ParameterCurve, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolParameterNameAndCurve, 0x00A0);
		}

		// struct FVector2DParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__Vector2DParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, UnknownData_RHPX, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, XCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector2DParameterNameAndCurves, YCurve, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2DParameterNameAndCurves, 0x0150);
		}

		// struct FVectorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__VectorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, UnknownData_QDQQ, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, XCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, YCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterNameAndCurves, ZCurve, 0x0150);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterNameAndCurves, 0x01F0);
		}

		// struct FColorParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__ColorParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, UnknownData_TVH9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, RedCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, GreenCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, BlueCurve, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorParameterNameAndCurves, AlphaCurve, 0x01F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorParameterNameAndCurves, 0x0290);
		}

		// struct FTransformParameterNameAndCurves
		TEST_METHOD(ScriptStruct__MovieSceneTracks__TransformParameterNameAndCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, UnknownData_S2F7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, Translation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, rotation, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformParameterNameAndCurves, scale, 0x03D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformParameterNameAndCurves, 0x05B0);
		}

		// struct FMovieSceneParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Scalars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Bools, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vector2Ds, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Vectors, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Colors, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParameterSectionTemplate, Transforms, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneMaterialParameterCollectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneMaterialParameterCollectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMaterialParameterCollectionTemplate, MPC, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMaterialParameterCollectionTemplate, 0x0088);
		}

		// struct FMovieSceneObjectPropertyTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneObjectPropertyTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneObjectPropertyTemplate, ObjectChannel, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneObjectPropertyTemplate, 0x0120);
		}

		// struct FMovieSceneComponentMaterialSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentMaterialSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, MaterialIndex, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentMaterialSectionTemplate, UnknownData_L015, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentMaterialSectionTemplate, 0x0088);
		}

		// struct FMovieSceneParticleParameterSectionTemplate : public FMovieSceneParameterSectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleParameterSectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleParameterSectionTemplate, 0x0080);
		}

		// struct FMovieSceneParticleChannel : public FMovieSceneByteChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleChannel)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleChannel, 0x0098);
		}

		// struct FMovieSceneParticleSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneParticleSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneParticleSectionTemplate, ParticleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneParticleSectionTemplate, 0x00B8);
		}

		// struct FMovieScenePrimitiveMaterialTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScenePrimitiveMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, UnknownData_DBRO, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScenePrimitiveMaterialTemplate, MaterialChannel, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScenePrimitiveMaterialTemplate, 0x00F0);
		}

		// struct FMovieSceneTransformMask
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformMask, Mask, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformMask, 0x0004);
		}

		// struct FMovieScene3DTransformTemplateData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformTemplateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, TranslationCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, RotationCurve, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ScaleCurve, 0x03C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, ManualWeight, 0x05A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, BlendType, 0x0640);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_EFBU, 0x0641);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, Mask, 0x0644);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, bUseQuaternionInterpolation, 0x0648);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformTemplateData, UnknownData_BBPF, 0x0649);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformTemplateData, 0x0650);
		}

		// struct FMovieSceneEulerTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEulerTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEulerTransformPropertySectionTemplate, templateData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEulerTransformPropertySectionTemplate, 0x06A8);
		}

		// struct FMovieSceneTransformPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneTransformPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneTransformPropertySectionTemplate, templateData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneTransformPropertySectionTemplate, 0x06A8);
		}

		// struct FMovieSceneVectorPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, ComponentCurves, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, NumChannelsUsed, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, BlendType, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorPropertySectionTemplate, UnknownData_8NCB, 0x02DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorPropertySectionTemplate, 0x02E0);
		}

		// struct FMovieSceneStringChannel : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, Times, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, values, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, DefaultValue, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, bHasDefaultValue, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringChannel, UnknownData_G69A, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringChannel, 0x00A0);
		}

		// struct FMovieSceneStringPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneStringPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneStringPropertySectionTemplate, StringCurve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneStringPropertySectionTemplate, 0x00F8);
		}

		// struct FMovieSceneIntegerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneIntegerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, IntegerCurve, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, BlendType, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneIntegerPropertySectionTemplate, UnknownData_DFKE, 0x00E9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneIntegerPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneEnumPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEnumPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEnumPropertySectionTemplate, EnumCurve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEnumPropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneBytePropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBytePropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBytePropertySectionTemplate, ByteCurve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBytePropertySectionTemplate, 0x00F0);
		}

		// struct FMovieSceneFloatPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneFloatPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, FloatFunction, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, BlendType, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneFloatPropertySectionTemplate, UnknownData_EPDG, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneFloatPropertySectionTemplate, 0x0100);
		}

		// struct FMovieSceneBoolPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneBoolPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneBoolPropertySectionTemplate, BoolCurve, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneBoolPropertySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, playRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_O0VD, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, SlotName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, Weight, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bSkipAnimNotifiers, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, bForceCustomMode, 0x00C9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_2YKM, 0x00CA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, StartOffset, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, EndOffset, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationParams, UnknownData_1TG8, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationParams, 0x00D8);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplateParameters : public FMovieSceneSkeletalAnimationParams
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionStartTime, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, SectionEndTime, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplateParameters, 0x00E0);
		}

		// struct FMovieSceneSkeletalAnimationSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSkeletalAnimationSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSkeletalAnimationSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSkeletalAnimationSectionTemplate, 0x0100);
		}

		// struct FMovieSceneSlomoSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSlomoSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSlomoSectionTemplate, SlomoCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSlomoSectionTemplate, 0x00C0);
		}

		// struct FMovieSceneSpawnSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneSpawnSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneSpawnSectionTemplate, curve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneSpawnSectionTemplate, 0x00B0);
		}

		// struct FMovieSceneVectorKeyStructBase : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStructBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStructBase, UnknownData_J6X8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStructBase, 0x0028);
		}

		// struct FMovieSceneVector4KeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector4KeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, UnknownData_JHF5, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector4KeyStruct, vector, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector4KeyStruct, 0x0040);
		}

		// struct FMovieSceneVectorKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVectorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, vector, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVectorKeyStruct, UnknownData_ARDH, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVectorKeyStruct, 0x0038);
		}

		// struct FMovieSceneVector2DKeyStruct : public FMovieSceneVectorKeyStructBase
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVector2DKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneVector2DKeyStruct, vector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVector2DKeyStruct, 0x0030);
		}

		// struct FMovieSceneVisibilitySectionTemplate : public FMovieSceneBoolPropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneVisibilitySectionTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneVisibilitySectionTemplate, 0x00E8);
		}

		// struct FMovieSceneActorReferenceKey
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, ComponentName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceKey, SocketName, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceKey, 0x0030);
		}

		// struct FMovieSceneActorReferenceData : public FMovieSceneChannel
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyTimes, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_QK47, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, KeyValues, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceData, UnknownData_9GDL, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceData, 0x00B8);
		}

		// struct FMovieSceneCameraAnimSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, CameraAnim, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, playRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, PlayScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, BlendInTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, blendOutTime, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, bLooping, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionData, UnknownData_839J, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionData, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionData
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, ShakeClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlayScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, PlaySpace, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_HI3K, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UserDefinedPlaySpace, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionData, UnknownData_K9SC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionData, 0x0020);
		}

		// struct FMovieScene3DAttachSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DAttachSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachSocketName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachComponentName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentLocationRule, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentRotationRule, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, AttachmentScaleRule, 0x0052);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentLocationRule, 0x0053);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentRotationRule, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, DetachmentScaleRule, 0x0055);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DAttachSectionTemplate, UnknownData_UQ6W, 0x0056);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DAttachSectionTemplate, 0x0058);
		}

		// struct FMovieScene3DPathSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DPathSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, PathBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, TimingCurve, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, FrontAxisEnum, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UpAxisEnum, 0x00D9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_2Q2D, 0x00DA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DPathSectionTemplate, UnknownData_U4D9, 0x00DD);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DPathSectionTemplate, 0x00E0);
		}

		// struct FMovieScene3DTransformKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DTransformKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, rotation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, scale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, time, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DTransformKeyStruct, UnknownData_D0A0, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DTransformKeyStruct, 0x0048);
		}

		// struct FMovieScene3DScaleKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DScaleKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, scale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DScaleKeyStruct, UnknownData_7SH7, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DScaleKeyStruct, 0x0030);
		}

		// struct FMovieScene3DRotationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DRotationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, rotation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DRotationKeyStruct, UnknownData_G4T4, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DRotationKeyStruct, 0x0030);
		}

		// struct FMovieScene3DLocationKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieScene3DLocationKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieScene3DLocationKeyStruct, UnknownData_D5LD, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieScene3DLocationKeyStruct, 0x0030);
		}

		// struct FMovieSceneComponentTransformSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneComponentTransformSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneComponentTransformSectionTemplate, templateData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneComponentTransformSectionTemplate, 0x0670);
		}

		// struct FMovieSceneActorReferenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneActorReferenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, PropertyData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneActorReferenceSectionTemplate, ActorReferenceData, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneActorReferenceSectionTemplate, 0x0110);
		}

		// struct FMovieSceneAudioSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAudioSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneAudioSectionTemplate, AudioSection, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAudioSectionTemplate, 0x0028);
		}

		// struct FMovieSceneAdditiveCameraAnimationTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneAdditiveCameraAnimationTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneAdditiveCameraAnimationTemplate, 0x0020);
		}

		// struct FMovieSceneCameraShakeSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraShakeSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraShakeSectionTemplate, UnknownData_HM7M, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraShakeSectionTemplate, 0x0048);
		}

		// struct FMovieSceneCameraAnimSectionTemplate : public FMovieSceneAdditiveCameraAnimationTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraAnimSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SourceData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, SectionStartTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraAnimSectionTemplate, UnknownData_LNMT, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraAnimSectionTemplate, 0x0048);
		}

		// struct FMRMeshConfiguration
		TEST_METHOD(ScriptStruct__MRMesh__MRMeshConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMRMeshConfiguration, UnknownData_SDE7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMRMeshConfiguration, 0x0001);
		}

		// struct FMovieSceneCameraCutSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneCameraCutSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CameraBindingID, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_5YYA, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, CutTransform, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bHasCutTransform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, bIsFinalSection, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCameraCutSectionTemplate, UnknownData_2BBX, 0x0072);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCameraCutSectionTemplate, 0x0080);
		}

		// struct FMovieSceneColorKeyStruct : public FMovieSceneKeyStruct
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorKeyStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorKeyStruct, UnknownData_AH0G, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorKeyStruct, 0x0038);
		}

		// struct FMovieSceneColorSectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneColorSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, Curves, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, BlendType, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneColorSectionTemplate, UnknownData_5C1U, 0x02D9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneColorSectionTemplate, 0x02E0);
		}

		// struct FMovieSceneEventPayloadVariable
		TEST_METHOD(ScriptStruct__MovieSceneTracks__MovieSceneEventPayloadVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneEventPayloadVariable, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneEventPayloadVariable, 0x0010);
		}

		// struct FTemplateSequenceBindingOverrideData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceBindingOverrideData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, bOverridesDefault, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceBindingOverrideData, UnknownData_5XFO, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceBindingOverrideData, 0x000C);
		}

		// struct FTemplateSequenceInstanceData : public FMovieSceneSequenceInstanceData
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, Operand, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceInstanceData, UnknownData_D3HO, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceInstanceData, 0x0020);
		}

		// struct FTemplateSequenceSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__TemplateSequence__TemplateSequenceSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, SectionStartTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, OuterBindingId, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTemplateSequenceSectionTemplate, InnerOperand, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTemplateSequenceSectionTemplate, 0x0048);
		}

		// struct FDBDTableRowBase : public FTableRowBase
		TEST_METHOD(ScriptStruct__DataTableUtilities__DBDTableRowBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDTableRowBase, 0x0008);
		}

		// struct FDBDTunableRowBase : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DataTableUtilities__DBDTunableRowBase)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDTunableRowBase, 0x0008);
		}

		// struct FDataTableProxy
		TEST_METHOD(ScriptStruct__DataTableUtilities__DataTableProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableProxy, AssetPtr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableProxy, _dataTable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableProxy, UnknownData_HIS8, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableProxy, 0x0040);
		}

		// struct FDBDTableRowBaseWithId : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DataTableUtilities__DBDTableRowBaseWithId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTableRowBaseWithId, Id, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTableRowBaseWithId, UnknownData_NO3I, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDTableRowBaseWithId, 0x0018);
		}

		// struct FDBDTunableRowHandle
		TEST_METHOD(ScriptStruct__DataTableUtilities__DBDTunableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTunableRowHandle, _dataTableRowHandle, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTunableRowHandle, _defaultValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTunableRowHandle, UnknownData_YD1Y, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDTunableRowHandle, 0x0028);
		}

		// struct FActivationDefinition
		TEST_METHOD(ScriptStruct__Activation__ActivationDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivationDefinition, _activationStrategy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivationDefinition, UnknownData_ZH9T, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActivationDefinition, _activationTags, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActivationDefinition, 0x0028);
		}

		// struct FTestableActivationDefinition : public FActivationDefinition
		TEST_METHOD(ScriptStruct__Activation__TestableActivationDefinition)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestableActivationDefinition, 0x0028);
		}

		// struct FDependencyBasedActivationStrategy
		TEST_METHOD(ScriptStruct__Activation__DependencyBasedActivationStrategy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDependencyBasedActivationStrategy, UnknownData_Y191, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDependencyBasedActivationStrategy, 0x0020);
		}

		// struct FLevelSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObjectReferenceMap, UnknownData_GJXU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObjectReferenceMap, 0x0050);
		}

		// struct FLevelSequenceCameraSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceCameraSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, bOverrideAspectRatioAxisConstraint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceCameraSettings, AspectRatioAxisConstraint, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceCameraSettings, 0x0002);
		}

		// struct FBoundActorProxy
		TEST_METHOD(ScriptStruct__LevelSequence__BoundActorProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoundActorProxy, UnknownData_55UR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoundActorProxy, 0x0001);
		}

		// struct FLevelSequenceBindingReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ExternalObjectPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReference, ObjectPath, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReference, 0x0040);
		}

		// struct FLevelSequenceBindingReferenceArray
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferenceArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferenceArray, References, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferenceArray, 0x0010);
		}

		// struct FLevelSequenceBindingReferences
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceBindingReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, BindingIdToReferences, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceBindingReferences, AnimSequenceInstances, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceBindingReferences, 0x00A0);
		}

		// struct FLevelSequenceLegacyObjectReference
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceLegacyObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceLegacyObjectReference, UnknownData_7NS3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceLegacyObjectReference, 0x0020);
		}

		// struct FLevelSequenceObject
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ObjectOrOwner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, UnknownData_I14A, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, ComponentName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceObject, CachedComponent, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceObject, 0x0038);
		}

		// struct FLevelSequenceSnapshotSettings
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequenceSnapshotSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, ZeroPadAmount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, UnknownData_IXJT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequenceSnapshotSettings, FrameRate, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequenceSnapshotSettings, 0x000C);
		}

		// struct FLevelSequencePlayerSnapshot
		TEST_METHOD(ScriptStruct__LevelSequence__LevelSequencePlayerSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, MasterTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotLocalTime, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CurrentShotSourceTime, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, SourceTimecode, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, CameraComponent, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, settings, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_RFMI, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ActiveShot, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, ShotID, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSequencePlayerSnapshot, UnknownData_7VG1, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSequencePlayerSnapshot, 0x00C0);
		}

		// struct FDistanceTrackerCase
		TEST_METHOD(ScriptStruct__QueryService__DistanceTrackerCase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceTrackerCase, UnknownData_OJPE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceTrackerCase, _distanceToTrackSquared, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceTrackerCase, _inRange, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceTrackerCase, UnknownData_ZHNV, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceTrackerCase, 0x0020);
		}

		// struct FActorsInRangeBool
		TEST_METHOD(ScriptStruct__QueryService__ActorsInRangeBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorsInRangeBool, _actorPairQueryComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorsInRangeBool, _sourceActor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorsInRangeBool, _otherActor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorsInRangeBool, _range, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorsInRangeBool, _inRange, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorsInRangeBool, UnknownData_N63J, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorsInRangeBool, 0x0040);
		}

		// struct FActorPairQuery
		TEST_METHOD(ScriptStruct__QueryService__ActorPairQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPairQuery, UnknownData_G3G8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPairQuery, _distanceTrackerCases, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPairQuery, _caseIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorPairQuery, UnknownData_GVQR, 0x0064);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorPairQuery, 0x0068);
		}

		// struct FMagicLeapIdentityAttribute
		TEST_METHOD(ScriptStruct__MagicLeapIdentity__MagicLeapIdentityAttribute)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Attribute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, UnknownData_M5GS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapIdentityAttribute, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapIdentityAttribute, 0x0018);
		}

		// struct FCustomGamePresetData
		TEST_METHOD(ScriptStruct__SocialParty__CustomGamePresetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, UnknownData_4KO7, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _mapAvailabilities, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _arePerkAvailable, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _areOfferingAvailable, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _areItemAvailable, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _areItemAddonAvailable, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _areDlcContentAllowed, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, _isPrivateMatch, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomGamePresetData, UnknownData_YZ9I, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomGamePresetData, 0x0020);
		}

		// struct FPartyMatchmakingSettings
		TEST_METHOD(ScriptStruct__SocialParty__PartyMatchmakingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMatchmakingSettings, UnknownData_SKFN, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMatchmakingSettings, _playerIds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMatchmakingSettings, _matchmakingState, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMatchmakingSettings, UnknownData_1URH, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyMatchmakingSettings, 0x0020);
		}

		// struct FPartySessionSettings
		TEST_METHOD(ScriptStruct__SocialParty__PartySessionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, UnknownData_XSQR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, _sessionId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, _gameSessionInfos, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, _owningUserId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, _owningUserName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, _isDedicated, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, UnknownData_J6W8, 0x0089);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartySessionSettings, _matchmakingTimestamp, 0x0090);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartySessionSettings, 0x0098);
		}

		// struct FSocialPartyMember
		TEST_METHOD(ScriptStruct__SocialParty__SocialPartyMember)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, UnknownData_GR62, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _customizationMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _playerName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _platformSessionId, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _uniquePlayerId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _playerRank, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _characterLevel, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _prestigeLevel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _gameRole, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _characterId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _powerId, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _location, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _ready, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _crossplayAllowed, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, UnknownData_DQPN, 0x006E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _playerPlatform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _playerProvider, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _postMatchmakingRole, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _postMatchmakingState, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _isStateInitialized, 0x0092);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, UnknownData_UWQF, 0x0093);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyMember, _disconnectionPenaltyEndOfBan, 0x0098);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocialPartyMember, 0x00A0);
		}

		// struct FSocialPartyState
		TEST_METHOD(ScriptStruct__SocialParty__SocialPartyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, UnknownData_XZY6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _customGamePresetData, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _partySessionSettings, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _partyMatchmakingSettings, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _playerJoinOrder, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _playerChatIndices, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _gameType, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _isCrowdPlay, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, UnknownData_S9XB, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _version, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _lastUpdatedTime, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialPartyState, _lastSentTime, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocialPartyState, 0x0160);
		}

		// struct FJsonObjectWrapper
		TEST_METHOD(ScriptStruct__JsonUtilities__JsonObjectWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, JsonString, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FJsonObjectWrapper, UnknownData_AS49, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FJsonObjectWrapper, 0x0020);
		}

		// struct FStadiaStorefrontDlcData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__PlatformUtilities__StadiaStorefrontDlcData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, DLC_Name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, General_Dlc_ID, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, StadiaID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, copyright, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, en_name, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, en_description, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, fr_name, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, fr_description, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, de_name, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, de_description, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, it_name, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, it_description, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, es_name, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, es_description, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, cht_name, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, cht_description, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, chs_name, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, chs_description, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, th_name, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, th_description, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, rus_name, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, rus_description, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, brapor_name, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, brapor_description, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, kor_name, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, kor_description, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, jpn_name, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, jpn_description, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, dan_name, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, dan_description, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, ara_name, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, ara_description, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, dut_name, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, dut_description, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, fin_name, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, fin_description, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, nor_name, 0x0248);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, nor_description, 0x0258);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, pol_name, 0x0268);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, pol_description, 0x0278);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, por_name, 0x0288);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, por_description, 0x0298);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, swe_name, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, swe_description, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, tr_name, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, tr_description, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, cfre_name, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, cfre_description, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, mex__latam_spanish__name, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStadiaStorefrontDlcData, mex__latam_spanish__description, 0x0318);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStadiaStorefrontDlcData, 0x0328);
		}

		// struct FImageWriteOptions
		TEST_METHOD(ScriptStruct__ImageWriteQueue__ImageWriteOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, Format, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_6JJV, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, OnComplete, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_PW0B, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, CompressionQuality, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bOverwriteFile, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, bAsync, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImageWriteOptions, UnknownData_AS1P, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImageWriteOptions, 0x0060);
		}

		// struct FFoliageTypeObject
		TEST_METHOD(ScriptStruct__Foliage__FoliageTypeObject)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, FoliageTypeObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, TypeInstance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, bIsAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, UnknownData_89T7, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageTypeObject, type, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageTypeObject, 0x0020);
		}

		// struct FProceduralFoliageInstance
		TEST_METHOD(ScriptStruct__Foliage__ProceduralFoliageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_51KM, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, rotation, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, Age, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_92DR, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, type, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProceduralFoliageInstance, UnknownData_2JYH, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProceduralFoliageInstance, 0x0060);
		}

		// struct FFoliageVertexColorChannelMask
		TEST_METHOD(ScriptStruct__Foliage__FoliageVertexColorChannelMask)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_1GBC, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, MaskThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFoliageVertexColorChannelMask, UnknownData_MI9V, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFoliageVertexColorChannelMask, 0x000C);
		}

		// struct FAnimationBudgetAllocatorParameters
		TEST_METHOD(ScriptStruct__AnimationBudgetAllocator__AnimationBudgetAllocatorParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, BudgetInMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, MinQuality, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, MaxTickRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, WorkUnitSmoothingSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, AlwaysTickFalloffAggression, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, InterpolationFalloffAggression, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, InterpolationMaxRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, MaxInterpolatedComponents, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, InterpolationTickMultiplier, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, InitialEstimatedWorkUnitTimeMs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, MaxTickedOffsreenComponents, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, StateChangeThrottleInFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, BudgetFactorBeforeReducedWork, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, BudgetFactorBeforeReducedWorkEpsilon, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, BudgetPressureSmoothingSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, ReducedWorkThrottleMinInFrames, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, ReducedWorkThrottleMaxInFrames, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, BudgetFactorBeforeAggressiveReducedWork, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, ReducedWorkThrottleMaxPerFrame, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationBudgetAllocatorParameters, BudgetPressureBeforeEmergencyReducedWork, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationBudgetAllocatorParameters, 0x0050);
		}

		// struct FPaperFlipbookKeyFrame
		TEST_METHOD(ScriptStruct__Paper2D__PaperFlipbookKeyFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, Sprite, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, FrameRun, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperFlipbookKeyFrame, UnknownData_GQBK, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperFlipbookKeyFrame, 0x0010);
		}

		// struct FSpriteInstanceData
		TEST_METHOD(ScriptStruct__Paper2D__SpriteInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, SourceSprite, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, VertexColor, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteInstanceData, MaterialIndex, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteInstanceData, 0x0050);
		}

		// struct FIntMargin
		TEST_METHOD(ScriptStruct__Paper2D__IntMargin)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, left, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Top, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Right, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntMargin, Bottom, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntMargin, 0x0010);
		}

		// struct FPaperSpriteSocket
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteSocket)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, LocalTransform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, SocketName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteSocket, UnknownData_GBF1, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteSocket, 0x0040);
		}

		// struct FPaperSpriteAtlasSlot
		TEST_METHOD(ScriptStruct__Paper2D__PaperSpriteAtlasSlot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, SpriteRef, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, AtlasIndex, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, x, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, y, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Width, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, Height, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperSpriteAtlasSlot, UnknownData_KW8Y, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperSpriteAtlasSlot, 0x0048);
		}

		// struct FPaperTerrainMaterialRule
		TEST_METHOD(ScriptStruct__Paper2D__PaperTerrainMaterialRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, StartCap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, Body, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, EndCap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MinimumAngle, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, MaximumAngle, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, bEnableCollision, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_WHO4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, CollisionOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, DrawOrder, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTerrainMaterialRule, UnknownData_5TIY, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTerrainMaterialRule, 0x0038);
		}

		// struct FPaperTileInfo
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, TileSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, PackedTileIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileInfo, UnknownData_Y4QV, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileInfo, 0x0010);
		}

		// struct FPaperTileSetTerrain
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileSetTerrain)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, TerrainName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, CenterTileIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileSetTerrain, UnknownData_7ELD, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileSetTerrain, 0x0018);
		}

		// struct FSpriteGeometryShape
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryShape)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, ShapeType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_ZX42, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, Vertices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, BoxPosition, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, bNegativeWinding, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryShape, UnknownData_35VU, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryShape, 0x0030);
		}

		// struct FSpriteGeometryCollection
		TEST_METHOD(ScriptStruct__Paper2D__SpriteGeometryCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, Shapes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, GeometryType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_99KY, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, PixelsPerSubdivisionY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, bAvoidVertexMerging, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_RV8E, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, AlphaThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, DetailAmount, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, SimplifyEpsilon, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteGeometryCollection, UnknownData_EEF5, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteGeometryCollection, 0x0030);
		}

		// struct FPaperTileMetadata
		TEST_METHOD(ScriptStruct__Paper2D__PaperTileMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UserDataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_RNVU, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, CollisionData, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, TerrainMembership, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaperTileMetadata, UnknownData_OOKO, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaperTileMetadata, 0x0048);
		}

		// struct FSpriteDrawCallRecord
		TEST_METHOD(ScriptStruct__Paper2D__SpriteDrawCallRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, Destination, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_XES3, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, BaseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_Z7LB, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, color, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteDrawCallRecord, UnknownData_U3P3, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteDrawCallRecord, 0x00D0);
		}

		// struct FSpriteAssetInitParameters
		TEST_METHOD(ScriptStruct__Paper2D__SpriteAssetInitParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteAssetInitParameters, UnknownData_PWSK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteAssetInitParameters, 0x0040);
		}

		// struct FTagStateBool
		TEST_METHOD(ScriptStruct__GameplayTagUtilities__TagStateBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagStateBool, _isTrue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTagStateBool, UnknownData_I5RG, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTagStateBool, 0x0030);
		}

		// struct FCone
		TEST_METHOD(ScriptStruct__MathUtilities__Cone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCone, UnknownData_LR2G, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCone, 0x0020);
		}

		// struct FQosRegionInfo
		TEST_METHOD(ScriptStruct__Qos__QosRegionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosRegionInfo, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosRegionInfo, RegionId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosRegionInfo, bEnabled, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosRegionInfo, bVisible, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosRegionInfo, bAutoAssignable, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosRegionInfo, UnknownData_5J80, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQosRegionInfo, 0x0030);
		}

		// struct FQosPingServerInfo
		TEST_METHOD(ScriptStruct__Qos__QosPingServerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosPingServerInfo, Address, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosPingServerInfo, Port, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosPingServerInfo, UnknownData_SHDX, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQosPingServerInfo, 0x0018);
		}

		// struct FQosDatacenterInfo
		TEST_METHOD(ScriptStruct__Qos__QosDatacenterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosDatacenterInfo, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosDatacenterInfo, RegionId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosDatacenterInfo, bEnabled, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosDatacenterInfo, UnknownData_0KTU, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQosDatacenterInfo, Servers, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQosDatacenterInfo, 0x0038);
		}

		// struct FDatacenterQosInstance
		TEST_METHOD(ScriptStruct__Qos__DatacenterQosInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, Definition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, result, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, UnknownData_J4NY, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, AvgPingMs, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, PingResults, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, UnknownData_K8Q9, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, LastCheckTimestamp, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, bUsable, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatacenterQosInstance, UnknownData_W8KJ, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatacenterQosInstance, 0x0068);
		}

		// struct FRegionQosInstance
		TEST_METHOD(ScriptStruct__Qos__RegionQosInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionQosInstance, Definition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRegionQosInstance, DatacenterOptions, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRegionQosInstance, 0x0040);
		}

		// struct FDatasmithCameraLookatTrackingSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLookatTrackingSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, UnknownData_37GS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLookatTrackingSettingsTemplate, ActorToTrack, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLookatTrackingSettingsTemplate, 0x0038);
		}

		// struct FDatasmithCameraFilmbackSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFilmbackSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFilmbackSettingsTemplate, SensorHeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFilmbackSettingsTemplate, 0x0008);
		}

		// struct FDatasmithCameraLensSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraLensSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraLensSettingsTemplate, MaxFStop, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraLensSettingsTemplate, 0x0004);
		}

		// struct FDatasmithCameraFocusSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithCameraFocusSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, UnknownData_V54Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithCameraFocusSettingsTemplate, ManualFocusDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithCameraFocusSettingsTemplate, 0x0008);
		}

		// struct FDatasmithPostProcessSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithPostProcessSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_G5TQ, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_0JVM, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, WhiteTemp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, VignetteIntensity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, FilmWhitePoint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, ColorSaturation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, AutoExposureMethod, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, UnknownData_J2QQ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraISO, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, CameraShutterSpeed, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithPostProcessSettingsTemplate, DepthOfFieldFstop, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithPostProcessSettingsTemplate, 0x0040);
		}

		// struct FDatasmithTessellationOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithTessellationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, ChordTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, MaxEdgeLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, NormalTolerance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, StitchingTechnique, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithTessellationOptions, UnknownData_Z296, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithTessellationOptions, 0x0010);
		}

		// struct FDatasmithAssetImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithAssetImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithAssetImportOptions, PackagePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithAssetImportOptions, 0x000C);
		}

		// struct FDatasmithStaticMeshImportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMeshImportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MinLightmapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, MaxLightmapResolution, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bGenerateLightmapUVs, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMeshImportOptions, bRemoveDegenerates, 0x0003);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMeshImportOptions, 0x0004);
		}

		// struct FDatasmithImportBaseOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithImportBaseOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, SceneHandling, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeGeometry, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeMaterial, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeLight, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeCamera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, bIncludeAnimation, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, UnknownData_W0RA, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, AssetOptions, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithImportBaseOptions, StaticMeshOptions, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithImportBaseOptions, 0x0018);
		}

		// struct FDatasmithReimportOptions
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithReimportOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bUpdateActors, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithReimportOptions, bRespawnDeletedActors, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithReimportOptions, 0x0002);
		}

		// struct FDatasmithStaticParameterSetTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticParameterSetTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticParameterSetTemplate, StaticSwitchParameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticParameterSetTemplate, 0x0050);
		}

		// struct FDatasmithMeshSectionInfoTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoTemplate, MaterialIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoTemplate, 0x0004);
		}

		// struct FDatasmithMeshSectionInfoMapTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshSectionInfoMapTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshSectionInfoMapTemplate, map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshSectionInfoMapTemplate, 0x0050);
		}

		// struct FDatasmithMeshBuildSettingsTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithMeshBuildSettingsTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, UnknownData_QD0V, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithMeshBuildSettingsTemplate, DstLightmapIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithMeshBuildSettingsTemplate, 0x0010);
		}

		// struct FDatasmithStaticMaterialTemplate
		TEST_METHOD(ScriptStruct__DatasmithContent__DatasmithStaticMaterialTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, MaterialSlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, UnknownData_9VF5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDatasmithStaticMaterialTemplate, materialInterface, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDatasmithStaticMaterialTemplate, 0x0018);
		}

		// struct FXRDeviceId
		TEST_METHOD(ScriptStruct__HeadMountedDisplay__XRDeviceId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, SystemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FXRDeviceId, DeviceId, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FXRDeviceId, 0x0010);
		}

		// struct FCameraTrackingFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraTrackingFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, ActorToTrack, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, RelativeOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraTrackingFocusSettings, UnknownData_HS5K, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraTrackingFocusSettings, 0x0040);
		}

		// struct FCameraFocusSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFocusSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_H4WI, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, ManualFocusDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, TrackingFocusSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_M71A, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, DebugFocusPlaneColor, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_0H41, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusSmoothingInterpSpeed, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, FocusOffset, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFocusSettings, UnknownData_LYMN, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFocusSettings, 0x0060);
		}

		// struct FCameraLensSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFocalLength, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFocalLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinFStop, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MaxFStop, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, MinimumFocusDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLensSettings, DiaphragmBladeCount, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLensSettings, 0x0018);
		}

		// struct FNamedLensPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedLensPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedLensPreset, LensSettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedLensPreset, 0x0028);
		}

		// struct FCameraLookatTrackingSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraLookatTrackingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_LOY4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, LookAtTrackingInterpSpeed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_N7N6, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, ActorToTrack, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, RelativeOffset, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraLookatTrackingSettings, UnknownData_DSSF, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraLookatTrackingSettings, 0x0058);
		}

		// struct FCameraFilmbackSettings
		TEST_METHOD(ScriptStruct__CinematicCamera__CameraFilmbackSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorWidth, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraFilmbackSettings, SensorAspectRatio, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraFilmbackSettings, 0x000C);
		}

		// struct FNamedFilmbackPreset
		TEST_METHOD(ScriptStruct__CinematicCamera__NamedFilmbackPreset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, FilmbackSettings, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFilmbackPreset, UnknownData_P41A, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFilmbackPreset, 0x0020);
		}

		// struct FPlatformRuntimeAudioCompressionOverrides
		TEST_METHOD(ScriptStruct__AudioPlatformConfiguration__PlatformRuntimeAudioCompressionOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, bOverrideCompressionTimes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, UnknownData_E0P6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, DurationThreshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, MaxNumRandomBranches, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformRuntimeAudioCompressionOverrides, SoundCueQualityIndex, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformRuntimeAudioCompressionOverrides, 0x0010);
		}

		// struct FNavCollisionCylinder
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionCylinder)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, radius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionCylinder, Height, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionCylinder, 0x0014);
		}

		// struct FSupportedAreaData
		TEST_METHOD(ScriptStruct__NavigationSystem__SupportedAreaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClassName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaID, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, UnknownData_4GDK, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedAreaData, AreaClass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedAreaData, 0x0020);
		}

		// struct FNavGraphNode
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, owner, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphNode, UnknownData_8ABU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphNode, 0x0018);
		}

		// struct FNavGraphEdge
		TEST_METHOD(ScriptStruct__NavigationSystem__NavGraphEdge)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavGraphEdge, UnknownData_IMXM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavGraphEdge, 0x0018);
		}

		// struct FNavigationFilterFlags
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterFlags)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterFlags, UnknownData_X208, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterFlags, 0x0004);
		}

		// struct FNavLinkCustomInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__NavigationSystem__NavLinkCustomInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, NavLinkUserId, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkCustomInstanceData, UnknownData_YI44, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkCustomInstanceData, 0x0060);
		}

		// struct FRecastNavMeshGenerationProperties
		TEST_METHOD(ScriptStruct__NavigationSystem__RecastNavMeshGenerationProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TilePoolSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileSizeUU, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, CellHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, agentRadius, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentHeight, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxSlope, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, AgentMaxStepHeight, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MinRegionArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MergeRegionSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, MaxSimplificationError, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, TileNumberHardLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionPartitioning, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerPartitioning, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_5PRI, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, RegionChunkSplits, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, LayerChunkSplits, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecastNavMeshGenerationProperties, UnknownData_5S3E, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecastNavMeshGenerationProperties, 0x0040);
		}

		// struct FNavigationFilterArea
		TEST_METHOD(ScriptStruct__NavigationSystem__NavigationFilterArea)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, AreaClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, TravelCostOverride, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, EnteringCostOverride, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationFilterArea, UnknownData_3DNZ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationFilterArea, 0x0018);
		}

		// struct FNavCollisionBox
		TEST_METHOD(ScriptStruct__NavigationSystem__NavCollisionBox)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Offset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavCollisionBox, Extent, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavCollisionBox, 0x0018);
		}

		// struct FMovieSceneMediaSectionParams
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSoundComponent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaSource, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, MediaPlayer, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionStartFrame, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, SectionEndFrame, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, bLooping, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, UnknownData_RAQH, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionParams, StartFrameOffset, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionParams, 0x0030);
		}

		// struct FMovieSceneMediaSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaSectionTemplate, 0x0050);
		}

		// struct FMovieSceneMediaPlayerPropertySectionTemplate : public FMovieScenePropertySectionTemplate
		TEST_METHOD(ScriptStruct__MediaCompositing__MovieSceneMediaPlayerPropertySectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, MediaSource, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, SectionStartFrame, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, bLoop, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneMediaPlayerPropertySectionTemplate, UnknownData_ACY9, 0x0065);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneMediaPlayerPropertySectionTemplate, 0x0068);
		}

		// struct FActorSequenceObjectReference
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_D907, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, ActorId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, UnknownData_PXZF, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReference, PathToComponent, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReference, 0x0028);
		}

		// struct FActorSequenceObjectReferences
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferences)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferences, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferences, 0x0010);
		}

		// struct FActorSequenceObjectReferenceMap
		TEST_METHOD(ScriptStruct__ActorSequence__ActorSequenceObjectReferenceMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, BindingIds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorSequenceObjectReferenceMap, References, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorSequenceObjectReferenceMap, 0x0020);
		}

		// struct FMagicLeapHandMeshBlock
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMeshBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, IndexCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, VertexCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, Vertex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMeshBlock, index, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMeshBlock, 0x0028);
		}

		// struct FMagicLeapHandMesh
		TEST_METHOD(ScriptStruct__MagicLeapHandMeshing__MagicLeapHandMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, version, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, DataCount, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHandMesh, data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHandMesh, 0x0018);
		}

		// struct FPlagueSurvivorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__ThePlague__PlagueSurvivorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, BecomeInfectCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, RegularVomitHits, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, SuperVomitHits, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, CleanSicknessCount, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, TimeWithSickness, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, TimeWithMaximumSickness, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, TimeInSuperMode, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlagueSurvivorAnalytics, UnknownData_C73I, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlagueSurvivorAnalytics, 0x0098);
		}

		// struct FLightPropagationVolumeSettings
		TEST_METHOD(ScriptStruct__Renderer__LightPropagationVolumeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, UnknownData_YIIG, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVIntensity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVVplInjectionBias, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryOcclusionIntensity, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSecondaryBounceIntensity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVGeometryVolumeBias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVEmissiveInjectionIntensity, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionIntensity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionRadius, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionExponent, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionExponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDiffuseOcclusionIntensity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVSpecularOcclusionIntensity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVFadeRange, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightPropagationVolumeSettings, LPVDirectionalOcclusionFadeRange, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightPropagationVolumeSettings, 0x0040);
		}

		// struct FProcMeshTangent
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshTangent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, TangentX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, bFlipTangentY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshTangent, UnknownData_XB1T, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshTangent, 0x0010);
		}

		// struct FProcMeshVertex
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, Tangent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, color, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV0, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV1, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV2, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshVertex, UV3, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshVertex, 0x004C);
		}

		// struct FProcMeshSection
		TEST_METHOD(ScriptStruct__ProceduralMeshComponent__ProcMeshSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcVertexBuffer, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, ProcIndexBuffer, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, SectionLocalBox, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bEnableCollision, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, bSectionVisible, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FProcMeshSection, UnknownData_LTYM, 0x003E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FProcMeshSection, 0x0040);
		}

		// struct FNetAnalyticsDataConfig
		TEST_METHOD(ScriptStruct__NetCore__NetAnalyticsDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, bEnabled, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetAnalyticsDataConfig, UnknownData_ACLT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetAnalyticsDataConfig, 0x0010);
		}

		// struct FOverlayItem
		TEST_METHOD(ScriptStruct__Overlay__OverlayItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, EndTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, text, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlayItem, position, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlayItem, 0x0028);
		}

		// struct FSolverTrailingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverTrailingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverTrailingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverTrailingData, 0x0030);
		}

		// struct FSolverCollisionData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverCollisionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AccumulatedImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, normal, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Velocity2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, AngularVelocity2, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, Mass2, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndex, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndex, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, ParticleIndexMesh, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverCollisionData, LevelsetIndexMesh, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverCollisionData, 0x006C);
		}

		// struct FSolverBreakingData
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__SolverBreakingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverBreakingData, ParticleIndexMesh, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverBreakingData, 0x0030);
		}

		// struct FRecordedFrame
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, TransformIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, PreviousTransformIndices, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, DisabledFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Collisions, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Breakings, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, Trailings, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, timestamp, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedFrame, UnknownData_ZLFI, 0x00B4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedFrame, 0x00B8);
		}

		// struct FRecordedTransformTrack
		TEST_METHOD(ScriptStruct__GeometryCollectionCore__RecordedTransformTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRecordedTransformTrack, Records, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRecordedTransformTrack, 0x0010);
		}

		// struct FMagicLeapPolygon
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPolygon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPolygon, Vertices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPolygon, 0x0010);
		}

		// struct FMagicLeapPlaneBoundary
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundary)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Polygon, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundary, Holes, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundary, 0x0020);
		}

		// struct FMagicLeapPlaneResult
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlanePosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneOrientation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, ContentOrientation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneDimensions, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, UnknownData_LWS1, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, PlaneFlags, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, Id, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneResult, InnerID, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneResult, 0x0060);
		}

		// struct FMagicLeapPlanesQuery
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlanesQuery)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, Flags, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolume, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MaxResults, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinHoleLength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, MinPlaneArea, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumePosition, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeOrientation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SearchVolumeExtents, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, SimilarityThreshold, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bSearchVolumeTrackingSpace, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, bResultTrackingSpace, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlanesQuery, UnknownData_3JGW, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlanesQuery, 0x0060);
		}

		// struct FMagicLeapPlaneBoundaries
		TEST_METHOD(ScriptStruct__MagicLeapPlanes__MagicLeapPlaneBoundaries)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapPlaneBoundaries, Boundaries, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapPlaneBoundaries, 0x0020);
		}

		// struct FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCacheAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, FirstLoopStartFrameOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartFrameOffset, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndFrameOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, playRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_6QY9, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, StartOffset, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, EndOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, UnknownData_SOR4, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheParams, GeometryCache, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheParams, 0x0048);
		}

		// struct FMovieSceneGeometryCacheSectionTemplateParameters : public FMovieSceneGeometryCacheParams
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionStartTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplateParameters, SectionEndTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplateParameters, 0x0050);
		}

		// struct FMovieSceneGeometryCacheSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCacheTracks__MovieSceneGeometryCacheSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCacheSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCacheSectionTemplate, 0x0070);
		}

		// struct FGhostKillerAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__TheGhostFace__GhostKillerAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, Stalk, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, StalkStealth, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, Stalk25, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, Stalk50, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, Stalk75, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, Stalk100, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, StalkLean25, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, StalkLean50, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, StalkLean75, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, StalkLean100, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, Lean, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, DownExposedSurvivor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, TimeInStealthMode, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGhostKillerAnalytics, UnknownData_3TZR, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGhostKillerAnalytics, 0x00B0);
		}

		// struct FNiagaraDataInterfaceGeneratedFunction
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGeneratedFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGeneratedFunction, UnknownData_29U1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGeneratedFunction, 0x0030);
		}

		// struct FNiagaraDataInterfaceGPUParamInfo
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraDataInterfaceGPUParamInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DataInterfaceHLSLSymbol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, DIClassName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataInterfaceGPUParamInfo, GeneratedFunctions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataInterfaceGPUParamInfo, 0x0030);
		}

		// struct FNiagaraCompileEvent
		TEST_METHOD(ScriptStruct__NiagaraShader__NiagaraCompileEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, severity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, UnknownData_QO2M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, message, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, NodeGuid, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, PinGuid, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileEvent, StackGuids, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileEvent, 0x0048);
		}

		// struct FCapturedPixels
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixels)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixels, UnknownData_4UKR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixels, 0x0010);
		}

		// struct FCapturedPixelsID
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CapturedPixelsID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCapturedPixelsID, Identifiers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCapturedPixelsID, 0x0050);
		}

		// struct FCaptureResolution
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CaptureResolution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCaptureResolution, ResY, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCaptureResolution, 0x0008);
		}

		// struct FMovieSceneCaptureSettings
		TEST_METHOD(ScriptStruct__MovieSceneCapture__MovieSceneCaptureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputDirectory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, GameModeOverride, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, OutputFormat, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bOverwriteExisting, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseRelativeFrameNumbers, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_S1KE, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, HandleFrames, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, MovieExtension, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, ZeroPadFrameNumbers, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_XXPY, 0x0041);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, FrameRate, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUseCustomFrameRate, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_WM3C, 0x004D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, CustomFrameRate, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, resolution, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bEnableTextureStreaming, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicEngineScalability, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bCinematicMode, 0x0062);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowMovement, 0x0063);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bAllowTurning, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowPlayer, 0x0065);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bShowHUD, 0x0066);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, bUsePathTracer, 0x0067);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, PathTracerSamplePerPixel, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneCaptureSettings, UnknownData_QP6N, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneCaptureSettings, 0x0070);
		}

		// struct FFrameMetrics
		TEST_METHOD(ScriptStruct__MovieSceneCapture__FrameMetrics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, TotalElapsedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameDelta, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, FrameNumber, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFrameMetrics, NumDroppedFrames, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFrameMetrics, 0x0010);
		}

		// struct FCompositionGraphCapturePasses
		TEST_METHOD(ScriptStruct__MovieSceneCapture__CompositionGraphCapturePasses)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositionGraphCapturePasses, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositionGraphCapturePasses, 0x0010);
		}

		// struct FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSCallbackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWebJSCallbackBase, UnknownData_7WA9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSCallbackBase, 0x0020);
		}

		// struct FWebJSFunction : public FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSFunction)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSFunction, 0x0020);
		}

		// struct FWebJSResponse : public FWebJSCallbackBase
		TEST_METHOD(ScriptStruct__WebBrowser__WebJSResponse)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWebJSResponse, 0x0020);
		}

		// struct FAnimationSharingScalability
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSharingScalability)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UseBlendTransitions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, UnknownData_I9LW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, BlendSignificanceValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, MaximumNumberConcurrentBlends, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSharingScalability, TickSignificanceValue, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSharingScalability, 0x0010);
		}

		// struct FTickAnimationSharingFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__AnimationSharing__TickAnimationSharingFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickAnimationSharingFunction, UnknownData_XW5B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickAnimationSharingFunction, 0x0030);
		}

		// struct FAnimationSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, AnimBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, NumRandomizedInstances, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, enabled, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationSetup, UnknownData_ETNF, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationSetup, 0x0018);
		}

		// struct FAnimationStateEntry
		TEST_METHOD(ScriptStruct__AnimationSharing__AnimationStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, state, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_XL59, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, AnimationSetups, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bOnDemand, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bAdditive, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_S6M9, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, BlendTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bReturnToPreviousState, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bSetNextState, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, NextState, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_MHU8, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, MaximumNumberOfConcurrentInstances, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, WiggleTimePercentage, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, bRequiresCurves, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateEntry, UnknownData_T02L, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateEntry, 0x0030);
		}

		// struct FPerSkeletonAnimationSharingSetup
		TEST_METHOD(ScriptStruct__AnimationSharing__PerSkeletonAnimationSharingSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, Skeleton, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, SkeletalMesh, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, BlendAnimBlueprint, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AdditiveAnimBlueprint, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, StateProcessorClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerSkeletonAnimationSharingSetup, AnimationStates, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerSkeletonAnimationSharingSetup, 0x0038);
		}

		// struct FCustomMeshTriangle
		TEST_METHOD(ScriptStruct__CustomMeshComponent__CustomMeshTriangle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex1, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomMeshTriangle, Vertex2, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomMeshTriangle, 0x0024);
		}

		// struct FAccumulator
		TEST_METHOD(ScriptStruct__TheOni__Accumulator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAccumulator, UnknownData_IHV2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAccumulator, 0x0018);
		}

		// struct FGameEventBloodOrbDropParams
		TEST_METHOD(ScriptStruct__TheOni__GameEventBloodOrbDropParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventBloodOrbDropParams, gameEvent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameEventBloodOrbDropParams, impulseFactor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameEventBloodOrbDropParams, 0x0010);
		}

		// struct FBloodOrbDropParams
		TEST_METHOD(ScriptStruct__TheOni__BloodOrbDropParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodOrbDropParams, UnknownData_PD0I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodOrbDropParams, 0x0008);
		}

		// struct FBloodOrbInfo
		TEST_METHOD(ScriptStruct__TheOni__BloodOrbInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodOrbInfo, UnknownData_TMVT, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodOrbInfo, OriginalStaticMesh, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBloodOrbInfo, clonedStaticMesh, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBloodOrbInfo, 0x0060);
		}

		// struct FAtlantaFriendUIData
		TEST_METHOD(ScriptStruct__DBDUIViewsMobile__AtlantaFriendUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtlantaFriendUIData, UnknownData_BRNS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtlantaFriendUIData, 0x0068);
		}

		// struct FactionOnFriend
		TEST_METHOD(ScriptStruct__DBDUIViewsMobile__actionOnFriend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FactionOnFriend, ActionToProceed, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FactionOnFriend, UnknownData_FQ15, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FactionOnFriend, AtlantaFriendDataToUpdate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FactionOnFriend, ActionOwner, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FactionOnFriend, 0x0078);
		}

		// struct FFriendStatusUIData : public FDBDTableRowBase
		TEST_METHOD(ScriptStruct__DBDUIViewsMobile__FriendStatusUIData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendStatusUIData, FriendStatus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendStatusUIData, UnknownData_0FDU, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendStatusUIData, StatusIcon, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFriendStatusUIData, StatusText, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFriendStatusUIData, 0x0058);
		}

		// struct FAuthenticationRequestState
		TEST_METHOD(ScriptStruct__SharedAuthenticationUtilities__AuthenticationRequestState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAuthenticationRequestState, UnknownData_LV49, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAuthenticationRequestState, 0x0018);
		}

		// struct FMediaIOMode
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaIOMode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOMode, FrameRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOMode, resolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOMode, Standard, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOMode, UnknownData_IC44, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOMode, DeviceModeIdentifier, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaIOMode, 0x0018);
		}

		// struct FMediaIODevice
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaIODevice)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIODevice, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIODevice, DeviceIdentifier, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaIODevice, 0x0010);
		}

		// struct FMediaIOConnection
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaIOConnection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, Device, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, Protocol, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, TransportType, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, UnknownData_21GD, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, QuadTransportType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, UnknownData_TTG5, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConnection, PortIdentifier, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaIOConnection, 0x0028);
		}

		// struct FMediaIOConfiguration
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaIOConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConfiguration, bIsInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConfiguration, UnknownData_CHRW, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConfiguration, MediaConnection, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOConfiguration, MediaMode, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaIOConfiguration, 0x0044);
		}

		// struct FMediaIOInputConfiguration
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaIOInputConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOInputConfiguration, MediaConfiguration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOInputConfiguration, InputType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOInputConfiguration, UnknownData_S1CR, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOInputConfiguration, KeyPortIdentifier, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaIOInputConfiguration, 0x004C);
		}

		// struct FMediaCaptureOptions
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaCaptureOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureOptions, Crop, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureOptions, UnknownData_TAK7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureOptions, CustomCapturePoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureOptions, bResizeSourceBuffer, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureOptions, bSkipFrameWhenRunningExpensiveTasks, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaCaptureOptions, UnknownData_FYHM, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaCaptureOptions, 0x0010);
		}

		// struct FMediaIOOutputConfiguration
		TEST_METHOD(ScriptStruct__MediaIOCore__MediaIOOutputConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, MediaConfiguration, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, OutputType, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, UnknownData_OJVN, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, KeyPortIdentifier, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, OutputReference, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, UnknownData_4ZFP, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMediaIOOutputConfiguration, ReferencePortIdentifier, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMediaIOOutputConfiguration, 0x0054);
		}

		// struct FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_5LMD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, GeometryCollectionCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, StartFrameOffset, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, EndFrameOffset, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, playRate, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionParams, UnknownData_VXKX, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionParams, 0x0038);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplateParameters : public FMovieSceneGeometryCollectionParams
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionStartTime, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, SectionEndTime, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplateParameters, 0x0040);
		}

		// struct FMovieSceneGeometryCollectionSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__GeometryCollectionTracks__MovieSceneGeometryCollectionSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneGeometryCollectionSectionTemplate, Params, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneGeometryCollectionSectionTemplate, 0x0060);
		}

		// struct FDBDTextDockingProperties
		TEST_METHOD(ScriptStruct__DBDUIViewsCore__DBDTextDockingProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, UseColor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, UnknownData_4NJY, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, color, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, UseOpacity, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, UnknownData_GOU8, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, opacity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, UseSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, UnknownData_DUAN, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDBDTextDockingProperties, Size, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDBDTextDockingProperties, 0x0040);
		}

		// struct FInputPromptDataRow : public FTableRowBase
		TEST_METHOD(ScriptStruct__DBDUIViewsCore__InputPromptDataRow)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputPromptDataRow, InputLabel, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputPromptDataRow, inputKey, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputPromptDataRow, PromptTexture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputPromptDataRow, ShowLabel, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputPromptDataRow, UnknownData_PV9A, 0x0071);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputPromptDataRow, 0x0078);
		}

		// struct FMovieSceneNiagaraSystemTrackTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackTemplate)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackTemplate, 0x0020);
		}

		// struct FNiagaraTypeDefinition
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, ClassStructOrEnum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnderlyingType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeDefinition, UnknownData_UHDR, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeDefinition, 0x0010);
		}

		// struct FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, UnknownData_HLG2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableBase, TypeDef, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableBase, 0x0020);
		}

		// struct FNiagaraVariable : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariable, VarData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariable, 0x0030);
		}

		// struct FMovieSceneNiagaraParameterSectionTemplate : public FMovieSceneEvalTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraParameterSectionTemplate, Parameter, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraParameterSectionTemplate, 0x0050);
		}

		// struct FMovieSceneNiagaraVectorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraVectorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, VectorChannels, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, ChannelsUsed, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, UnknownData_VMUH, 0x02D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraVectorParameterSectionTemplate, 0x02D8);
		}

		// struct FNiagaraRandInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraRandInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed2, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraRandInfo, Seed3, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraRandInfo, 0x000C);
		}

		// struct FNiagaraUserParameterBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserParameterBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserParameterBinding, Parameter, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserParameterBinding, 0x0030);
		}

		// struct FNiagaraScriptVariableBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptVariableBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptVariableBinding, name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptVariableBinding, 0x000C);
		}

		// struct FNiagaraVariableDataInterfaceBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableDataInterfaceBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableDataInterfaceBinding, BoundVariable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableDataInterfaceBinding, 0x0030);
		}

		// struct FNiagaraVariableAttributeBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableAttributeBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, BoundVariable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DataSetVariable, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableAttributeBinding, DefaultValueIfNonExistent, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableAttributeBinding, 0x0090);
		}

		// struct FNiagaraVariableInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Variable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, Definition, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableInfo, DataInterface, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableInfo, 0x0050);
		}

		// struct FNiagaraSystemUpdateContext
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemUpdateContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, ComponentsToReInit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, SystemSimsToDestroy, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemUpdateContext, UnknownData_3TMQ, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemUpdateContext, 0x0038);
		}

		// struct FVMFunctionSpecifier
		TEST_METHOD(ScriptStruct__Niagara__VMFunctionSpecifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMFunctionSpecifier, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMFunctionSpecifier, 0x0018);
		}

		// struct FVMExternalFunctionBindingInfo
		TEST_METHOD(ScriptStruct__Niagara__VMExternalFunctionBindingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, OwnerName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, InputParamLocations, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, NumOutputs, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, UnknownData_RVHN, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVMExternalFunctionBindingInfo, FunctionSpecifiers, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVMExternalFunctionBindingInfo, 0x0040);
		}

		// struct FNiagaraStatScope
		TEST_METHOD(ScriptStruct__Niagara__NiagaraStatScope)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FullName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraStatScope, FriendlyName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraStatScope, 0x0018);
		}

		// struct FNiagaraScriptDataInterfaceCompileInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceCompileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UserPtrIdx, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, type, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapRead, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, RegisteredParameterMapWrite, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, bIsPlaceholder, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceCompileInfo, UnknownData_GFUC, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceCompileInfo, 0x0040);
		}

		// struct FNiagaraScriptDataInterfaceInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataInterfaceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, DataInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, name, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, UserPtrIdx, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, type, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapRead, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataInterfaceInfo, RegisteredParameterMapWrite, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataInterfaceInfo, 0x0040);
		}

		// struct FNiagaraFunctionSignature
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFunctionSignature)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_48NT, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Inputs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, Outputs, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, OwnerName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, UnknownData_B4RE, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFunctionSignature, FunctionSpecifiers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFunctionSignature, 0x0090);
		}

		// struct FNiagaraScriptDataUsageInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptDataUsageInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptDataUsageInfo, bReadsAttributeData, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptDataUsageInfo, 0x0001);
		}

		// struct FNCPoolElement
		TEST_METHOD(ScriptStruct__Niagara__NCPoolElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPoolElement, UnknownData_19II, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPoolElement, 0x0010);
		}

		// struct FBasicParticleData
		TEST_METHOD(ScriptStruct__Niagara__BasicParticleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasicParticleData, Velocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasicParticleData, 0x001C);
		}

		// struct FMeshTriCoordinate
		TEST_METHOD(ScriptStruct__Niagara__MeshTriCoordinate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, Tri, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshTriCoordinate, BaryCoord, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshTriCoordinate, 0x0010);
		}

		// struct FNDIStaticMeshSectionFilter
		TEST_METHOD(ScriptStruct__Niagara__NDIStaticMeshSectionFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNDIStaticMeshSectionFilter, AllowedMaterialSlots, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNDIStaticMeshSectionFilter, 0x0010);
		}

		// struct FNiagaraGraphViewSettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraGraphViewSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, Zoom, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, bIsValid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraGraphViewSettings, UnknownData_TT69, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraGraphViewSettings, 0x0010);
		}

		// struct FNiagaraDeviceProfileStateEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDeviceProfileStateEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, QualityLevelMask, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDeviceProfileStateEntry, SetQualityLevelMask, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDeviceProfileStateEntry, 0x0014);
		}

		// struct FNiagaraPlatformSet
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, QualityLevelMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_KXWY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, DeviceProfileStates, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSet, UnknownData_5NW7, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSet, 0x0020);
		}

		// struct FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, UnknownData_JOBH, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettings, SpawnCountScale, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettings, 0x0028);
		}

		// struct FNiagaraEmitterScalabilityOverride : public FNiagaraEmitterScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverride, UnknownData_O00I, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverride, 0x0030);
		}

		// struct FNiagaraEmitterScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraEmitterScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScalabilitySettingsArray, settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, Platforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, UnknownData_IMLD, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxInstances, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettings, MaxTimeWithoutRender, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettings, 0x0030);
		}

		// struct FNiagaraSystemScalabilityOverride : public FNiagaraSystemScalabilitySettings
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverride, UnknownData_1T1Y, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverride, 0x0038);
		}

		// struct FNiagaraSystemScalabilityOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilityOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilityOverrides, Overrides, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilityOverrides, 0x0010);
		}

		// struct FNiagaraDetailsLevelScaleOverrides
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDetailsLevelScaleOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Low, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Medium, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, High, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Epic, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDetailsLevelScaleOverrides, Cine, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDetailsLevelScaleOverrides, 0x0014);
		}

		// struct FNiagaraTypeLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTypeLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentByteOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, FloatComponentRegisterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentByteOffsets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTypeLayoutInfo, Int32ComponentRegisterOffsets, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTypeLayoutInfo, 0x0040);
		}

		// struct FNiagaraVariableLayoutInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableLayoutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, FloatComponentStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, Int32ComponentStart, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableLayoutInfo, LayoutInfo, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableLayoutInfo, 0x0048);
		}

		// struct FNiagaraDataSetID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetID, UnknownData_U7LQ, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetID, 0x0010);
		}

		// struct FNiagaraDataSetCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Variables, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, VariableLayouts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalFloatComponents, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, TotalInt32Components, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_0D6W, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, Id, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, SimTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetCompiledData, UnknownData_899H, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetCompiledData, 0x0040);
		}

		// struct FNiagaraEventGeneratorProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventGeneratorProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, MaxEventsPerFrame, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, Id, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventGeneratorProperties, DataSetCompiledData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventGeneratorProperties, 0x0050);
		}

		// struct FNiagaraCollisionEventPayload
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCollisionEventPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, CollisionVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, ParticleIndex, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCollisionEventPayload, PhysicalMaterialIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCollisionEventPayload, 0x002C);
		}

		// struct FNiagaraMeshMaterialOverride
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMeshMaterialOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, ExplicitMat, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMeshMaterialOverride, UserParamBinding, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMeshMaterialOverride, 0x0038);
		}

		// struct FNiagaraPlatformSetConflictEntry
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictEntry, QualityLevelMask, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictEntry, 0x0010);
		}

		// struct FNiagaraPlatformSetConflictInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraPlatformSetConflictInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetAIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, SetBIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraPlatformSetConflictInfo, Conflicts, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraPlatformSetConflictInfo, 0x0018);
		}

		// struct FNiagaraScalabilityManager
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScalabilityManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, effectType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, ManagedComponents, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScalabilityManager, UnknownData_Z9IP, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScalabilityManager, 0x0040);
		}

		// struct FNiagaraModuleDependency
		TEST_METHOD(ScriptStruct__Niagara__NiagaraModuleDependency)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, ScriptConstraint, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, UnknownData_RH64, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraModuleDependency, description, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraModuleDependency, 0x0028);
		}

		// struct FNiagaraScriptHighlight
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptHighlight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, color, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptHighlight, DisplayName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptHighlight, 0x0028);
		}

		// struct FNiagaraSystemCompileRequest
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompileRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_K6PE, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, RootObjects, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompileRequest, UnknownData_RTBX, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompileRequest, 0x0080);
		}

		// struct FEmitterCompiledScriptPair
		TEST_METHOD(ScriptStruct__Niagara__EmitterCompiledScriptPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterCompiledScriptPair, UnknownData_COH7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterCompiledScriptPair, 0x0078);
		}

		// struct FNiagaraParameterDataSetBinding
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, ParameterOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBinding, DataSetComponentOffset, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBinding, 0x0008);
		}

		// struct FNiagaraEmitterCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, SpawnAttributes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnIntervalVar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterInterpSpawnStartDTVar, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterSpawnGroupVar, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterAgeVar, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterRandomSeedVar, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, EmitterTotalSpawnedParticlesVar, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterCompiledData, DataSetCompiledData, 0x0130);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterCompiledData, 0x0170);
		}

		// struct FNiagaraInputConditionMetadata
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInputConditionMetadata)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, UnknownData_0QTN, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInputConditionMetadata, TargetValues, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInputConditionMetadata, 0x0020);
		}

		// struct FNiagaraVariableMetaData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, description, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CategoryName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAdvancedDisplay, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_ABTV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditorSortPriority, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bInlineEditConditionToggle, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_5K0T, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, EditCondition, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, VisibleCondition, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, PropertyMetaData, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, ScopeName, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, Usage, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_SOI4, 0x00DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bIsStaticSwitch, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_BRUA, 0x00E1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, StaticSwitchDefaultValue, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bAddedToNodeGraphDeepCopy, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bOutputIsPersistent, 0x00E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_L22T, 0x00EA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, CachedNamespacelessVariableName, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bCreatedInSystemEditor, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, bUseLegacyNameString, 0x00F9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableMetaData, UnknownData_V7RA, 0x00FA);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableMetaData, 0x0100);
		}

		// struct FNiagaraParameterScopeInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterScopeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, Scope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_OJ7W, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, UnknownData_VPCR, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterScopeInfo, NamespaceString, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterScopeInfo, 0x0018);
		}

		// struct FNiagaraCompileHashVisitorDebugInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraCompileHashVisitorDebugInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraCompileHashVisitorDebugInfo, PropertyValues, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraCompileHashVisitorDebugInfo, 0x0030);
		}

		// struct FNiagaraID
		TEST_METHOD(ScriptStruct__Niagara__NiagaraID)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, index, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraID, AcquireTag, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraID, 0x0008);
		}

		// struct FNiagaraSpawnInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSpawnInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, InterpStartDt, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, IntervalDt, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSpawnInfo, SpawnGroup, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSpawnInfo, 0x0010);
		}

		// struct FNiagaraMatrix
		TEST_METHOD(ScriptStruct__Niagara__NiagaraMatrix)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row0, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row1, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row2, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraMatrix, Row3, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraMatrix, 0x0040);
		}

		// struct FNiagaraTestStructInner
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStructInner)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStructInner, InnerVector2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStructInner, 0x0018);
		}

		// struct FNiagaraTestStruct
		TEST_METHOD(ScriptStruct__Niagara__NiagaraTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, Vector2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraTestStruct, InnerStruct2, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraTestStruct, 0x0048);
		}

		// struct FNiagaraParameterMap
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterMap, UnknownData_W9R1, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterMap, 0x0001);
		}

		// struct FNiagaraNumeric
		TEST_METHOD(ScriptStruct__Niagara__NiagaraNumeric)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraNumeric, UnknownData_13Q9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraNumeric, 0x0001);
		}

		// struct FNiagaraBool
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBool, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBool, 0x0004);
		}

		// struct FNiagaraInt32
		TEST_METHOD(ScriptStruct__Niagara__NiagaraInt32)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraInt32, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraInt32, 0x0004);
		}

		// struct FNiagaraFloat
		TEST_METHOD(ScriptStruct__Niagara__NiagaraFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraFloat, Value, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraFloat, 0x0004);
		}

		// struct FNiagaraVariant
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Object, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, DataInterface, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, Bytes, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, CurrentMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_8MM9, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariant, UnknownData_BU2C, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariant, 0x0028);
		}

		// struct FNiagaraWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Niagara__NiagaraWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraWorldManagerTickFunction, UnknownData_AZV8, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraWorldManagerTickFunction, 0x0030);
		}

		// struct FNiagaraVariableWithOffset : public FNiagaraVariableBase
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVariableWithOffset)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, Offset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVariableWithOffset, UnknownData_DXZ8, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVariableWithOffset, 0x0028);
		}

		// struct FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_CUSO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, owner, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, SortedParameterOffsets, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, ParameterData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, DataInterfaces, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UObjects, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterStore, UnknownData_ANCA, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterStore, 0x00B8);
		}

		// struct FNiagaraUserRedirectionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraUserRedirectionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraUserRedirectionParameterStore, UserParameterRedirects, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraUserRedirectionParameterStore, 0x0108);
		}

		// struct FNCPool
		TEST_METHOD(ScriptStruct__Niagara__NCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNCPool, UnknownData_IT4G, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNCPool, 0x0038);
		}

		// struct FNiagaraSystemScalabilitySettingsArray
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemScalabilitySettingsArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemScalabilitySettingsArray, settings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemScalabilitySettingsArray, 0x0010);
		}

		// struct FNiagaraEventReceiverProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventReceiverProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEventGenerator, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventReceiverProperties, SourceEmitter, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventReceiverProperties, 0x0024);
		}

		// struct FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, Script, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventReceivers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterScriptProperties, EventGenerators, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterScriptProperties, 0x0028);
		}

		// struct FNiagaraEventScriptProperties : public FNiagaraEmitterScriptProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEventScriptProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, ExecutionMode, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_AKT8, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SpawnNumber, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MaxEventsPerFrame, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEmitterID, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, SourceEventName, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, bRandomSpawnNumber, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, UnknownData_D4ZY, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEventScriptProperties, MinSpawnNumber, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEventScriptProperties, 0x0058);
		}

		// struct FNiagaraScriptExecutionPaddingInfo
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionPaddingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcOffset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestOffset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, SrcSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionPaddingInfo, DestSize, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionPaddingInfo, 0x0008);
		}

		// struct FNiagaraScriptExecutionParameterStore : public FNiagaraParameterStore
		TEST_METHOD(ScriptStruct__Niagara__NiagaraScriptExecutionParameterStore)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, ParameterSize, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddedParameterSize, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, PaddingInfo, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraScriptExecutionParameterStore, UnknownData_WEUF, 0x00D1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraScriptExecutionParameterStore, 0x00D8);
		}

		// struct FNiagaraBoundParameter
		TEST_METHOD(ScriptStruct__Niagara__NiagaraBoundParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, Parameter, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, SrcOffset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraBoundParameter, DestOffset, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraBoundParameter, 0x0038);
		}

		// struct FNiagaraVMExecutableDataId
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableDataId)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, CompilerVersionID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_HAIJ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, ScriptUsageTypeID, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, UnknownData_O55R, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptID, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableDataId, BaseScriptCompileHash, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableDataId, 0x0048);
		}

		// struct FNiagaraParameters
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameters, Parameters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameters, 0x0010);
		}

		// struct FNiagaraDataSetProperties
		TEST_METHOD(ScriptStruct__Niagara__NiagaraDataSetProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraDataSetProperties, Variables, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraDataSetProperties, 0x0020);
		}

		// struct FSimulationStageMetaData
		TEST_METHOD(ScriptStruct__Niagara__SimulationStageMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, IterationSource, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, UnknownData_5VVU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, OutputDestinations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MinStage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulationStageMetaData, MaxStage, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulationStageMetaData, 0x0028);
		}

		// struct FNiagaraVMExecutableData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraVMExecutableData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ByteCode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, OptimizedByteCode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumTempRegisters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, NumUserPtrs, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Parameters, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, InternalParameters, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataSetToParameters, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, Attributes, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataUsage, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_H5XK, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DataInterfaceInfo, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, CalledVMExternalFunctions, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, ReadDataSets, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, WriteDataSets, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, StatScopes, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, DIParamInfo, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, LastCompileStatus, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, UnknownData_EAPJ, 0x0111);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraVMExecutableData, SimulationStageMetaData, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraVMExecutableData, 0x0128);
		}

		// struct FNiagaraEmitterHandle
		TEST_METHOD(ScriptStruct__Niagara__NiagaraEmitterHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, IdName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, bIsEnabled, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_VYV0, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, UnknownData_4WSF, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraEmitterHandle, Instance, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraEmitterHandle, 0x0038);
		}

		// struct FNiagaraParameterDataSetBindingCollection
		TEST_METHOD(ScriptStruct__Niagara__NiagaraParameterDataSetBindingCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, FloatOffsets, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraParameterDataSetBindingCollection, Int32Offsets, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraParameterDataSetBindingCollection, 0x0020);
		}

		// struct FNiagaraSystemCompiledData
		TEST_METHOD(ScriptStruct__Niagara__NiagaraSystemCompiledData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, InstanceParamStore, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, DataSetCompiledData, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceParamsDataSetCompiledData, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceParamsDataSetCompiledData, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceGlobalBinding, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceSystemBinding, 0x0198);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceOwnerBinding, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, SpawnInstanceEmitterBindings, 0x01D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceGlobalBinding, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceSystemBinding, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceOwnerBinding, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNiagaraSystemCompiledData, UpdateInstanceEmitterBindings, 0x0248);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNiagaraSystemCompiledData, 0x0258);
		}

		// struct FMovieSceneNiagaraBoolParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraBoolParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, BoolChannel, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraBoolParameterSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneNiagaraColorParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraColorParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, RedChannel, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, GreenChannel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, BlueChannel, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraColorParameterSectionTemplate, AlphaChannel, 0x0230);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraColorParameterSectionTemplate, 0x02D0);
		}

		// struct FMovieSceneNiagaraFloatParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraFloatParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, FloatChannel, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraFloatParameterSectionTemplate, 0x00F0);
		}

		// struct FMovieSceneNiagaraIntegerParameterSectionTemplate : public FMovieSceneNiagaraParameterSectionTemplate
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraIntegerParameterSectionTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, IntegerChannel, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraIntegerParameterSectionTemplate, 0x00E0);
		}

		// struct FMovieSceneNiagaraSystemTrackImplementation : public FMovieSceneTrackImplementation
		TEST_METHOD(ScriptStruct__Niagara__MovieSceneNiagaraSystemTrackImplementation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartFrame, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionStartBehavior, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_0TK0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEvaluateBehavior, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_ER5E, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, SpawnSectionEndBehavior, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_68MN, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, AgeUpdateMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMovieSceneNiagaraSystemTrackImplementation, UnknownData_PVAX, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovieSceneNiagaraSystemTrackImplementation, 0x0028);
		}

		// struct FMagicLeapRaycastHitResult
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastHitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitState, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UnknownData_7AJL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, HitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, normal, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, Confidence, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastHitResult, UserData, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastHitResult, 0x0024);
		}

		// struct FMagicLeapRaycastQueryParams
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapRaycastQueryParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, direction, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UpVector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Width, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, Height, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, HorizontalFovDegrees, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, CollideWithUnobserved, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UnknownData_H1EV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapRaycastQueryParams, UserData, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapRaycastQueryParams, 0x0038);
		}

		// struct FMagicLeapGraphicsClientPerformanceInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapGraphicsClientPerformanceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUCompAcquireCPUTimeMs, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameEndGPUTimeMs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameStartCPUFrameStartCPUTimeMs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationCPUTimeMs, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameDurationGPUTimeMs, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationCPUTimeMs, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapGraphicsClientPerformanceInfo, FrameInternalDurationGPUTimeMs, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapGraphicsClientPerformanceInfo, 0x001C);
		}

		// struct FMagicLeapHeadTrackingState
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapHeadTrackingState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Error, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, UnknownData_1K06, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapHeadTrackingState, Confidence, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapHeadTrackingState, 0x0008);
		}

		// struct FPurchaseConfirmation
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseConfirmation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_WGTR, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, PackageName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_1IIT, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, type, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseConfirmation, UnknownData_ELPY, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseConfirmation, 0x0050);
		}

		// struct FMagicLeapMeshBlockRequest
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockRequest)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, LevelOfDetail, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockRequest, UnknownData_UUKA, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockRequest, 0x0014);
		}

		// struct FMagicLeapMeshBlockInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapMeshBlockInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockPosition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockOrientation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockDimensions, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_NMKK, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, timestamp, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, BlockState, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapMeshBlockInfo, UnknownData_MF8U, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapMeshBlockInfo, 0x0048);
		}

		// struct FMagicLeapTrackingMeshInfo
		TEST_METHOD(ScriptStruct__MagicLeap__MagicLeapTrackingMeshInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapTrackingMeshInfo, BlockData, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapTrackingMeshInfo, 0x0018);
		}

		// struct FPurchaseItemDetails
		TEST_METHOD(ScriptStruct__MagicLeap__PurchaseItemDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_FGL1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, Price, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, type, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseItemDetails, UnknownData_OE2A, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseItemDetails, 0x0040);
		}

		// struct FAudioCaptureDeviceInfo
		TEST_METHOD(ScriptStruct__AudioCapture__AudioCaptureDeviceInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, DeviceName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, NumInputChannels, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioCaptureDeviceInfo, SampleRate, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioCaptureDeviceInfo, 0x0014);
		}

		// struct FTargetMoveAwayToFastInfo
		TEST_METHOD(ScriptStruct__DBDBots__TargetMoveAwayToFastInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetMoveAwayToFastInfo, AccumulatedTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetMoveAwayToFastInfo, CooldownUntilTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTargetMoveAwayToFastInfo, Stimulus, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTargetMoveAwayToFastInfo, 0x0064);
		}

		// struct FAIRandomByDistancePercentagesAtTime
		TEST_METHOD(ScriptStruct__DBDBots__AIRandomByDistancePercentagesAtTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRandomByDistancePercentagesAtTime, PercentageAtStartDistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRandomByDistancePercentagesAtTime, PercentageAtEndDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIRandomByDistancePercentagesAtTime, AtRelativeTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIRandomByDistancePercentagesAtTime, 0x0030);
		}

		// struct FAISkillPerk
		TEST_METHOD(ScriptStruct__DBDBots__AISkillPerk)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISkillPerk, perkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAISkillPerk, Skill, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAISkillPerk, 0x0038);
		}

		// struct FAIGoal
		TEST_METHOD(ScriptStruct__DBDBots__AIGoal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoal, source, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoal, MetaGoal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoal, goal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIGoal, 0x0018);
		}

		// struct FAIGoalWeight
		TEST_METHOD(ScriptStruct__DBDBots__AIGoalWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoalWeight, GoalInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoalWeight, Weight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoalWeight, UnknownData_2QNQ, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoalWeight, WeightDebug, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIGoalWeight, 0x0030);
		}

		// struct FAIGoalWeightContainer
		TEST_METHOD(ScriptStruct__DBDBots__AIGoalWeightContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAIGoalWeightContainer, WeightedGoals, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAIGoalWeightContainer, 0x0010);
		}

		// struct FGameStatePressureZoneLevelMapContainer
		TEST_METHOD(ScriptStruct__DBDBots__GameStatePressureZoneLevelMapContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameStatePressureZoneLevelMapContainer, map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameStatePressureZoneLevelMapContainer, 0x0050);
		}

		// struct FDangerStateGameStateMapContainer
		TEST_METHOD(ScriptStruct__DBDBots__DangerStateGameStateMapContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDangerStateGameStateMapContainer, map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDangerStateGameStateMapContainer, 0x0050);
		}

		// struct FRelevantNodeMemory
		TEST_METHOD(ScriptStruct__DBDBots__RelevantNodeMemory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRelevantNodeMemory, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRelevantNodeMemory, UnknownData_Q9SE, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRelevantNodeMemory, 0x0018);
		}

		// struct FMindFocusObjectEntry
		TEST_METHOD(ScriptStruct__DBDBots__MindFocusObjectEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMindFocusObjectEntry, FocusedBy, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMindFocusObjectEntry, FocusedStartTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMindFocusObjectEntry, UnknownData_9P8N, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMindFocusObjectEntry, CooldownMap, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMindFocusObjectEntry, UnknownData_S2W1, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMindFocusObjectEntry, 0x0078);
		}

		// struct FWeightedWishedObjectMapContainer
		TEST_METHOD(ScriptStruct__DBDBots__WeightedWishedObjectMapContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedWishedObjectMapContainer, WeightedWishedObjectMap, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedWishedObjectMapContainer, 0x0050);
		}

		// struct FExplorableTileInfo
		TEST_METHOD(ScriptStruct__DBDBots__ExplorableTileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorableTileInfo, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExplorableTileInfo, Bounds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExplorableTileInfo, 0x002C);
		}

		// struct FMoveLinkPlayerInfo
		TEST_METHOD(ScriptStruct__DBDBots__MoveLinkPlayerInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMoveLinkPlayerInfo, UnknownData_IRQG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMoveLinkPlayerInfo, 0x0028);
		}

		// struct FNavLinkInteractPlayerSetup
		TEST_METHOD(ScriptStruct__DBDBots__NavLinkInteractPlayerSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkInteractPlayerSetup, input, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkInteractPlayerSetup, UnknownData_UT78, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkInteractPlayerSetup, InteractionIDs, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavLinkInteractPlayerSetup, InputTimeDeviationInChase, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavLinkInteractPlayerSetup, 0x0028);
		}

		// struct FNavMovePathPoint
		TEST_METHOD(ScriptStruct__DBDBots__NavMovePathPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavMovePathPoint, UnknownData_VWTR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavMovePathPoint, 0x0014);
		}

		// struct FGameStateEvadeLoopStrategyMapContainer
		TEST_METHOD(ScriptStruct__DBDBots__GameStateEvadeLoopStrategyMapContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameStateEvadeLoopStrategyMapContainer, map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameStateEvadeLoopStrategyMapContainer, 0x0050);
		}

		// struct FAimDirection
		TEST_METHOD(ScriptStruct__DBDGameplay__AimDirection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAimDirection, UnknownData_G0OT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAimDirection, 0x0024);
		}

		// struct FBlindTargetViewData
		TEST_METHOD(ScriptStruct__DBDGameplay__BlindTargetViewData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlindTargetViewData, UnknownData_CN0M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlindTargetViewData, 0x0040);
		}

		// struct FTestableStat : public FTunableStat
		TEST_METHOD(ScriptStruct__DBDGameplay__TestableStat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTestableStat, UnknownData_RXBZ, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTestableStat, 0x0048);
		}

		// struct FInAppPurchaseRestoreInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseRestoreInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, itemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, itemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseRestoreInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseRestoreInfo2, 0x0030);
		}

		// struct FInAppPurchaseReceiptInfo
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, itemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, itemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo, 0x0030);
		}

		// struct FInAppPurchaseProductInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, TransactionIdentifier, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayDescription, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DisplayPrice, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, RawPrice, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, UnknownData_KB0D, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencyCode, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, CurrencySymbol, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DecimalSeparator, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, GroupingSeparator, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, ReceiptData, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductInfo2, DynamicFields, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductInfo2, 0x00F8);
		}

		// struct FInAppPurchaseProductRequest2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseProductRequest2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, ProductIdentifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, bIsConsumable, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseProductRequest2, UnknownData_B8H8, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseProductRequest2, 0x0018);
		}

		// struct FPIELoginSettingsInternal
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PIELoginSettingsInternal)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, Token, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, type, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPIELoginSettingsInternal, TokenBytes, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPIELoginSettingsInternal, 0x0040);
		}

		// struct FPlayerReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PlayerReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UniqueID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ValidationStr, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, Platform, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, bAllowCrossplay, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, UnknownData_WTCJ, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerReservation, ElapsedTime, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerReservation, 0x0050);
		}

		// struct FPartyReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__PartyReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, TeamNum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, UnknownData_F9XS, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyLeader, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, PartyMembers, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyReservation, RemovedPartyMembers, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyReservation, 0x0050);
		}

		// struct FSpectatorReservation
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__SpectatorReservation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, SpectatorId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpectatorReservation, Spectator, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpectatorReservation, 0x0078);
		}

		// struct FBlueprintSessionResult
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__BlueprintSessionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintSessionResult, UnknownData_MYQ5, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintSessionResult, 0x00B8);
		}

		// struct FInAppPurchaseReceiptInfo2
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__InAppPurchaseReceiptInfo2)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, itemName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, itemId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInAppPurchaseReceiptInfo2, ValidationInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInAppPurchaseReceiptInfo2, 0x0030);
		}

		// struct FOnlineProxyStoreOffer
		TEST_METHOD(ScriptStruct__OnlineSubsystemUtils__OnlineProxyStoreOffer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, OfferId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, title, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, description, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, LongDescription, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPriceText, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, RegularPrice, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_YPRF, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, PriceText, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, NumericPrice, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_YQT5, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, CurrencyCode, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ReleaseDate, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, ExpirationDate, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DiscountType, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, UnknownData_8KL9, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlineProxyStoreOffer, DynamicFields, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlineProxyStoreOffer, 0x0110);
		}

		// struct FTickFunction
		TEST_METHOD(ScriptStruct__Engine__TickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_4QS8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, EndTickGroup, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_GXB0, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, TickInterval, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickFunction, UnknownData_S091, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickFunction, 0x0028);
		}

		// struct FActorTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorTickFunction, UnknownData_XS2B, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorTickFunction, 0x0030);
		}

		// struct FRepMovement
		TEST_METHOD(ScriptStruct__Engine__RepMovement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LinearVelocity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, AngularVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, location, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, rotation, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, LocationQuantizationLevel, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, VelocityQuantizationLevel, 0x0032);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepMovement, RotationQuantizationLevel, 0x0033);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepMovement, 0x0034);
		}

		// struct FVector_NetQuantize100 : public Fvector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize100)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize100, 0x000C);
		}

		// struct FRepAttachment
		TEST_METHOD(ScriptStruct__Engine__RepAttachment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, LocationOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RelativeScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, RotationOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachSocket, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepAttachment, AttachComponent, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepAttachment, 0x0040);
		}

		// struct FChannelDefinition
		TEST_METHOD(ScriptStruct__Engine__ChannelDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ClassName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, ChannelClass, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, StaticChannelIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bTickOnCreate, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bServerOpen, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bClientOpen, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialServer, 0x0027);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, bInitialClient, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChannelDefinition, UnknownData_QWM3, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChannelDefinition, 0x0030);
		}

		// struct FActorComponentTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ActorComponentTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentTickFunction, UnknownData_98OP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentTickFunction, 0x0030);
		}

		// struct FSimpleMemberReference
		TEST_METHOD(ScriptStruct__Engine__SimpleMemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, MemberGuid, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleMemberReference, UnknownData_RZYF, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleMemberReference, 0x0028);
		}

		// struct FSkelMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, HiddenMaterials, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshComponentLODInfo, UnknownData_1UYF, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshComponentLODInfo, 0x0028);
		}

		// struct FperPlatformFloat
		TEST_METHOD(ScriptStruct__Engine__perPlatformFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FperPlatformFloat, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FperPlatformFloat, 0x0004);
		}

		// struct FperPlatformInt
		TEST_METHOD(ScriptStruct__Engine__perPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FperPlatformInt, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FperPlatformInt, 0x0004);
		}

		// struct FTresholdToFrameSkip
		TEST_METHOD(ScriptStruct__Engine__TresholdToFrameSkip)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTresholdToFrameSkip, Treshold, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTresholdToFrameSkip, FrameSkip, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTresholdToFrameSkip, 0x0008);
		}

		// struct FMeshUVChannelInfo
		TEST_METHOD(ScriptStruct__Engine__MeshUVChannelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bInitialized, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, bOverrideDensities, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, UnknownData_4S14, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshUVChannelInfo, LocalUVDensities, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshUVChannelInfo, 0x0014);
		}

		// struct FSkeletalMaterial
		TEST_METHOD(ScriptStruct__Engine__SkeletalMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, materialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMaterial, UVChannelData, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMaterial, 0x0028);
		}

		// struct FBoneMirrorInfo
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, BoneFlipAxis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorInfo, UnknownData_L3EA, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorInfo, 0x0008);
		}

		// struct FSkeletalMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, UnknownData_RSIL, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdPosition, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdTangentNormal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, ThresholdUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshBuildSettings, MorphThresholdPosition, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshBuildSettings, 0x0014);
		}

		// struct FSkeletalMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TerminationCriterion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_IJ6E, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NumOfVertPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfTriangles, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxNumOfVerts, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxDeviationPercentage, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ReductionMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SilhouetteImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, TextureImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, ShadingImportance, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, SkinningImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_NA2T, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, WeldingThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, NormalsThreshold, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, MaxBonesPerVertex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_2PX2, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, VolumeImportance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, UnknownData_VD9X, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshOptimizationSettings, BaseLOD, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshOptimizationSettings, 0x003C);
		}

		// struct FBoneReference
		TEST_METHOD(ScriptStruct__Engine__BoneReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReference, UnknownData_B707, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReference, 0x0014);
		}

		// struct FSkeletalMeshLODInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, LODMaterialMap, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BuildSettings, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, ReductionSettings, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToRemove, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BonesToPrioritize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, WeightOfPrioritization, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_NGRH, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePose, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, BakePoseOverride, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SourceImportFilename, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, SkinCacheUsage, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODInfo, UnknownData_KTGB, 0x00B2);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODInfo, 0x00B8);
		}

		// struct FSkeletalMeshSamplingRegionMaterialFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionMaterialFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionMaterialFilter, MaterialName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionMaterialFilter, 0x000C);
		}

		// struct FSkeletalMeshSamplingRegionBoneFilter
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBoneFilter, UnknownData_ZBAX, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBoneFilter, 0x0010);
		}

		// struct FSkeletalMeshSamplingRegion
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegion)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, LodIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, UnknownData_TPI5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, MaterialFilters, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegion, BoneFilters, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegion, 0x0038);
		}

		// struct FSkeletalMeshSamplingLODBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingLODBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingLODBuiltData, UnknownData_9QCZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingLODBuiltData, 0x0048);
		}

		// struct FSkeletalMeshSamplingRegionBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingRegionBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingRegionBuiltData, UnknownData_KLS9, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingRegionBuiltData, 0x0078);
		}

		// struct FSkeletalMeshSamplingBuiltData
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingBuiltData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, WholeMeshBuiltData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingBuiltData, RegionBuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingBuiltData, 0x0020);
		}

		// struct FSkeletalMeshSamplingInfo
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshSamplingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, Regions, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshSamplingInfo, BuiltData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshSamplingInfo, 0x0030);
		}

		// struct FPerPlatformBool
		TEST_METHOD(ScriptStruct__Engine__PerPlatformBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerPlatformBool, Default, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerPlatformBool, 0x0001);
		}

		// struct FSkinWeightProfileInfo
		TEST_METHOD(ScriptStruct__Engine__SkinWeightProfileInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfile, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, UnknownData_X49K, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkinWeightProfileInfo, DefaultProfileFromLODIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkinWeightProfileInfo, 0x0014);
		}

		// struct FGeomSelection
		TEST_METHOD(ScriptStruct__Engine__GeomSelection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, index, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomSelection, SelectionIndex, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomSelection, 0x000C);
		}

		// struct FLevelStreamingWrapper
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingWrapper, StreamingLevel, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingWrapper, 0x0008);
		}

		// struct FStreamingLevelsToConsider
		TEST_METHOD(ScriptStruct__Engine__StreamingLevelsToConsider)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, StreamingLevels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingLevelsToConsider, UnknownData_HHAT, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingLevelsToConsider, 0x0028);
		}

		// struct FLevelCollection
		TEST_METHOD(ScriptStruct__Engine__LevelCollection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, UnknownData_GD9R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, gameState, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, NetDriver, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, DemoNetDriver, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, PersistentLevel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelCollection, Levels, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelCollection, 0x0078);
		}

		// struct FPSCPoolElem
		TEST_METHOD(ScriptStruct__Engine__PSCPoolElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, PSC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPoolElem, UnknownData_G6S5, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPoolElem, 0x0010);
		}

		// struct FPSCPool
		TEST_METHOD(ScriptStruct__Engine__PSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, FreeElements, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Auto, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, InUseComponents_Manual, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPSCPool, UnknownData_B650, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPSCPool, 0x0038);
		}

		// struct FWorldPSCPool
		TEST_METHOD(ScriptStruct__Engine__WorldPSCPool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, WorldParticleSystemPools, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWorldPSCPool, UnknownData_LZZR, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWorldPSCPool, 0x0058);
		}

		// struct FSingleAnimationPlayData
		TEST_METHOD(ScriptStruct__Engine__SingleAnimationPlayData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, AnimToPlay, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_O7WJ, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPosition, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, SavedPlayRate, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSingleAnimationPlayData, UnknownData_0TXD, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSingleAnimationPlayData, 0x0018);
		}

		// struct FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__ExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionInput, 0x0010);
		}

		// struct FSplineCurves
		TEST_METHOD(ScriptStruct__Engine__SplineCurves)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, rotation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, scale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, ReparamTable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineCurves, Metadata, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineCurves, 0x0068);
		}

		// struct FKeyHandleMap
		TEST_METHOD(ScriptStruct__Engine__KeyHandleMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleMap, UnknownData_TWQO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleMap, 0x0060);
		}

		// struct FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IndexedCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, UnknownData_EZ3J, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexedCurve, KeyHandlesToIndices, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexedCurve, 0x0068);
		}

		// struct FRealCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__RealCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PreInfinityExtrap, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, PostInfinityExtrap, 0x006D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRealCurve, UnknownData_639D, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRealCurve, 0x0070);
		}

		// struct FRichCurveKey
		TEST_METHOD(ScriptStruct__Engine__RichCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, InterpMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, TangentWeightMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, UnknownData_SIE1, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, time, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, Value, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, ArriveTangentWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangent, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurveKey, LeaveTangentWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurveKey, 0x001C);
		}

		// struct FRichCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__RichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRichCurve, Keys, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRichCurve, 0x0080);
		}

		// struct FRuntimeFloatCurve
		TEST_METHOD(ScriptStruct__Engine__RuntimeFloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, EditorCurveData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeFloatCurve, ExternalCurve, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeFloatCurve, 0x0088);
		}

		// struct FAttenuationSubmixSendSettings
		TEST_METHOD(ScriptStruct__Engine__AttenuationSubmixSendSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, Submix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendMethod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, UnknownData_LQUO, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMin, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendLevelMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, SubmixSendDistanceMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, ManualSubmixSendLevel, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAttenuationSubmixSendSettings, CustomSubmixSendCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAttenuationSubmixSendSettings, 0x00A8);
		}

		// struct FSoundAttenuationPluginSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationPluginSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, SpatializationPluginSettingsArray, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, OcclusionPluginSettingsArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationPluginSettings, ReverbPluginSettingsArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationPluginSettings, 0x0030);
		}

		// struct FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__BaseAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_QBPJ, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, DistanceAlgorithm, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShape, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_WLEY, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, dBAttenuationAtMax, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, UnknownData_ZKOD, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, AttenuationShapeExtents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, ConeOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, FalloffDistance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBaseAttenuationSettings, CustomAttenuationCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBaseAttenuationSettings, 0x00B0);
		}

		// struct FSoundAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__SoundAttenuationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SpatializationAlgorithm, 0x00B2);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_LP2C, 0x00B3);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, BinauralRadius, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, AbsorptionMethod, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionTraceChannel, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbSendMethod, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMethod, 0x00BB);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OmniRadius, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, StereoSpread, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMin, 0x00C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFRadiusMax, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_4L4V, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomLowpassAirAbsorptionCurve, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomHighpassAirAbsorptionCurve, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMin, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, LPFFrequencyAtMax, 0x01E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMin, 0x01E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, HPFFrequencyAtMax, 0x01EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAzimuth, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusAzimuth, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusDistanceScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusDistanceScale, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusPriorityScale, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusPriorityScale, 0x0204);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusVolumeAttenuation, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, NonFocusVolumeAttenuation, 0x020C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusAttackInterpSpeed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, FocusReleaseInterpSpeed, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionLowPassFilterFrequency, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionVolumeAttenuation, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, OcclusionInterpolationTime, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMin, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbWetLevelMax, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMin, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ReverbDistanceMax, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualReverbSendLevel, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomReverbSendCurve, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, SubmixSendSettings, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMin, 0x02D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationMax, 0x02D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMin, 0x02D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PriorityAttenuationDistanceMax, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, ManualPriorityAttenuation, 0x02E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, UnknownData_JU42, 0x02E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, CustomPriorityAttenuationCurve, 0x02E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundAttenuationSettings, PluginSettings, 0x0370);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundAttenuationSettings, 0x03A0);
		}

		// struct FActiveForceFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveForceFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, ForceFeedbackEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveForceFeedbackEffect, UnknownData_W5E2, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveForceFeedbackEffect, 0x0020);
		}

		// struct FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__MovementProperties)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMovementProperties, 0x0001);
		}

		// struct FNavAgentProperties : public FMovementProperties
		TEST_METHOD(ScriptStruct__Engine__NavAgentProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_GWKG, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, agentRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentHeight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, AgentStepHeight, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, NavWalkingSearchHeightScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, UnknownData_50ZS, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentProperties, PreferredNavData, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentProperties, 0x0038);
		}

		// struct FWeightedBlendable
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Weight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, UnknownData_UOZ3, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendable, Object, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendable, 0x0010);
		}

		// struct FWeightedBlendables
		TEST_METHOD(ScriptStruct__Engine__WeightedBlendables)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWeightedBlendables, Array, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWeightedBlendables, 0x0010);
		}

		// struct FPostProcessSettings
		TEST_METHOD(ScriptStruct__Engine__PostProcessSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_U5WE, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_WNZR, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_ISG8, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LWDC, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomMethod, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMethod, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_RQX4, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTemp, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WhiteTint, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_5CPK, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturation, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrast, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGamma, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGain, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffset, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationShadows, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastShadows, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaShadows, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainShadows, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetShadows, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationMidtones, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastMidtones, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaMidtones, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainMidtones, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetMidtones, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorSaturationHighlights, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorContrastHighlights, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGammaHighlights, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGainHighlights, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorOffsetHighlights, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionHighlightsMin, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorCorrectionShadowsMax, 0x0174);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BlueCorrection, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ExpandGamut, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSlope, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToe, 0x0184);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShoulder, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmBlackClip, 0x018C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhiteClip, 0x0190);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmWhitePoint, 0x0194);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTint, 0x01A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintBlend, 0x01B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmShadowTintAmount, 0x01B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmSaturation, 0x01BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerRed, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerGreen, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmChannelMixerBlue, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmContrast, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmToeAmount, 0x01F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmHealAmount, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, FilmDynamicRange, 0x01FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneColorTint, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, SceneFringeIntensity, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ChromaticAberrationStartOffset, 0x0214);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomIntensity, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomThreshold, 0x021C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomSizeScale, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Size, 0x0224);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Size, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Size, 0x022C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Size, 0x0230);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Size, 0x0234);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Size, 0x0238);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom1Tint, 0x023C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom2Tint, 0x024C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom3Tint, 0x025C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom4Tint, 0x026C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom5Tint, 0x027C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, Bloom6Tint, 0x028C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionSize, 0x029C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionTexture, 0x02A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionCenterUV, 0x02A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMin, 0x02B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMax, 0x02B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionPreFilterMult, 0x02B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomConvolutionBufferScale, 0x02BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMask, 0x02C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskIntensity, 0x02C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, BloomDirtMaskTint, 0x02CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapTint, 0x02DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemapIntensity, 0x02EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientCubemap, 0x02F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraShutterSpeed, 0x02F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, CameraISO, 0x02FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFstop, 0x0300);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldMinFstop, 0x0304);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldBladeCount, 0x0308);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBias, 0x030C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasBackup, 0x0310);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LZ28, 0x0315);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_XT5A, 0x0319);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureBiasCurve, 0x0320);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMeterMask, 0x0328);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureLowPercent, 0x0330);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureHighPercent, 0x0334);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMinBrightness, 0x0338);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureMaxBrightness, 0x033C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedUp, 0x0340);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureSpeedDown, 0x0344);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMin, 0x0348);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, HistogramLogMax, 0x034C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AutoExposureCalibrationConstant, 0x0350);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareIntensity, 0x0354);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTint, 0x0358);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehSize, 0x0368);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareThreshold, 0x036C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareBokehShape, 0x0370);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LensFlareTints, 0x0378);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, VignetteIntensity, 0x03F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainJitter, 0x03FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, GrainIntensity, 0x0400);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionIntensity, 0x0404);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionStaticFraction, 0x0408);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionRadius, 0x040C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_0417, 0x0411);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeDistance, 0x0414);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionFadeRadius, 0x0418);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionDistance, 0x041C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionPower, 0x0420);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionBias, 0x0424);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionQuality, 0x0428);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipBlend, 0x042C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipScale, 0x0430);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, AmbientOcclusionMipThreshold, 0x0434);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_YS6L, 0x0439);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingAOSamplesPerPixel, 0x043C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingColor, 0x0440);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, IndirectLightingIntensity, 0x0450);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIType, 0x0454);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_7ATT, 0x0455);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGIMaxBounces, 0x0458);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingGISamplesPerPixel, 0x045C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingIntensity, 0x0460);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_6RYL, 0x0464);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ColorGradingLUT, 0x0468);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSensorWidth, 0x0470);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalDistance, 0x0474);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurAmount, 0x0478);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldDepthBlurRadius, 0x047C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFocalRegion, 0x0480);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearTransitionRegion, 0x0484);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarTransitionRegion, 0x0488);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldScale, 0x048C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldNearBlurSize, 0x0490);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldFarBlurSize, 0x0494);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldOcclusion, 0x0498);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldSkyFocusDistance, 0x049C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, DepthOfFieldVignetteSize, 0x04A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurAmount, 0x04A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurMax, 0x04A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurTargetFPS, 0x04AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, MotionBlurPerObjectSize, 0x04B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVIntensity, 0x04B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVVplInjectionBias, 0x04B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSize, 0x04BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryOcclusionIntensity, 0x04C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSecondaryBounceIntensity, 0x04C4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVGeometryVolumeBias, 0x04C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVEmissiveInjectionIntensity, 0x04CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionIntensity, 0x04D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionRadius, 0x04D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionExponent, 0x04D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionExponent, 0x04DC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDiffuseOcclusionIntensity, 0x04E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVSpecularOcclusionIntensity, 0x04E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ReflectionsType, 0x04E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_XGPH, 0x04E9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionIntensity, 0x04EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionQuality, 0x04F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenSpaceReflectionMaxRoughness, 0x04F4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxRoughness, 0x04F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsMaxBounces, 0x04FC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsSamplesPerPixel, 0x0500);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingReflectionsShadows, 0x0504);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, TranslucencyType, 0x0506);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_6N13, 0x0507);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyMaxRoughness, 0x0508);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyRefractionRays, 0x050C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencySamplesPerPixel, 0x0510);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, RayTracingTranslucencyShadows, 0x0514);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_LRW2, 0x0516);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingMaxBounces, 0x0518);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, PathTracingSamplesPerPixel, 0x051C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVFadeRange, 0x0520);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, LPVDirectionalOcclusionFadeRange, 0x0524);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, ScreenPercentage, 0x0528);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, UnknownData_2QBW, 0x052C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPostProcessSettings, WeightedBlendables, 0x0530);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPostProcessSettings, 0x0540);
		}

		// struct FNavAvoidanceMask
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceMask)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceMask, 0x0004);
		}

		// struct FParticleSysParam
		TEST_METHOD(ScriptStruct__Engine__ParticleSysParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, ParamType, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_YHSR, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Scalar_Low, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, vector, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, Vector_Low, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_L4T0, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, actor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, MATERIAL, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSysParam, UnknownData_Q0HR, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSysParam, 0x0090);
		}

		// struct FDebugTextInfo
		TEST_METHOD(ScriptStruct__Engine__DebugTextInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, SrcActorDesiredOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, DebugText, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TimeRemaining, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, duration, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, TextColor, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_09ZE, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, OrigActorLocation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_3V1P, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, Font, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, FontScale, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugTextInfo, UnknownData_1EMB, 0x005C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugTextInfo, 0x0060);
		}

		// struct FStatColorMapEntry
		TEST_METHOD(ScriptStruct__Engine__StatColorMapEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, In, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapEntry, out, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapEntry, 0x0008);
		}

		// struct FStatColorMapping
		TEST_METHOD(ScriptStruct__Engine__StatColorMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, statName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, ColorMap, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStatColorMapping, UnknownData_WAAW, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStatColorMapping, 0x0028);
		}

		// struct FGameNameRedirect
		TEST_METHOD(ScriptStruct__Engine__GameNameRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, OldGameName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGameNameRedirect, NewGameName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGameNameRedirect, 0x0018);
		}

		// struct FClassRedirect
		TEST_METHOD(ScriptStruct__Engine__ClassRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldClassName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, OldSubobjName, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewSubobjName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassClass, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, NewClassPackage, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, InstanceOnly, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClassRedirect, UnknownData_J8K4, 0x0055);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClassRedirect, 0x0058);
		}

		// struct FPluginRedirect
		TEST_METHOD(ScriptStruct__Engine__PluginRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, OldPluginName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPluginRedirect, NewPluginName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPluginRedirect, 0x0020);
		}

		// struct FStructRedirect
		TEST_METHOD(ScriptStruct__Engine__StructRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, OldStructName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructRedirect, NewStructName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructRedirect, 0x0018);
		}

		// struct FDropNoteInfo
		TEST_METHOD(ScriptStruct__Engine__DropNoteInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDropNoteInfo, comment, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDropNoteInfo, 0x0028);
		}

		// struct FNetDriverDefinition
		TEST_METHOD(ScriptStruct__Engine__NetDriverDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DefName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetDriverDefinition, DriverClassNameFallback, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetDriverDefinition, 0x0024);
		}

		// struct FMinimalViewInfo
		TEST_METHOD(ScriptStruct__Engine__MinimalViewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, FOV, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, DesiredFOV, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoWidth, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoNearClipPlane, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OrthoFarClipPlane, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, AspectRatio, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_F1LJ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, ProjectionMode, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_3UMG, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessBlendWeight, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_DBYD, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, PostProcessSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, OffCenterProjectionOffset, 0x0580);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMinimalViewInfo, UnknownData_QJR1, 0x0588);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMinimalViewInfo, 0x05D0);
		}

		// struct FCameraCacheEntry
		TEST_METHOD(ScriptStruct__Engine__CameraCacheEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, timestamp, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, UnknownData_20K4, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCacheEntry, POV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCacheEntry, 0x05E0);
		}

		// struct FTViewTarget
		TEST_METHOD(ScriptStruct__Engine__TViewTarget)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, target, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_DVWV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, POV, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, playerState, 0x05E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTViewTarget, UnknownData_YCKA, 0x05E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTViewTarget, 0x05F0);
		}

		// struct FStaticMeshComponentLODInfo
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentLODInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentLODInfo, UnknownData_IN4Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentLODInfo, 0x0090);
		}

		// struct FStreamingTextureBuildInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingTextureBuildInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, PackedRelativeBox, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TextureLevelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingTextureBuildInfo, TexelFactor, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingTextureBuildInfo, 0x000C);
		}

		// struct FLightmassPrimitiveSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPrimitiveSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, UnknownData_H3SD, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightFalloffExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveLightExplicitInfluenceRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, EmissiveBoost, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, DiffuseBoost, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassPrimitiveSettings, FullyOccludedSamplesFraction, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPrimitiveSettings, 0x0018);
		}

		// struct FInstancedStaticMeshInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshInstanceData, Transform, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshMappingInfo
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshMappingInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshMappingInfo, UnknownData_AM0R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshMappingInfo, 0x0008);
		}

		// struct FMaterialConfig
		TEST_METHOD(ScriptStruct__Engine__MaterialConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialConfig, MaterialPerSection, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialConfig, 0x0010);
		}

		// struct FIndexList
		TEST_METHOD(ScriptStruct__Engine__IndexList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIndexList, Indexes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIndexList, 0x0010);
		}

		// struct FLightmassMaterialInterfaceSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassMaterialInterfaceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, EmissiveBoost, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, DiffuseBoost, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, ExportResolutionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassMaterialInterfaceSettings, UnknownData_7TX3, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassMaterialInterfaceSettings, 0x0010);
		}

		// struct FMaterialTextureInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialTextureInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, SamplingScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, UVChannelIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialTextureInfo, TextureName, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialTextureInfo, 0x0014);
		}

		// struct FMaterialParameterInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, Association, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, UnknownData_F063, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterInfo, index, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterInfo, 0x0014);
		}

		// struct FScalarParameterValue
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ParameterValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterValue, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterValue, 0x0028);
		}

		// struct FVectorParameterValue
		TEST_METHOD(ScriptStruct__Engine__VectorParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ParameterValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorParameterValue, ExpressionGUID, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorParameterValue, 0x0034);
		}

		// struct FTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__TextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, UnknownData_NLDW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ParameterValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureParameterValue, 0x0030);
		}

		// struct FRuntimeVirtualTextureParameterValue
		TEST_METHOD(ScriptStruct__Engine__RuntimeVirtualTextureParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, UnknownData_1RO4, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ParameterValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeVirtualTextureParameterValue, ExpressionGUID, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeVirtualTextureParameterValue, 0x0030);
		}

		// struct FFontParameterValue
		TEST_METHOD(ScriptStruct__Engine__FontParameterValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_TRF3, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, FontPage, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, ExpressionGUID, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontParameterValue, UnknownData_6SIC, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontParameterValue, 0x0038);
		}

		// struct FMaterialInstanceBasePropertyOverrides
		TEST_METHOD(ScriptStruct__Engine__MaterialInstanceBasePropertyOverrides)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, BlendMode, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, ShadingModel, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInstanceBasePropertyOverrides, OpacityMaskClipValue, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInstanceBasePropertyOverrides, 0x0008);
		}

		// struct FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ParameterInfo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, bOverride, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, UnknownData_NB53, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterBase, ExpressionGUID, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterBase, 0x0028);
		}

		// struct FStaticSwitchParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticSwitchParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, Value, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticSwitchParameter, UnknownData_5BT8, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticSwitchParameter, 0x002C);
		}

		// struct FStaticComponentMaskParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticComponentMaskParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, R, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, G, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, B, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticComponentMaskParameter, A, 0x002B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticComponentMaskParameter, 0x002C);
		}

		// struct FStaticTerrainLayerWeightParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticTerrainLayerWeightParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, WeightmapIndex, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, bWeightBasedBlend, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticTerrainLayerWeightParameter, UnknownData_UPY8, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticTerrainLayerWeightParameter, 0x0030);
		}

		// struct FMaterialLayersFunctions
		TEST_METHOD(ScriptStruct__Engine__MaterialLayersFunctions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Layers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, Blends, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, LayerStates, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialLayersFunctions, KeyString, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialLayersFunctions, 0x0040);
		}

		// struct FStaticMaterialLayersParameter : public FStaticParameterBase
		TEST_METHOD(ScriptStruct__Engine__StaticMaterialLayersParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterialLayersParameter, Value, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterialLayersParameter, 0x0068);
		}

		// struct FStaticParameterSet
		TEST_METHOD(ScriptStruct__Engine__StaticParameterSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticSwitchParameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, StaticComponentMaskParameters, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, TerrainLayerWeightParameters, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticParameterSet, MaterialLayersParameters, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticParameterSet, 0x0040);
		}

		// struct FMaterialCachedParameterEntry
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameterEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, NameHashes, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ParameterInfos, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, ExpressionGuids, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameterEntry, Overrides, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameterEntry, 0x0040);
		}

		// struct FMaterialCachedParameters
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, Entries, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, ScalarValues, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, VectorValues, 0x0150);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, TextureValues, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontValues, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, FontPageValues, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedParameters, RuntimeVirtualTextureValues, 0x0190);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedParameters, 0x01A0);
		}

		// struct FSoundConcurrencySettings
		TEST_METHOD(ScriptStruct__Engine__SoundConcurrencySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, MaxCount, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_RRRZ, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, ResolutionRule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_EMCH, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleAttackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, UnknownData_9AV3, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VolumeScaleReleaseTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundConcurrencySettings, VoiceStealReleaseTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundConcurrencySettings, 0x0020);
		}

		// struct FSoundSubmixSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSubmixSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_GM54, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SoundSubmix, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, UnknownData_F085, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSubmixSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSubmixSendInfo, 0x00B0);
		}

		// struct FSoundSourceBusSendInfo
		TEST_METHOD(ScriptStruct__Engine__SoundSourceBusSendInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SourceBusSendLevelControlMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_FAD0, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SoundSourceBus, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, SendLevel, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendLevel, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendLevel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MinSendDistance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, MaxSendDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, UnknownData_YOBL, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundSourceBusSendInfo, CustomSendLevelCurve, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundSourceBusSendInfo, 0x00B0);
		}

		// struct FSoundWaveSpectralDataEntry
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, Magnitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataEntry, NormalizedMagnitude, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataEntry, 0x0008);
		}

		// struct FSoundWaveSpectralTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, data, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, TimeSec, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralTimeData, UnknownData_8INM, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralTimeData, 0x0018);
		}

		// struct FSoundWaveEnvelopeTimeData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeTimeData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeTimeData, TimeSec, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeTimeData, 0x0008);
		}

		// struct FSubtitleCue
		TEST_METHOD(ScriptStruct__Engine__SubtitleCue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, time, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubtitleCue, UnknownData_L48Y, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubtitleCue, 0x0020);
		}

		// struct FTimeStretchCurveMarker
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveMarker, Alpha, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveMarker, 0x0010);
		}

		// struct FTimeStretchCurve
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, SamplingRate, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, CurveValueMinPrecision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Markers, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, Sum_dT_i_by_C_i, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurve, UnknownData_XE0Z, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurve, 0x0028);
		}

		// struct FReverbSettings
		TEST_METHOD(ScriptStruct__Engine__ReverbSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, bApplyReverb, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, UnknownData_7H4A, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbEffect, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, ReverbPluginEffect, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, volume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReverbSettings, FadeTime, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReverbSettings, 0x0020);
		}

		// struct FBoneNode
		TEST_METHOD(ScriptStruct__Engine__BoneNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, ParentIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, TranslationRetargetingMode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneNode, UnknownData_Y599, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneNode, 0x0014);
		}

		// struct FVirtualBone
		TEST_METHOD(ScriptStruct__Engine__VirtualBone)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, SourceBoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, TargetBoneName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualBone, VirtualBoneName, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualBone, 0x0024);
		}

		// struct FSmartNameContainer
		TEST_METHOD(ScriptStruct__Engine__SmartNameContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameContainer, UnknownData_MZP4, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameContainer, 0x0050);
		}

		// struct FAnimSlotGroup
		TEST_METHOD(ScriptStruct__Engine__AnimSlotGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, groupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, UnknownData_SYE0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotGroup, SlotNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotGroup, 0x0020);
		}

		// struct FDelegateArray
		TEST_METHOD(ScriptStruct__Engine__DelegateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDelegateArray, Delegates, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDelegateArray, 0x0010);
		}

		// struct FTextureLODGroup
		TEST_METHOD(ScriptStruct__Engine__TextureLODGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_R3P6, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smaller, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, LODBias_Smallest, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_6FMG, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, NumStreamedMips, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipGenSettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_EL0D, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinLODSize, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smaller, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MaxLODSize_Smallest, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalLODBias, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, OptionalMaxLODSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_OQT7, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MinMagFilter, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipFilter, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, MipLoadOptions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, DuplicateNonOptionalMips, 0x0059);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureLODGroup, UnknownData_8M4C, 0x005A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureLODGroup, 0x005C);
		}

		// struct FInputAxisProperties
		TEST_METHOD(ScriptStruct__Engine__InputAxisProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, DeadZone, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Sensitivity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, Exponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisProperties, UnknownData_FRPM, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisProperties, 0x0010);
		}

		// struct FInputAxisConfigEntry
		TEST_METHOD(ScriptStruct__Engine__InputAxisConfigEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisKeyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisConfigEntry, AxisProperties, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisConfigEntry, 0x001C);
		}

		// struct FInputActionSpeechMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionSpeechMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, actionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionSpeechMapping, SpeechKeyword, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionSpeechMapping, 0x0018);
		}

		// struct FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__MaterialInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, OutputIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialInput, ExpressionName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialInput, 0x0010);
		}

		// struct FScalarMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ScalarMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarMaterialInput, 0x0010);
		}

		// struct FVectorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__VectorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorMaterialInput, 0x0010);
		}

		// struct FColorMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ColorMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorMaterialInput, 0x0010);
		}

		// struct FMaterialAttributesInput : public FExpressionInput
		TEST_METHOD(ScriptStruct__Engine__MaterialAttributesInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialAttributesInput, PropertyConnectedBitmask, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialAttributesInput, 0x0014);
		}

		// struct FShadingModelMaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__ShadingModelMaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FShadingModelMaterialInput, 0x0010);
		}

		// struct FDistributionLookupTable
		TEST_METHOD(ScriptStruct__Engine__DistributionLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, TimeBias, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, values, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, Op, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryCount, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, EntryStride, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, SubEntryStride, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, LockFlag, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistributionLookupTable, UnknownData_EA7N, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistributionLookupTable, 0x0020);
		}

		// struct FVectorDistribution
		TEST_METHOD(ScriptStruct__Engine__VectorDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorDistribution, 0x0020);
		}

		// struct FVector4Distribution
		TEST_METHOD(ScriptStruct__Engine__Vector4Distribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVector4Distribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector4Distribution, 0x0020);
		}

		// struct FFloatRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__FloatRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatRK4SpringInterpolator, 0x0008);
		}

		// struct FVectorRK4SpringInterpolator
		TEST_METHOD(ScriptStruct__Engine__VectorRK4SpringInterpolator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, StiffnessConstant, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorRK4SpringInterpolator, DampeningRatio, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorRK4SpringInterpolator, 0x0008);
		}

		// struct FFormatArgumentData
		TEST_METHOD(ScriptStruct__Engine__FormatArgumentData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueType, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_GJPM, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueInt, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueFloat, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, ArgumentValueGender, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFormatArgumentData, UnknownData_BZZB, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFormatArgumentData, 0x0040);
		}

		// struct FVector2MaterialInput : public FMaterialInput
		TEST_METHOD(ScriptStruct__Engine__Vector2MaterialInput)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector2MaterialInput, 0x0010);
		}

		// struct FBranchingPointNotifyPayload
		TEST_METHOD(ScriptStruct__Engine__BranchingPointNotifyPayload)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointNotifyPayload, UnknownData_U8U7, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointNotifyPayload, 0x0020);
		}

		// struct FInterpControlPoint
		TEST_METHOD(ScriptStruct__Engine__InterpControlPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, PositionControlPoint, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, bPositionIsRelative, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpControlPoint, UnknownData_2C1L, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpControlPoint, 0x001C);
		}

		// struct FPlatformInterfaceData
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, DataName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, type, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, UnknownData_QX2M, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, IntValue, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, FloatValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, StringValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceData, ObjectValue, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceData, 0x0030);
		}

		// struct FPlatformInterfaceDelegateResult
		TEST_METHOD(ScriptStruct__Engine__PlatformInterfaceDelegateResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, bSuccessful, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, UnknownData_IQDS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlatformInterfaceDelegateResult, data, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlatformInterfaceDelegateResult, 0x0038);
		}

		// struct FDebugFloatHistory
		TEST_METHOD(ScriptStruct__Engine__DebugFloatHistory)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, Samples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MinValue, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, MaxValue, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, bAutoAdjustMinMax, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugFloatHistory, UnknownData_38AW, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugFloatHistory, 0x0020);
		}

		// struct FLatentActionInfo
		TEST_METHOD(ScriptStruct__Engine__LatentActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, Linkage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UUID, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, ExecutionFunction, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, UnknownData_O9OV, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionInfo, CallbackTarget, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionInfo, 0x0020);
		}

		// struct FTimerHandle
		TEST_METHOD(ScriptStruct__Engine__TimerHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimerHandle, Handle, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimerHandle, 0x0008);
		}

		// struct FCollisionProfileName
		TEST_METHOD(ScriptStruct__Engine__CollisionProfileName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionProfileName, name, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionProfileName, 0x000C);
		}

		// struct FGenericStruct
		TEST_METHOD(ScriptStruct__Engine__GenericStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGenericStruct, data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGenericStruct, 0x0004);
		}

		// struct FUserActivity
		TEST_METHOD(ScriptStruct__Engine__UserActivity)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, actionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserActivity, UnknownData_6PQI, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserActivity, 0x0018);
		}

		// struct FRootMotionSourceSettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceSettings, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceSettings, 0x0001);
		}

		// struct FVector_NetQuantize10 : public Fvector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize10)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize10, 0x000C);
		}

		// struct FRootMotionSourceGroup
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_GCWS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastAccumulatedSettings, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, UnknownData_D212, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceGroup, LastPreAdditiveVelocity, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceGroup, 0x0038);
		}

		// struct FRepRootMotionMontage
		TEST_METHOD(ScriptStruct__Engine__RepRootMotionMontage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bIsActive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_9PY7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AnimMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, position, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_6WQQ, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBase, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, MovementBaseBoneName, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativePosition, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, bRelativeRotation, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, UnknownData_5HQ0, 0x0046);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, AuthoritativeRootMotion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, Acceleration, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRepRootMotionMontage, LinearVelocity, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRepRootMotionMontage, 0x0098);
		}

		// struct FSimulatedRootMotionReplicatedMove
		TEST_METHOD(ScriptStruct__Engine__SimulatedRootMotionReplicatedMove)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, UnknownData_SIJG, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimulatedRootMotionReplicatedMove, RootMotion, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimulatedRootMotionReplicatedMove, 0x00A0);
		}

		// struct FRootMotionMovementParams
		TEST_METHOD(ScriptStruct__Engine__RootMotionMovementParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, bHasRootMotion, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_FEWS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, BlendWeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, UnknownData_JZPC, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionMovementParams, RootMotionTransform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionMovementParams, 0x0040);
		}

		// struct FBasedMovementInfo
		TEST_METHOD(ScriptStruct__Engine__BasedMovementInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, MovementBase, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, BoneName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, location, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, rotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasBaseComponent, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bRelativeRotation, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, bServerHasVelocity, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedMovementInfo, UnknownData_P3DE, 0x002F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedMovementInfo, 0x0030);
		}

		// struct FDataTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, RowName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableRowHandle, UnknownData_PTW1, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableRowHandle, 0x0018);
		}

		// struct FCollisionResponseContainer
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldStatic, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, WorldDynamic, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, pawn, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, visibility, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, camera, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, PhysicsBody, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Vehicle, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, Destructible, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel1, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel2, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel3, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel4, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel5, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, EngineTraceChannel6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel1, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel2, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel3, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel4, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel5, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel6, 0x0013);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel7, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel8, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel9, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel10, 0x0017);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel11, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel12, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel13, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel14, 0x001B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel15, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel16, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel17, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseContainer, GameTraceChannel18, 0x001F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseContainer, 0x0020);
		}

		// struct FResponseChannel
		TEST_METHOD(ScriptStruct__Engine__ResponseChannel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, Response, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FResponseChannel, UnknownData_V7TG, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FResponseChannel, 0x0010);
		}

		// struct FCollisionResponse
		TEST_METHOD(ScriptStruct__Engine__CollisionResponse)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseToChannels, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponse, ResponseArray, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponse, 0x0030);
		}

		// struct FWalkableSlopeOverride
		TEST_METHOD(ScriptStruct__Engine__WalkableSlopeOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeBehavior, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_9VH4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, WalkableSlopeAngle, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWalkableSlopeOverride, UnknownData_CFA8, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWalkableSlopeOverride, 0x0010);
		}

		// struct FBodyInstance
		TEST_METHOD(ScriptStruct__Engine__BodyInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_PK4L, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, ObjectType, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_MMHI, 0x0007);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionEnabled, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_PQ0W, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, SleepFamily, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, DOFMode, 0x000B);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_2G0S, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionProfileName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PositionSolverIterationCount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, VelocitySolverIterationCount, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_JW3Q, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CollisionResponses, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxDepenetrationVelocity, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassInKgOverride, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_OKEW, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, LinearDamping, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, AngularDamping, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomDOFPlaneNormal, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, COMNudge, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MassScale, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, InertiaTensorScale, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_EJWL, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, WalkableSlopeOverride, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysMaterialOverride, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, MaxAngularVelocity, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, CustomSleepThresholdMultiplier, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, StabilizationThresholdMultiplier, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, PhysicsBlendWeight, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBodyInstance, UnknownData_W4OW, 0x00D8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBodyInstance, 0x0118);
		}

		// struct FCustomPrimitiveData
		TEST_METHOD(ScriptStruct__Engine__CustomPrimitiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomPrimitiveData, data, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomPrimitiveData, 0x0010);
		}

		// struct FlightingChannels
		TEST_METHOD(ScriptStruct__Engine__lightingChannels)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FlightingChannels, 0x0001);
		}

		// struct FUniqueNetIdRepl : public FUniqueNetIdWrapper
		TEST_METHOD(ScriptStruct__Engine__UniqueNetIdRepl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, UnknownData_ONCE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUniqueNetIdRepl, ReplicationBytes, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUniqueNetIdRepl, 0x0028);
		}

		// struct FFastArraySerializer
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_XMQI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, ArrayReplicationKey, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_TMB0, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, DeltaFlags, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializer, UnknownData_T14F, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializer, 0x0108);
		}

		// struct FFastArraySerializerItem
		TEST_METHOD(ScriptStruct__Engine__FastArraySerializerItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, ReplicationKey, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFastArraySerializerItem, MostRecentArrayReplicationKey, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFastArraySerializerItem, 0x000C);
		}

		// struct FTableRowBase
		TEST_METHOD(ScriptStruct__Engine__TableRowBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTableRowBase, UnknownData_MDRW, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTableRowBase, 0x0008);
		}

		// struct FKeyHandleLookupTable
		TEST_METHOD(ScriptStruct__Engine__KeyHandleLookupTable)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyHandleLookupTable, UnknownData_X9YH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyHandleLookupTable, 0x0060);
		}

		// struct FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Base)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Base, UnknownData_D823, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Base, 0x0010);
		}

		// struct FInputRange
		TEST_METHOD(ScriptStruct__Engine__InputRange)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, min, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputRange, max, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputRange, 0x0008);
		}

		// struct FInputScaleBiasClamp
		TEST_METHOD(ScriptStruct__Engine__InputScaleBiasClamp)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bMapRange, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bClampResult, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, bInterpResult, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_1FD5, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, inRange, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, OutRange, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, scale, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, Bias, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, ClampMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedIncreasing, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, InterpSpeedDecreasing, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBiasClamp, UnknownData_TYIR, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBiasClamp, 0x0030);
		}

		// struct FAlphaBlend
		TEST_METHOD(ScriptStruct__Engine__AlphaBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, CustomCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_FH92, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, BlendOption, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAlphaBlend, UnknownData_3N2J, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAlphaBlend, 0x0030);
		}

		// struct FInputAlphaBoolBlend
		TEST_METHOD(ScriptStruct__Engine__InputAlphaBoolBlend)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, blendOutTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, BlendOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, bInitialized, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, UnknownData_2YCX, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, CustomCurve, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAlphaBoolBlend, AlphaBlend, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAlphaBoolBlend, 0x0048);
		}

		// struct FInputScaleBias
		TEST_METHOD(ScriptStruct__Engine__InputScaleBias)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, scale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputScaleBias, Bias, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputScaleBias, 0x0008);
		}

		// struct FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, LinkID, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseLinkBase, UnknownData_EJJK, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLinkBase, 0x0010);
		}

		// struct FComponentSpacePoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePoseLink, 0x0010);
		}

		// struct FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimInstanceProxy, UnknownData_I74Y, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimInstanceProxy, 0x06E0);
		}

		// struct FInputAxisKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputAxisKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, AxisName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, scale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputAxisKeyMapping, key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputAxisKeyMapping, 0x0030);
		}

		// struct FInputActionKeyMapping
		TEST_METHOD(ScriptStruct__Engine__InputActionKeyMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, actionName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, UnknownData_X2RA, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputActionKeyMapping, key, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputActionKeyMapping, 0x0030);
		}

		// struct FHeightFogGradientEntry
		TEST_METHOD(ScriptStruct__Engine__HeightFogGradientEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightFogGradientEntry, Colour, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHeightFogGradientEntry, GradientHeight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHeightFogGradientEntry, 0x0014);
		}

		// struct FAnimNode_AssetPlayerBase : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_AssetPlayerBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, GroupRole, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, bIgnoreForRelevancyTest, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_3D59, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, BlendWeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, InternalTimeAccumulator, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_AssetPlayerBase, UnknownData_EAMR, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_AssetPlayerBase, 0x0030);
		}

		// struct FPoseLink : public FPoseLinkBase
		TEST_METHOD(ScriptStruct__Engine__PoseLink)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseLink, 0x0010);
		}

		// struct FPerBoneBlendWeight
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeight)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, SourceIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeight, BlendWeight, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeight, 0x0008);
		}

		// struct FBranchFilter
		TEST_METHOD(ScriptStruct__Engine__BranchFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchFilter, BlendDepth, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchFilter, 0x0010);
		}

		// struct FInputBlendPose
		TEST_METHOD(ScriptStruct__Engine__InputBlendPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInputBlendPose, BranchFilters, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInputBlendPose, 0x0010);
		}

		// struct FPoseSnapshot
		TEST_METHOD(ScriptStruct__Engine__PoseSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, LocalTransforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, BoneNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SkeletalMeshName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, SnapshotName, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, bIsValid, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseSnapshot, UnknownData_D07H, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseSnapshot, 0x0040);
		}

		// struct FSolverIterations
		TEST_METHOD(ScriptStruct__Engine__SolverIterations)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverIterations, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointIterations, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionIterations, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, SolverPushOutIterations, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, JointPushOutIterations, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSolverIterations, CollisionPushOutIterations, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSolverIterations, 0x0018);
		}

		// struct FAnimNode_Root : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Root)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, result, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, name, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Root, Group, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Root, 0x0038);
		}

		// struct FAnimCurveParam
		TEST_METHOD(ScriptStruct__Engine__AnimCurveParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveParam, UnknownData_2HR8, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveParam, 0x0010);
		}

		// struct FActorComponentDuplicatedObjectData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentDuplicatedObjectData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentDuplicatedObjectData, UnknownData_2WP3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentDuplicatedObjectData, 0x0010);
		}

		// struct FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_V57I, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentCreationMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, UnknownData_516N, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SourceComponentTypeSerializedIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, SavedProperties, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, DuplicatedObjects, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedObjects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActorComponentInstanceData, ReferencedNames, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActorComponentInstanceData, 0x0058);
		}

		// struct FSceneComponentInstanceData : public FActorComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SceneComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSceneComponentInstanceData, AttachedInstanceComponents, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSceneComponentInstanceData, 0x00A8);
		}

		// struct FDirectoryPath
		TEST_METHOD(ScriptStruct__Engine__DirectoryPath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectoryPath, path, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectoryPath, 0x0010);
		}

		// struct FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KShapeElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_8KIA, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, RestOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_WV9F, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKShapeElem, UnknownData_19L7, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKShapeElem, 0x0030);
		}

		// struct FKSphereElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphereElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphereElem, radius, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphereElem, 0x0040);
		}

		// struct FKBoxElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KBoxElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, x, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, y, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, z, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKBoxElem, UnknownData_XAY6, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKBoxElem, 0x0058);
		}

		// struct FKSphylElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KSphylElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, radius, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKSphylElem, length, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKSphylElem, 0x0050);
		}

		// struct FKConvexElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KConvexElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, VertexData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, IndexData, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, ElemBox, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_5OSU, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, Transform, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKConvexElem, UnknownData_ILUG, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKConvexElem, 0x00B0);
		}

		// struct FKTaperedCapsuleElem : public FKShapeElem
		TEST_METHOD(ScriptStruct__Engine__KTaperedCapsuleElem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, center, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, rotation, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius0, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, Radius1, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, length, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKTaperedCapsuleElem, UnknownData_IH8X, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKTaperedCapsuleElem, 0x0058);
		}

		// struct FKAggregateGeom
		TEST_METHOD(ScriptStruct__Engine__KAggregateGeom)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphereElems, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, BoxElems, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, SphylElems, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, ConvexElems, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, TaperedCapsuleElems, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKAggregateGeom, UnknownData_AB8J, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKAggregateGeom, 0x0058);
		}

		// struct FAnimationGroupReference
		TEST_METHOD(ScriptStruct__Engine__AnimationGroupReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, groupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, GroupRole, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationGroupReference, UnknownData_065J, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationGroupReference, 0x0010);
		}

		// struct FAnimGroupInstance
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInstance, UnknownData_XVO2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInstance, 0x0080);
		}

		// struct FAnimTickRecord
		TEST_METHOD(ScriptStruct__Engine__AnimTickRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTickRecord, UnknownData_MQDU, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTickRecord, 0x0048);
		}

		// struct FMarkerSyncAnimPosition
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncAnimPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PreviousMarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, NextMarkerName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncAnimPosition, PositionBetweenMarkers, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncAnimPosition, 0x001C);
		}

		// struct FBlendFilter
		TEST_METHOD(ScriptStruct__Engine__BlendFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendFilter, UnknownData_WS2B, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendFilter, 0x0078);
		}

		// struct FBlendSampleData
		TEST_METHOD(ScriptStruct__Engine__BlendSampleData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SampleDataIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_MC7W, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, animation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, TotalWeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, time, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, PreviousTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, SamplePlayRate, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSampleData, UnknownData_0C8R, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSampleData, 0x0040);
		}

		// struct FAnimationRecordingSettings
		TEST_METHOD(ScriptStruct__Engine__AnimationRecordingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRecordInWorldSpace, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bRemoveRootAnimation, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, bAutoSaveAsset, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_ER6T, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, SampleRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, length, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, InterpMode, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, TangentMode, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationRecordingSettings, UnknownData_AX7V, 0x000E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationRecordingSettings, 0x0010);
		}

		// struct FComponentSpacePose
		TEST_METHOD(ScriptStruct__Engine__ComponentSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentSpacePose, 0x0020);
		}

		// struct FLocalSpacePose
		TEST_METHOD(ScriptStruct__Engine__LocalSpacePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Transforms, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocalSpacePose, Names, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocalSpacePose, 0x0020);
		}

		// struct FNamedTransform
		TEST_METHOD(ScriptStruct__Engine__NamedTransform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, name, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedTransform, UnknownData_613V, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedTransform, 0x0040);
		}

		// struct FNamedColor
		TEST_METHOD(ScriptStruct__Engine__NamedColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedColor, name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedColor, 0x0010);
		}

		// struct FNamedVector
		TEST_METHOD(ScriptStruct__Engine__NamedVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedVector, name, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedVector, 0x0018);
		}

		// struct FNamedFloat
		TEST_METHOD(ScriptStruct__Engine__NamedFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedFloat, name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedFloat, 0x0010);
		}

		// struct FAnimParentNodeAssetOverride
		TEST_METHOD(ScriptStruct__Engine__AnimParentNodeAssetOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, NewAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimParentNodeAssetOverride, ParentNodeGuid, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimParentNodeAssetOverride, 0x0018);
		}

		// struct FAnimGroupInfo
		TEST_METHOD(ScriptStruct__Engine__AnimGroupInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGroupInfo, color, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGroupInfo, 0x001C);
		}

		// struct FAnimBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintDebugData, UnknownData_88SS, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintDebugData, 0x0001);
		}

		// struct FAnimationFrameSnapshot
		TEST_METHOD(ScriptStruct__Engine__AnimationFrameSnapshot)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationFrameSnapshot, UnknownData_ZYNT, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationFrameSnapshot, 0x0001);
		}

		// struct FStateMachineDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineDebugData, UnknownData_94M2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineDebugData, 0x00B0);
		}

		// struct FStateMachineStateDebugData
		TEST_METHOD(ScriptStruct__Engine__StateMachineStateDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStateMachineStateDebugData, UnknownData_2LBP, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStateMachineStateDebugData, 0x0010);
		}

		// struct FAnimBlueprintFunctionData
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunctionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, OutputPoseNodeProperty, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputPoseNodeProperties, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunctionData, InputProperties, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunctionData, 0x0040);
		}

		// struct FAnimGraphBlendOptions
		TEST_METHOD(ScriptStruct__Engine__AnimGraphBlendOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, BlendInTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimGraphBlendOptions, blendOutTime, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimGraphBlendOptions, 0x0008);
		}

		// struct FGraphAssetPlayerInformation
		TEST_METHOD(ScriptStruct__Engine__GraphAssetPlayerInformation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphAssetPlayerInformation, PlayerNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphAssetPlayerInformation, 0x0010);
		}

		// struct FCachedPoseIndices
		TEST_METHOD(ScriptStruct__Engine__CachedPoseIndices)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedPoseIndices, OrderedSavedPoseNodeIndices, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedPoseIndices, 0x0010);
		}

		// struct FAnimBlueprintFunction
		TEST_METHOD(ScriptStruct__Engine__AnimBlueprintFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, Group, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, OutputPoseNodeIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_IZDL, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, InputPoseNodeIndices, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_ERHE, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, bImplemented, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimBlueprintFunction, UnknownData_IPMM, 0x0069);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimBlueprintFunction, 0x0070);
		}

		// struct FAnimSegment
		TEST_METHOD(ScriptStruct__Engine__AnimSegment)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, StartPos, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimStartTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimEndTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, AnimPlayRate, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, LoopingCount, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSegment, UnknownData_E6H7, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSegment, 0x0020);
		}

		// struct FAnimTrack
		TEST_METHOD(ScriptStruct__Engine__AnimTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimTrack, AnimSegments, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimTrack, 0x0010);
		}

		// struct FRootMotionExtractionStep
		TEST_METHOD(ScriptStruct__Engine__RootMotionExtractionStep)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, AnimSequence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, StartPosition, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionExtractionStep, EndPosition, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionExtractionStep, 0x0010);
		}

		// struct FAnimationErrorStats
		TEST_METHOD(ScriptStruct__Engine__AnimationErrorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationErrorStats, UnknownData_IJ3I, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationErrorStats, 0x0010);
		}

		// struct FSmartName
		TEST_METHOD(ScriptStruct__Engine__SmartName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartName, UnknownData_7Q8J, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartName, 0x0010);
		}

		// struct FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__AnimCurveBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, LastObservedName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, name, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveBase, CurveTypeFlags, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveBase, 0x0020);
		}

		// struct FFloatCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__FloatCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatCurve, FloatCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatCurve, 0x00A0);
		}

		// struct FRawCurveTracks
		TEST_METHOD(ScriptStruct__Engine__RawCurveTracks)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawCurveTracks, FloatCurves, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawCurveTracks, 0x0010);
		}

		// struct FVectorCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__VectorCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorCurve, FloatCurves, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorCurve, 0x01A0);
		}

		// struct FTransformCurve : public FAnimCurveBase
		TEST_METHOD(ScriptStruct__Engine__TransformCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, TranslationCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, RotationCurve, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformCurve, ScaleCurve, 0x0360);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformCurve, 0x0500);
		}

		// struct FSlotEvaluationPose
		TEST_METHOD(ScriptStruct__Engine__SlotEvaluationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, AdditiveType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_0VMO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, Weight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotEvaluationPose, UnknownData_INBT, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotEvaluationPose, 0x0040);
		}

		// struct FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2Pose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2Pose, Bones, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2Pose, 0x0010);
		}

		// struct FA2CSPose : public FA2Pose
		TEST_METHOD(ScriptStruct__Engine__A2CSPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, UnknownData_K5TB, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FA2CSPose, ComponentSpaceFlags, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FA2CSPose, 0x0028);
		}

		// struct FQueuedDrawDebugItem
		TEST_METHOD(ScriptStruct__Engine__QueuedDrawDebugItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, itemType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_WZ30, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, StartLoc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, EndLoc, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, center, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, radius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Size, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Segments, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, color, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, bPersistentLines, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, UnknownData_W0BY, 0x0045);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, lifeTime, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, Thickness, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, message, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FQueuedDrawDebugItem, TextScale, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FQueuedDrawDebugItem, 0x0068);
		}

		// struct FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimLinkableElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_MEAB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedMontage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, slotIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkMethod, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, CachedLinkMethod, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, UnknownData_57J4, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentBeginTime, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, SegmentLength, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimLinkableElement, LinkedSequence, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimLinkableElement, 0x0030);
		}

		// struct FAnimNotifyEvent : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, DisplayTime, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerTimeOffset, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndTriggerTimeOffset, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TriggerWeightThreshold, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, notifyName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_M8MX, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, Notify, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyStateClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, duration, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_IPZ8, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, EndLink, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bConvertedFromBranchingPoint, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, MontageTickType, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_90NH, 0x009A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyTriggerChance, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterType, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_UK6U, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, NotifyFilterLOD, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnDedicatedServer, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, bTriggerOnFollower, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_QHJM, 0x00AA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, TrackIndex, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEvent, UnknownData_VY2H, 0x00B0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEvent, 0x00C8);
		}

		// struct FAnimMontageInstance
		TEST_METHOD(ScriptStruct__Engine__AnimMontageInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, montage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_BCZV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, bPlaying, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_12Y4, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DefaultBlendTimeMultiplier, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_E0K8, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, NextSections, 0x00E8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, PrevSections, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_MMM7, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, ActiveStateBranchingPoints, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, position, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, playRate, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, blend, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_FMMK, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, DisableRootMotionCount, 0x0188);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimMontageInstance, UnknownData_7FVJ, 0x018C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimMontageInstance, 0x01C0);
		}

		// struct FBranchingPointMarker
		TEST_METHOD(ScriptStruct__Engine__BranchingPointMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, TriggerTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, NotifyEventType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPointMarker, UnknownData_BFFO, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPointMarker, 0x000C);
		}

		// struct FBranchingPoint : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__BranchingPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, EventName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, DisplayTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, TriggerTimeOffset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBranchingPoint, UnknownData_2ZTZ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBranchingPoint, 0x0048);
		}

		// struct FSlotAnimationTrack
		TEST_METHOD(ScriptStruct__Engine__SlotAnimationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, UnknownData_O44J, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSlotAnimationTrack, AnimTrack, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSlotAnimationTrack, 0x0020);
		}

		// struct FCompositeSection : public FAnimLinkableElement
		TEST_METHOD(ScriptStruct__Engine__CompositeSection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, SectionName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, startTime, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, NextSectionName, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, UnknownData_1CM3, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompositeSection, Metadata, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompositeSection, 0x0060);
		}

		// struct FAnimNode_ApplyMeshSpaceAdditive : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ApplyMeshSpaceAdditive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Base, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Additive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaInputType, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_ZPYV, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, Alpha, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_HO28, 0x0039);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaBoolBlend, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaCurveName, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBias, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, AlphaScaleBiasClamp, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, LODThreshold, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ApplyMeshSpaceAdditive, UnknownData_U5FX, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ApplyMeshSpaceAdditive, 0x00D8);
		}

		// struct FAnimNode_CustomProperty : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_CustomProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, SourcePropertyNames, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, DestPropertyNames, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, TargetInstance, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_CustomProperty, UnknownData_2WHJ, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_CustomProperty, 0x0058);
		}

		// struct FAnimNode_Inertialization : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_Inertialization)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, source, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_Inertialization, UnknownData_SSR0, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_Inertialization, 0x0070);
		}

		// struct FInertializationPoseDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationPoseDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPoseDiff, UnknownData_DR5D, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPoseDiff, 0x0028);
		}

		// struct FInertializationCurveDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationCurveDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationCurveDiff, UnknownData_2MOM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationCurveDiff, 0x0008);
		}

		// struct FInertializationBoneDiff
		TEST_METHOD(ScriptStruct__Engine__InertializationBoneDiff)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationBoneDiff, UnknownData_63FI, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationBoneDiff, 0x003C);
		}

		// struct FInertializationPose
		TEST_METHOD(ScriptStruct__Engine__InertializationPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInertializationPose, UnknownData_Q2A8, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInertializationPose, 0x0090);
		}

		// struct FAnimNode_LinkedAnimGraph : public FAnimNode_CustomProperty
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimGraph)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoses, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InputPoseNames, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, InstanceClass, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, tag, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_W65D, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimGraph, UnknownData_CME3, 0x00A1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimGraph, 0x00A8);
		}

		// struct FAnimNode_LinkedAnimLayer : public FAnimNode_LinkedAnimGraph
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedAnimLayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Interface, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, Layer, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedAnimLayer, UnknownData_I102, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedAnimLayer, 0x00C0);
		}

		// struct FAnimNode_LinkedInputPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_LinkedInputPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, Graph, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, InputPose, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_LinkedInputPose, UnknownData_EVI2, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_LinkedInputPose, 0x0080);
		}

		// struct FAnimNode_SaveCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SaveCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, Pose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SaveCachedPose, UnknownData_DBB6, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SaveCachedPose, 0x00B8);
		}

		// struct FAnimNode_SequencePlayer : public FAnimNode_AssetPlayerBase
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SequencePlayer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, sequence, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateBasis, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, playRate, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, PlayRateScaleBiasClamp, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, StartPosition, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, bLoopAnimation, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SequencePlayer, UnknownData_HTS7, 0x0075);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SequencePlayer, 0x0078);
		}

		// struct FAnimNode_StateMachine : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_StateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, StateMachineIndexInClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, MaxTransitionsPerFrame, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bSkipFirstUpdateTransition, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, bReinitializeOnBecomingRelevant, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_StateMachine, UnknownData_HGOW, 0x001A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_StateMachine, 0x00B0);
		}

		// struct FAnimationPotentialTransition
		TEST_METHOD(ScriptStruct__Engine__AnimationPotentialTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationPotentialTransition, UnknownData_H1BG, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationPotentialTransition, 0x0030);
		}

		// struct FAnimationActiveTransitionEntry
		TEST_METHOD(ScriptStruct__Engine__AnimationActiveTransitionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_YQHS, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, BlendProfile, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationActiveTransitionEntry, UnknownData_PYZ4, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationActiveTransitionEntry, 0x00C8);
		}

		// struct FAnimNode_TransitionPoseEvaluator : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionPoseEvaluator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_DL0F, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, FramesToCachePose, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_LR6L, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, DataSource, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, EvaluatorMode, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionPoseEvaluator, UnknownData_4HR4, 0x0052);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionPoseEvaluator, 0x0058);
		}

		// struct FAnimNode_TransitionResult : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_TransitionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, bCanEnterTransition, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_TransitionResult, UnknownData_U1EQ, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_TransitionResult, 0x0028);
		}

		// struct FAnimNode_UseCachedPose : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_UseCachedPose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, LinkToCachingNode, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, CachePoseName, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_UseCachedPose, UnknownData_0UU6, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_UseCachedPose, 0x0030);
		}

		// struct FExposedValueCopyRecord
		TEST_METHOD(ScriptStruct__Engine__ExposedValueCopyRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourcePropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceSubPropertyName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, SourceArrayIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, bInstanceIsTarget, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, PostCopyOperation, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CopyType, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, UnknownData_UZEX, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestProperty, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, DestArrayIndex, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, Size, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceProperty, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueCopyRecord, CachedSourceStructSubProperty, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueCopyRecord, 0x0088);
		}

		// struct FExposedValueHandler
		TEST_METHOD(ScriptStruct__Engine__ExposedValueHandler)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, BoundFunction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_4TRS, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, CopyRecords, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, Function, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, ValueHandlerNodeProperty, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposedValueHandler, UnknownData_3X1E, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposedValueHandler, 0x0050);
		}

		// struct FAnimNode_ConvertLocalToComponentSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertLocalToComponentSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertLocalToComponentSpace, LocalPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertLocalToComponentSpace, 0x0020);
		}

		// struct FAnimNode_ConvertComponentToLocalSpace : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_ConvertComponentToLocalSpace)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_ConvertComponentToLocalSpace, ComponentPose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_ConvertComponentToLocalSpace, 0x0020);
		}

		// struct FAnimNotifyEventReference
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyEventReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, UnknownData_TIEW, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyEventReference, NotifySource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyEventReference, 0x0010);
		}

		// struct FAnimNotifyArray
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyArray, Notifies, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyArray, 0x0010);
		}

		// struct FAnimNotifyQueue
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyQueue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnknownData_AEX8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, AnimNotifies, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyQueue, UnfilteredMontageAnimNotifies, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyQueue, 0x0070);
		}

		// struct FCompressedTrack
		TEST_METHOD(ScriptStruct__Engine__CompressedTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, ByteStream, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Times, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Mins, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedTrack, Ranges, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedTrack, 0x0038);
		}

		// struct FCurveTrack
		TEST_METHOD(ScriptStruct__Engine__CurveTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, UnknownData_P3GF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTrack, CurveWeights, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTrack, 0x0020);
		}

		// struct FScaleTrack
		TEST_METHOD(ScriptStruct__Engine__ScaleTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, ScaleKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScaleTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScaleTrack, 0x0020);
		}

		// struct FRotationTrack
		TEST_METHOD(ScriptStruct__Engine__RotationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, RotKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRotationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRotationTrack, 0x0020);
		}

		// struct FTranslationTrack
		TEST_METHOD(ScriptStruct__Engine__TranslationTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTranslationTrack, Times, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTranslationTrack, 0x0020);
		}

		// struct FRawAnimSequenceTrack
		TEST_METHOD(ScriptStruct__Engine__RawAnimSequenceTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, PosKeys, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, RotKeys, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawAnimSequenceTrack, ScaleKeys, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawAnimSequenceTrack, 0x0030);
		}

		// struct FAnimSequenceTrackContainer
		TEST_METHOD(ScriptStruct__Engine__AnimSequenceTrackContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, AnimationTracks, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSequenceTrackContainer, TrackNames, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSequenceTrackContainer, 0x0020);
		}

		// struct FAnimSetMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__AnimSetMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSetMeshLinkup, BoneToTrackTable, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSetMeshLinkup, 0x0010);
		}

		// struct FAnimSingleNodeInstanceProxy : public FAnimInstanceProxy
		TEST_METHOD(ScriptStruct__Engine__AnimSingleNodeInstanceProxy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSingleNodeInstanceProxy, UnknownData_CG1B, 0x06E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSingleNodeInstanceProxy, 0x0830);
		}

		// struct FAnimNode_SingleNode : public FAnimNode_Base
		TEST_METHOD(ScriptStruct__Engine__AnimNode_SingleNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, SourcePose, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNode_SingleNode, UnknownData_34ET, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNode_SingleNode, 0x0038);
		}

		// struct FBakedStateExitTransition
		TEST_METHOD(ScriptStruct__Engine__BakedStateExitTransition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CanTakeDelegateIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, CustomResultNodeIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, TransitionIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bDesiredTransitionReturnValue, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, bAutomaticRemainingTimeRule, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, UnknownData_0DJ7, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedStateExitTransition, PoseEvaluatorLinks, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedStateExitTransition, 0x0020);
		}

		// struct FBakedAnimationState
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, stateName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_OHGO, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, Transitions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StateRootNodeIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, StartNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EndNotify, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, FullyBlendedNotify, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bIsAConduit, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_HYYZ, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, EntryRuleNodeIndex, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, PlayerNodeIndices, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, LayerNodeIndices, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, bAlwaysResetOnEntry, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationState, UnknownData_GGNC, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationState, 0x0060);
		}

		// struct FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationStateBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationStateBase, stateName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationStateBase, 0x000C);
		}

		// struct FAnimationTransitionBetweenStates : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionBetweenStates)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, PreviousState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, NextState, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CrossfadeDuration, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, StartNotify, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, EndNotify, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, InterruptNotify, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendMode, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_986X, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, CustomCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, BlendProfile, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, LogicType, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionBetweenStates, UnknownData_1UD4, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionBetweenStates, 0x0040);
		}

		// struct FBakedAnimationStateMachine
		TEST_METHOD(ScriptStruct__Engine__BakedAnimationStateMachine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, MachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, InitialState, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, States, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBakedAnimationStateMachine, Transitions, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBakedAnimationStateMachine, 0x0030);
		}

		// struct FAnimationTransitionRule
		TEST_METHOD(ScriptStruct__Engine__AnimationTransitionRule)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, RuleToExecute, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionReturnVal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, UnknownData_XTMF, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationTransitionRule, TransitionIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationTransitionRule, 0x0014);
		}

		// struct FAnimationState : public FAnimationStateBase
		TEST_METHOD(ScriptStruct__Engine__AnimationState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, UnknownData_VEC0, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, Transitions, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StateRootNodeIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, StartNotify, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, EndNotify, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimationState, FullyBlendedNotify, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimationState, 0x0030);
		}

		// struct FTrackToSkeletonMap
		TEST_METHOD(ScriptStruct__Engine__TrackToSkeletonMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackToSkeletonMap, BoneTreeIndex, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackToSkeletonMap, 0x0004);
		}

		// struct FAnimSyncMarker
		TEST_METHOD(ScriptStruct__Engine__AnimSyncMarker)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, MarkerName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSyncMarker, time, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSyncMarker, 0x0010);
		}

		// struct FMarkerSyncData
		TEST_METHOD(ScriptStruct__Engine__MarkerSyncData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, AuthoredSyncMarkers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMarkerSyncData, UnknownData_VF94, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMarkerSyncData, 0x0020);
		}

		// struct FAnimNotifyTrack
		TEST_METHOD(ScriptStruct__Engine__AnimNotifyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, TrackColor, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimNotifyTrack, UnknownData_6G6F, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimNotifyTrack, 0x0040);
		}

		// struct FPerBoneBlendWeights
		TEST_METHOD(ScriptStruct__Engine__PerBoneBlendWeights)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneBlendWeights, BoneBlendWeights, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneBlendWeights, 0x0010);
		}

		// struct FAssetImportInfo
		TEST_METHOD(ScriptStruct__Engine__AssetImportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetImportInfo, UnknownData_648N, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetImportInfo, 0x0001);
		}

		// struct FPrimaryAssetRules
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRules)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, priority, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, ChunkId, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, bApplyRecursively, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, CookRule, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRules, UnknownData_4LQ2, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRules, 0x000C);
		}

		// struct FPrimaryAssetRulesCustomOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesCustomOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_631W, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterDirectory, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, FilterString, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, Rules, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesCustomOverride, UnknownData_1Z5E, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesCustomOverride, 0x0040);
		}

		// struct FPrimaryAssetRulesOverride
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetRulesOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, PrimaryAssetId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetRulesOverride, Rules, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetRulesOverride, 0x0024);
		}

		// struct FAssetManagerRedirect
		TEST_METHOD(ScriptStruct__Engine__AssetManagerRedirect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, Old, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetManagerRedirect, New, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetManagerRedirect, 0x0020);
		}

		// struct FPrimaryAssetTypeInfo
		TEST_METHOD(ScriptStruct__Engine__PrimaryAssetTypeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, PrimaryAssetType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_Z72T, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetBaseClassLoaded, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bHasBlueprintClasses, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsEditorOnly, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_63XF, 0x004A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Directories, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, SpecificAssets, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, Rules, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_AXHQ, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, AssetScanPaths, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, bIsDynamicAsset, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, UnknownData_SCAU, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimaryAssetTypeInfo, NumberOfAssets, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimaryAssetTypeInfo, 0x0098);
		}

		// struct FAssetMapping
		TEST_METHOD(ScriptStruct__Engine__AssetMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, SourceAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetMapping, TargetAsset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetMapping, 0x0010);
		}

		// struct FAtmospherePrecomputeInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeInstanceData, UnknownData_ZE42, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeInstanceData, 0x0150);
		}

		// struct FAtmospherePrecomputeParameters
		TEST_METHOD(ScriptStruct__Engine__AtmospherePrecomputeParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DensityHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, DecayHeight, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, MaxScatteringOrder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexWidth, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, TransmittanceTexHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexWidth, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, IrradianceTexHeight, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterAltitudeSampleNum, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuNum, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterMuSNum, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAtmospherePrecomputeParameters, InscatterNuNum, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAtmospherePrecomputeParameters, 0x002C);
		}

		// struct FAudioComponentParam
		TEST_METHOD(ScriptStruct__Engine__AudioComponentParam)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, FloatParam, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, BoolParam, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, UnknownData_GNKG, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, IntParam, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioComponentParam, SoundWaveParam, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioComponentParam, 0x0020);
		}

		// struct FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEffectParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEffectParameters, UnknownData_PYVQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEffectParameters, 0x0008);
		}

		// struct FAudioReverbEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioReverbEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioReverbEffect, UnknownData_YNPI, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioReverbEffect, 0x0048);
		}

		// struct FAudioQualitySettings
		TEST_METHOD(ScriptStruct__Engine__AudioQualitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, MaxChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioQualitySettings, UnknownData_AZR3, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioQualitySettings, 0x0020);
		}

		// struct FInteriorSettings
		TEST_METHOD(ScriptStruct__Engine__InteriorSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, bIsWorldSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, UnknownData_4DB3, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorVolume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorTime, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, ExteriorLPFTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorVolume, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorTime, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInteriorSettings, InteriorLPFTime, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInteriorSettings, 0x0024);
		}

		// struct FFilePath
		TEST_METHOD(ScriptStruct__Engine__FilePath)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilePath, FilePath, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilePath, 0x0010);
		}

		// struct FLaunchOnTestSettings
		TEST_METHOD(ScriptStruct__Engine__LaunchOnTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, LaunchOnTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLaunchOnTestSettings, DeviceId, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLaunchOnTestSettings, 0x0020);
		}

		// struct FEditorMapPerformanceTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorMapPerformanceTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, PerformanceTestmap, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, TestTimer, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorMapPerformanceTestDefinition, UnknownData_IOLX, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorMapPerformanceTestDefinition, 0x0028);
		}

		// struct FImportFactorySettingValues
		TEST_METHOD(ScriptStruct__Engine__ImportFactorySettingValues)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, SettingName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportFactorySettingValues, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportFactorySettingValues, 0x0020);
		}

		// struct FEditorImportWorkflowDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportWorkflowDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportWorkflowDefinition, FactorySettings, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportWorkflowDefinition, 0x0020);
		}

		// struct FBuildPromotionImportWorkflowSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionImportWorkflowSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Diffuse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, normal, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, StaticMesh, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, ReimportStaticMesh, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, BlendShapeMesh, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, MorphMesh, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SkeletalMesh, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, animation, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, Sound, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, SurroundSound, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionImportWorkflowSettings, OtherAssetsToImport, 0x0140);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionImportWorkflowSettings, 0x0150);
		}

		// struct FBuildPromotionOpenAssetSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionOpenAssetSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, BlueprintAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, MaterialAsset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, ParticleSystemAsset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, SkeletalMeshAsset, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, StaticMeshAsset, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionOpenAssetSettings, TextureAsset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionOpenAssetSettings, 0x0060);
		}

		// struct FBuildPromotionNewProjectSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionNewProjectSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectFolderOverride, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionNewProjectSettings, NewProjectNameOverride, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionNewProjectSettings, 0x0020);
		}

		// struct FBuildPromotionTestSettings
		TEST_METHOD(ScriptStruct__Engine__BuildPromotionTestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, DefaultStaticMeshAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, ImportWorkflow, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, OpenAssets, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, NewProjectSettings, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuildPromotionTestSettings, SourceControlMaterial, 0x01E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuildPromotionTestSettings, 0x01F0);
		}

		// struct FBlueprintEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__BlueprintEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, FirstMeshPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, SecondMeshPath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintEditorPromotionSettings, DefaultParticleAsset, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintEditorPromotionSettings, 0x0030);
		}

		// struct FParticleEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__ParticleEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEditorPromotionSettings, DefaultParticleAsset, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEditorPromotionSettings, 0x0010);
		}

		// struct FMaterialEditorPromotionSettings
		TEST_METHOD(ScriptStruct__Engine__MaterialEditorPromotionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultMaterialAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultDiffuseTexture, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialEditorPromotionSettings, DefaultNormalTexture, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialEditorPromotionSettings, 0x0030);
		}

		// struct FEditorImportExportTestDefinition
		TEST_METHOD(ScriptStruct__Engine__EditorImportExportTestDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ImportFilePath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, ExportFileExtension, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, bSkipExport, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, UnknownData_6C8B, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorImportExportTestDefinition, FactorySettings, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorImportExportTestDefinition, 0x0038);
		}

		// struct FExternalToolDefinition
		TEST_METHOD(ScriptStruct__Engine__ExternalToolDefinition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ToolName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ExecutablePath, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, CommandLineOptions, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, WorkingDirectory, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptExtension, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExternalToolDefinition, ScriptDirectory, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExternalToolDefinition, 0x0060);
		}

		// struct FNavAvoidanceData
		TEST_METHOD(ScriptStruct__Engine__NavAvoidanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAvoidanceData, UnknownData_CCG2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAvoidanceData, 0x003C);
		}

		// struct FBandwidthTestItem
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestItem, Kilobyte, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestItem, 0x0010);
		}

		// struct FBandwidthTestGenerator
		TEST_METHOD(ScriptStruct__Engine__BandwidthTestGenerator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, ReplicatedBuffers, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBandwidthTestGenerator, UnknownData_VGHV, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBandwidthTestGenerator, 0x0020);
		}

		// struct FBHVRPerDetailModeBool
		TEST_METHOD(ScriptStruct__Engine__BHVRPerDetailModeBool)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBHVRPerDetailModeBool, PerDetailModeValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBHVRPerDetailModeBool, PerDetailModeOverride, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBHVRPerDetailModeBool, 0x00A0);
		}

		// struct FBHVRPerDetailModeFloat
		TEST_METHOD(ScriptStruct__Engine__BHVRPerDetailModeFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBHVRPerDetailModeFloat, PerDetailModeValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBHVRPerDetailModeFloat, PerDetailModeOverride, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBHVRPerDetailModeFloat, 0x00A0);
		}

		// struct FBHVRPerDetailModeInt
		TEST_METHOD(ScriptStruct__Engine__BHVRPerDetailModeInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBHVRPerDetailModeInt, PerDetailModeValue, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBHVRPerDetailModeInt, PerDetailModeOverride, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBHVRPerDetailModeInt, 0x00A0);
		}

		// struct FBlendProfileBoneEntry
		TEST_METHOD(ScriptStruct__Engine__BlendProfileBoneEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendProfileBoneEntry, BlendScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendProfileBoneEntry, 0x0018);
		}

		// struct FPerBoneInterpolation
		TEST_METHOD(ScriptStruct__Engine__PerBoneInterpolation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, BoneReference, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerBoneInterpolation, InterpolationSpeedPerSec, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerBoneInterpolation, 0x0018);
		}

		// struct FEditorElement
		TEST_METHOD(ScriptStruct__Engine__EditorElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Indices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditorElement, Weights, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditorElement, 0x0018);
		}

		// struct FGridBlendSample
		TEST_METHOD(ScriptStruct__Engine__GridBlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, GridElement, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGridBlendSample, BlendWeight, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGridBlendSample, 0x001C);
		}

		// struct FBlendSample
		TEST_METHOD(ScriptStruct__Engine__BlendSample)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, animation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, SampleValue, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendSample, RateScale, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendSample, 0x0018);
		}

		// struct FBlendParameter
		TEST_METHOD(ScriptStruct__Engine__BlendParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, DisplayName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, min, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, max, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, GridNum, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlendParameter, UnknownData_9BIC, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlendParameter, 0x0020);
		}

		// struct FInterpolationParameter
		TEST_METHOD(ScriptStruct__Engine__InterpolationParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, InterpolationType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpolationParameter, UnknownData_LBEG, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpolationParameter, 0x0008);
		}

		// struct FBPEditorBookmarkNode
		TEST_METHOD(ScriptStruct__Engine__BPEditorBookmarkNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, NodeGuid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, ParentGuid, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPEditorBookmarkNode, DisplayName, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPEditorBookmarkNode, 0x0038);
		}

		// struct FEditedDocumentInfo
		TEST_METHOD(ScriptStruct__Engine__EditedDocumentInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObjectPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedViewOffset, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, SavedZoomAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, UnknownData_RPFB, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEditedDocumentInfo, EditedObject, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEditedDocumentInfo, 0x0038);
		}

		// struct FBPInterfaceDescription
		TEST_METHOD(ScriptStruct__Engine__BPInterfaceDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Interface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPInterfaceDescription, Graphs, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPInterfaceDescription, 0x0018);
		}

		// struct FEdGraphTerminalType
		TEST_METHOD(ScriptStruct__Engine__EdGraphTerminalType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategory, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, TerminalSubCategoryObject, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsConst, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, bTerminalIsWeakPointer, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphTerminalType, UnknownData_4D42, 0x0022);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphTerminalType, 0x0024);
		}

		// struct FEdGraphPinType
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinCategory, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategory, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryObject, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinSubCategoryMemberReference, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, PinValueType, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, ContainerType, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinType, UnknownData_IT90, 0x006E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinType, 0x0070);
		}

		// struct FBPVariableMetaDataEntry
		TEST_METHOD(ScriptStruct__Engine__BPVariableMetaDataEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, UnknownData_RMTA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableMetaDataEntry, DataValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableMetaDataEntry, 0x0020);
		}

		// struct FBPVariableDescription
		TEST_METHOD(ScriptStruct__Engine__BPVariableDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, varName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarGuid, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_BQB0, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, VarType, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, FriendlyName, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, category, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, PropertyFlags, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, RepNotifyFunc, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, ReplicationCondition, 0x00CC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, UnknownData_82WX, 0x00CD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, MetaDataArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPVariableDescription, DefaultValue, 0x00E0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPVariableDescription, 0x00F0);
		}

		// struct FBlueprintMacroCosmeticInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintMacroCosmeticInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintMacroCosmeticInfo, UnknownData_9SEY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintMacroCosmeticInfo, 0x0001);
		}

		// struct FCompilerNativizationOptions
		TEST_METHOD(ScriptStruct__Engine__CompilerNativizationOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, PlatformName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ServerOnlyPlatform, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ClientOnlyPlatform, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, bExcludeMonolithicHeaders, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, UnknownData_253S, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedModules, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedAssets, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompilerNativizationOptions, ExcludedFolderPaths, 0x0070);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompilerNativizationOptions, 0x0080);
		}

		// struct FBPComponentClassOverride
		TEST_METHOD(ScriptStruct__Engine__BPComponentClassOverride)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, UnknownData_USF9, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBPComponentClassOverride, ComponentClass, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBPComponentClassOverride, 0x0018);
		}

		// struct FBlueprintComponentChangedPropertyInfo
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentChangedPropertyInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, propertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, ArrayIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentChangedPropertyInfo, PropertyScope, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentChangedPropertyInfo, 0x0018);
		}

		// struct FBlueprintCookedComponentInstancingData
		TEST_METHOD(ScriptStruct__Engine__BlueprintCookedComponentInstancingData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, ChangedPropertyList, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_VK68, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, bHasValidCookedData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintCookedComponentInstancingData, UnknownData_GHEH, 0x002A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintCookedComponentInstancingData, 0x0050);
		}

		// struct FEventGraphFastCallPair
		TEST_METHOD(ScriptStruct__Engine__EventGraphFastCallPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, FunctionToPatch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, EventGraphCallOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventGraphFastCallPair, UnknownData_DTPC, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventGraphFastCallPair, 0x0010);
		}

		// struct FBlueprintDebugData
		TEST_METHOD(ScriptStruct__Engine__BlueprintDebugData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintDebugData, UnknownData_7NXU, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintDebugData, 0x0001);
		}

		// struct FPointerToUberGraphFrame
		TEST_METHOD(ScriptStruct__Engine__PointerToUberGraphFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointerToUberGraphFrame, UnknownData_3ON3, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointerToUberGraphFrame, 0x0008);
		}

		// struct FDebuggingInfoForSingleFunction
		TEST_METHOD(ScriptStruct__Engine__DebuggingInfoForSingleFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebuggingInfoForSingleFunction, UnknownData_K39M, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebuggingInfoForSingleFunction, 0x0190);
		}

		// struct FNodeToCodeAssociation
		TEST_METHOD(ScriptStruct__Engine__NodeToCodeAssociation)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeToCodeAssociation, UnknownData_ZZDC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeToCodeAssociation, 0x0014);
		}

		// struct FAnimCurveType
		TEST_METHOD(ScriptStruct__Engine__AnimCurveType)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimCurveType, UnknownData_P2VD, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimCurveType, 0x0002);
		}

		// struct FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkBaseJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmarkBaseJumpToSettings, UnknownData_54IB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkBaseJumpToSettings, 0x0001);
		}

		// struct FBookmarkJumpToSettings : public FBookmarkBaseJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__BookmarkJumpToSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmarkJumpToSettings, 0x0001);
		}

		// struct FBookmark2DJumpToSettings
		TEST_METHOD(ScriptStruct__Engine__Bookmark2DJumpToSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBookmark2DJumpToSettings, UnknownData_3KS2, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBookmark2DJumpToSettings, 0x0001);
		}

		// struct FBuilderPoly
		TEST_METHOD(ScriptStruct__Engine__BuilderPoly)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, VertexIndices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, direction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, itemName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, PolyFlags, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBuilderPoly, UnknownData_QBWW, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBuilderPoly, 0x0028);
		}

		// struct FCachedAnimTransitionData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimTransitionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, FromStateName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, ToStateName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimTransitionData, UnknownData_ZIIE, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimTransitionData, 0x0030);
		}

		// struct FCachedAnimRelevancyData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimRelevancyData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, stateName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimRelevancyData, UnknownData_LD3K, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimRelevancyData, 0x0024);
		}

		// struct FCachedAnimAssetPlayerData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimAssetPlayerData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, stateName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimAssetPlayerData, UnknownData_D936, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimAssetPlayerData, 0x0020);
		}

		// struct FCachedAnimStateData
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, StateMachineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, stateName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateData, UnknownData_UH50, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateData, 0x0024);
		}

		// struct FCachedAnimStateArray
		TEST_METHOD(ScriptStruct__Engine__CachedAnimStateArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, States, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedAnimStateArray, UnknownData_60YO, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedAnimStateArray, 0x0018);
		}

		// struct FActiveCameraShakeInfo
		TEST_METHOD(ScriptStruct__Engine__ActiveCameraShakeInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeInstance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveCameraShakeInfo, ShakeSource, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveCameraShakeInfo, 0x0010);
		}

		// struct FPooledCameraShakes
		TEST_METHOD(ScriptStruct__Engine__PooledCameraShakes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPooledCameraShakes, PooledShakes, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPooledCameraShakes, 0x0010);
		}

		// struct FFOscillator
		TEST_METHOD(ScriptStruct__Engine__FOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, amplitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, InitialOffset, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, Waveform, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFOscillator, UnknownData_I186, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFOscillator, 0x000C);
		}

		// struct FVOscillator
		TEST_METHOD(ScriptStruct__Engine__VOscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, x, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, y, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVOscillator, z, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVOscillator, 0x0024);
		}

		// struct FROscillator
		TEST_METHOD(ScriptStruct__Engine__ROscillator)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Pitch, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Yaw, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FROscillator, Roll, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FROscillator, 0x0024);
		}

		// struct FDummySpacerCameraTypes
		TEST_METHOD(ScriptStruct__Engine__DummySpacerCameraTypes)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDummySpacerCameraTypes, UnknownData_CT0W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDummySpacerCameraTypes, 0x0001);
		}

		// struct FCanvasIcon
		TEST_METHOD(ScriptStruct__Engine__CanvasIcon)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, U, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, V, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, UL, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasIcon, VL, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasIcon, 0x0018);
		}

		// struct FWrappedStringElement
		TEST_METHOD(ScriptStruct__Engine__WrappedStringElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, Value, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FWrappedStringElement, LineExtent, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FWrappedStringElement, 0x0018);
		}

		// struct FTextSizingParameters
		TEST_METHOD(ScriptStruct__Engine__TextSizingParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawXL, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawYL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, Scaling, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, DrawFont, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextSizingParameters, SpacingAdjust, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextSizingParameters, 0x0028);
		}

		// struct FCharacterMovementComponentPostPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__CharacterMovementComponentPostPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCharacterMovementComponentPostPhysicsTickFunction, UnknownData_TOVS, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCharacterMovementComponentPostPhysicsTickFunction, 0x0030);
		}

		// struct FVector_NetQuantize : public Fvector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantize)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantize, 0x000C);
		}

		// struct FVector_NetQuantizeNormal : public Fvector
		TEST_METHOD(ScriptStruct__Engine__Vector_NetQuantizeNormal)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVector_NetQuantizeNormal, 0x000C);
		}

		// struct FhitResult
		TEST_METHOD(ScriptStruct__Engine__hitResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, UnknownData_8ZJT, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, FaceIndex, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, time, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, distance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, ImpactPoint, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, normal, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, impactNormal, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, TraceStart, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, TraceEnd, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, PenetrationDepth, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, Item, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, PhysMaterial, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, actor, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, component, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, BoneName, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FhitResult, MyBoneName, 0x0084);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FhitResult, 0x0090);
		}

		// struct FFindFloorResult
		TEST_METHOD(ScriptStruct__Engine__FindFloorResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, UnknownData_0P2I, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, FloorDist, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, LineDist, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFindFloorResult, hitResult, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFindFloorResult, 0x009C);
		}

		// struct FChildActorAttachedActorInfo
		TEST_METHOD(ScriptStruct__Engine__ChildActorAttachedActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, SocketName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, UnknownData_A0U5, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorAttachedActorInfo, RelativeTransform, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorAttachedActorInfo, 0x0050);
		}

		// struct FChildActorComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__ChildActorComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorClass, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, ChildActorName, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_SD00, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, AttachedActors, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChildActorComponentInstanceData, UnknownData_KX73, 0x00D0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChildActorComponentInstanceData, 0x00E0);
		}

		// struct FCustomProfile
		TEST_METHOD(ScriptStruct__Engine__CustomProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, UnknownData_T4DA, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomProfile, CustomResponses, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomProfile, 0x0020);
		}

		// struct FCustomChannelSetup
		TEST_METHOD(ScriptStruct__Engine__CustomChannelSetup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, channel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, DefaultResponse, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bTraceType, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, bStaticObject, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomChannelSetup, name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomChannelSetup, 0x0010);
		}

		// struct FCollisionResponseTemplate
		TEST_METHOD(ScriptStruct__Engine__CollisionResponseTemplate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CollisionEnabled, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_67O9, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, bCanModify, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_4TH0, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, ObjectTypeName, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, UnknownData_X12B, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionResponseTemplate, CustomResponses, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionResponseTemplate, 0x0050);
		}

		// struct FBlueprintComponentDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintComponentDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, ComponentPropertyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, DelegatePropertyName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintComponentDelegateBinding, FunctionNameToBind, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintComponentDelegateBinding, 0x0024);
		}

		// struct FAutoCompleteNode
		TEST_METHOD(ScriptStruct__Engine__AutoCompleteNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, IndexChar, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_NA6K, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, AutoCompleteListIndices, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAutoCompleteNode, UnknownData_JFK5, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAutoCompleteNode, 0x0028);
		}

		// struct FConstraintDrive
		TEST_METHOD(ScriptStruct__Engine__ConstraintDrive)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, MaxForce, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintDrive, UnknownData_7GDT, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintDrive, 0x0010);
		}

		// struct FAngularDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__AngularDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, TwistDrive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SwingDrive, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, SlerpDrive, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, OrientationTarget, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularVelocityTarget, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, AngularDriveMode, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAngularDriveConstraint, UnknownData_1UTU, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAngularDriveConstraint, 0x004C);
		}

		// struct FLinearDriveConstraint
		TEST_METHOD(ScriptStruct__Engine__LinearDriveConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, PositionTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, VelocityTarget, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, XDrive, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, YDrive, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, ZDrive, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearDriveConstraint, UnknownData_KXPS, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearDriveConstraint, 0x004C);
		}

		// struct FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConstraintBaseParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Stiffness, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Damping, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, Restitution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, ContactDistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintBaseParams, UnknownData_RX5H, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintBaseParams, 0x0014);
		}

		// struct FLinearConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__LinearConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, Limit, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, XMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, YMotion, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, ZMotion, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLinearConstraint, UnknownData_G2K6, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLinearConstraint, 0x001C);
		}

		// struct FConeConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__ConeConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1LimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2LimitDegrees, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing1Motion, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, Swing2Motion, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConeConstraint, UnknownData_ULLH, 0x001E);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConeConstraint, 0x0020);
		}

		// struct FTwistConstraint : public FConstraintBaseParams
		TEST_METHOD(ScriptStruct__Engine__TwistConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistLimitDegrees, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, TwistMotion, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTwistConstraint, UnknownData_ECG8, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTwistConstraint, 0x001C);
		}

		// struct FConstraintProfileProperties
		TEST_METHOD(ScriptStruct__Engine__ConstraintProfileProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionLinearTolerance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ProjectionAngularTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearBreakThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularBreakThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearLimit, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, ConeLimit, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, TwistLimit, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, LinearDrive, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, AngularDrive, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintProfileProperties, UnknownData_6PPC, 0x0101);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintProfileProperties, 0x0104);
		}

		// struct FConstraintInstance
		TEST_METHOD(ScriptStruct__Engine__ConstraintInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_QJAG, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, JointName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ConstraintBone2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos1, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis1, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis1, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, Pos2, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, PriAxis2, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, SecAxis2, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, AngularRotationOffset, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_BCDS, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, ProfileInstance, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstraintInstance, UnknownData_S4N2, 0x019C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstraintInstance, 0x01C8);
		}

		// struct FCullDistanceSizePair
		TEST_METHOD(ScriptStruct__Engine__CullDistanceSizePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCullDistanceSizePair, CullDistance, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCullDistanceSizePair, 0x0008);
		}

		// struct FRuntimeCurveLinearColor
		TEST_METHOD(ScriptStruct__Engine__RuntimeCurveLinearColor)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ColorCurves, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRuntimeCurveLinearColor, ExternalCurve, 0x0200);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRuntimeCurveLinearColor, 0x0208);
		}

		// struct FNamedCurveValue
		TEST_METHOD(ScriptStruct__Engine__NamedCurveValue)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedCurveValue, Value, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedCurveValue, 0x0010);
		}

		// struct FCurveTableRowHandle
		TEST_METHOD(ScriptStruct__Engine__CurveTableRowHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, CurveTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, RowName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveTableRowHandle, UnknownData_NIPF, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveTableRowHandle, 0x0018);
		}

		// struct FDataTableCategoryHandle
		TEST_METHOD(ScriptStruct__Engine__DataTableCategoryHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, DataTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, ColumnName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDataTableCategoryHandle, RowContents, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDataTableCategoryHandle, 0x0020);
		}

		// struct FDebugCameraControllerSettingsViewModeIndex
		TEST_METHOD(ScriptStruct__Engine__DebugCameraControllerSettingsViewModeIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_R6VO, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, ViewModeIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugCameraControllerSettingsViewModeIndex, UnknownData_RTUP, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugCameraControllerSettingsViewModeIndex, 0x0010);
		}

		// struct FDebugDisplayProperty
		TEST_METHOD(ScriptStruct__Engine__DebugDisplayProperty)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, obj, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, WithinClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDebugDisplayProperty, UnknownData_7AR8, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDebugDisplayProperty, 0x0020);
		}

		// struct FMulticastRecordOptions
		TEST_METHOD(ScriptStruct__Engine__MulticastRecordOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, FuncPathName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bServerSkip, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, bClientSkip, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMulticastRecordOptions, UnknownData_TV8J, 0x0012);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMulticastRecordOptions, 0x0018);
		}

		// struct FRollbackNetStartupActorInfo
		TEST_METHOD(ScriptStruct__Engine__RollbackNetStartupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_YNTB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, Archetype, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_KZRX, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, level, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, UnknownData_AKBV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRollbackNetStartupActorInfo, ObjReferences, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRollbackNetStartupActorInfo, 0x00B8);
		}

		// struct FLevelNameAndTime
		TEST_METHOD(ScriptStruct__Engine__LevelNameAndTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, levelName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, LevelChangeTimeInMS, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelNameAndTime, UnknownData_LGC4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelNameAndTime, 0x0018);
		}

		// struct FDialogueContext
		TEST_METHOD(ScriptStruct__Engine__DialogueContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, Speaker, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContext, targets, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContext, 0x0018);
		}

		// struct FDialogueWaveParameter
		TEST_METHOD(ScriptStruct__Engine__DialogueWaveParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, DialogueWave, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueWaveParameter, Context, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueWaveParameter, 0x0020);
		}

		// struct FDialogueContextMapping
		TEST_METHOD(ScriptStruct__Engine__DialogueContextMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Context, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, SoundWave, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, LocalizationKeyFormat, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDialogueContextMapping, Proxy, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDialogueContextMapping, 0x0038);
		}

		// struct FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistribution, 0x0020);
		}

		// struct FRawDistributionFloat : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionFloat)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionFloat, Distribution, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionFloat, 0x0030);
		}

		// struct FRawDistributionVector : public FRawDistribution
		TEST_METHOD(ScriptStruct__Engine__RawDistributionVector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValue, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValue, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MinValueVec, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, MaxValueVec, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRawDistributionVector, Distribution, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRawDistributionVector, 0x0048);
		}

		// struct FGraphReference
		TEST_METHOD(ScriptStruct__Engine__GraphReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, MacroGraph, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphBlueprint, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGraphReference, GraphGuid, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGraphReference, 0x0020);
		}

		// struct FEdGraphPinReference
		TEST_METHOD(ScriptStruct__Engine__EdGraphPinReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, OwningNode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphPinReference, PinId, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphPinReference, 0x0018);
		}

		// struct FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, UnknownData_I6KY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescription, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, TooltipDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, category, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Keywords, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, Grouping, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, SectionID, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, MenuDescriptionArray, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchTitlesArray, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchKeywordsArray, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, FullSearchCategoryArray, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedMenuDescriptionArray, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchTitlesArray, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchKeywordsArray, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, LocalizedFullSearchCategoryArray, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction, searchText, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction, 0x0100);
		}

		// struct FEdGraphSchemaAction_NewNode : public FEdGraphSchemaAction
		TEST_METHOD(ScriptStruct__Engine__EdGraphSchemaAction_NewNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEdGraphSchemaAction_NewNode, NodeTemplate, 0x0100);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEdGraphSchemaAction_NewNode, 0x0108);
		}

		// struct FScreenMessageString
		TEST_METHOD(ScriptStruct__Engine__ScreenMessageString)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, ScreenMessage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, displayColor, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TimeToDisplay, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, CurrentTimeDisplayed, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, TextScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScreenMessageString, UnknownData_CL1L, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScreenMessageString, 0x0030);
		}

		// struct FUrl
		TEST_METHOD(ScriptStruct__Engine__Url)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, Protocol, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, Host, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, Port, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, valid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, map, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, RedirectURL, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, Op, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUrl, Portal, 0x0058);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUrl, 0x0068);
		}

		// struct FFullyLoadedPackagesInfo
		TEST_METHOD(ScriptStruct__Engine__FullyLoadedPackagesInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, FullyLoadType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, UnknownData_8J6N, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, tag, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, PackagesToLoad, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFullyLoadedPackagesInfo, LoadedObjects, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFullyLoadedPackagesInfo, 0x0038);
		}

		// struct FLevelStreamingStatus
		TEST_METHOD(ScriptStruct__Engine__LevelStreamingStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, UnknownData_YYNB, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelStreamingStatus, LodIndex, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelStreamingStatus, 0x0014);
		}

		// struct FNamedNetDriver
		TEST_METHOD(ScriptStruct__Engine__NamedNetDriver)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, NetDriver, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedNetDriver, UnknownData_QI9X, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedNetDriver, 0x0010);
		}

		// struct FworldContext
		TEST_METHOD(ScriptStruct__Engine__worldContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, UnknownData_9O5M, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, LastURL, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, LastRemoteURL, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, PendingNetGame, 0x01A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, PackagesToFullyLoad, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, UnknownData_5KHF, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, LoadedLevelsForPendingMapChange, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, UnknownData_SJ0H, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, ObjectReferencers, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, PendingLevelStreamingStatusUpdates, 0x0208);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, GameViewport, 0x0218);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, OwningGameInstance, 0x0220);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, ActiveNetDrivers, 0x0228);
			CHEAT_GEAR_CHECK_OFFSET(CG::FworldContext, UnknownData_JP6K, 0x0238);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FworldContext, 0x0288);
		}

		// struct FExposureSettings
		TEST_METHOD(ScriptStruct__Engine__ExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, FixedEV100, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, bFixed, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExposureSettings, UnknownData_K5BG, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExposureSettings, 0x0008);
		}

		// struct FTickPrerequisite
		TEST_METHOD(ScriptStruct__Engine__TickPrerequisite)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTickPrerequisite, UnknownData_7L9A, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTickPrerequisite, 0x0010);
		}

		// struct FCanvasUVTri
		TEST_METHOD(ScriptStruct__Engine__CanvasUVTri)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Pos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_UV, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V0_Color, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Pos, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_UV, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V1_Color, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Pos, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_UV, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCanvasUVTri, V2_Color, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCanvasUVTri, 0x0060);
		}

		// struct FDepthFieldGlowInfo
		TEST_METHOD(ScriptStruct__Engine__DepthFieldGlowInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, UnknownData_Q2VB, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowColor, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowOuterRadius, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDepthFieldGlowInfo, GlowInnerRadius, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDepthFieldGlowInfo, 0x0024);
		}

		// struct FFontRenderInfo
		TEST_METHOD(ScriptStruct__Engine__FontRenderInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, UnknownData_WIH4, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontRenderInfo, GlowInfo, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontRenderInfo, 0x0028);
		}

		// struct FRedirector
		TEST_METHOD(ScriptStruct__Engine__Redirector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, OldName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRedirector, NewName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRedirector, 0x0018);
		}

		// struct FCollectionReference
		TEST_METHOD(ScriptStruct__Engine__CollectionReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionReference, CollectionName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionReference, 0x000C);
		}

		// struct FComponentReference
		TEST_METHOD(ScriptStruct__Engine__ComponentReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, otherActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, ComponentProperty, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_BJ8E, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, PathToComponent, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentReference, UnknownData_EHF1, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentReference, 0x0030);
		}

		// struct FConstrainComponentPropName
		TEST_METHOD(ScriptStruct__Engine__ConstrainComponentPropName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConstrainComponentPropName, ComponentName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConstrainComponentPropName, 0x000C);
		}

		// struct FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__DamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, UnknownData_DDZ9, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDamageEvent, DamageTypeClass, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDamageEvent, 0x0010);
		}

		// struct FRadialDamageParams
		TEST_METHOD(ScriptStruct__Engine__RadialDamageParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, BaseDamage, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, MinimumDamage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, InnerRadius, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, OuterRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageParams, DamageFalloff, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageParams, 0x0014);
		}

		// struct FRadialDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__RadialDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, Params, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, origin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRadialDamageEvent, ComponentHits, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRadialDamageEvent, 0x0040);
		}

		// struct FPointDamageEvent : public FDamageEvent
		TEST_METHOD(ScriptStruct__Engine__PointDamageEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, Damage, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, ShotDirection, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPointDamageEvent, HitInfo, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPointDamageEvent, 0x00B0);
		}

		// struct FMeshBuildSettings
		TEST_METHOD(ScriptStruct__Engine__MeshBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_8XKF, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, MinLightmapResolution, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, SrcLightmapIndex, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DstLightmapIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, BuildScale3D, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldResolutionScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, UnknownData_L4MN, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshBuildSettings, DistanceFieldReplacementMesh, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshBuildSettings, 0x0030);
		}

		// struct FPOV
		TEST_METHOD(ScriptStruct__Engine__POV)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, rotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPOV, FOV, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPOV, 0x001C);
		}

		// struct FAnimUpdateRateParameters
		TEST_METHOD(ScriptStruct__Engine__AnimUpdateRateParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_EHDB, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, ShiftBucket, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_EFJT, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UpdateRate, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, EvaluationRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, TickedPoseOffestTime, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AdditionalTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, UnknownData_XBMW, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseNonRenderedUpdateRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, MaxEvalRateForInterpolation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, BaseVisibleDistanceFactorThesholds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, AnimationFrameSkipToTreshold, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, LODToFrameSkipMap, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedUpdateFrames, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimUpdateRateParameters, SkippedEvalFrames, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimUpdateRateParameters, 0x00D8);
		}

		// struct FAnimSlotDesc
		TEST_METHOD(ScriptStruct__Engine__AnimSlotDesc)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotDesc, NumChannels, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotDesc, 0x0010);
		}

		// struct FAnimSlotInfo
		TEST_METHOD(ScriptStruct__Engine__AnimSlotInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, SlotName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, UnknownData_J8KH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimSlotInfo, ChannelWeights, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimSlotInfo, 0x0020);
		}

		// struct FMTDResult
		TEST_METHOD(ScriptStruct__Engine__MTDResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, direction, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMTDResult, distance, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMTDResult, 0x0010);
		}

		// struct FOverlapResult
		TEST_METHOD(ScriptStruct__Engine__OverlapResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, actor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, component, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_QLXE, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FOverlapResult, UnknownData_6242, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOverlapResult, 0x0018);
		}

		// struct FPrimitiveMaterialRef
		TEST_METHOD(ScriptStruct__Engine__PrimitiveMaterialRef)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, primitive, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, Decal, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, ElementIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveMaterialRef, UnknownData_QMGJ, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveMaterialRef, 0x0018);
		}

		// struct FSwarmDebugOptions
		TEST_METHOD(ScriptStruct__Engine__SwarmDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSwarmDebugOptions, UnknownData_VCUP, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSwarmDebugOptions, 0x0004);
		}

		// struct FLightmassDebugOptions
		TEST_METHOD(ScriptStruct__Engine__LightmassDebugOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_IACP, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, CoplanarTolerance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, UnknownData_32S0, 0x000A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDebugOptions, ExecutionTimeDivisor, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDebugOptions, 0x0010);
		}

		// struct FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, IndirectLightingSaturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, ShadowExponent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, bUseAreaShadowsForStationaryLight, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassLightSettings, UnknownData_RNJP, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassLightSettings, 0x000C);
		}

		// struct FLightmassDirectionalLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassDirectionalLightSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassDirectionalLightSettings, LightSourceAngle, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassDirectionalLightSettings, 0x0010);
		}

		// struct FLightmassPointLightSettings : public FLightmassLightSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassPointLightSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassPointLightSettings, 0x000C);
		}

		// struct FBasedPosition
		TEST_METHOD(ScriptStruct__Engine__BasedPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, Base, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, position, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseLocation, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedBaseRotation, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBasedPosition, CachedTransPosition, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBasedPosition, 0x0038);
		}

		// struct FFractureEffect
		TEST_METHOD(ScriptStruct__Engine__FractureEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, particleSystem, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFractureEffect, Sound, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFractureEffect, 0x0010);
		}

		// struct FRigidBodyContactInfo
		TEST_METHOD(ScriptStruct__Engine__RigidBodyContactInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactNormal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, ContactPenetration, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, UnknownData_LAPF, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyContactInfo, PhysMaterial, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyContactInfo, 0x0030);
		}

		// struct FCollisionImpactData
		TEST_METHOD(ScriptStruct__Engine__CollisionImpactData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, ContactInfos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalNormalImpulse, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollisionImpactData, TotalFrictionImpulse, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollisionImpactData, 0x0028);
		}

		// struct FRigidBodyErrorCorrection
		TEST_METHOD(ScriptStruct__Engine__RigidBodyErrorCorrection)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingExtrapolation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PingLimit, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerLinearDifference, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorPerAngularDifference, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxRestoredStateError, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, MaxLinearHardSnapDistance, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, PositionLerp, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngleLerp, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, LinearVelocityCoefficient, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, AngularVelocityCoefficient, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSeconds, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationDistanceSq, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyErrorCorrection, ErrorAccumulationSimilarity, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyErrorCorrection, 0x0034);
		}

		// struct FRigidBodyState
		TEST_METHOD(ScriptStruct__Engine__RigidBodyState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_VJF2, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Quaternion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, LinVel, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, AngVel, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, Flags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigidBodyState, UnknownData_0CPS, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigidBodyState, 0x0040);
		}

		// struct FMaterialShadingModelField
		TEST_METHOD(ScriptStruct__Engine__MaterialShadingModelField)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialShadingModelField, ShadingModelField, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialShadingModelField, 0x0002);
		}

		// struct FExponentialHeightFogData
		TEST_METHOD(ScriptStruct__Engine__ExponentialHeightFogData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogDensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightFalloff, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FExponentialHeightFogData, FogHeightOffset, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExponentialHeightFogData, 0x000C);
		}

		// struct FFontCharacter
		TEST_METHOD(ScriptStruct__Engine__FontCharacter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartU, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, StartV, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, USize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, VSize, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, TextureIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, UnknownData_AJ0S, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontCharacter, verticalOffset, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontCharacter, 0x0018);
		}

		// struct FFontImportOptionsData
		TEST_METHOD(ScriptStruct__Engine__FontImportOptionsData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, FontName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Height, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_W2NE, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharacterSet, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_JCY3, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Chars, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnicodeRange, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFilePath, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, CharsFileWildcard, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_D1Y7, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ForegroundColor, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_VON1, 0x0075);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageWidth, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, TexturePageMaxHeight, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, XPadding, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, YPadding, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxTop, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxBottom, 0x008C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxRight, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, ExtendBoxLeft, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_YS1L, 0x0099);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, Kerning, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_O9NL, 0x00A1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScaleFactor, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, DistanceFieldScanRadiusScale, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFontImportOptionsData, UnknownData_ICD3, 0x00AC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFontImportOptionsData, 0x00B0);
		}

		// struct FForceFeedbackAttenuationSettings : public FBaseAttenuationSettings
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackAttenuationSettings)
		{
			// Members

			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackAttenuationSettings, 0x00B0);
		}

		// struct FForceFeedbackParameters
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, tag, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bLooping, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bIgnoreTimeDilation, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, bPlayWhilePaused, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackParameters, UnknownData_QVJI, 0x000F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackParameters, 0x0010);
		}

		// struct FForceFeedbackChannelDetails
		TEST_METHOD(ScriptStruct__Engine__ForceFeedbackChannelDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, UnknownData_O2MX, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FForceFeedbackChannelDetails, curve, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FForceFeedbackChannelDetails, 0x0090);
		}

		// struct FPredictProjectilePathPointData
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathPointData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathPointData, time, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathPointData, 0x001C);
		}

		// struct FPredictProjectilePathResult
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, PathData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, LastTraceDestination, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, hitResult, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathResult, UnknownData_UNBX, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathResult, 0x00C0);
		}

		// struct FPredictProjectilePathParams
		TEST_METHOD(ScriptStruct__Engine__PredictProjectilePathParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, StartLocation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, launchVelocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithCollision, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_NHOC, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ProjectileRadius, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, MaxSimTime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceWithChannel, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, TraceChannel, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_6GQP, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ObjectTypes, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, ActorsToIgnore, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, SimFrequency, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, OverrideGravityZ, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugType, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_E8JX, 0x0051);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, DrawDebugTime, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, bTraceComplex, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPredictProjectilePathParams, UnknownData_Q4IF, 0x0059);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPredictProjectilePathParams, 0x0060);
		}

		// struct FActiveHapticFeedbackEffect
		TEST_METHOD(ScriptStruct__Engine__ActiveHapticFeedbackEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, HapticEffect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FActiveHapticFeedbackEffect, UnknownData_0N17, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FActiveHapticFeedbackEffect, 0x0018);
		}

		// struct FHapticFeedbackDetails_Curve
		TEST_METHOD(ScriptStruct__Engine__HapticFeedbackDetails_Curve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, frequency, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHapticFeedbackDetails_Curve, amplitude, 0x0088);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHapticFeedbackDetails_Curve, 0x0110);
		}

		// struct FClusterNode
		TEST_METHOD(ScriptStruct__Engine__ClusterNode)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, LastInstance, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MinInstanceScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode, MaxInstanceScale, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode, 0x0040);
		}

		// struct FClusterNode_DEPRECATED
		TEST_METHOD(ScriptStruct__Engine__ClusterNode_DEPRECATED)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMin, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstChild, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, BoundMax, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastChild, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, FirstInstance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClusterNode_DEPRECATED, LastInstance, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClusterNode_DEPRECATED, 0x0028);
		}

		// struct FHLODProxyMesh
		TEST_METHOD(ScriptStruct__Engine__HLODProxyMesh)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, LODActor, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_BUF7, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, StaticMesh, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, key, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHLODProxyMesh, UnknownData_WOO3, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHLODProxyMesh, 0x0038);
		}

		// struct FImportanceTexture
		TEST_METHOD(ScriptStruct__Engine__ImportanceTexture)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Size, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, NumMips, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_J1TH, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, MarginalCDF, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, ConditionalCDF, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, TextureData, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, texture, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, Weighting, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FImportanceTexture, UnknownData_BI5J, 0x0049);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FImportanceTexture, 0x0050);
		}

		// struct FComponentKey
		TEST_METHOD(ScriptStruct__Engine__ComponentKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, OwnerClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, SCSVariableName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, AssociatedGuid, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentKey, UnknownData_5WA2, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentKey, 0x0028);
		}

		// struct FComponentOverrideRecord
		TEST_METHOD(ScriptStruct__Engine__ComponentOverrideRecord)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentTemplate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, ComponentKey, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FComponentOverrideRecord, CookedComponentInstancingData, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FComponentOverrideRecord, 0x0088);
		}

		// struct FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputDelegateBinding, UnknownData_QYC9, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputDelegateBinding, 0x0004);
		}

		// struct FBlueprintInputActionDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputActionDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputActionName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, InputKeyEvent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, UnknownData_L0UN, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputActionDelegateBinding, FunctionNameToBind, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputActionDelegateBinding, 0x0020);
		}

		// struct FBlueprintInputAxisDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, InputAxisName, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisDelegateBinding, FunctionNameToBind, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisDelegateBinding, 0x001C);
		}

		// struct FBlueprintInputAxisKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputAxisKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_5V3A, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, AxisKey, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, FunctionNameToBind, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputAxisKeyDelegateBinding, UnknownData_FPZ5, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputAxisKeyDelegateBinding, 0x0038);
		}

		// struct FCachedKeyToActionInfo
		TEST_METHOD(ScriptStruct__Engine__CachedKeyToActionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, playerInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCachedKeyToActionInfo, UnknownData_U7U5, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCachedKeyToActionInfo, 0x0070);
		}

		// struct FBlueprintInputKeyDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputKeyDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_88OX, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputChord, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, InputKeyEvent, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, UnknownData_XT1H, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputKeyDelegateBinding, FunctionNameToBind, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputKeyDelegateBinding, 0x0040);
		}

		// struct FBlueprintInputTouchDelegateBinding : public FBlueprintInputDelegateBinding
		TEST_METHOD(ScriptStruct__Engine__BlueprintInputTouchDelegateBinding)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, InputKeyEvent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, UnknownData_9KGG, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBlueprintInputTouchDelegateBinding, FunctionNameToBind, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBlueprintInputTouchDelegateBinding, 0x0014);
		}

		// struct FInstancedStaticMeshLightMapInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshLightMapInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, Transform, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshLightMapInstanceData, MapBuildDataIds, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshLightMapInstanceData, 0x0040);
		}

		// struct FInstancedStaticMeshComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__InstancedStaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, StaticMesh, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, CachedStaticLighting, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMData, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, PerInstanceSMCustomData, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_HYK0, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, InstancingRandomSeed, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInstancedStaticMeshComponentInstanceData, UnknownData_FDJE, 0x0134);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInstancedStaticMeshComponentInstanceData, 0x0140);
		}

		// struct FIntegralKey
		TEST_METHOD(ScriptStruct__Engine__IntegralKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralKey, 0x0008);
		}

		// struct FIntegralCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__IntegralCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, Keys, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, DefaultValue, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, bUseDefaultValueBeforeFirstKey, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FIntegralCurve, UnknownData_L6QI, 0x007D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FIntegralCurve, 0x0080);
		}

		// struct FCurveEdEntry
		TEST_METHOD(ScriptStruct__Engine__CurveEdEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveColor, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, UnknownData_BPE6, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, CurveName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bHideCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bColorCurve, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bFloatingPointColorCurve, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, bClamp, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampLow, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdEntry, ClampHigh, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdEntry, 0x0038);
		}

		// struct FCurveEdTab
		TEST_METHOD(ScriptStruct__Engine__CurveEdTab)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, TabName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, Curves, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartInput, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndInput, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewStartOutput, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveEdTab, ViewEndOutput, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveEdTab, 0x0030);
		}

		// struct FInterpEdSelKey
		TEST_METHOD(ScriptStruct__Engine__InterpEdSelKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Group, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, Track, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, KeyIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpEdSelKey, UnsnappedPosition, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpEdSelKey, 0x0018);
		}

		// struct FCameraPreviewInfo
		TEST_METHOD(ScriptStruct__Engine__CameraPreviewInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, rotation, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraPreviewInfo, PawnInst, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraPreviewInfo, 0x0030);
		}

		// struct FSubTrackGroup
		TEST_METHOD(ScriptStruct__Engine__SubTrackGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, groupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, TrackIndices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubTrackGroup, UnknownData_MWAK, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubTrackGroup, 0x0028);
		}

		// struct FSupportedSubTrackInfo
		TEST_METHOD(ScriptStruct__Engine__SupportedSubTrackInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SupportedClass, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, SubTrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, GroupIndex, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSupportedSubTrackInfo, UnknownData_7AKN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSupportedSubTrackInfo, 0x0020);
		}

		// struct FAnimControlTrackKey
		TEST_METHOD(ScriptStruct__Engine__AnimControlTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, startTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_DDC5, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimSeq, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimStartOffset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimEndOffset, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, AnimPlayRate, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAnimControlTrackKey, UnknownData_B619, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAnimControlTrackKey, 0x0020);
		}

		// struct FBoolTrackKey
		TEST_METHOD(ScriptStruct__Engine__BoolTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoolTrackKey, UnknownData_BRV5, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoolTrackKey, 0x0008);
		}

		// struct FDirectorTrackCut
		TEST_METHOD(ScriptStruct__Engine__DirectorTrackCut)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, transitionTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, TargetCamGroup, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDirectorTrackCut, ShotNumber, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDirectorTrackCut, 0x0018);
		}

		// struct FEventTrackKey
		TEST_METHOD(ScriptStruct__Engine__EventTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEventTrackKey, EventName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEventTrackKey, 0x0010);
		}

		// struct FInterpLookupPoint
		TEST_METHOD(ScriptStruct__Engine__InterpLookupPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, groupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupPoint, time, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupPoint, 0x0010);
		}

		// struct FInterpLookupTrack
		TEST_METHOD(ScriptStruct__Engine__InterpLookupTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpLookupTrack, points, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpLookupTrack, 0x0010);
		}

		// struct FParticleReplayTrackKey
		TEST_METHOD(ScriptStruct__Engine__ParticleReplayTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, duration, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleReplayTrackKey, ClipIDNumber, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleReplayTrackKey, 0x000C);
		}

		// struct FSoundTrackKey
		TEST_METHOD(ScriptStruct__Engine__SoundTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, volume, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Pitch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, UnknownData_KABF, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundTrackKey, Sound, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundTrackKey, 0x0018);
		}

		// struct FToggleTrackKey
		TEST_METHOD(ScriptStruct__Engine__ToggleTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, ToggleAction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FToggleTrackKey, UnknownData_0SYI, 0x0005);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FToggleTrackKey, 0x0008);
		}

		// struct FVisibilityTrackKey
		TEST_METHOD(ScriptStruct__Engine__VisibilityTrackKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, Action, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, ActiveCondition, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVisibilityTrackKey, UnknownData_HICM, 0x0006);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVisibilityTrackKey, 0x0008);
		}

		// struct FVectorSpringState
		TEST_METHOD(ScriptStruct__Engine__VectorSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVectorSpringState, UnknownData_7OPX, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVectorSpringState, 0x0018);
		}

		// struct FFloatSpringState
		TEST_METHOD(ScriptStruct__Engine__FloatSpringState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatSpringState, UnknownData_U0RC, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatSpringState, 0x0008);
		}

		// struct FDrawToRenderTargetContext
		TEST_METHOD(ScriptStruct__Engine__DrawToRenderTargetContext)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, RenderTarget, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDrawToRenderTargetContext, UnknownData_64HQ, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDrawToRenderTargetContext, 0x0010);
		}

		// struct FLatentActionManager
		TEST_METHOD(ScriptStruct__Engine__LatentActionManager)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLatentActionManager, UnknownData_5ESK, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLatentActionManager, 0x0060);
		}

		// struct FLayerActorStats
		TEST_METHOD(ScriptStruct__Engine__LayerActorStats)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, Total, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLayerActorStats, UnknownData_ZGI0, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLayerActorStats, 0x0010);
		}

		// struct FReplicatedStaticActorDestructionInfo
		TEST_METHOD(ScriptStruct__Engine__ReplicatedStaticActorDestructionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, UnknownData_M5LY, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReplicatedStaticActorDestructionInfo, ObjClass, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReplicatedStaticActorDestructionInfo, 0x0040);
		}

		// struct FMaterialProxySettings
		TEST_METHOD(ScriptStruct__Engine__MaterialProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, GutterSpace, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicConstant, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessConstant, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyConstant, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularConstant, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityConstant, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskConstant, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionConstant, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TextureSizingType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MaterialMergeType, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, BlendMode, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, UnknownData_PMNA, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, DiffuseTextureSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, NormalTextureSize, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, TangentTextureSize, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, MetallicTextureSize, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, RoughnessTextureSize, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AnisotropyTextureSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, SpecularTextureSize, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, EmissiveTextureSize, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityTextureSize, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, OpacityMaskTextureSize, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialProxySettings, AmbientOcclusionTextureSize, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialProxySettings, 0x0088);
		}

		// struct FLevelSimplificationDetails
		TEST_METHOD(ScriptStruct__Engine__LevelSimplificationDetails)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bCreatePackagePerAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_IR7F, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, DetailsPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, StaticMeshMaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bOverrideLandscapeExportLOD, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_0F96, 0x0091);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeExportLOD, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, LandscapeMaterialSettings, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeFoliageToLandscape, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bBakeGrassToLandscape, 0x0121);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshNormalMap, 0x0122);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshMetallicMap, 0x0123);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshRoughnessMap, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateMeshSpecularMap, 0x0125);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeNormalMap, 0x0126);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeMetallicMap, 0x0127);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeRoughnessMap, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, bGenerateLandscapeSpecularMap, 0x0129);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelSimplificationDetails, UnknownData_R2UA, 0x012A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelSimplificationDetails, 0x012C);
		}

		// struct FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__StreamableTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamableTextureInstance, UnknownData_P2PO, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamableTextureInstance, 0x0028);
		}

		// struct FDynamicTextureInstance : public FStreamableTextureInstance
		TEST_METHOD(ScriptStruct__Engine__DynamicTextureInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, texture, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, bAttached, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, UnknownData_471U, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDynamicTextureInstance, OriginalRadius, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDynamicTextureInstance, 0x0038);
		}

		// struct FPrecomputedLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_I4XE, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, Transform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, LightGuid, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, PreviewShadowMapChannel, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedLightInstanceData, UnknownData_HHB0, 0x00F4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedLightInstanceData, 0x0100);
		}

		// struct FBatchedPoint
		TEST_METHOD(ScriptStruct__Engine__BatchedPoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, PointSize, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, remainingLifetime, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, DepthPriority, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedPoint, UnknownData_1I72, 0x0025);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedPoint, 0x0028);
		}

		// struct FBatchedLine
		TEST_METHOD(ScriptStruct__Engine__BatchedLine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, start, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, end, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, color, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, Thickness, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, remainingLifetime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, DepthPriority, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBatchedLine, UnknownData_3DCT, 0x0031);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBatchedLine, 0x0034);
		}

		// struct FClientReceiveData
		TEST_METHOD(ScriptStruct__Engine__ClientReceiveData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, LocalPC, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, messageType, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageIndex, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, MessageString, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, RelatedPlayerState_3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClientReceiveData, OptionalObject, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClientReceiveData, 0x0040);
		}

		// struct FParameterGroupData
		TEST_METHOD(ScriptStruct__Engine__ParameterGroupData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, groupName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, GroupSortPriority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterGroupData, UnknownData_NOPP, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterGroupData, 0x0018);
		}

		// struct FMaterialSpriteElement
		TEST_METHOD(ScriptStruct__Engine__MaterialSpriteElement)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, MATERIAL, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToOpacityCurve, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_YWV5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeX, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, BaseSizeY, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, UnknownData_M8TW, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialSpriteElement, DistanceToSizeCurve, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialSpriteElement, 0x0028);
		}

		// struct FMaterialFunctionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialFunctionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialFunctionInfo, Function, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialFunctionInfo, 0x0018);
		}

		// struct FMaterialParameterCollectionInfo
		TEST_METHOD(ScriptStruct__Engine__MaterialParameterCollectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, StateId, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialParameterCollectionInfo, ParameterCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialParameterCollectionInfo, 0x0018);
		}

		// struct FMaterialCachedExpressionData
		TEST_METHOD(ScriptStruct__Engine__MaterialCachedExpressionData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, Parameters, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ReferencedTextures, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, FunctionInfos, 0x01B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, ParameterCollectionInfos, 0x01C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayers, 0x01D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DefaultLayerBlends, 0x01E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, GrassTypes, 0x01F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, DynamicParameterNames, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, QualityLevelsUsed, 0x0210);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialCachedExpressionData, UnknownData_USY1, 0x0221);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialCachedExpressionData, 0x0228);
		}

		// struct FParameterChannelNames
		TEST_METHOD(ScriptStruct__Engine__ParameterChannelNames)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, R, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, G, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, B, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParameterChannelNames, A, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParameterChannelNames, 0x0060);
		}

		// struct FCustomDefine
		TEST_METHOD(ScriptStruct__Engine__CustomDefine)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomDefine, DefineValue, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomDefine, 0x0020);
		}

		// struct FCustomInput
		TEST_METHOD(ScriptStruct__Engine__CustomInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, InputName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, input, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomInput, UnknownData_SGLN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomInput, 0x0028);
		}

		// struct FExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__ExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FExpressionOutput, OutputName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FExpressionOutput, 0x000C);
		}

		// struct FFunctionExpressionOutput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionOutput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, ExpressionOutputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, Output, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionOutput, UnknownData_OROE, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionOutput, 0x0028);
		}

		// struct FFunctionExpressionInput
		TEST_METHOD(ScriptStruct__Engine__FunctionExpressionInput)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInput, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, ExpressionInputId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, input, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFunctionExpressionInput, UnknownData_0RTA, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFunctionExpressionInput, 0x0038);
		}

		// struct FScalarParameterAtlasInstanceData
		TEST_METHOD(ScriptStruct__Engine__ScalarParameterAtlasInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, bIsUsedAsAtlasPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, UnknownData_2RZF, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, curve, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FScalarParameterAtlasInstanceData, Atlas, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FScalarParameterAtlasInstanceData, 0x0068);
		}

		// struct FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionParameterBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionParameterBase, Id, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionParameterBase, 0x001C);
		}

		// struct FCollectionVectorParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionVectorParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionVectorParameter, DefaultValue, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionVectorParameter, 0x002C);
		}

		// struct FCollectionScalarParameter : public FCollectionParameterBase
		TEST_METHOD(ScriptStruct__Engine__CollectionScalarParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCollectionScalarParameter, DefaultValue, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCollectionScalarParameter, 0x0020);
		}

		// struct FInterpGroupActorInfo
		TEST_METHOD(ScriptStruct__Engine__InterpGroupActorInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, ObjectName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, UnknownData_I5E7, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FInterpGroupActorInfo, actors, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FInterpGroupActorInfo, 0x0020);
		}

		// struct FCameraCutInfo
		TEST_METHOD(ScriptStruct__Engine__CameraCutInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraCutInfo, timestamp, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraCutInfo, 0x0010);
		}

		// struct FMemberReference
		TEST_METHOD(ScriptStruct__Engine__MemberReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberParent, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberScope, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, MemberGuid, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bSelfContext, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, bWasDeprecated, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMemberReference, UnknownData_83PZ, 0x0036);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMemberReference, 0x0038);
		}

		// struct FMeshInstancingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshInstancingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ActorClassToUse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, InstanceReplacementThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, MeshReplacementMethod, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bSkipMeshesWithVertexColors, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, bUseHLODVolumes, 0x000E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, UnknownData_A350, 0x000F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshInstancingSettings, ISMComponentToUse, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshInstancingSettings, 0x0018);
		}

		// struct FMeshMergingSettings
		TEST_METHOD(ScriptStruct__Engine__MeshMergingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, TargetLightMapResolution, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, OutputUVs, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, MaterialSettings, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, GutterSize, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, SpecificLOD, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, LODSelectionType, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshMergingSettings, UnknownData_V8K1, 0x009F);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshMergingSettings, 0x00A0);
		}

		// struct FMeshProxySettings
		TEST_METHOD(ScriptStruct__Engine__MeshProxySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, VoxelSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaterialSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MergeDistance, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, UnresolvedGeometryColor, 0x0094);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, MaxRayCastDist, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, HardAngleThreshold, 0x009C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LightMapResolution, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, NormalCalculationMethod, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshProxySettings, LandscapeCullingPrecision, 0x00A5);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshProxySettings, 0x00A8);
		}

		// struct FMeshReductionSettings
		TEST_METHOD(ScriptStruct__Engine__MeshReductionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentTriangles, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PercentVertices, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, MaxDeviation, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, PixelError, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, WeldingThreshold, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, HardAngleThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, BaseLODModel, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, SilhouetteImportance, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TextureImportance, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, ShadingImportance, 0x001E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, TerminationCriterion, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VisibilityAggressiveness, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, VertexColorImportance, 0x0022);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshReductionSettings, UnknownData_TU1G, 0x0023);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshReductionSettings, 0x0024);
		}

		// struct FPurchaseInfo
		TEST_METHOD(ScriptStruct__Engine__PurchaseInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, Identifier, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayDescription, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPurchaseInfo, DisplayPrice, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPurchaseInfo, 0x0040);
		}

		// struct FNameCurveKey
		TEST_METHOD(ScriptStruct__Engine__NameCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurveKey, 0x0010);
		}

		// struct FNameCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__NameCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameCurve, Keys, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameCurve, 0x0078);
		}

		// struct FNavDataConfig : public FNavAgentProperties
		TEST_METHOD(ScriptStruct__Engine__NavDataConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, name, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, color, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, DefaultQueryExtent, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, UnknownData_MTE7, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavigationDataClass, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavDataConfig, NavDataClass, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavDataConfig, 0x0090);
		}

		// struct FNavAgentSelector
		TEST_METHOD(ScriptStruct__Engine__NavAgentSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavAgentSelector, UnknownData_4YN6, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavAgentSelector, 0x0004);
		}

		// struct FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLinkBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, LeftProjectHeight, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, MaxFallDownLength, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_7X86, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapRadius, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SnapHeight, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, SupportedAgents, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_QH70, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, direction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_UQA3, 0x001F);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, AreaClass, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLinkBase, UnknownData_G2RE, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLinkBase, 0x0030);
		}

		// struct FNavigationSegmentLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationSegmentLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftStart, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, LeftEnd, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightStart, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationSegmentLink, RightEnd, 0x0054);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationSegmentLink, 0x0060);
		}

		// struct FNavigationLink : public FNavigationLinkBase
		TEST_METHOD(ScriptStruct__Engine__NavigationLink)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, left, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNavigationLink, Right, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNavigationLink, 0x0048);
		}

		// struct FPacketSimulationSettings
		TEST_METHOD(ScriptStruct__Engine__PacketSimulationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLoss, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMaxSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLossMinSize, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktOrder, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktDup, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLag, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagVariance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMin, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktLagMax, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMin, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLagMax, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktIncomingLoss, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPacketSimulationSettings, PktJitter, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPacketSimulationSettings, 0x0034);
		}

		// struct FNetworkEmulationProfileDescription
		TEST_METHOD(ScriptStruct__Engine__NetworkEmulationProfileDescription)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetworkEmulationProfileDescription, ToolTip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetworkEmulationProfileDescription, 0x0020);
		}

		// struct FNodeItem
		TEST_METHOD(ScriptStruct__Engine__NodeItem)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, ParentName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, UnknownData_GTNL, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNodeItem, Transform, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNodeItem, 0x0040);
		}

		// struct FParticleBurst
		TEST_METHOD(ScriptStruct__Engine__ParticleBurst)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, Count, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, CountLow, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleBurst, time, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleBurst, 0x000C);
		}

		// struct FParticleRandomSeedInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleRandomSeedInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, UnknownData_MEFS, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleRandomSeedInfo, RandomSeeds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleRandomSeedInfo, 0x0020);
		}

		// struct FParticleCurvePair
		TEST_METHOD(ScriptStruct__Engine__ParticleCurvePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleCurvePair, CurveObject, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleCurvePair, 0x0018);
		}

		// struct FBeamModifierOptions
		TEST_METHOD(ScriptStruct__Engine__BeamModifierOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamModifierOptions, UnknownData_KAJ6, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamModifierOptions, 0x0004);
		}

		// struct FParticleEvent_GenerateInfo
		TEST_METHOD(ScriptStruct__Engine__ParticleEvent_GenerateInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_D604, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, frequency, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_DV81, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, CustomName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, UnknownData_5MI5, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEvent_GenerateInfo, ParticleModuleEventsToSendToGame, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEvent_GenerateInfo, 0x0030);
		}

		// struct FLocationBoneSocketInfo
		TEST_METHOD(ScriptStruct__Engine__LocationBoneSocketInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, boneSocketName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLocationBoneSocketInfo, Offset, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLocationBoneSocketInfo, 0x0018);
		}

		// struct FOrbitOptions
		TEST_METHOD(ScriptStruct__Engine__OrbitOptions)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOrbitOptions, UnknownData_BEJQ, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOrbitOptions, 0x0004);
		}

		// struct FEmitterDynamicParameter
		TEST_METHOD(ScriptStruct__Engine__EmitterDynamicParameter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_51TU, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ValueMethod, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_IFR8, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, UnknownData_OT1S, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEmitterDynamicParameter, ParamValue, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEmitterDynamicParameter, 0x0048);
		}

		// struct FBeamTargetData
		TEST_METHOD(ScriptStruct__Engine__BeamTargetData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBeamTargetData, TargetPercentage, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBeamTargetData, 0x0010);
		}

		// struct FGPUSpriteResourceData
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteResourceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedColorSamples, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedMiscSamples, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, QuantizedSimulationAttrSamples, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ColorBias, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscScale, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MiscBias, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveScale, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SimulationAttrCurveBias, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SubImageSize, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, SizeBySpeed, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ConstantAcceleration, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetBase, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitOffsetRange, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyBase, 0x00D4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitFrequencyRange, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseBase, 0x00EC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OrbitPhaseRange, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldScale, 0x0104);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, GlobalVectorFieldTightness, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldScale, 0x010C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PerParticleVectorFieldBias, 0x0110);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientScale, 0x0114);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, DragCoefficientBias, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceScale, 0x011C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ResilienceBias, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusScale, 0x0124);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRadiusBias, 0x0128);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionTimeBias, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomSpread, 0x0130);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CollisionRandomDistribution, 0x0134);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, OneMinusFriction, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, RotationRateScale, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, CameraMotionBlurAmount, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, ScreenAlignment, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, LockAxisFlag, 0x0145);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_DQLD, 0x0146);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, PivotOffset, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_GRUP, 0x0151);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MinFacingCameraBlendDistance, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, MaxFacingCameraBlendDistance, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteResourceData, UnknownData_9O2K, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteResourceData, 0x0160);
		}

		// struct FGPUSpriteLocalVectorFieldInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteLocalVectorFieldInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Field, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_N0RM, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Transform, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MinInitialRotation, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, MaxInitialRotation, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, RotationRate, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, intensity, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, Tightness, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteLocalVectorFieldInfo, UnknownData_92YY, 0x006D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteLocalVectorFieldInfo, 0x0070);
		}

		// struct FFloatDistribution
		TEST_METHOD(ScriptStruct__Engine__FloatDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFloatDistribution, Table, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFloatDistribution, 0x0020);
		}

		// struct FGPUSpriteEmitterInfo
		TEST_METHOD(ScriptStruct__Engine__GPUSpriteEmitterInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, RequiredModule, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModule, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnPerUnitModule, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, SpawnModules, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_4RPL, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LocalVectorField, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, VectorFieldScale, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DragCoefficient, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorStrength, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, Resilience, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ConstantAcceleration, 0x0120);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorPosition, 0x012C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, PointAttractorRadiusSq, 0x0138);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetBase, 0x013C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, OrbitOffsetRange, 0x0148);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvMaxSize, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, InvRotationRateScale, 0x015C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxLifetime, 0x0160);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxParticleCount, 0x0164);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, ScreenAlignment, 0x0168);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, LockAxisFlag, 0x0169);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_NYM0, 0x016A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_EPY5, 0x016D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, CollisionMode, 0x0170);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_U1YH, 0x0171);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_3JZ6, 0x0175);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MinFacingCameraBlendDistance, 0x0178);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, MaxFacingCameraBlendDistance, 0x017C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColor, 0x0180);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlpha, 0x01C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicColorScale, 0x01F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, DynamicAlphaScale, 0x0240);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGPUSpriteEmitterInfo, UnknownData_R2WY, 0x0270);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGPUSpriteEmitterInfo, 0x0280);
		}

		// struct FNamedEmitterMaterial
		TEST_METHOD(ScriptStruct__Engine__NamedEmitterMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, UnknownData_C318, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNamedEmitterMaterial, MATERIAL, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNamedEmitterMaterial, 0x0018);
		}

		// struct FLODSoloTrack
		TEST_METHOD(ScriptStruct__Engine__LODSoloTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLODSoloTrack, SoloEnableSetting, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLODSoloTrack, 0x0010);
		}

		// struct FParticleSystemLOD
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemLOD)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemLOD, UnknownData_8FNH, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemLOD, 0x0001);
		}

		// struct FParticleSystemWorldManagerTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemWorldManagerTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemWorldManagerTickFunction, UnknownData_2WFP, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemWorldManagerTickFunction, 0x0030);
		}

		// struct FParticleSystemReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleSystemReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleSystemReplayFrame, UnknownData_2T4F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleSystemReplayFrame, 0x0010);
		}

		// struct FParticleEmitterReplayFrame
		TEST_METHOD(ScriptStruct__Engine__ParticleEmitterReplayFrame)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FParticleEmitterReplayFrame, UnknownData_YA31, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FParticleEmitterReplayFrame, 0x0010);
		}

		// struct FFreezablePerPlatformInt
		TEST_METHOD(ScriptStruct__Engine__FreezablePerPlatformInt)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFreezablePerPlatformInt, UnknownData_A05V, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFreezablePerPlatformInt, 0x0004);
		}

		// struct FPhysicalAnimationData
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, BodyName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, UnknownData_M1U6, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, OrientationStrength, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, AngularVelocityStrength, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, PositionStrength, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, VelocityStrength, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxLinearForce, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationData, MaxAngularForce, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationData, 0x0028);
		}

		// struct FTireFrictionScalePair
		TEST_METHOD(ScriptStruct__Engine__TireFrictionScalePair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, TireType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, FrictionScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTireFrictionScalePair, UnknownData_ZZS2, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTireFrictionScalePair, 0x0010);
		}

		// struct FPhysicalAnimationProfile
		TEST_METHOD(ScriptStruct__Engine__PhysicalAnimationProfile)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, ProfileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalAnimationProfile, PhysicalAnimationData, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalAnimationProfile, 0x0034);
		}

		// struct FPhysicsConstraintProfileHandle
		TEST_METHOD(ScriptStruct__Engine__PhysicsConstraintProfileHandle)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileProperties, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicsConstraintProfileHandle, ProfileName, 0x0104);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicsConstraintProfileHandle, 0x0110);
		}

		// struct FChaosPhysicsSettings
		TEST_METHOD(ScriptStruct__Engine__ChaosPhysicsSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DefaultThreadingModel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadTickMode, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsSettings, DedicatedThreadBufferMode, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsSettings, 0x0003);
		}

		// struct FPhysicalSurfaceName
		TEST_METHOD(ScriptStruct__Engine__PhysicalSurfaceName)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, type, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, UnknownData_G8W7, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPhysicalSurfaceName, name, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPhysicalSurfaceName, 0x0010);
		}

		// struct FViewTargetTransitionParams
		TEST_METHOD(ScriptStruct__Engine__ViewTargetTransitionParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendTime, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendFunction, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_P57G, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, BlendExp, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FViewTargetTransitionParams, UnknownData_3155, 0x000D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FViewTargetTransitionParams, 0x0010);
		}

		// struct FUpdateLevelVisibilityLevelInfo
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelVisibilityLevelInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, FileName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelVisibilityLevelInfo, UnknownData_ANU4, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelVisibilityLevelInfo, 0x001C);
		}

		// struct FUpdateLevelStreamingLevelStatus
		TEST_METHOD(ScriptStruct__Engine__UpdateLevelStreamingLevelStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, PackageName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, LodIndex, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FUpdateLevelStreamingLevelStatus, UnknownData_R6OY, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUpdateLevelStreamingLevelStatus, 0x0014);
		}

		// struct FKeyBind
		TEST_METHOD(ScriptStruct__Engine__KeyBind)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, Command, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FKeyBind, UnknownData_8WQX, 0x0032);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FKeyBind, 0x0038);
		}

		// struct FPlayerMuteList
		TEST_METHOD(ScriptStruct__Engine__PlayerMuteList)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_5W9F, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, bHasVoiceHandshakeCompleted, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, UnknownData_IREF, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPlayerMuteList, VoiceChannelIdx, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPlayerMuteList, 0x0038);
		}

		// struct FPoseData
		TEST_METHOD(ScriptStruct__Engine__PoseData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, LocalSpacePose, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, TrackToBufferIndex, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseData, CurveData, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseData, 0x0070);
		}

		// struct FPoseDataContainer
		TEST_METHOD(ScriptStruct__Engine__PoseDataContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, PoseNames, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Tracks, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, TrackMap, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Poses, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPoseDataContainer, Curves, 0x0080);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPoseDataContainer, 0x0090);
		}

		// struct FPreviewAttachedObjectPair
		TEST_METHOD(ScriptStruct__Engine__PreviewAttachedObjectPair)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, Object, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, AttachedTo, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAttachedObjectPair, UnknownData_DBP6, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAttachedObjectPair, 0x0048);
		}

		// struct FPreviewAssetAttachContainer
		TEST_METHOD(ScriptStruct__Engine__PreviewAssetAttachContainer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewAssetAttachContainer, AttachedObjects, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewAssetAttachContainer, 0x0010);
		}

		// struct FPreviewMeshCollectionEntry
		TEST_METHOD(ScriptStruct__Engine__PreviewMeshCollectionEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPreviewMeshCollectionEntry, SkeletalMesh, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPreviewMeshCollectionEntry, 0x0030);
		}

		// struct FPrimitiveComponentInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrimitiveComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_3U7R, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, ComponentTransform, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, VisibilityId, 0x00E0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, UnknownData_8P9I, 0x00E4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrimitiveComponentInstanceData, LODParent, 0x00E8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrimitiveComponentInstanceData, 0x00F0);
		}

		// struct FSpriteCategoryInfo
		TEST_METHOD(ScriptStruct__Engine__SpriteCategoryInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, category, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, UnknownData_7JHK, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, DisplayName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSpriteCategoryInfo, description, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSpriteCategoryInfo, 0x0040);
		}

		// struct FCompressedRichCurve
		TEST_METHOD(ScriptStruct__Engine__CompressedRichCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCompressedRichCurve, UnknownData_8A16, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCompressedRichCurve, 0x0018);
		}

		// struct FRigTransformConstraint
		TEST_METHOD(ScriptStruct__Engine__RigTransformConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, TranformType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, UnknownData_56W9, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, ParentSpace, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigTransformConstraint, Weight, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigTransformConstraint, 0x0014);
		}

		// struct FTransformBaseConstraint
		TEST_METHOD(ScriptStruct__Engine__TransformBaseConstraint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBaseConstraint, TransformConstraints, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBaseConstraint, 0x0010);
		}

		// struct FTransformBase
		TEST_METHOD(ScriptStruct__Engine__TransformBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Node, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, UnknownData_2A8A, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTransformBase, Constraints, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTransformBase, 0x0030);
		}

		// struct FNode
		TEST_METHOD(ScriptStruct__Engine__Node)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, name, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, ParentName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_1EES, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, Transform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, DisplayName, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, bAdvanced, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNode, UnknownData_9CN6, 0x0061);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNode, 0x0070);
		}

		// struct FRootMotionSourceStatus
		TEST_METHOD(ScriptStruct__Engine__RootMotionSourceStatus)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSourceStatus, Flags, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSourceStatus, 0x0001);
		}

		// struct FRootMotionFinishVelocitySettings
		TEST_METHOD(ScriptStruct__Engine__RootMotionFinishVelocitySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, mode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, UnknownData_AA4M, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, SetVelocity, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionFinishVelocitySettings, ClampVelocity, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionFinishVelocitySettings, 0x0014);
		}

		// struct FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_N1H6, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, priority, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, LocalID, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, AccumulateMode, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_F5T9, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, InstanceName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, startTime, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, CurrentTime, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, PreviousTime, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, duration, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, Status, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, settings, 0x0035);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, bInLocalSpace, 0x0036);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_BHGS, 0x0037);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, RootMotionParams, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, FinishVelocityParams, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource, UnknownData_4VLX, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource, 0x0098);
		}

		// struct FRootMotionSource_JumpForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_JumpForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, rotation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, distance, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, Height, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, bDisableTimeout, 0x00AC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_PA15, 0x00AD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, PathOffsetCurve, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, TimeMappingCurve, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_JumpForce, UnknownData_PK96, 0x00C0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_JumpForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToDynamicForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToDynamicForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, InitialTargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TargetLocation, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, bRestrictSpeedToExpected, 0x00BC);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, UnknownData_EJ0I, 0x00BD);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, PathOffsetCurve, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToDynamicForce, TimeMappingCurve, 0x00C8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToDynamicForce, 0x00D0);
		}

		// struct FRootMotionSource_MoveToForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_MoveToForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, StartLocation, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, TargetLocation, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, bRestrictSpeedToExpected, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, UnknownData_JAA5, 0x00B1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_MoveToForce, PathOffsetCurve, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_MoveToForce, 0x00C0);
		}

		// struct FRootMotionSource_RadialForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_RadialForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, location, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_XFJE, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, LocationActor, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, radius, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, Strength, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bIsPush, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bNoZForce, 0x00B9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_D6SG, 0x00BA);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthDistanceFalloff, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, StrengthOverTime, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, bUseFixedWorldDirection, 0x00D0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, UnknownData_589V, 0x00D1);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_RadialForce, FixedWorldDirection, 0x00D4);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_RadialForce, 0x00E0);
		}

		// struct FRootMotionSource_ConstantForce : public FRootMotionSource
		TEST_METHOD(ScriptStruct__Engine__RootMotionSource_ConstantForce)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, Force, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, UnknownData_XLXL, 0x00A4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRootMotionSource_ConstantForce, StrengthOverTime, 0x00A8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRootMotionSource_ConstantForce, 0x00B0);
		}

		// struct FCameraExposureSettings
		TEST_METHOD(ScriptStruct__Engine__CameraExposureSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Method, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_Q9MS, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, LowPercent, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HighPercent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MinBrightness, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MaxBrightness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedUp, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, SpeedDown, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, Bias, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, BiasCurve, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, MeterMask, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMin, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, HistogramLogMax, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, CalibrationConstant, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCameraExposureSettings, UnknownData_PJV7, 0x003D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCameraExposureSettings, 0x0040);
		}

		// struct FGaussianSumBloomSettings
		TEST_METHOD(ScriptStruct__Engine__GaussianSumBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, intensity, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, threshold, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, SizeScale, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Size, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Size, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Size, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Size, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Size, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Size, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter1Tint, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter2Tint, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter3Tint, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter4Tint, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter5Tint, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGaussianSumBloomSettings, Filter6Tint, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGaussianSumBloomSettings, 0x0084);
		}

		// struct FConvolutionBloomSettings
		TEST_METHOD(ScriptStruct__Engine__ConvolutionBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, texture, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, Size, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, CenterUV, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMin, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, PreFilterMult, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, BufferScale, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FConvolutionBloomSettings, UnknownData_VWJ6, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FConvolutionBloomSettings, 0x0028);
		}

		// struct FLensBloomSettings
		TEST_METHOD(ScriptStruct__Engine__LensBloomSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, GaussianSum, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_NW2N, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Convolution, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, Method, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensBloomSettings, UnknownData_RL98, 0x00B1);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensBloomSettings, 0x00B8);
		}

		// struct FLensImperfectionSettings
		TEST_METHOD(ScriptStruct__Engine__LensImperfectionSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMask, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskIntensity, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, DirtMaskTint, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensImperfectionSettings, UnknownData_99JW, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensImperfectionSettings, 0x0020);
		}

		// struct FLensSettings
		TEST_METHOD(ScriptStruct__Engine__LensSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Bloom, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, Imperfections, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, ChromaticAberration, 0x00D8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLensSettings, UnknownData_P9QV, 0x00DC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLensSettings, 0x00E0);
		}

		// struct FFilmStockSettings
		TEST_METHOD(ScriptStruct__Engine__FilmStockSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Slope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Toe, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, Shoulder, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, BlackClip, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFilmStockSettings, WhiteClip, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFilmStockSettings, 0x0014);
		}

		// struct FColorGradePerRangeSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradePerRangeSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Saturation, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, contrast, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gamma, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Gain, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradePerRangeSettings, Offset, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradePerRangeSettings, 0x0050);
		}

		// struct FColorGradingSettings
		TEST_METHOD(ScriptStruct__Engine__ColorGradingSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Global, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Shadows, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Midtones, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, Highlights, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, ShadowsMax, 0x0140);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, HighlightsMin, 0x0144);
			CHEAT_GEAR_CHECK_OFFSET(CG::FColorGradingSettings, UnknownData_2JNQ, 0x0148);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FColorGradingSettings, 0x0150);
		}

		// struct FEngineShowFlagsSetting
		TEST_METHOD(ScriptStruct__Engine__EngineShowFlagsSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, ShowFlagName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, enabled, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineShowFlagsSetting, UnknownData_68K6, 0x0011);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineShowFlagsSetting, 0x0018);
		}

		// struct FSimpleCurveKey
		TEST_METHOD(ScriptStruct__Engine__SimpleCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurveKey, Value, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurveKey, 0x0008);
		}

		// struct FSimpleCurve : public FRealCurve
		TEST_METHOD(ScriptStruct__Engine__SimpleCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, InterpMode, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, UnknownData_9AXD, 0x0071);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSimpleCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSimpleCurve, 0x0088);
		}

		// struct FClothPhysicsProperties_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothPhysicsProperties_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, VerticalResistance, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, HorizontalResistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, BendResistance, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, ShearResistance, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Friction, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Damping, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherStiffness, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, TetherLimit, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, Drag, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, StiffnessFrequency, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, GravityScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, MassScale, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, InertiaBlend, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionThickness, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionSquashScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SelfCollisionStiffness, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, SolverFrequency, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberCompression, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberExpansion, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothPhysicsProperties_Legacy, FiberResistance, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothPhysicsProperties_Legacy, 0x0050);
		}

		// struct FClothingAssetData_Legacy
		TEST_METHOD(ScriptStruct__Engine__ClothingAssetData_Legacy)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, AssetName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_9166, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, ApexFileName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, bClothPropertiesChanged, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_VR02, 0x0021);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, PhysicsProperties, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FClothingAssetData_Legacy, UnknownData_4I9P, 0x0074);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FClothingAssetData_Legacy, 0x0080);
		}

		// struct FSkeletalMeshClothBuildParams
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshClothBuildParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, TargetLod, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemapParameters, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_4IST, 0x000D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, AssetName, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, LodIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, SourceSection, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, bRemoveFromMesh, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, UnknownData_F6HY, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshClothBuildParams, PhysicsAsset, 0x0029);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshClothBuildParams, 0x0060);
		}

		// struct FBoneMirrorExport
		TEST_METHOD(ScriptStruct__Engine__BoneMirrorExport)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, SourceBoneName, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, BoneFlipAxis, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneMirrorExport, UnknownData_J0UJ, 0x0019);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneMirrorExport, 0x001C);
		}

		// struct FSkeletalMeshComponentClothTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentClothTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentClothTickFunction, UnknownData_VRNG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentClothTickFunction, 0x0030);
		}

		// struct FSkeletalMeshComponentEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshComponentEndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshComponentEndPhysicsTickFunction, UnknownData_KWBU, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshComponentEndPhysicsTickFunction, 0x0030);
		}

		// struct FBoneFilter
		TEST_METHOD(ScriptStruct__Engine__BoneFilter)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, bExcludeSelf, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, UnknownData_KXLE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneFilter, BoneName, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneFilter, 0x0010);
		}

		// struct FSkeletalMeshLODGroupSettings
		TEST_METHOD(ScriptStruct__Engine__SkeletalMeshLODGroupSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, LODHysteresis, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneFilterActionOption, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_5XP5, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BoneList, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BonesToPrioritize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, WeightOfPrioritization, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_YGAW, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, BakePose, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, ReductionSettings, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletalMeshLODGroupSettings, UnknownData_PQPV, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletalMeshLODGroupSettings, 0x0080);
		}

		// struct FNameMapping
		TEST_METHOD(ScriptStruct__Engine__NameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, NodeName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNameMapping, BoneName, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNameMapping, 0x0018);
		}

		// struct FRigConfiguration
		TEST_METHOD(ScriptStruct__Engine__RigConfiguration)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, Rig, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FRigConfiguration, BoneMappingTable, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FRigConfiguration, 0x0018);
		}

		// struct FBoneReductionSetting
		TEST_METHOD(ScriptStruct__Engine__BoneReductionSetting)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBoneReductionSetting, BonesToRemove, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBoneReductionSetting, 0x0010);
		}

		// struct FReferencePose
		TEST_METHOD(ScriptStruct__Engine__ReferencePose)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, PoseName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, UnknownData_HV28, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FReferencePose, ReferencePose, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FReferencePose, 0x0020);
		}

		// struct FSkeletonToMeshLinkup
		TEST_METHOD(ScriptStruct__Engine__SkeletonToMeshLinkup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, SkeletonToMeshTable, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkeletonToMeshLinkup, MeshToSkeletonTable, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkeletonToMeshLinkup, 0x0020);
		}

		// struct FSkelMeshSkinWeightInfo
		TEST_METHOD(ScriptStruct__Engine__SkelMeshSkinWeightInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Bones, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSkelMeshSkinWeightInfo, Weights, 0x0030);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSkelMeshSkinWeightInfo, 0x003C);
		}

		// struct FTentDistribution
		TEST_METHOD(ScriptStruct__Engine__TentDistribution)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipAltitude, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, TipValue, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTentDistribution, Width, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTentDistribution, 0x000C);
		}

		// struct FPrecomputedSkyLightInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__PrecomputedSkyLightInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, LightGuid, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, AverageBrightness, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPrecomputedSkyLightInstanceData, UnknownData_DAEY, 0x00BC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPrecomputedSkyLightInstanceData, 0x0160);
		}

		// struct FSmartNameMapping
		TEST_METHOD(ScriptStruct__Engine__SmartNameMapping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSmartNameMapping, UnknownData_BKSZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSmartNameMapping, 0x0070);
		}

		// struct FCurveMetaData
		TEST_METHOD(ScriptStruct__Engine__CurveMetaData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCurveMetaData, UnknownData_FUYR, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCurveMetaData, 0x0020);
		}

		// struct FPassiveSoundMixModifier
		TEST_METHOD(ScriptStruct__Engine__PassiveSoundMixModifier)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, SoundMix, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MinVolumeThreshold, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPassiveSoundMixModifier, MaxVolumeThreshold, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPassiveSoundMixModifier, 0x0010);
		}

		// struct FSoundClassProperties
		TEST_METHOD(ScriptStruct__Engine__SoundClassProperties)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, volume, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Pitch, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LowPassFilterFrequency, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, AttenuationDistanceScale, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, StereoBleed, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LFEBleed, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, VoiceCenterChannelVolume, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolume, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, RadioFilterVolumeThreshold, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_RK17, 0x0025);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, Default2DReverbSendAmount, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, OutputTarget, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, LoadingBehavior, 0x002D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_HWEF, 0x002E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, DefaultSubmix, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassProperties, UnknownData_C8N1, 0x0038);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassProperties, 0x0058);
		}

		// struct FSoundClassEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundClassEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassEditorData, UnknownData_Y5YQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassEditorData, 0x0008);
		}

		// struct FSoundNodeEditorData
		TEST_METHOD(ScriptStruct__Engine__SoundNodeEditorData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundNodeEditorData, UnknownData_7P3R, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundNodeEditorData, 0x0008);
		}

		// struct FSourceEffectChainEntry
		TEST_METHOD(ScriptStruct__Engine__SourceEffectChainEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, Preset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSourceEffectChainEntry, UnknownData_WAAK, 0x0009);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSourceEffectChainEntry, 0x0010);
		}

		// struct FSoundGroup
		TEST_METHOD(ScriptStruct__Engine__SoundGroup)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, SoundGroup, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_W50Y, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DisplayName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, UnknownData_WJKX, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundGroup, DecompressedDuration, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundGroup, 0x0020);
		}

		// struct FSoundClassAdjuster
		TEST_METHOD(ScriptStruct__Engine__SoundClassAdjuster)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, SoundClassObject, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VolumeAdjuster, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, PitchAdjuster, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, LowPassFilterFrequency, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_KRCW, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, VoiceCenterChannelVolumeAdjuster, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundClassAdjuster, UnknownData_VUNN, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundClassAdjuster, 0x0020);
		}

		// struct FAudioEQEffect : public FAudioEffectParameters
		TEST_METHOD(ScriptStruct__Engine__AudioEQEffect)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, UnknownData_CLBD, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter0, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain0, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth0, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter1, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain1, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth1, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter2, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain2, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth2, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, FrequencyCenter3, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Gain3, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAudioEQEffect, Bandwidth3, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAudioEQEffect, 0x0040);
		}

		// struct FDistanceDatum
		TEST_METHOD(ScriptStruct__Engine__DistanceDatum)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceStart, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeInDistanceEnd, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceStart, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, FadeOutDistanceEnd, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FDistanceDatum, volume, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FDistanceDatum, 0x0014);
		}

		// struct FModulatorContinuousParams
		TEST_METHOD(ScriptStruct__Engine__ModulatorContinuousParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, parameterName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, Default, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinInput, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxInput, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MinOutput, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, MaxOutput, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, ParamMode, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FModulatorContinuousParams, UnknownData_4C2J, 0x0021);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FModulatorContinuousParams, 0x0024);
		}

		// struct FSoundWaveEnvelopeDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveEnvelopeDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, Envelope, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, PlaybackTime, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveEnvelopeDataPerSound, SoundWave, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveEnvelopeDataPerSound, 0x0010);
		}

		// struct FSoundWaveSpectralData
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, FrequencyHz, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, Magnitude, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralData, NormalizedMagnitude, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralData, 0x000C);
		}

		// struct FSoundWaveSpectralDataPerSound
		TEST_METHOD(ScriptStruct__Engine__SoundWaveSpectralDataPerSound)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SpectralData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, PlaybackTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, UnknownData_OF8V, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSoundWaveSpectralDataPerSound, SoundWave, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSoundWaveSpectralDataPerSound, 0x0020);
		}

		// struct FStreamedAudioPlatformData
		TEST_METHOD(ScriptStruct__Engine__StreamedAudioPlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamedAudioPlatformData, UnknownData_PE8W, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamedAudioPlatformData, 0x0020);
		}

		// struct FSplineInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, bSplineHasBeenEdited, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, UnknownData_5HHK, 0x00A9);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurves, 0x00B0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineInstanceData, SplineCurvesPreUCS, 0x0118);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineInstanceData, 0x0180);
		}

		// struct FSplinePoint
		TEST_METHOD(ScriptStruct__Engine__SplinePoint)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, inputKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, position, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, ArriveTangent, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, LeaveTangent, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, rotation, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, scale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, type, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplinePoint, UnknownData_6NV9, 0x0041);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplinePoint, 0x0044);
		}

		// struct FSplineMeshInstanceData : public FSceneComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__SplineMeshInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartPos, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndPos, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, StartTangent, 0x00C0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshInstanceData, EndTangent, 0x00CC);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshInstanceData, 0x00D8);
		}

		// struct FSplineMeshParams
		TEST_METHOD(ScriptStruct__Engine__SplineMeshParams)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartPos, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartTangent, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartScale, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartRoll, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, StartOffset, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndPos, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndTangent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndRoll, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSplineMeshParams, EndOffset, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSplineMeshParams, 0x0058);
		}

		// struct FMaterialRemapIndex
		TEST_METHOD(ScriptStruct__Engine__MaterialRemapIndex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, ImportVersionKey, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, UnknownData_7H6B, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMaterialRemapIndex, MaterialRemap, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMaterialRemapIndex, 0x0018);
		}

		// struct FStaticMaterial
		TEST_METHOD(ScriptStruct__Engine__StaticMaterial)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, materialInterface, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, MaterialSlotName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, ImportedMaterialSlotName, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UVChannelData, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMaterial, UnknownData_PLT1, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMaterial, 0x0038);
		}

		// struct FAssetEditorOrbitCameraPosition
		TEST_METHOD(ScriptStruct__Engine__AssetEditorOrbitCameraPosition)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, bIsSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, UnknownData_2CSE, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitPoint, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitZoom, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAssetEditorOrbitCameraPosition, CamOrbitRotation, 0x001C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAssetEditorOrbitCameraPosition, 0x0028);
		}

		// struct FMeshSectionInfo
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, MaterialIndex, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bEnableCollision, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bCastShadow, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, bForceOpaque, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfo, UnknownData_1MIR, 0x0007);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfo, 0x0008);
		}

		// struct FMeshSectionInfoMap
		TEST_METHOD(ScriptStruct__Engine__MeshSectionInfoMap)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMeshSectionInfoMap, map, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMeshSectionInfoMap, 0x0050);
		}

		// struct FStaticMeshSourceModel
		TEST_METHOD(ScriptStruct__Engine__StaticMeshSourceModel)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, BuildSettings, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ReductionSettings, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, LODDistance, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, ScreenSize, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, UnknownData_HCIM, 0x005C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshSourceModel, SourceImportFilename, 0x0060);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshSourceModel, 0x0070);
		}

		// struct FStaticMeshOptimizationSettings
		TEST_METHOD(ScriptStruct__Engine__StaticMeshOptimizationSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ReductionMethod, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_TYZA, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NumOfTrianglesPercentage, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, MaxDeviationPercentage, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, WeldingThreshold, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, bRecalcNormals, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_YJG5, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, NormalsThreshold, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, SilhouetteImportance, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, TextureImportance, 0x0019);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, ShadingImportance, 0x001A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshOptimizationSettings, UnknownData_8QOY, 0x001B);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshOptimizationSettings, 0x001C);
		}

		// struct FPaintedVertex
		TEST_METHOD(ScriptStruct__Engine__PaintedVertex)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, position, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, color, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPaintedVertex, normal, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPaintedVertex, 0x0020);
		}

		// struct FStaticMeshVertexColorLODData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshVertexColorLODData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, PaintedVertices, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, VertexBufferColors, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, LodIndex, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshVertexColorLODData, UnknownData_7442, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshVertexColorLODData, 0x0028);
		}

		// struct FStaticMeshComponentInstanceData : public FPrimitiveComponentInstanceData
		TEST_METHOD(ScriptStruct__Engine__StaticMeshComponentInstanceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StaticMesh, 0x00F0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, VertexColorLODs, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, CachedStaticLighting, 0x0108);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, StreamingTextureData, 0x0118);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStaticMeshComponentInstanceData, UnknownData_CU6V, 0x0128);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStaticMeshComponentInstanceData, 0x0130);
		}

		// struct FEquirectProps
		TEST_METHOD(ScriptStruct__Engine__EquirectProps)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftUVRect, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightUVRect, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftScale, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightScale, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, LeftBias, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEquirectProps, RightBias, 0x0040);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEquirectProps, 0x0048);
		}

		// struct FStringCurveKey
		TEST_METHOD(ScriptStruct__Engine__StringCurveKey)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, UnknownData_R3W8, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurveKey, Value, 0x0008);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurveKey, 0x0018);
		}

		// struct FStringCurve : public FIndexedCurve
		TEST_METHOD(ScriptStruct__Engine__StringCurve)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, DefaultValue, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStringCurve, Keys, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStringCurve, 0x0088);
		}

		// struct FSubsurfaceProfileStruct
		TEST_METHOD(ScriptStruct__Engine__SubsurfaceProfileStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SurfaceAlbedo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathColor, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, MeanFreePathDistance, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, WorldUnitScale, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, bEnableBurley, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, UnknownData_XCVM, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatterRadius, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, SubsurfaceColor, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, FalloffColor, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, BoundaryColorBleed, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ExtinctionScale, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, NormalScale, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, ScatteringDistribution, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, IOR, 0x006C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness0, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, Roughness1, 0x0074);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, LobeMix, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSubsurfaceProfileStruct, TransmissionTintColor, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSubsurfaceProfileStruct, 0x008C);
		}

		// struct FTextureFormatSettings
		TEST_METHOD(ScriptStruct__Engine__TextureFormatSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureFormatSettings, CompressionSettings, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureFormatSettings, 0x0002);
		}

		// struct FTexturePlatformData
		TEST_METHOD(ScriptStruct__Engine__TexturePlatformData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTexturePlatformData, UnknownData_38SB, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTexturePlatformData, 0x0030);
		}

		// struct FTextureSource
		TEST_METHOD(ScriptStruct__Engine__TextureSource)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSource, UnknownData_8A34, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSource, 0x0038);
		}

		// struct FTextureSourceBlock
		TEST_METHOD(ScriptStruct__Engine__TextureSourceBlock)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockX, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, BlockY, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, sizeX, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, sizeY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumSlices, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTextureSourceBlock, NumMips, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTextureSourceBlock, 0x0018);
		}

		// struct FStreamingRenderAssetPrimitiveInfo
		TEST_METHOD(ScriptStruct__Engine__StreamingRenderAssetPrimitiveInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, RenderAsset, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, Bounds, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, TexelFactor, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, PackedRelativeBox, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStreamingRenderAssetPrimitiveInfo, UnknownData_98BM, 0x002D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStreamingRenderAssetPrimitiveInfo, 0x0030);
		}

		// struct FTimelineEventEntry
		TEST_METHOD(ScriptStruct__Engine__TimelineEventEntry)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, time, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, EventFunc, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineEventEntry, UnknownData_0CB0, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineEventEntry, 0x0018);
		}

		// struct FTimelineVectorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_GBLO, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, TrackName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, VectorPropertyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineVectorTrack, UnknownData_LFOQ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineVectorTrack, 0x0050);
		}

		// struct FTimelineFloatTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_AKBZ, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, TrackName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, FloatPropertyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineFloatTrack, UnknownData_UZKJ, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineFloatTrack, 0x0050);
		}

		// struct FTimelineLinearColorTrack
		TEST_METHOD(ScriptStruct__Engine__TimelineLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, InterpFunc, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_KSNY, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, TrackName, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, LinearColorPropertyName, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimelineLinearColorTrack, UnknownData_7X05, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimelineLinearColorTrack, 0x0050);
		}

		// struct FTimeline
		TEST_METHOD(ScriptStruct__Engine__Timeline)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, LengthMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_6N11, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, length, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, playRate, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, position, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, Events, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpVectors, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpFloats, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, InterpLinearColors, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelinePostUpdateFunc, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_O0CW, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, TimelineFinishedFunc, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_T7DQ, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, PropertySetObject, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, DirectionPropertyName, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeline, UnknownData_3K05, 0x008C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeline, 0x00A8);
		}

		// struct FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTTrackBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_VCKD, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, TrackName, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, bIsExternalCurve, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTTrackBase, UnknownData_S072, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTTrackBase, 0x0018);
		}

		// struct FTTPropertyTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTPropertyTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, propertyName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTPropertyTrack, UnknownData_XFYQ, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTPropertyTrack, 0x0028);
		}

		// struct FTTLinearColorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTLinearColorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTLinearColorTrack, CurveLinearColor, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTLinearColorTrack, 0x0030);
		}

		// struct FTTVectorTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTVectorTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTVectorTrack, CurveVector, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTVectorTrack, 0x0030);
		}

		// struct FTTFloatTrack : public FTTPropertyTrack
		TEST_METHOD(ScriptStruct__Engine__TTFloatTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTFloatTrack, CurveFloat, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTFloatTrack, 0x0030);
		}

		// struct FTTEventTrack : public FTTTrackBase
		TEST_METHOD(ScriptStruct__Engine__TTEventTrack)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, FunctionName, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, UnknownData_OU9F, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTTEventTrack, CurveKeys, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTTEventTrack, 0x0030);
		}

		// struct FTimeStretchCurveInstance
		TEST_METHOD(ScriptStruct__Engine__TimeStretchCurveInstance)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, bHasValidData, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimeStretchCurveInstance, UnknownData_KT9N, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimeStretchCurveInstance, 0x0030);
		}

		// struct FTouchInputControl
		TEST_METHOD(ScriptStruct__Engine__TouchInputControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, Image2, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, center, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, VisualSize, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, BackgroundSize, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, ThumbSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InteractionSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, InputScale, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, MainInputKey, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, AltInputKey, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, bPreventRecenter, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, bIndependentAxes, 0x0081);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, bManualScaling, 0x0082);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTouchInputControl, UnknownData_CKHI, 0x0083);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTouchInputControl, 0x0088);
		}

		// struct FHardwareCursorReference
		TEST_METHOD(ScriptStruct__Engine__HardwareCursorReference)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, CursorPath, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHardwareCursorReference, HotSpot, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHardwareCursorReference, 0x0014);
		}

		// struct FVirtualTextureBuildSettings
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureBuildSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, TileBorderSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressCrunch, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, bEnableCompressZlib, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureBuildSettings, UnknownData_VJ5U, 0x000A);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureBuildSettings, 0x000C);
		}

		// struct FVirtualTextureSpacePoolConfig
		TEST_METHOD(ScriptStruct__Engine__VirtualTextureSpacePoolConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MinTileSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, MaxTileSize, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, Formats, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, SizeInMegabyte, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, bAllowSizeScale, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVirtualTextureSpacePoolConfig, UnknownData_MA9K, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVirtualTextureSpacePoolConfig, 0x0020);
		}

		// struct FVoiceSettings
		TEST_METHOD(ScriptStruct__Engine__VoiceSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, ComponentToAttachTo, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, AttenuationSettings, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FVoiceSettings, SourceEffectChain, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FVoiceSettings, 0x0018);
		}

		// struct FEndPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__EndPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEndPhysicsTickFunction, UnknownData_VWAG, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEndPhysicsTickFunction, 0x0030);
		}

		// struct FStartPhysicsTickFunction : public FTickFunction
		TEST_METHOD(ScriptStruct__Engine__StartPhysicsTickFunction)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStartPhysicsTickFunction, UnknownData_IO26, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStartPhysicsTickFunction, 0x0030);
		}

		// struct FLevelViewportInfo
		TEST_METHOD(ScriptStruct__Engine__LevelViewportInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamPosition, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamRotation, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamOrthoZoom, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, CamUpdated, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLevelViewportInfo, UnknownData_85JW, 0x001D);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLevelViewportInfo, 0x0020);
		}

		// struct FBroadphaseSettings
		TEST_METHOD(ScriptStruct__Engine__BroadphaseSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnClient, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOnServer, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, bUseMBPOuterBounds, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, UnknownData_2PB4, 0x0003);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPBounds, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPOuterBounds, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBroadphaseSettings, MBPNumSubdivs, 0x003C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBroadphaseSettings, 0x0040);
		}

		// struct FHierarchicalSimplification
		TEST_METHOD(ScriptStruct__Engine__HierarchicalSimplification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, TransitionScreenSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, OverrideDrawDistance, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, UnknownData_B2GS, 0x0009);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, ProxySetting, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MergeSetting, 0x00B4);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredBoundRadius, 0x0154);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, DesiredFillingPercentage, 0x0158);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHierarchicalSimplification, MinNumberOfActorsToBuild, 0x015C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHierarchicalSimplification, 0x0160);
		}

		// struct FNetViewer
		TEST_METHOD(ScriptStruct__Engine__NetViewer)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, Connection, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, InViewer, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewTarget, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewLocation, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FNetViewer, ViewDir, 0x0024);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FNetViewer, 0x0030);
		}

		// struct FLightmassWorldInfoSettings
		TEST_METHOD(ScriptStruct__Engine__LightmassWorldInfoSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, StaticLightingLevelScale, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumIndirectLightingBounces, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, NumSkyLightingBounces, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingQuality, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectLightingSmoothness, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentColor, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EnvironmentIntensity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, EmissiveBoost, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DiffuseBoost, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightingMethod, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, UnknownData_AQFK, 0x0026);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapDetailCellSize, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapMaximumBrickMemoryMb, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumetricLightmapSphericalHarmonicSmoothing, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, VolumeLightSamplePlacementScale, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, DirectIlluminationOcclusionFraction, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, IndirectIlluminationOcclusionFraction, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, OcclusionExponent, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, FullyOccludedSamplesFraction, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLightmassWorldInfoSettings, MaxOcclusionDistance, 0x0048);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLightmassWorldInfoSettings, 0x004C);
		}

		// struct FAppleImageUtilsImageConversionResult
		TEST_METHOD(ScriptStruct__AppleImageUtils__AppleImageUtilsImageConversionResult)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, Error, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FAppleImageUtilsImageConversionResult, ImageData, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FAppleImageUtilsImageConversionResult, 0x0020);
		}

		// struct FSHAHashData
		TEST_METHOD(ScriptStruct__BuildPatchServices__SHAHashData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSHAHashData, Hash, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSHAHashData, 0x0014);
		}

		// struct FChunkInfoData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkInfoData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, Hash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, ShaHash, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_5JPC, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, FileSize, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, GroupNumber, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkInfoData, UnknownData_FG05, 0x0039);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkInfoData, 0x0040);
		}

		// struct FChunkPartData
		TEST_METHOD(ScriptStruct__BuildPatchServices__ChunkPartData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Offset, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChunkPartData, Size, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChunkPartData, 0x0018);
		}

		// struct FFileManifestData
		TEST_METHOD(ScriptStruct__BuildPatchServices__FileManifestData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileHash, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_Q3B2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, FileChunkParts, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, InstallTags, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsUnixExecutable, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_73OA, 0x0049);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, SymlinkTarget, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsReadOnly, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, bIsCompressed, 0x0061);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFileManifestData, UnknownData_H6JT, 0x0062);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFileManifestData, 0x0068);
		}

		// struct FCustomFieldData
		TEST_METHOD(ScriptStruct__BuildPatchServices__CustomFieldData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, key, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FCustomFieldData, Value, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FCustomFieldData, 0x0020);
		}

		// struct FChaosDebugSubstepControl
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosDebugSubstepControl)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bPause, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bSubstep, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosDebugSubstepControl, bStep, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosDebugSubstepControl, 0x0003);
		}

		// struct FChaosHandlerSet
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosHandlerSet)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, UnknownData_H1OI, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosHandlerSet, ChaosHandlers, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosHandlerSet, 0x0058);
		}

		// struct FBreakEventCallbackWrapper
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__BreakEventCallbackWrapper)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreakEventCallbackWrapper, UnknownData_NNSZ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreakEventCallbackWrapper, 0x0040);
		}

		// struct FChaosPhysicsCollisionInfo
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosPhysicsCollisionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherComponent, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, location, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, normal, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AccumulatedImpulse, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Velocity, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherVelocity, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, AngularVelocity, 0x004C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherAngularVelocity, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, Mass, 0x0064);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, OtherMass, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosPhysicsCollisionInfo, UnknownData_3KKE, 0x006C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosPhysicsCollisionInfo, 0x0070);
		}

		// struct FChaosBreakEvent
		TEST_METHOD(ScriptStruct__ChaosSolverEngine__ChaosBreakEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, component, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, location, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Velocity, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, AngularVelocity, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakEvent, Mass, 0x002C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakEvent, 0x0030);
		}

		// struct FChaosTrailingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, AngularVelocity, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, Mass, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventData, ParticleIndex, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventData, 0x002C);
		}

		// struct FGeometryCollectionDebugDrawActorSelectedRigidBody
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawActorSelectedRigidBody)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Id, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, UnknownData_O2TZ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, Solver, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, GeometryCollection, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawActorSelectedRigidBody, 0x0018);
		}

		// struct FGeometryCollectionDebugDrawWarningMessage
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionDebugDrawWarningMessage)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionDebugDrawWarningMessage, UnknownData_GMAJ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionDebugDrawWarningMessage, 0x0001);
		}

		// struct FChaosCollisionEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxNumberResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MinImpulse, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventRequestSettings, UnknownData_MM8P, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventRequestSettings, 0x0018);
		}

		// struct FChaosBreakingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MinMass, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventRequestSettings, UnknownData_HYCR, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventRequestSettings, 0x0018);
		}

		// struct FChaosTrailingEventRequestSettings
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosTrailingEventRequestSettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxNumberOfResults, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinMass, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinSpeed, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MinAngularSpeed, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, MaxDistance, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, SortMethod, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosTrailingEventRequestSettings, UnknownData_7TDC, 0x0015);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosTrailingEventRequestSettings, 0x0018);
		}

		// struct FGeomComponentCacheParameters
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeomComponentCacheParameters)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CacheMode, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_OUFO, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TargetCache, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, ReverseCacheBeginTime, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveCollisionData, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateCollisionData, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_SELZ, 0x0016);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSizeMax, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoCollisionDataSpatialHash, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_NGW5, 0x001D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, CollisionDataSpatialHashRadius, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxCollisionPerCell, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveBreakingData, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateBreakingData, 0x0029);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_849O, 0x002A);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSizeMax, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoBreakingDataSpatialHash, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_CN3P, 0x0031);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, BreakingDataSpatialHashRadius, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, MaxBreakingPerCell, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, SaveTrailingData, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, DoGenerateTrailingData, 0x003D);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_9SSD, 0x003E);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingDataSizeMax, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinSpeedThreshold, 0x0044);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, TrailingMinVolumeThreshold, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeomComponentCacheParameters, UnknownData_18IP, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeomComponentCacheParameters, 0x0050);
		}

		// struct FChaosCollisionEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosCollisionEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, normal, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity1, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Velocity2, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass1, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Mass2, 0x0034);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, Impulse, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosCollisionEventData, UnknownData_2WIQ, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosCollisionEventData, 0x0058);
		}

		// struct FChaosBreakingEventData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__ChaosBreakingEventData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, location, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Velocity, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChaosBreakingEventData, Mass, 0x0018);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChaosBreakingEventData, 0x001C);
		}

		// struct FGeometryCollectionSizeSpecificData
		TEST_METHOD(ScriptStruct__GeometryCollectionEngine__GeometryCollectionSizeSpecificData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxSize, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionType, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, ImplicitType, 0x0005);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, UnknownData_S63M, 0x0006);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinLevelSetResolution, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxLevelSetResolution, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MinClusterLevelSetResolution, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaxClusterLevelSetResolution, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionObjectReductionPercentage, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, CollisionParticlesFraction, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCollectionSizeSpecificData, MaximumCollisionParticles, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCollectionSizeSpecificData, 0x0024);
		}

		// struct FEngineServicePing
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePing)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePing, UnknownData_NTLV, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePing, 0x0001);
		}

		// struct FEngineServiceTerminate
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceTerminate)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceTerminate, UserName, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceTerminate, 0x0010);
		}

		// struct FEngineServiceExecuteCommand
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceExecuteCommand)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, Command, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceExecuteCommand, UserName, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceExecuteCommand, 0x0020);
		}

		// struct FEngineServiceAuthDeny
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthDeny)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthDeny, UserToDeny, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthDeny, 0x0020);
		}

		// struct FEngineServiceAuthGrant
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceAuthGrant)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceAuthGrant, UserToGrant, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceAuthGrant, 0x0020);
		}

		// struct FEngineServiceNotification
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServiceNotification)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, text, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServiceNotification, TimeSeconds, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServiceNotification, 0x0018);
		}

		// struct FEngineServicePong
		TEST_METHOD(ScriptStruct__EngineMessages__EngineServicePong)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, CurrentLevel, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, EngineVersion, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, HasBegunPlay, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_OBR4, 0x0015);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceId, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, InstanceType, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, SessionId, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, WorldTimeSeconds, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FEngineServicePong, UnknownData_VGI7, 0x004C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FEngineServicePong, 0x0050);
		}

		// struct FButtonSequenceData : public FTableRowBase
		TEST_METHOD(ScriptStruct__InputUtilities__ButtonSequenceData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, SequenceId, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, UnknownData_3HKA, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, sequence, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, TimeOut, 0x0028);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, UnknownData_P5FR, 0x002C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, Platforms, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, MinKeysForFailedAttempt, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FButtonSequenceData, UnknownData_U8QX, 0x0044);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FButtonSequenceData, 0x0048);
		}

		// struct FStructSerializerSetTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerSetTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StrSet, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, IntSet, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, NameSet, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerSetTestStruct, StructSet, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerSetTestStruct, 0x0140);
		}

		// struct FStructSerializerBuiltinTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBuiltinTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, guid, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, name, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_QD3Q, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, String, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, text, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, vector, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_UKUQ, 0x0054);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Vector4, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Rotator, 0x0070);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_NHI0, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, Quat, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, color, 0x0090);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBuiltinTestStruct, UnknownData_NZ9E, 0x0094);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBuiltinTestStruct, 0x00A0);
		}

		// struct FStructSerializerObjectTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerObjectTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Class, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SubClass, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftClass, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, Object, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, WeakObject, 0x0048);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, SoftObject, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ClassPath, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerObjectTestStruct, ObjectPath, 0x00A0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerObjectTestStruct, 0x00C0);
		}

		// struct FStructSerializerBooleanTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerBooleanTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolFalse, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerBooleanTestStruct, BoolTrue, 0x0001);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerBooleanTestStruct, 0x0003);
		}

		// struct FStructSerializerByteArray
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerByteArray)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy1, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_XYGQ, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, ByteArray, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy2, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_0KDR, 0x001C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Int8Array, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, Dummy3, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerByteArray, UnknownData_R5WK, 0x0034);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerByteArray, 0x0038);
		}

		// struct FStructSerializerNumericTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerNumericTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int8, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_MBVN, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int16, 0x0002);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int32, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Int64, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt8, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_4SQZ, 0x0011);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt16, 0x0012);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt32, 0x0014);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UInt64, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Float, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, UnknownData_A14B, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerNumericTestStruct, Double, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerNumericTestStruct, 0x0030);
		}

		// struct FStructSerializerMapTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerMapTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, IntToStr, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStr, 0x0050);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToVec, 0x00A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerMapTestStruct, StrToStruct, 0x00F0);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerMapTestStruct, 0x0140);
		}

		// struct FStructSerializerArrayTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerArrayTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, Int32Array, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, ByteArray, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticSingleElement, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticInt32Array, 0x0024);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StaticFloatArray, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, UnknownData_ULZE, 0x003C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, VectorArray, 0x0040);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerArrayTestStruct, StructArray, 0x0050);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerArrayTestStruct, 0x0060);
		}

		// struct FStructSerializerTestStruct
		TEST_METHOD(ScriptStruct__Serialization__StructSerializerTestStruct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Numerics, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Booleans, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_LGR7, 0x0033);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Objects, 0x0038);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, UnknownData_QPAI, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Builtins, 0x0100);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Arrays, 0x01A0);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Maps, 0x0200);
			CHEAT_GEAR_CHECK_OFFSET(CG::FStructSerializerTestStruct, Sets, 0x0340);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FStructSerializerTestStruct, 0x0480);
		}

		// struct FBreathingBubble_Struct
		TEST_METHOD(UserDefinedStruct__BreathingBubble_Struct__BreathingBubble_Struct)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreathingBubble_Struct, Thickness_22_E73532F746073824182B51BCBBB6A322, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreathingBubble_Struct, PeakAbsciss_32_9E6A3A0C444233C2052CEB8C75F28CB0, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreathingBubble_Struct, PeakOrdinate_26_C69A1832461F335A95D8EAA43BB90041, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreathingBubble_Struct, ScaleValue_27_0319B8BA4CA8E7F78CDB5EB919BCD823, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreathingBubble_Struct, Time_28_4DBB05714017200FEEFB369D030B37DA, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FBreathingBubble_Struct, Duration_31_F6AFB3AE45D7E0340DC28D81EA57EDA4, 0x0014);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FBreathingBubble_Struct, 0x0018);
		}

		// struct FOnlinePartyRepDataBase
		TEST_METHOD(ScriptStruct__Party__OnlinePartyRepDataBase)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FOnlinePartyRepDataBase, UnknownData_C24F, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FOnlinePartyRepDataBase, 0x0018);
		}

		// struct FUserPlatform
		TEST_METHOD(ScriptStruct__Party__UserPlatform)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FUserPlatform, PlatformStr, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FUserPlatform, 0x0010);
		}

		// struct FPartyMemberRepData : public FOnlinePartyRepDataBase
		TEST_METHOD(ScriptStruct__Party__PartyMemberRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, UnknownData_D66N, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, Platform, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, UnknownData_N3GD, 0x0030);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, PlatformUniqueId, 0x0060);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, UnknownData_AVJO, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, PlatformSessionId, 0x00B8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, UnknownData_5YMB, 0x00C8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, CrossplayPreference, 0x00F8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyMemberRepData, UnknownData_OJCW, 0x00F9);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyMemberRepData, 0x0130);
		}

		// struct FPartyPrivacySettings
		TEST_METHOD(ScriptStruct__Party__PartyPrivacySettings)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPrivacySettings, PartyType, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPrivacySettings, PartyInviteRestriction, 0x0001);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPrivacySettings, bOnlyLeaderFriendsCanJoin, 0x0002);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyPrivacySettings, 0x0003);
		}

		// struct FPartyPlatformSessionInfo
		TEST_METHOD(ScriptStruct__Party__PartyPlatformSessionInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPlatformSessionInfo, OSSName, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPlatformSessionInfo, UnknownData_GSXY, 0x000C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPlatformSessionInfo, SessionId, 0x0010);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyPlatformSessionInfo, OwnerPrimaryId, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyPlatformSessionInfo, 0x0048);
		}

		// struct FSocialChatChannelConfig
		TEST_METHOD(ScriptStruct__Party__SocialChatChannelConfig)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialChatChannelConfig, SocialUser, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialChatChannelConfig, UnknownData_LN5B, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialChatChannelConfig, ListenChannels, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FSocialChatChannelConfig, UnknownData_7X0G, 0x0028);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FSocialChatChannelConfig, 0x0040);
		}

		// struct FPartyRepData : public FOnlinePartyRepDataBase
		TEST_METHOD(ScriptStruct__Party__PartyRepData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyRepData, UnknownData_ZOH4, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyRepData, PrivacySettings, 0x0020);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyRepData, UnknownData_GS2W, 0x0023);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyRepData, PlatformSessions, 0x0058);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPartyRepData, UnknownData_ZIQH, 0x0068);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPartyRepData, 0x0080);
		}

		// struct FTrackRenderData
		TEST_METHOD(ScriptStruct__GeometryCache__TrackRenderData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTrackRenderData, UnknownData_OUUM, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTrackRenderData, 0x0070);
		}

		// struct FGeometryCacheMeshData
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshData, UnknownData_5PU0, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshData, 0x00A8);
		}

		// struct FGeometryCacheVertexInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheVertexInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheVertexInfo, UnknownData_E0VY, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheVertexInfo, 0x0008);
		}

		// struct FGeometryCacheMeshBatchInfo
		TEST_METHOD(ScriptStruct__GeometryCache__GeometryCacheMeshBatchInfo)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FGeometryCacheMeshBatchInfo, UnknownData_YDDQ, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FGeometryCacheMeshBatchInfo, 0x000C);
		}

		// struct FMagicLeapARPinState
		TEST_METHOD(ScriptStruct__MagicLeapARPin__MagicLeapARPinState)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, Confidence, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, ValidRadius, 0x0004);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, RotationError, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FMagicLeapARPinState, TranslationError, 0x000C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FMagicLeapARPinState, 0x0010);
		}

		// struct FFootBoneData
		TEST_METHOD(ScriptStruct__DBDAnimation__FootBoneData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootBoneData, RightFootCurve, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootBoneData, UnknownData_Z4QE, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootBoneData, LeftFootCurve, 0x0018);
			CHEAT_GEAR_CHECK_OFFSET(CG::FFootBoneData, UnknownData_IXRO, 0x0020);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FFootBoneData, 0x0030);
		}

		// struct FPerspectiveDependentAnimSequenceSelector
		TEST_METHOD(ScriptStruct__DBDAnimation__PerspectiveDependentAnimSequenceSelector)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveDependentAnimSequenceSelector, _current, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveDependentAnimSequenceSelector, _thirdPerson, 0x0008);
			CHEAT_GEAR_CHECK_OFFSET(CG::FPerspectiveDependentAnimSequenceSelector, _firstPerson, 0x0010);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FPerspectiveDependentAnimSequenceSelector, 0x0018);
		}

		// struct FChainsawEvent
		TEST_METHOD(ScriptStruct__TheHillbilly__ChainsawEvent)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChainsawEvent, ElapsedMatchTime, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChainsawEvent, 0x0004);
		}

		// struct FChainsawEventWhileCamping : public FChainsawEvent
		TEST_METHOD(ScriptStruct__TheHillbilly__ChainsawEventWhileCamping)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChainsawEventWhileCamping, DistanceFromClosestHook, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChainsawEventWhileCamping, 0x0008);
		}

		// struct FChainsawAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__TheHillbilly__ChainsawAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FChainsawAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FChainsawAnalytics, DownSurvivorsWithChainsawWhileCampingEvents, 0x0078);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FChainsawAnalytics, 0x0088);
		}

		// struct FHillbillyAnalytics : public FChainsawAnalytics
		TEST_METHOD(ScriptStruct__TheHillbilly__HillbillyAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FHillbillyAnalytics, OverheatEvents, 0x0088);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHillbillyAnalytics, OverheatWhileSprintingEvents, 0x0098);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHillbillyAnalytics, OverheatWhileCampingEvents, 0x00A8);
			CHEAT_GEAR_CHECK_OFFSET(CG::FHillbillyAnalytics, RevFromZeroHeatEvents, 0x00B8);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FHillbillyAnalytics, 0x00C8);
		}

		// struct FLegionSurvivorAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__TheLegion__LegionSurvivorAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionSurvivorAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionSurvivorAnalytics, DeepWoundCount, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionSurvivorAnalytics, FrenzyEffectivements, 0x007C);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionSurvivorAnalytics, DeepWoundDying, 0x0080);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionSurvivorAnalytics, DeepWoundEscape, 0x0084);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionSurvivorAnalytics, UnknownData_P466, 0x0085);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegionSurvivorAnalytics, 0x0088);
		}

		// struct FLegionKillerAnalytics : public FUniquelyIdentifiedAnalytic
		TEST_METHOD(ScriptStruct__TheLegion__LegionKillerAnalytics)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionKillerAnalytics, MatchId, 0x0068);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionKillerAnalytics, pallet, 0x0078);
			CHEAT_GEAR_CHECK_OFFSET(CG::FLegionKillerAnalytics, UnknownData_LHFU, 0x007C);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FLegionKillerAnalytics, 0x0080);
		}

		// struct FTimedDataInputEvaluationData
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataInputEvaluationData)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToNewestSampleSeconds, 0x0000);
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataInputEvaluationData, DistanceToOldestSampleSeconds, 0x0004);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataInputEvaluationData, 0x0008);
		}

		// struct FTimedDataChannelSampleTime
		TEST_METHOD(ScriptStruct__TimeManagement__TimedDataChannelSampleTime)
		{
			// Members
			CHEAT_GEAR_CHECK_OFFSET(CG::FTimedDataChannelSampleTime, UnknownData_WU68, 0x0000);
			// Size
			CHEAT_GEAR_CHECK_SIZE(CG::FTimedDataChannelSampleTime, 0x0018);
		}
	};
}
